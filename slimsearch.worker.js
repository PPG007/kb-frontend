/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Se={},ze=()=>{},Ce=Object.assign,Oe=Array.isArray,D=e=>typeof e=="function",Me=e=>typeof e=="string",Ne=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ne));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Te(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function kt(e){v.push(e)}function It(){v.pop()}let W=!1;function Et(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Fe();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...$e(s)),console.warn(...r)}W=!1}function Fe(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function $e(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Ve(n))}),t}function Ve({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Re(e.props),r]:[s+r]}function Re(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Te(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):D(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Se;if(t){let c=t.parent;const l=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const a=c.ec;if(a){for(let h=0;h<a.length;h++)if(a[h](e,l,u)===!1)return}c=c.parent}if(r){A(r,null,10,[e,l,u]);return}}je(e,n,s,o,i)}function je(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const S=[];let k=null,z=0;const De=Promise.resolve();let q=null;const Le=100;function Pe(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function We(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Pe(t),0,e),e.flags|=1,te()}}function te(){q||(q=De.then(ne))}function Ae(e){Oe(e)?S.push(...e):k&&e.id===-1?k.splice(z+1,0,e):e.flags&1||(S.push(e),e.flags|=1),te()}function qe(e){if(S.length){const t=[...new Set(S)].sort((n,o)=>M(n)-M(o));if(S.length=0,k){k.push(...t);return}for(k=t,z=0;z<k.length;z++){const n=k[z];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,z=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=ze;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,qe(e),q=null,(b.length||S.length)&&ne(e)}}function St(e,t){const n=e.get(t)||0;if(n>Le){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,F=new Map;function zt(e,t){return F.has(e)?!1:(F.set(e,{initialDef:$(t),instances:new Set}),!0)}function $(e){return Je(e)?e.__vccOpts:e}function Ct(e,t){const n=F.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,$(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=F.get(e);if(!n)return;t=$(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=$(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?We(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}Ae(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Mt(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Nt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const He=/(?:^|[-_])(\w)/g,Ue=e=>e.replace(He,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return D(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?Ue(o):n?"App":"Anonymous"}function Je(e){return D(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Ge}=Object,{fromEntries:Be}=Object,Ye="ENTRIES",ie="KEYS",ce="VALUES",y="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=C(this._path);if(C(n)===y)return{done:!1,value:this.result()};const o=t.get(C(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==y).join("")}value(){return C(this._path).node.get(y)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const l=r*i;e:for(const u of e.keys())if(u===y){const a=s[l-1];a<=n&&o.set(c,[e.get(u),a])}else{let a=r;for(let h=0;h<u.length;++h,++a){const g=u[h],m=i*a,w=m-i;let d=s[m];const f=Math.max(0,a-n-1),p=Math.min(i-1,a+n);for(let _=f;_<p;++_){const I=g!==t[_],j=s[w+_]+ +I,T=s[w+_+1]+1,E=s[m+_]+1,O=s[m+_+1]=Math.min(j,T,E);O<d&&(d=O)}if(d>n)continue e}le(e.get(u),t,n,o,s,a,i,c+u)}};let ue=class N{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=V(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==y&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new N(c,t)}}return new N(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Qe(this._tree,t)}entries(){return new U(this,Ye)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(y):void 0}has(t){return J(this._tree,t)?.has(y)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(y,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(y,n(o.get(y))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(y);return s===void 0&&o.set(y,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new N;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return N.from(Object.entries(t))}};const V=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==y&&t.startsWith(o))return n.push([e,o]),V(e.get(o),t.slice(o.length),n);return n.push([e,t]),V(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==y&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==y&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(o,o+c),u),e.delete(r),e=u}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Qe=(e,t)=>{const[n,o]=V(e,t);if(n!==void 0){if(n.delete(y),n.size===0)ae(o);else if(n.size===1){const[s,r]=n.entries().next().value;fe(o,s,r)}}},ae=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ae(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==y&&fe(e.slice(0,-1),o,s)}},fe=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Xe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Ze=/[\n\r\p{Z}\p{P}]+/u,Y="or",de="and",et="and_not",tt=(e,t)=>{e.includes(t)||e.push(t)},he=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},pe=({score:e},{score:t})=>t-e,nt=()=>new Map,R=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},ge=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,me={[Y]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),he(o.terms,r)}}return e},[de]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);he(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[et]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},ot=(e,t,n,o,s,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(n-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*o/s)))},st=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),_e=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},rt=(e,t,n,o)=>{if(!e._index.has(o)){_e(e,n,t,o);return}const s=e._index.fetch(o,nt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?_e(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},it={k:1.2,b:.7,d:.5},ct={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Ze),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},ye={combineWith:Y,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:it},lt={combineWith:de,prefix:(e,t,n)=>t===n.length-1},ut={batchSize:1e3,batchWait:10},we={minDirtFactor:.1,minDirtCount:20},at={...ut,...we},be=Symbol("*"),ft=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},xe=(e,t=Y)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in me))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(me[n])},K=(e,t,n,o,s,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const a of Object.keys(i)){const h=i[a],g=e._fieldIds[a],m=r.get(g);if(m==null)continue;let w=m.size;const d=e._avgFieldLength[g];for(const f of m.keys()){if(!e._documentIds.has(f)){rt(e,g,f,n),w-=1;continue}const p=c?c(e._documentIds.get(f),n,e._storedFields.get(f)):1;if(!p)continue;const _=m.get(f),I=e._fieldLength.get(f)[g],j=ot(_,w,e._documentCount,I,d,l),T=o*s*h*p*j,E=u.get(f);if(E){E.score+=T,tt(E.terms,t);const O=ge(E.match,n);O?O.push(a):E.match[n]=[a]}else u.set(f,{score:T,terms:[t],match:{[n]:[a]}})}}return u},dt=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((d,f)=>({...d,[f]:ge(o.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=o,{fuzzy:u,prefix:a}={...ye.weights,...i},h=e._index.get(t.term),g=K(e,t.term,t.term,1,t.termBoost,h,s,r,l);let m,w;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,f=d<1?Math.min(c,Math.round(t.term.length*d)):d;f&&(w=e._index.fuzzyGet(t.term,f))}if(m)for(const[d,f]of m){const p=d.length-t.term.length;if(!p)continue;w?.delete(d);const _=a*d.length/(d.length+.3*p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}if(w)for(const d of w.keys()){const[f,p]=w.get(d);if(!p)continue;const _=u*d.length/(d.length+p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}return g},ke=(e,t,n={})=>{if(t===be)return ft(e,n);if(typeof t!="string"){const a={...n,...t,queries:void 0},h=t.queries.map(g=>ke(e,g,a));return xe(h,a.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(a=>l(a)).filter(a=>!!a).map(st(i)).map(a=>dt(e,a,i));return xe(u,i.combineWith)},Ie=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=ke(e,t,n),i=[];for(const[c,{score:l,terms:u,match:a}]of r){const h=u.length||1,g={id:e._documentIds.get(c),score:l*h,terms:Object.keys(a),queryTerms:u,match:a};Object.assign(g,e._storedFields.get(c)),(s.filter==null||s.filter(g))&&i.push(g)}return t===be&&s.boostDocument==null||i.sort(pe),i},ht=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of Ie(e,t,n)){const c=i.join(" "),l=o.get(c);l!=null?(l.score+=r,l.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:l}]of o)s.push({suggestion:r,terms:c,score:i/l});return s.sort(pe),s};class pt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?at:t.autoVacuum;this._options={...ct,...t,autoVacuum:n,searchOptions:{...ye,...t.searchOptions},autoSuggestOptions:{...lt,...t.autoSuggestOptions}},this._index=new ue,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=we,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const gt=e=>new pt(e),mt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=gt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new ue,c},_t=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=mt(e,t);i._documentIds=R(o),i._fieldLength=R(s),i._storedFields=R(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of n){const u=new Map;for(const a of Object.keys(l))u.set(parseInt(a,10),R(l[a]));i._index.set(c,u)}return i},Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(u,a=!1)=>{let h;i===0?h=u.length>20?`… ${u.slice(-20)}`:u:a?h=u.length+i>100?`${u.slice(0,100-i)}… `:u:h=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,h&&s.push(h),i+=h.length,a||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let l=n.indexOf(o,r);if(l===-1)return null;for(;l>=0;){const u=l+o.length;if(c(e.slice(r,l)),r=u,i>100)break;l=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},{entries:yt}=Object,wt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),bt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ee=(e,t,n={},o="max")=>{const s={};return Ie(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(r=>{const{id:i,terms:c,score:l}=r,u=i.includes("@"),a=i.includes("#"),[h,g]=i.split(/[#@]/),m=Number(h),w=c.sort((f,p)=>f.length-p.length).filter((f,p)=>c.slice(p+1).every(_=>!_.includes(f))),{contents:d}=s[m]??={title:"",contents:[]};if(u)d.push([{type:"customField",id:m,index:g,display:w.map(f=>r.c.map(p=>Q(p,f))).flat().filter(f=>f!==null)},l]);else{const f=w.map(p=>Q(r.h,p)).filter(p=>p!==null);if(f.length&&d.push([{type:a?"heading":"title",id:m,...a&&{anchor:g},display:f},l]),"t"in r&&r.t)for(const p of r.t){const _=w.map(I=>Q(p,I)).filter(I=>I!==null);_.length&&d.push([{type:"text",id:m,...a&&{anchor:g},display:_},l])}}}),yt(s).sort(([,r],[,i])=>(o?wt:bt)(r,i)).map(([r,{title:i,contents:c}])=>{if(!i){const l=Xe(t,r);l&&(i=l.h)}return{title:i,contents:c.map(([l])=>l)}})},ve=(e,t,n={})=>{const o=ht(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},xt=Be(Ge(JSON.parse("{\"/\":{\"documentCount\":675,\"nextId\":675,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"7\",\"8\":\"8\",\"9\":\"9\",\"10\":\"10\",\"11\":\"11\",\"12\":\"12\",\"13\":\"13\",\"14\":\"14\",\"15\":\"14#axios-url-config\",\"16\":\"14#axios-request-config\",\"17\":\"14#axios-get-url-config\",\"18\":\"14#axios-post-url-data-config\",\"19\":\"14#axios-delete-url-config\",\"20\":\"14#axios-head-url-config\",\"21\":\"14#axios-options-url-config\",\"22\":\"14#axios-put-url-data-config\",\"23\":\"14#axios-patch-url-data-config\",\"24\":\"15\",\"25\":\"16\",\"26\":\"16#请求拦截器\",\"27\":\"16#响应拦截器\",\"28\":\"17\",\"29\":\"17#响应内容\",\"30\":\"17#不使用拦截器处理\",\"31\":\"18\",\"32\":\"19\",\"33\":\"20\",\"34\":\"21\",\"35\":\"21#外边距\",\"36\":\"21#内边距\",\"37\":\"21#高度和宽度\",\"38\":\"21#盒子模型-1\",\"39\":\"22\",\"40\":\"22#rgb\",\"41\":\"22#rgba\",\"42\":\"22#hex\",\"43\":\"22#hsl\",\"44\":\"23\",\"45\":\"23#容器的属性\",\"46\":\"23#项目的属性\",\"47\":\"24\",\"48\":\"25\",\"49\":\"25#块级元素\",\"50\":\"25#行内元素\",\"51\":\"25#display\",\"52\":\"25#width-和-max-width\",\"53\":\"25#box-sizing\",\"54\":\"25#position-属性\",\"55\":\"25#溢出\",\"56\":\"25#浮动\",\"57\":\"25#清除浮动\",\"58\":\"25#display-inline-block\",\"59\":\"25#水平对齐和垂直对齐\",\"60\":\"26\",\"61\":\"27\",\"62\":\"28\",\"63\":\"29\",\"64\":\"30\",\"65\":\"31\",\"66\":\"32\",\"67\":\"32#future\",\"68\":\"32#声明异步函数\",\"69\":\"32#stream\",\"70\":\"33\",\"71\":\"34\",\"72\":\"34#使用构造函数\",\"73\":\"34#获取对象的类型\",\"74\":\"34#实例变量\",\"75\":\"34#构造函数\",\"76\":\"34#默认构造函数\",\"77\":\"34#构造函数不被继承\",\"78\":\"34#命名式构造函数\",\"79\":\"34#调用父类非默认构造函数\",\"80\":\"34#初始化列表\",\"81\":\"34#重定向构造函数\",\"82\":\"34#常量构造函数\",\"83\":\"34#工厂构造函数\",\"84\":\"34#方法\",\"85\":\"34#实例方法\",\"86\":\"34#运算符重载\",\"87\":\"34#getter、setter\",\"88\":\"34#抽象方法\",\"89\":\"34#抽象类\",\"90\":\"34#隐式接口\",\"91\":\"34#扩展一个类\",\"92\":\"34#扩展方法\",\"93\":\"34#枚举类型\",\"94\":\"34#使用-mixin\",\"95\":\"34#静态变量和静态方法\",\"96\":\"35\",\"97\":\"36\",\"98\":\"36#参数\",\"99\":\"36#命名参数\",\"100\":\"36#可选的位置参数\",\"101\":\"36#默认参数\",\"102\":\"36#main-函数\",\"103\":\"36#函数是一级对象\",\"104\":\"36#匿名函数\",\"105\":\"36#词法作用域\",\"106\":\"36#词法闭包\",\"107\":\"36#返回值\",\"108\":\"36#函数相等\",\"109\":\"37\",\"110\":\"38\",\"111\":\"38#使用泛型\",\"112\":\"38#使用集合字面量\",\"113\":\"38#使用类型参数化的构造函数\",\"114\":\"38#泛型集合\",\"115\":\"38#限制参数化类型\",\"116\":\"38#使用泛型方法\",\"117\":\"39\",\"118\":\"40\",\"119\":\"40#numbers-int-double\",\"120\":\"40#strings-string\",\"121\":\"40#布尔类型\",\"122\":\"40#lists\",\"123\":\"40#sets\",\"124\":\"40#maps\",\"125\":\"40#runes-与-grapheme-clusters\",\"126\":\"40#symbols\",\"127\":\"41\",\"128\":\"41#类型判断运算符\",\"129\":\"41#赋值运算符\",\"130\":\"41#条件表达式\",\"131\":\"41#级联运算符\",\"132\":\"41#其他运算符\",\"133\":\"42\",\"134\":\"42#if-else\",\"135\":\"42#for\",\"136\":\"42#while-do-while\",\"137\":\"42#switch\",\"138\":\"42#断言\",\"139\":\"43\",\"140\":\"43#安装-dart\",\"141\":\"43#一个简单地-dart-程序\",\"142\":\"44\",\"143\":\"44#变量声明\",\"144\":\"44#默认值\",\"145\":\"44#final-和-const\",\"146\":\"45\",\"147\":\"45#扩展运算符\",\"148\":\"45#数组实例的-find-和-findindex\",\"149\":\"45#数组实例的-includes\",\"150\":\"46\",\"151\":\"46#基本用法\",\"152\":\"46#语法\",\"153\":\"47\",\"154\":\"48\",\"155\":\"49\",\"156\":\"49#函数参数的默认值\",\"157\":\"49#参数的作用域\",\"158\":\"49#rest-参数\",\"159\":\"49#箭头函数\",\"160\":\"50\",\"161\":\"51\",\"162\":\"51#与其他数据结构的互相转换\",\"163\":\"52\",\"164\":\"52#export-命令\",\"165\":\"53\",\"166\":\"53#super-关键字\",\"167\":\"53#对象的扩展运算符\",\"168\":\"54\",\"169\":\"54#object-assign\",\"170\":\"54#object-keys-、object-values-、object-entries\",\"171\":\"55\",\"172\":\"55#链判断运算符\",\"173\":\"55#null-判断运算符\",\"174\":\"55#逻辑赋值运算符\",\"175\":\"56\",\"176\":\"56#基本用法\",\"177\":\"56#then-方法\",\"178\":\"56#catch-方法\",\"179\":\"56#finally-方法\",\"180\":\"56#promise-all-方法\",\"181\":\"57\",\"182\":\"57#模板字符串\",\"183\":\"57#字符串的新增方法\",\"184\":\"58\",\"185\":\"58#数组的解构赋值\",\"186\":\"58#对象的解构赋值\",\"187\":\"58#字符串的解构赋值\",\"188\":\"58#数值和布尔值的解构赋值\",\"189\":\"58#函数参数的解构赋值\",\"190\":\"59\",\"191\":\"60\",\"192\":\"60#全局属性\",\"193\":\"61\",\"194\":\"62\",\"195\":\"62#基础图像标签\",\"196\":\"62#响应式图片\",\"197\":\"63\",\"198\":\"64\",\"199\":\"65\",\"200\":\"66\",\"201\":\"67\",\"202\":\"68\",\"203\":\"69\",\"204\":\"70\",\"205\":\"71\",\"206\":\"71#起步\",\"207\":\"71#命名空间\",\"208\":\"71#嵌套、上下文与动态内容\",\"209\":\"71#typescript\",\"210\":\"71#react\",\"211\":\"72\",\"212\":\"72#定时器\",\"213\":\"73\",\"214\":\"74\",\"215\":\"74#array-对象\",\"216\":\"74#string-对象\",\"217\":\"74#math-对象\",\"218\":\"74#json-对象\",\"219\":\"75\",\"220\":\"75#概述\",\"221\":\"75#布尔值、null、undefined\",\"222\":\"75#数值\",\"223\":\"75#字符串\",\"224\":\"75#对象\",\"225\":\"75#函数\",\"226\":\"75#数组\",\"227\":\"76\",\"228\":\"77\",\"229\":\"77#eventtarget-接口\",\"230\":\"77#事件模型\",\"231\":\"77#event-对象\",\"232\":\"78\",\"233\":\"78#数据类型的转换\",\"234\":\"78#错误处理机制\",\"235\":\"78#console-对象与控制台\",\"236\":\"79\",\"237\":\"79#实例对象与-new-命令\",\"238\":\"79#this-关键字\",\"239\":\"79#对象的继承\",\"240\":\"79#object-对象的相关方法\",\"241\":\"80\",\"242\":\"81\",\"243\":\"81#api\",\"244\":\"82\",\"245\":\"82#错误事件\",\"246\":\"83\",\"247\":\"83#多个中间件结合\",\"248\":\"84\",\"249\":\"84#请求头相关\",\"250\":\"84#http-方法相关\",\"251\":\"84#请求路径相关\",\"252\":\"84#参数相关\",\"253\":\"84#客户端信息相关\",\"254\":\"85\",\"255\":\"85#响应头相关\",\"256\":\"85#响应状态相关\",\"257\":\"85#响应体相关\",\"258\":\"85#重定向\",\"259\":\"86\",\"260\":\"86#嵌套路由\",\"261\":\"86#同一路由多个中间件\",\"262\":\"86#url-参数\",\"263\":\"87\",\"264\":\"87#安装\",\"265\":\"87#hello-world\",\"266\":\"88\",\"267\":\"88#配置-typescript\",\"268\":\"88#样式模块化\",\"269\":\"88#启用-less\",\"270\":\"88#配置代理\",\"271\":\"89\",\"272\":\"89#函数式组件\",\"273\":\"89#类组件\",\"274\":\"89#响应事件\",\"275\":\"89#函数柯里化\",\"276\":\"90\",\"277\":\"90#使用-context\",\"278\":\"90#创建-context\",\"279\":\"90#使用-context-1\",\"280\":\"90#提供-context\",\"281\":\"90#context-的注意点\",\"282\":\"90#context-的使用场景\",\"283\":\"90#同时使用-reducer-和-context\",\"284\":\"91\",\"285\":\"91#编写-effect\",\"286\":\"91#声明-effect\",\"287\":\"91#指定-effect-依赖\",\"288\":\"91#添加清理函数\",\"289\":\"91#从-effect-中读取-props-和-state-但是不响应\",\"290\":\"91#处理开发环境两次调用-effect-的问题\",\"291\":\"92\",\"292\":\"92#引入相关依赖\",\"293\":\"92#第一个-react\",\"294\":\"92#不使用-jsx\",\"295\":\"93\",\"296\":\"93#自定义-hook\",\"297\":\"93#抽取自定义-hook\",\"298\":\"93#自定义-hook-的注意点\",\"299\":\"93#一些-react-内置的-hook\",\"300\":\"93#useid\",\"301\":\"93#usememo\",\"302\":\"93#usecallback\",\"303\":\"93#一些-react-api\",\"304\":\"93#lazy\",\"305\":\"94\",\"306\":\"94#列表渲染\",\"307\":\"94#条件渲染\",\"308\":\"95\",\"309\":\"95#constructor-构造器\",\"310\":\"95#static-getderivedstatefromprops-props-state\",\"311\":\"95#render\",\"312\":\"95#componentdidmount\",\"313\":\"95#shouldcomponentupdate-nextprops-nextstate\",\"314\":\"95#getsnapshotbeforeupdate-prevprops-prevstate\",\"315\":\"95#componentdidupdate-nextprops-nextstate-snapshot\",\"316\":\"95#componentwillunmount\",\"317\":\"96\",\"318\":\"96#向组件传递-props\",\"319\":\"96#使用-jsx-展开语法传递-props\",\"320\":\"96#将-jsx-作为子组件传递\",\"321\":\"96#类组件传递-props\",\"322\":\"96#使用-proptypes-对-prop-做限制\",\"323\":\"97\",\"324\":\"97#使用-reducer-替换-state\",\"325\":\"97#reducer-和-state-的对比\",\"326\":\"97#reducer-注意事项\",\"327\":\"98\",\"328\":\"98#redux-简介\",\"329\":\"98#state-管理\",\"330\":\"98#不可变性\",\"331\":\"98#术语\",\"332\":\"98#redux-toolkit\",\"333\":\"98#示例-计数器\",\"334\":\"98#编写-redux-store\",\"335\":\"98#编写计数器组件\",\"336\":\"98#provide-store\",\"337\":\"98#示例-文章管理\",\"338\":\"98#异步逻辑与数据请求\",\"339\":\"98#vite-反向代理设置\",\"340\":\"98#在组件中执行异步\",\"341\":\"98#性能与数据范式化\",\"342\":\"98#缓存-selector\",\"343\":\"98#范式化数据\",\"344\":\"98#rtk-查询\",\"345\":\"98#刷新缓存\",\"346\":\"98#定时失效缓存\",\"347\":\"98#失效特定的项目\",\"348\":\"98#在非-react-应用中使用-rtk-query\",\"349\":\"98#注入-endpoints\",\"350\":\"98#处理响应\",\"351\":\"98#高级缓存更新\",\"352\":\"98#使用懒加载\",\"353\":\"98#不使用-redux-toolkit-的例子\",\"354\":\"98#subscribe\",\"355\":\"98#enhancers\",\"356\":\"98#middleware\",\"357\":\"98#异步\",\"358\":\"98#自定义异步-middleware\",\"359\":\"98#使用-thunk-middleware\",\"360\":\"99\",\"361\":\"99#ref-操作-dom\",\"362\":\"99#ref-访问其他组件的-dom\",\"363\":\"99#受控组件和非受控组件\",\"364\":\"100\",\"365\":\"100#示例组件\",\"366\":\"100#创建-router-实例\",\"367\":\"100#routerprovider\",\"368\":\"100#使用-link、navlink-组件替换-a-标签防止浏览器刷新界面\",\"369\":\"100#不使用-data-apis-的-router\",\"370\":\"100#route-配置项\",\"371\":\"100#错误处理\",\"372\":\"100#参数路由\",\"373\":\"100#可选路由\",\"374\":\"100#通配路由\",\"375\":\"100#大小写敏感设置\",\"376\":\"100#设置默认组件\",\"377\":\"100#组件懒加载\",\"378\":\"100#导航到组件时获取数据\",\"379\":\"100#action\",\"380\":\"100#shouldrevalidate\",\"381\":\"100#编程式路由\",\"382\":\"100#传递参数\",\"383\":\"100#传递-params-参数\",\"384\":\"100#传递-query-参数\",\"385\":\"100#传递-state\",\"386\":\"100#获取当前组件的路由信息\",\"387\":\"100#state\",\"388\":\"100#formdata、text、json\",\"389\":\"100#location\",\"390\":\"100#defer-异步加载数据\",\"391\":\"100#await\",\"392\":\"100#异步加载的错误处理\",\"393\":\"100#useasyncdata\",\"394\":\"100#部分异步\",\"395\":\"100#fetcher\",\"396\":\"100#state-1\",\"397\":\"100#调用-loader、action\",\"398\":\"100#提交表单\",\"399\":\"100#实现路由守卫功能\",\"400\":\"100#其他-hooks\",\"401\":\"100#usematches\",\"402\":\"100#useoutletcontext\",\"403\":\"101\",\"404\":\"101#state-更新对象\",\"405\":\"101#state-更新数组\",\"406\":\"101#类组件的-state\",\"407\":\"101#状态提升\",\"408\":\"101#订阅发布\",\"409\":\"102\",\"410\":\"102#类型别名\",\"411\":\"102#字符串字面量类型\",\"412\":\"102#元组\",\"413\":\"102#枚举\",\"414\":\"102#常数项和计算所得项\",\"415\":\"102#常数枚举\",\"416\":\"102#外部枚举\",\"417\":\"102#类\",\"418\":\"102#修饰符\",\"419\":\"102#参数属性\",\"420\":\"102#readonly\",\"421\":\"102#抽象类\",\"422\":\"102#类与接口\",\"423\":\"102#类实现接口\",\"424\":\"102#接口继承接口\",\"425\":\"102#接口继承类\",\"426\":\"102#泛型\",\"427\":\"102#多个类型参数\",\"428\":\"102#泛型约束\",\"429\":\"102#泛型接口\",\"430\":\"102#泛型类\",\"431\":\"102#泛型参数的默认类型\",\"432\":\"102#声明合并\",\"433\":\"102#函数的合并\",\"434\":\"102#接口的合并\",\"435\":\"102#类的合并\",\"436\":\"103\",\"437\":\"103#原始数据类型\",\"438\":\"103#任意值\",\"439\":\"103#类型推论\",\"440\":\"103#联合类型\",\"441\":\"103#接口\",\"442\":\"103#数组的类型\",\"443\":\"103#函数的类型\",\"444\":\"103#函数声明\",\"445\":\"103#函数表达式\",\"446\":\"103#用接口定义函数\",\"447\":\"103#可选参数\",\"448\":\"103#参数默认值\",\"449\":\"103#剩余参数\",\"450\":\"103#重载\",\"451\":\"103#类型断言\",\"452\":\"103#双重断言\",\"453\":\"103#断言与类型转换\",\"454\":\"103#断言与类型声明\",\"455\":\"103#声明文件\",\"456\":\"103#示例\",\"457\":\"103#声明文件-1\",\"458\":\"103#书写声明文件\",\"459\":\"103#全局变量\",\"460\":\"103#npm-包\",\"461\":\"103#umd-库\",\"462\":\"103#直接扩展全局变量\",\"463\":\"103#在-npm-包或-umd-库中扩展全局变量\",\"464\":\"103#模块插件\",\"465\":\"103#声明文件中的依赖\",\"466\":\"103#自动生成声明文件\",\"467\":\"103#内置对象\",\"468\":\"104\",\"469\":\"104#安装-typescript\",\"470\":\"104#hello-world\",\"471\":\"105\",\"472\":\"105#m\",\"473\":\"105#v\",\"474\":\"105#vm\",\"475\":\"106\",\"476\":\"106#v-text\",\"477\":\"106#v-html\",\"478\":\"106#v-cloak-指令\",\"479\":\"106#v-once\",\"480\":\"106#v-pre-指令\",\"481\":\"107\",\"482\":\"107#绑定-class-样式\",\"483\":\"107#绑定-style-样式\",\"484\":\"108\",\"485\":\"108#方式一\",\"486\":\"108#方式二\",\"487\":\"108#进行请求\",\"488\":\"109\",\"489\":\"109#基本使用\",\"490\":\"109#几个注意点\",\"491\":\"109#组件嵌套\",\"492\":\"109#关于-vuecomponent\",\"493\":\"109#一个重要的内置关系\",\"494\":\"109#单文件组件\",\"495\":\"110\",\"496\":\"110#绑定自定义事件\",\"497\":\"110#解绑自定义事件\",\"498\":\"110#解绑单个事件\",\"499\":\"110#解绑多个事件\",\"500\":\"110#解绑所有事件\",\"501\":\"110#给组件绑定原生事件\",\"502\":\"110#总结\",\"503\":\"111\",\"504\":\"111#计算属性示例\",\"505\":\"111#get-方法调用时机\",\"506\":\"111#计算属性简写\",\"507\":\"112\",\"508\":\"113\",\"509\":\"113#单向绑定-v-bind\",\"510\":\"113#双向绑定-v-model\",\"511\":\"113#v-model-修饰符\",\"512\":\"113#收集表单数据总结\",\"513\":\"114\",\"514\":\"114#数据代理基本原理\",\"515\":\"114#数据代理-1\",\"516\":\"114#vue-中的数据代理\",\"517\":\"114#实现一个简单的数据双向绑定\",\"518\":\"115\",\"519\":\"116\",\"520\":\"116#事件处理\",\"521\":\"116#事件修饰符\",\"522\":\"116#键盘事件\",\"523\":\"116#鼠标按钮修饰符\",\"524\":\"117\",\"525\":\"117#设置全局总线\",\"526\":\"117#使用事件总线\",\"527\":\"117#接收数据\",\"528\":\"117#发送数据\",\"529\":\"118\",\"530\":\"119\",\"531\":\"120\",\"532\":\"120#基本列表\",\"533\":\"120#key-的作用和原理\",\"534\":\"120#示例\",\"535\":\"120#总结\",\"536\":\"120#列表过滤\",\"537\":\"120#列表排序\",\"538\":\"120#变量更新时的一个问题\",\"539\":\"120#vue监视数据改变的原理\",\"540\":\"121\",\"541\":\"121#安装-pubsub-js\",\"542\":\"121#引入-pubsub\",\"543\":\"121#接收数据\",\"544\":\"121#发送数据\",\"545\":\"122\",\"546\":\"122#定义指令\",\"547\":\"122#指令定义对象的钩子函数\",\"548\":\"122#实例\",\"549\":\"123\",\"550\":\"123#默认插槽\",\"551\":\"123#具名插槽\",\"552\":\"123#作用域插槽\",\"553\":\"124\",\"554\":\"124#模板指令\",\"555\":\"125\",\"556\":\"125#localstorage\",\"557\":\"125#sessionstorage\",\"558\":\"126\",\"559\":\"126#安装-vue-cli-并创建-hello-world\",\"560\":\"126#render-函数\",\"561\":\"126#修改默认配置\",\"562\":\"126#ref-属性\",\"563\":\"126#props-属性\",\"564\":\"126#传递参数\",\"565\":\"126#接收参数\",\"566\":\"126#mixin-混入\",\"567\":\"126#定义-mixin\",\"568\":\"126#引用-mixin\",\"569\":\"126#插件\",\"570\":\"126#scoped-样式\",\"571\":\"127\",\"572\":\"127#安装-vue-resource\",\"573\":\"127#使用-vue-resource\",\"574\":\"128\",\"575\":\"128#安装-vuerouter\",\"576\":\"128#使用-vuerouter\",\"577\":\"128#多级路由\",\"578\":\"128#query-参数\",\"579\":\"128#命名路由、重定向、别名、命名视图\",\"580\":\"128#命名路由\",\"581\":\"128#重定向\",\"582\":\"128#别名\",\"583\":\"128#命名视图\",\"584\":\"128#params-参数-restful\",\"585\":\"128#props-配置\",\"586\":\"128#布尔模式\",\"587\":\"128#对象模式\",\"588\":\"128#函数模式\",\"589\":\"128#router-link-的-replace-属性\",\"590\":\"128#编程式路由\",\"591\":\"128#push-方法\",\"592\":\"128#replace-方法\",\"593\":\"128#back-方法\",\"594\":\"128#forward-方法\",\"595\":\"128#go-方法\",\"596\":\"128#缓存路由组件\",\"597\":\"128#两个新的生命周期钩子\",\"598\":\"128#activated\",\"599\":\"128#deactivated\",\"600\":\"128#路由元信息\",\"601\":\"128#路由守卫\",\"602\":\"128#全局前置守卫\",\"603\":\"128#全局后置守卫\",\"604\":\"128#独享路由守卫\",\"605\":\"128#组件内路由守卫\",\"606\":\"128#全局解析守卫\",\"607\":\"128#完整的导航解析流程\",\"608\":\"128#html5-history-模式\",\"609\":\"128#滚动行为\",\"610\":\"128#导航故障\",\"611\":\"129\",\"612\":\"129#vuex-工作原理\",\"613\":\"129#配置-vuex-环境\",\"614\":\"129#求和案例\",\"615\":\"129#getters\",\"616\":\"129#mapstate-与-mapgetters\",\"617\":\"129#mapactions-与-mapmutations\",\"618\":\"129#多组件共享数据\",\"619\":\"129#模块化\",\"620\":\"130\",\"621\":\"130#基本用法\",\"622\":\"130#深度监视\",\"623\":\"130#监视的简写形式\",\"624\":\"130#计算属性与监视属性的区别与联系\",\"625\":\"131\",\"626\":\"131#setup\",\"627\":\"131#ref函数\",\"628\":\"131#reactive-函数\",\"629\":\"131#vue-的响应式原理\",\"630\":\"131#vue2-的响应式\",\"631\":\"131#vue3-的响应式\",\"632\":\"131#reactive-对比-ref\",\"633\":\"131#setup-的两个注意点\",\"634\":\"131#计算属性与监视\",\"635\":\"131#计算属性\",\"636\":\"131#监视\",\"637\":\"131#watcheffect-函数\",\"638\":\"131#生命周期\",\"639\":\"131#配置项形式使用生命周期钩子\",\"640\":\"131#使用组合式-api-编写钩子\",\"641\":\"131#自定义-hook-函数\",\"642\":\"131#toref-torefs\",\"643\":\"132\",\"644\":\"132#fragment\",\"645\":\"132#teleport\",\"646\":\"132#suspense\",\"647\":\"133\",\"648\":\"133#shallowreactive-与-shallowref\",\"649\":\"133#readonly-与-shallowreadonly\",\"650\":\"133#toraw-与-markraw\",\"651\":\"133#customref\",\"652\":\"133#provide-与-inject\",\"653\":\"133#使用-provide\",\"654\":\"133#使用-inject\",\"655\":\"133#响应式数据的判断\",\"656\":\"134\",\"657\":\"134#全局-api-的转移\",\"658\":\"134#其它改变\",\"659\":\"135\",\"660\":\"135#使用-vue-cli\",\"661\":\"135#使用-vite\",\"662\":\"136\",\"663\":\"137\",\"664\":\"138\",\"665\":\"139\",\"666\":\"140\",\"667\":\"141\",\"668\":\"142\",\"669\":\"143\",\"670\":\"144\",\"671\":\"145\",\"672\":\"146\",\"673\":\"147\",\"674\":\"148\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,1],\"2\":[1],\"3\":[1,1],\"4\":[1],\"5\":[1],\"6\":[1,1],\"7\":[1],\"8\":[1],\"9\":[1],\"10\":[1],\"11\":[3],\"12\":[1],\"13\":[1,27],\"14\":[2],\"15\":[4,30],\"16\":[4,24],\"17\":[5,14],\"18\":[6,28],\"19\":[5,7],\"20\":[5,7],\"21\":[5,7],\"22\":[6,8],\"23\":[6,8],\"24\":[1,11],\"25\":[1,1],\"26\":[1,22],\"27\":[1,26],\"28\":[1],\"29\":[1,15],\"30\":[1,18],\"31\":[2,8],\"32\":[1,83],\"33\":[1,19],\"34\":[1],\"35\":[1,19],\"36\":[1,16],\"37\":[1,10],\"38\":[1,35],\"39\":[2],\"40\":[1,13],\"41\":[1,18],\"42\":[1,11],\"43\":[1,27],\"44\":[2,18],\"45\":[1,63],\"46\":[1,29],\"47\":[1,23],\"48\":[2],\"49\":[1,3],\"50\":[1,3],\"51\":[1,14],\"52\":[3,12],\"53\":[2,12],\"54\":[2,49],\"55\":[1,18],\"56\":[1,13],\"57\":[1,23],\"58\":[3,10],\"59\":[1,28],\"60\":[2,11],\"61\":[1,19],\"62\":[2,29],\"63\":[1,29],\"64\":[1,68],\"65\":[1,51],\"66\":[1,13],\"67\":[1,31],\"68\":[1,40],\"69\":[1,29],\"70\":[1,22],\"71\":[1],\"72\":[1,27],\"73\":[1,30],\"74\":[1,24],\"75\":[1,30],\"76\":[1,4],\"77\":[1,4],\"78\":[1,13],\"79\":[1,30],\"80\":[1,24],\"81\":[1,19],\"82\":[1,18],\"83\":[1,36],\"84\":[1],\"85\":[1,32],\"86\":[1,35],\"87\":[2,35],\"88\":[1,6],\"89\":[1,40],\"90\":[1,34],\"91\":[1,56],\"92\":[1,22],\"93\":[1,28],\"94\":[2,65],\"95\":[1,20],\"96\":[1,53],\"97\":[1,17],\"98\":[1,6],\"99\":[1,23],\"100\":[1,23],\"101\":[1,7],\"102\":[1,11],\"103\":[1,23],\"104\":[1,21],\"105\":[1,11],\"106\":[1,25],\"107\":[1,5],\"108\":[1,44],\"109\":[1,60],\"110\":[1],\"111\":[1,27],\"112\":[1,23],\"113\":[1,17],\"114\":[1,12],\"115\":[1,17],\"116\":[1,20],\"117\":[1,55],\"118\":[1,11],\"119\":[4,37],\"120\":[3,51],\"121\":[1,12],\"122\":[1,40],\"123\":[1,44],\"124\":[1,40],\"125\":[4,16],\"126\":[1,22],\"127\":[1,4],\"128\":[1,48],\"129\":[1,20],\"130\":[1,27],\"131\":[1,23],\"132\":[1,29],\"133\":[1],\"134\":[2,21],\"135\":[1,38],\"136\":[2,7],\"137\":[1,38],\"138\":[1,42],\"139\":[1],\"140\":[2,41],\"141\":[3,16],\"142\":[1],\"143\":[1,14],\"144\":[1,43],\"145\":[3,37],\"146\":[1],\"147\":[1,57],\"148\":[5,19],\"149\":[3,5],\"150\":[2],\"151\":[1,27],\"152\":[1,51],\"153\":[2,41],\"154\":[2,34],\"155\":[1],\"156\":[1,17],\"157\":[1,32],\"158\":[2,32],\"159\":[1,49],\"160\":[4,14],\"161\":[1,22],\"162\":[1,39],\"163\":[2],\"164\":[2,28],\"165\":[1],\"166\":[2,7],\"167\":[1,27],\"168\":[1],\"169\":[3,47],\"170\":[5,17],\"171\":[1],\"172\":[1,17],\"173\":[2,13],\"174\":[1,9],\"175\":[2],\"176\":[1,30],\"177\":[2,7],\"178\":[2,26],\"179\":[2,3],\"180\":[3,15],\"181\":[1],\"182\":[1,5],\"183\":[1,26],\"184\":[1],\"185\":[1,23],\"186\":[1,15],\"187\":[1,13],\"188\":[1,11],\"189\":[1,11],\"190\":[1,52],\"191\":[1,2],\"192\":[1,60],\"193\":[1,183],\"194\":[1],\"195\":[1,18],\"196\":[1,56],\"197\":[1,80],\"198\":[1,34],\"199\":[1,27],\"200\":[1,32],\"201\":[1,10],\"202\":[1,32],\"203\":[1,36],\"204\":[1,84],\"205\":[1],\"206\":[1,35],\"207\":[1,54],\"208\":[2,61],\"209\":[1,60],\"210\":[1,48],\"211\":[1],\"212\":[1,20],\"213\":[1,26],\"214\":[1],\"215\":[2,117],\"216\":[2,42],\"217\":[2,30],\"218\":[2,8],\"219\":[1],\"220\":[1,23],\"221\":[3,15],\"222\":[1,44],\"223\":[1,32],\"224\":[1,60],\"225\":[1,61],\"226\":[1,13],\"227\":[1,19],\"228\":[1],\"229\":[2,47],\"230\":[1,25],\"231\":[2,37],\"232\":[1],\"233\":[1,24],\"234\":[1,10],\"235\":[2,8],\"236\":[1],\"237\":[3,31],\"238\":[2,52],\"239\":[1,28],\"240\":[2,24],\"241\":[1,10],\"242\":[1,15],\"243\":[1,144],\"244\":[1,23],\"245\":[1,40],\"246\":[1,27],\"247\":[1,31],\"248\":[1],\"249\":[1,27],\"250\":[2,24],\"251\":[1,23],\"252\":[1,60],\"253\":[1,9],\"254\":[1],\"255\":[1,16],\"256\":[1,15],\"257\":[1,25],\"258\":[1,13],\"259\":[1,10],\"260\":[1,28],\"261\":[1,15],\"262\":[2,23],\"263\":[1],\"264\":[1,5],\"265\":[2,17],\"266\":[3,33],\"267\":[2,64],\"268\":[1,49],\"269\":[2,100],\"270\":[1,12],\"271\":[1],\"272\":[1,66],\"273\":[1,42],\"274\":[1,83],\"275\":[1,82],\"276\":[1,11],\"277\":[2,6],\"278\":[2,6],\"279\":[2,50],\"280\":[2,44],\"281\":[2,23],\"282\":[2,9],\"283\":[4,97],\"284\":[1,9],\"285\":[2,16],\"286\":[2,77],\"287\":[3,83],\"288\":[1,19],\"289\":[7,20],\"290\":[3,82],\"291\":[2],\"292\":[1,21],\"293\":[2,60],\"294\":[2,68],\"295\":[1],\"296\":[2,24],\"297\":[2,42],\"298\":[3,12],\"299\":[4],\"300\":[1,29],\"301\":[1,111],\"302\":[1,10],\"303\":[3],\"304\":[1,25],\"305\":[1,100],\"306\":[1,122],\"307\":[1,35],\"308\":[1,5],\"309\":[2,19],\"310\":[1,25],\"311\":[1,3],\"312\":[1,36],\"313\":[1,51],\"314\":[1,83],\"315\":[1,12],\"316\":[1,32],\"317\":[1,10],\"318\":[2,49],\"319\":[4,38],\"320\":[3,34],\"321\":[2,47],\"322\":[5,43],\"323\":[1,121],\"324\":[4,59],\"325\":[4,26],\"326\":[2,17],\"327\":[1],\"328\":[2,11],\"329\":[2,59],\"330\":[1,35],\"331\":[1,73],\"332\":[2,22],\"333\":[2,49],\"334\":[3,162],\"335\":[1,79],\"336\":[2,19],\"337\":[2,250],\"338\":[1,201],\"339\":[2,28],\"340\":[1,58],\"341\":[1],\"342\":[2,40],\"343\":[1,154],\"344\":[2,335],\"345\":[1,168],\"346\":[1,24],\"347\":[1,50],\"348\":[5,58],\"349\":[2,38],\"350\":[1,31],\"351\":[1,138],\"352\":[1,46],\"353\":[4,109],\"354\":[1,46],\"355\":[1,51],\"356\":[1,59],\"357\":[1],\"358\":[2,114],\"359\":[3,103],\"360\":[1,97],\"361\":[3,55],\"362\":[3,68],\"363\":[1,52],\"364\":[2,6],\"365\":[1,34],\"366\":[3,103],\"367\":[1,21],\"368\":[6,101],\"369\":[5,30],\"370\":[2,7],\"371\":[1,61],\"372\":[1,96],\"373\":[1,35],\"374\":[1,50],\"375\":[1,9],\"376\":[1,39],\"377\":[1,51],\"378\":[1,133],\"379\":[1,310],\"380\":[1,97],\"381\":[1,73],\"382\":[1],\"383\":[3,2],\"384\":[3,48],\"385\":[2,83],\"386\":[1,8],\"387\":[1,33],\"388\":[3,27],\"389\":[1,10],\"390\":[2,108],\"391\":[1,23],\"392\":[1,44],\"393\":[1,33],\"394\":[1,31],\"395\":[1,24],\"396\":[1,9],\"397\":[3,77],\"398\":[1,46],\"399\":[1,85],\"400\":[2],\"401\":[1,52],\"402\":[1,24],\"403\":[1,141],\"404\":[2,55],\"405\":[2,113],\"406\":[2,108],\"407\":[1,78],\"408\":[1,85],\"409\":[1],\"410\":[1,22],\"411\":[1,14],\"412\":[1,22],\"413\":[1,25],\"414\":[1,59],\"415\":[1,16],\"416\":[1,4],\"417\":[1,31],\"418\":[1,36],\"419\":[1,19],\"420\":[1,24],\"421\":[1,26],\"422\":[1],\"423\":[1,26],\"424\":[1,22],\"425\":[1,29],\"426\":[1,14],\"427\":[1,18],\"428\":[1,58],\"429\":[1,36],\"430\":[1,22],\"431\":[1,31],\"432\":[1],\"433\":[1,2],\"434\":[1,22],\"435\":[1,2],\"436\":[1],\"437\":[1,34],\"438\":[1,11],\"439\":[1,13],\"440\":[1,26],\"441\":[1,31],\"442\":[1,24],\"443\":[1],\"444\":[1,12],\"445\":[1,22],\"446\":[1,22],\"447\":[1,19],\"448\":[1,18],\"449\":[1,22],\"450\":[1,20],\"451\":[1,75],\"452\":[1,20],\"453\":[1,6],\"454\":[1,26],\"455\":[1,4],\"456\":[1,29],\"457\":[1,19],\"458\":[1,3],\"459\":[1,142],\"460\":[2,160],\"461\":[2,65],\"462\":[1,41],\"463\":[5,55],\"464\":[1,30],\"465\":[1,69],\"466\":[1,53],\"467\":[1,18],\"468\":[1],\"469\":[2,12],\"470\":[2,27],\"471\":[1],\"472\":[1,7],\"473\":[1,6],\"474\":[1,9],\"475\":[1],\"476\":[2,59],\"477\":[2,80],\"478\":[3,65],\"479\":[2,69],\"480\":[3,68],\"481\":[4],\"482\":[3,117],\"483\":[3,45],\"484\":[2],\"485\":[1,32],\"486\":[1,32],\"487\":[1,17],\"488\":[2],\"489\":[1,89],\"490\":[1,38],\"491\":[1,77],\"492\":[2,43],\"493\":[1,8],\"494\":[1,98],\"495\":[1],\"496\":[1,68],\"497\":[1],\"498\":[1,12],\"499\":[1,14],\"500\":[1,12],\"501\":[1,12],\"502\":[1,77],\"503\":[1,15],\"504\":[1,68],\"505\":[2,14],\"506\":[1,21],\"507\":[1,103],\"508\":[1,20],\"509\":[3,55],\"510\":[3,92],\"511\":[3,35],\"512\":[1,27],\"513\":[1],\"514\":[1,68],\"515\":[1,47],\"516\":[2,40],\"517\":[1,294],\"518\":[4,61],\"519\":[1],\"520\":[1,87],\"521\":[1,157],\"522\":[1,148],\"523\":[1,18],\"524\":[1,4],\"525\":[1,20],\"526\":[1],\"527\":[1,18],\"528\":[1,18],\"529\":[1,95],\"530\":[1,31],\"531\":[1],\"532\":[1,54],\"533\":[2],\"534\":[1,156],\"535\":[1,53],\"536\":[1,103],\"537\":[1,112],\"538\":[1,93],\"539\":[1,172],\"540\":[1,7],\"541\":[1,4],\"542\":[1,5],\"543\":[1,33],\"544\":[1,11],\"545\":[1],\"546\":[1,26],\"547\":[1,85],\"548\":[1,84],\"549\":[1,10],\"550\":[1,51],\"551\":[1,84],\"552\":[1,98],\"553\":[3,98],\"554\":[1,30],\"555\":[1,14],\"556\":[1,26],\"557\":[1,37],\"558\":[3],\"559\":[6,48],\"560\":[2,39],\"561\":[1,28],\"562\":[2,59],\"563\":[2,3],\"564\":[1,15],\"565\":[1,40],\"566\":[2,3],\"567\":[2,12],\"568\":[2,36],\"569\":[1,75],\"570\":[2,33],\"571\":[2],\"572\":[3,4],\"573\":[3,32],\"574\":[2],\"575\":[2,4],\"576\":[2,75],\"577\":[1,33],\"578\":[2,37],\"579\":[4],\"580\":[1,18],\"581\":[1,26],\"582\":[1,22],\"583\":[1,31],\"584\":[4,48],\"585\":[2],\"586\":[1,46],\"587\":[1,11],\"588\":[1,10],\"589\":[5,29],\"590\":[1,3],\"591\":[2,18],\"592\":[2,17],\"593\":[2,5],\"594\":[2,5],\"595\":[2,9],\"596\":[1,31],\"597\":[1],\"598\":[1,11],\"599\":[1,9],\"600\":[1,14],\"601\":[1,5],\"602\":[1,55],\"603\":[1,25],\"604\":[1,18],\"605\":[1,37],\"606\":[1,15],\"607\":[1],\"608\":[3,37],\"609\":[1,38],\"610\":[1,14],\"611\":[1],\"612\":[2],\"613\":[3,58],\"614\":[1,84],\"615\":[1,37],\"616\":[3,49],\"617\":[3,47],\"618\":[1,91],\"619\":[1,137],\"620\":[1],\"621\":[1,95],\"622\":[1,90],\"623\":[1,20],\"624\":[1,31],\"625\":[3],\"626\":[1,67],\"627\":[1,53],\"628\":[2,45],\"629\":[2],\"630\":[2,18],\"631\":[2,57],\"632\":[3,32],\"633\":[2,82],\"634\":[1],\"635\":[1,21],\"636\":[1,57],\"637\":[2,32],\"638\":[1,6],\"639\":[1,18],\"640\":[3,33],\"641\":[3,68],\"642\":[2,66],\"643\":[1],\"644\":[1,13],\"645\":[1,80],\"646\":[1,51],\"647\":[3],\"648\":[3,14],\"649\":[3,25],\"650\":[3,17],\"651\":[1,47],\"652\":[3,14],\"653\":[2,36],\"654\":[2,35],\"655\":[1,25],\"656\":[2],\"657\":[3,34],\"658\":[1,107],\"659\":[4],\"660\":[3,11],\"661\":[2,19],\"662\":[1,3],\"663\":[1],\"664\":[1],\"665\":[1],\"666\":[1],\"667\":[1],\"668\":[1],\"669\":[1],\"670\":[1],\"671\":[1],\"672\":[1],\"673\":[1],\"674\":[1]},\"averageFieldLength\":[1.5140740740740743,38.333372592499884],\"storedFields\":{\"0\":{\"h\":\"Redirect\"},\"1\":{\"h\":\"Axios\",\"t\":[\"文档\"]},\"2\":{\"h\":\"CSS\"},\"3\":{\"h\":\"Dart\",\"t\":[\"docs\"]},\"4\":{\"h\":\"ES6\"},\"5\":{\"h\":\"HTML\"},\"6\":{\"h\":\"i18next\",\"t\":[\"doc\"]},\"7\":{\"h\":\"JavaScript\"},\"8\":{\"h\":\"Koa\"},\"9\":{\"h\":\"React\"},\"10\":{\"h\":\"TypeScript\"},\"11\":{\"h\":\"Vue 2.X\"},\"12\":{\"h\":\"Vue3\"},\"13\":{\"h\":\"取消请求\",\"t\":[\"//声明变量 let cancel = null; //配置项中添加cancelToken axios({ url: 'http://localhost/delayTest', cancelToken: new axios.CancelToken(function (c) { cancel = c; }), }); //此时这个变量已经变成函数，调用即可取消请求 cancel();\",\"提示\",\"一个请求对应一个 cancel 对象，调用对应的 cancel 函数即可取消请求，可以通过 setTimeout 设置超时等。\"]},\"14\":{\"h\":\"常用 API\"},\"15\":{\"h\":\"axios(url[, config])\",\"t\":[\"const param = { name: 'PPG', age: 21, sex: 'male', }; const url = 'http://localhost/paramsTest'; axios(url, { params: { param, }, });\",\"可选配置项\",\"注意\",\"使用配置对象时：\",\"使用 GET 请求时，传递的参数只能是 params，即配置对象中要使用 params:{} 形式而不是 data 形式。 使用 POST 请求时，传递的参数既可以是 params 也可以是 data。\"]},\"16\":{\"h\":\"axios.request(config)\",\"t\":[\"默认请求方法为 GET。\",\"const param = { name: 'PPG', age: 21, sex: 'male', }; //get方式 axios.request({ url: url, params: { param, }, }); //POST方式 //query参数 axios.request({ url: url, method: 'post', params: { param, }, }); //body参数 axios.request({ url: url1, method: 'post', data: { param, }, });\"]},\"17\":{\"h\":\"axios.get(url[, config])\",\"t\":[\"const param = { name: 'PPG', age: 21, sex: 'male', }; axios.get(url1, { params: { param, }, });\"]},\"18\":{\"h\":\"axios.post(url[, data[, config]])\",\"t\":[\"const param = { name: 'PPG', age: 21, sex: 'male', }; // params 配置项 axios.post({ url: url1, method: 'post', params: { param, }, }); // data 配置项 axios.post({ url: url1, method: 'post', data: { param, }, });\",\"注意\",\"无论使用哪种传参配置项，都是body传参，只是外层不同，使用 SpringBoot @RequestBody 后台收到如下：\",\"{\\\"data\\\":{\\\"param\\\":{\\\"name\\\":\\\"PPG\\\",\\\"age\\\":21,\\\"sex\\\":\\\"male\\\"}}} //或者 {\\\"params\\\":{\\\"param\\\":{\\\"name\\\":\\\"PPG\\\",\\\"age\\\":21,\\\"sex\\\":\\\"male\\\"}}}\",\"相比非别名方法，增加了一层\"]},\"19\":{\"h\":\"axios.delete(url[, config])\",\"t\":[\"与 axios.get(url[, config]) 类似。\"]},\"20\":{\"h\":\"axios.head(url[, config])\",\"t\":[\"与 axios.get(url[, config]) 类似。\"]},\"21\":{\"h\":\"axios.options(url[, config])\",\"t\":[\"与 axios.get(url[, config]) 类似。\"]},\"22\":{\"h\":\"axios.put(url[, data[, config]])\",\"t\":[\"与 axios.post(url[, data[, config]]) 类似。\"]},\"23\":{\"h\":\"axios.patch(url[, data[, config]])\",\"t\":[\"与 axios.post(url[, data[, config]]) 类似。\"]},\"24\":{\"h\":\"默认设置\",\"t\":[\"默认设置\",\"示例：\",\"axios.default.method = 'POST'; axios.default.baseURL = 'http://localhost';\"]},\"25\":{\"h\":\"拦截器\",\"t\":[\"Interceptor\"]},\"26\":{\"h\":\"请求拦截器\",\"t\":[\"提示\",\"use() 方法的两个参数都是函数，要返回参数类型的变量。\",\"axios.interceptors.request.use( config => { // 对请求做配置 config.headers[UserInfoKeys.TOKENKEY] = sessionStorage.getItem(UserInfoKeys.TOKENKEY); return config; }, // 错误处理 error => Promise.reject(error) );\"]},\"27\":{\"h\":\"响应拦截器\",\"t\":[\"axios.interceptors.response.use( // 正常情况下直接返回响应 response => response, // 出错后再处理 error => { if (error.response === 401) { message.warn('请先登录'); } else { message.error('网络错误'); } return Promise.reject(error); } );\",\"注意\",\"在配置了拦截器后，要将配置过的 axios 导出：\",\"export default axios;\"]},\"28\":{\"h\":\"响应处理\"},\"29\":{\"h\":\"响应内容\",\"t\":[\"请求正确后的响应对象内容：\",\"{ \\\"data\\\": {}, \\\"status\\\": 200, \\\"statusText\\\": \\\"OK\\\", \\\"headers\\\": {}, \\\"config\\\": {}, \\\"request\\\": {} }\",\"请求错误后 error 中的内容：\",\"error.response; error.request; error.message; error.config;\"]},\"30\":{\"h\":\"不使用拦截器处理\",\"t\":[\"axios .get('/demo', { headers: { token: 'token' } }) .then(res => { // 请求成功 console.log(res.data); }) .catch(err => { // 请求失败 console.log(err.response.status); });\"]},\"31\":{\"h\":\"安装 Axios\",\"t\":[\"npm install axios\",\"在要使用 axios 的文件中：\",\"import axios from 'axios';\"]},\"32\":{\"h\":\"背景\",\"t\":[\"指定元素背景色：background-color。\",\"指定透明度：opacity，取值范围 0.0 ~ 1.0，值越低越透明。\",\"背景图像：background-image，默认情况下图像会重复填充整个元素，取值通过 url(\\\"demo.png\\\") 的形式。\",\"背景重复：默认情况下，图像会在水平和垂直方向上都重复，通过 background-repeat 设置重复的方向。 \",\"水平重复：repeat-x。\",\"垂直重复：repeat-y。\",\"不重复：no-repeat。\",\"背景图像位置：background-position，两个值，第一个是水平位置，第二个是垂直位置。 \",\"center top left right bottom.\",\"x% y%.\",\"xpos ypos.\",\"相对定位 background-origin： \",\"padding-box：相对与内边距框来定位。\",\"border-box：相对于边框盒来定位。\",\"content-box：相对于内容框来定位。\",\"裁剪 background-clip： \",\"border-box：背景被裁剪到边框盒。\",\"padding-box：背景被裁剪到内边距框。\",\"content-box：背景被裁剪到内容框。\",\"背景图像的尺寸：background-size: length|percentage|cover|contain。 \",\"length：设置背景图像高度和宽度，第一个值为宽度，第二个值为高度。\",\"percentage：以父元素的百分比设置背景图像的宽度和高度，第一个值为宽度，第二个值为高度。\",\"cover：把背景图片扩展至足够大。\",\"contain：把图像扩展至最大尺寸。\",\"背景附着：通过 background-attachment 属性指定背景图像是滚动的还是固定的。 \",\"固定：设为 fixed。\",\"滚动：设为 scroll。\",\"简写背景属性：使用 background 属性，将属性值按空格分隔，顺序为：color-image-repeat-attachment-position。\"]},\"33\":{\"h\":\"边框\",\"t\":[\"边框样式：border-style，可以选四个值，上、右、下、左。\",\"边框宽度：border-width，可以是一到四个值。\",\"边框颜色：border-color，可以使用一到四个值。\",\"简写属性：border，顺序是 width、style、color。\",\"圆角边框：border-radius。\"]},\"34\":{\"h\":\"盒子模型\"},\"35\":{\"h\":\"外边距\",\"t\":[\"margin 可以设置上、右、下、左的外边距，可以设为 auto，元素会在其容器中水平居中；还可以设为 inherit 边距继承自父元素。\",\"外边距合并：当两个垂直外边距相遇时，合并后的外边距的高度为两个外边距中的较大者。当一个元素包含在另一个元素中时，上下外边距也会发生合并；如果一个元素内容为空，上下外边距碰到了一起也会合并。\"]},\"36\":{\"h\":\"内边距\",\"t\":[\"padding 属性用于在任何定义的边界内的元素周围生成空间。\",\"通过 width 属性指定元素内容区域的宽度，包含内边距、外边距、边框，如果元素有指定的宽度，则添加到该元素的内边距会添加到元素的总宽度中。或者使用 box-sizing 属性，使元素保持其宽度。\"]},\"37\":{\"h\":\"高度和宽度\",\"t\":[\"height 和 width 用于设置元素的高度和宽度，不包括内边距、外边距、边框，它设置的是元素内边距、外边距以及边框内的区域的高度或宽度。\"]},\"38\":{\"h\":\"盒子模型\",\"t\":[\"所有 HTML 元素都可以视为方框。\",\"内容：框的内容，显示文本和图像。\",\"内边距：清除内容周围的区域，内边距是透明的。\",\"边框：围绕内边距和内容的边框。\",\"外边距：清除边界外的区域，外边距是透明的。\",\"元素的总宽度应该这样计算：\",\"元素总宽度 = 宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距。\",\"元素的总高度应该这样计算：\",\"元素总高度 = 高度 + 上内边距 + 下内边距 + 上边框 + 下边框 + 上外边距 + 下外边距。\"]},\"39\":{\"h\":\"CSS 颜色\"},\"40\":{\"h\":\"RGB\",\"t\":[\"使用公式 rgb(red, green, blue) 将颜色指定为 RGB值，每个参数定义了 0 到 255 之间的颜色强度。\"]},\"41\":{\"h\":\"RGBA\",\"t\":[\"扩展了 RGB，额外制定了颜色的不透明度，使用公式 rgba(red, green, blue, alpha) 指定颜色，alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数字。\"]},\"42\":{\"h\":\"HEX\",\"t\":[\"使用十六进制指定颜色 #rrggbb，每一组都是介于 00 和 ff 之间的十六进制值，对应 0-255。\"]},\"43\":{\"h\":\"HSL\",\"t\":[\"使用色相、饱和度和明度来指定颜色，格式：hsla(hue, saturation, lightness)，色相 hue 是色轮上从 0 到 360 的度数，0 是红色，120 是绿色，240 是蓝色；饱和度 saturation 是一个百分比值，0 表示灰色阴影，100 表示全色；亮度是百分比，0 是黑色，100 是白色。\"]},\"44\":{\"h\":\"Flex 布局\",\"t\":[\"指定某个容器为 Flex 布局，display: flex;，行内元素也可以使用 Flex 布局：display: inline-flex，Webkit 内核的浏览器需要在 flex 前面添加 -webkit 前缀。\",\"设置为 Flex 布局以后，子元素的浮动、清除浮动、垂直居中属性会失效。\"]},\"45\":{\"h\":\"容器的属性\",\"t\":[\"flex-direction 属性：决定主轴的方向，即项目排列的方向。 \",\"row：默认值，主轴为水平方向，起点在左端。\",\"row-reverse：主轴为水平方向，起点在右端。\",\"column：主轴为垂直方向，起点在上面。\",\"column-reverse：主轴为垂直方向，起点在下面。\",\"flex-wrap 属性：如果一条轴线排不下，如何换行。 \",\"nowrap：默认不换行。\",\"wrap：换行，第一行在上方。\",\"wrap-reverse：换行，第一行在下方。\",\"justify-content 属性：定义项目在主轴上的对齐方式。 \",\"center：整体居中。\",\"flex-start：整体靠主轴起点。\",\"flex-end：整体靠主轴终点。\",\"space-between：两端对齐，项目之间的间隔都相等。\",\"space-around：每个项目两侧的间隔相等，项目之间的间隔比项目和边框的间隔大一倍。\",\"align-items 属性：定义项目在交叉轴上如何对齐。 \",\"flex-start：交叉轴的起点对齐。\",\"flex-end：交叉轴的终点对齐。\",\"center：居中。\",\"baseline：项目的第一行文字的基线对齐。\",\"stretch：默认值，如果项目未设置高度或设为 auto，将占满整个容器的高度。\",\"align-content 属性：定义多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用： \",\"flex-start：与交叉轴起点对齐。\",\"flex-end：与交叉轴的终点对齐。\",\"center：与交叉轴的中点对齐。\",\"space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\",\"space-around：每根轴线两侧的间隔都相等，轴线之间的间隔比轴线与边框间隔大一倍。\",\"stretch：默认值，轴线占满整个交叉轴。\"]},\"46\":{\"h\":\"项目的属性\",\"t\":[\"order 属性：定义项目的排列顺序，数值越小排列越靠前。\",\"flex-grow 属性：定义项目的放大比例，默认为 0，即如果存在剩余空间也不放大。\",\"flex-shrink 属性：定义了项目的缩小比例，默认为 1。\",\"flex-basis 属性：定义了分配多余空间之前，项目占据的主轴空间，默认为 auto，也就是项目本来的大小。\",\"align-self 属性：允许单个项目与其他项目对齐方式不同，覆盖 align-items 属性，默认值 auto，表示继承父元素的 align-items 属性，如果没有父元素，等同于 stretch。\"]},\"47\":{\"h\":\"字体\",\"t\":[\"规定字体：font-family，包含多个字体名称作为备选。\",\"字体样式：font-style： \",\"正常：normal。\",\"斜体：italic。\",\"倾斜：oblique。\",\"字体粗细：font-weight。\",\"字体变体：font-variant 指定是否以 small-caps 字体显示。\",\"字体大小：font-size。\"]},\"48\":{\"h\":\"CSS 布局\"},\"49\":{\"h\":\"块级元素\",\"t\":[\"块级元素总是从新行开始，并占据可用的全部宽度。\"]},\"50\":{\"h\":\"行内元素\",\"t\":[\"行内元素不从新行开始，仅占用所需的宽度。\"]},\"51\":{\"h\":\"display\",\"t\":[\"通过设置 display 属性的值为 inline、block、none，分别控制元素是行内元素、块级元素、隐藏元素。\",\"display:none 的元素不会占用页面空间，visibility:hidden 隐藏的元素仍然占有原来的空间。\"]},\"52\":{\"h\":\"width 和 max-width\",\"t\":[\"设置块级元素的 width 属性将防止延伸到容器的边缘，然后设置左右外边距为 auto 可以水平居中，当浏览器窗口小于元素宽度时，会出现滚动条，使用 max-width 可以解决这个问题。\"]},\"53\":{\"h\":\"box-sizing\",\"t\":[\"默认情况下，元素看起来通常比设置的更大，因为还有边框和边距的宽度，使用 box-sizing 可以解决这个问题，box-sizing 属性允许我们在元素的总宽度和高度中包括内边距和边框，例如 box-sizing: border-box 宽度和高度会包括内边距和边框。\"]},\"54\":{\"h\":\"position 属性\",\"t\":[\"position 属性规定应用于元素的定位方法的类型，有五个不同的位置值：\",\"static：\",\"默认情况下的定位方式，元素不会被特殊的定位。\",\"relative：\",\"如果不使用额外的属性， relative 表现和 static 一样，一个元素相对于正常位置进行定位，设置四个属性将导致元素偏离正常位置，不会对其余内容进行调整来适应元素留下的任何空间。\",\"fixed：\",\"元素相对于视口定位，即使滚动页面，也始终位于同一位置。一个固定定位元素不会保留它原本在页面应有的空隙。\",\"absolute：\",\"与 fixed 类似，但是它不是相对视窗而是相对于最近的 position 值不是 static 的元素，如果没有这个元素，那么会相对于 body 元素定位，并且会随着页面滚动而移动。\",\"sticky：\",\"根据用户的滚动位置进行定位，在相对和固定之间切换，起先会被相对定位，直到视口中遇到给定的偏移位置为止，然后粘贴在适当的位置。\",\"通过设置 z-index 属性指定元素的前后顺序，这个值可正可负。\",\"元素是使用 top、bottom、left、right 属性定位的。但是如果不先设置 position 属性这些属性将不起作用。\"]},\"55\":{\"h\":\"溢出\",\"t\":[\"overflow 属性指定在元素内容太大而无法放入指定区域时是裁剪内容还是添加滚动条。\",\"visible：默认，溢出没有被裁剪，内容在元素框外渲染。\",\"hidden：溢出被裁剪，其余内容将不可见。\",\"scroll：溢出被裁剪，同时添加滚动条以查看其余内容。\",\"auto：仅在必要时添加滚动条。\",\"overflow-x：指定如何处理内容的左右边缘。\",\"overflow-y：指定如何处理内容的上下边缘。\"]},\"56\":{\"h\":\"浮动\",\"t\":[\"float 属性用于定位和格式化内容，可取值：\",\"left：元素浮动到容器的左侧。\",\"right：元素浮动在容器的右侧。\",\"none：元素不会浮动\",\"inherit：元素继承父级的 float 值。\"]},\"57\":{\"h\":\"清除浮动\",\"t\":[\"clear 属性指定哪些元素可以浮动于被清除元素的旁边及哪一侧：\",\"none：允许两侧都有浮动元素，默认值。\",\"left：左侧不允许浮动元素。\",\"right：右侧不允许浮动元素。\",\"both：左侧或右侧均不允许浮动元素。\",\"inherit：元素继承父级的 clear 值。\",\"如果一个元素比包含它的元素高，并且它是浮动的，它将溢出到容器之外，可以指定 overflow 为 auto 来解决这个问题。\"]},\"58\":{\"h\":\"display:inline-block\",\"t\":[\"与 inline 相比，inline-block 允许在元素上设置宽度和高度，如果设置了 display:inline-block，将保留上下内外边距，inline 不会。\"]},\"59\":{\"h\":\"水平对齐和垂直对齐\",\"t\":[\"居中对齐元素：要使块元素水平居中，使用 margin: auto;，设置元素的宽度将防止其延伸到容器的边缘。\",\"居中对齐文本：使用 text-align: center。\",\"居中对齐图像：将图像设置为块元素并将左右外边距设置为 auto。\",\"左右对齐：\",\"使用 position:absolute 绝对定位。\",\"使用 float 属性。\",\"垂直对齐：\",\"使用 padding。\",\"使用 line-height，让其值等于 height的值。\",\"使用 position 和 transform。\",\"使用 Flexbox。\"]},\"60\":{\"h\":\"CSS 链接\",\"t\":[\"四种链接状态：\",\"未访问过的链接：a:link。\",\"访问过的链接：a:visited。\",\"悬停时的链接：a:hover。\",\"被点击时的链接：a:active。\"]},\"61\":{\"h\":\"轮廓\",\"t\":[\"轮廓与边框不同，轮廓是在元素边框之外绘制的，并且可能与其他内容重叠。同样，轮廓也不是元素尺寸的一部分，元素的总宽度和高度不受轮廓宽度影响。\",\"指定轮廓的样式：outline-style。\",\"轮廓宽度：outline-width。\",\"轮廓颜色：outline-color。\",\"简写：outline，指定 width、style、color 中的几个，顺序无所谓。\",\"轮廓偏移：outline-offset\"]},\"62\":{\"h\":\"CSS 伪元素\",\"t\":[\"CSS 伪元素用于设置元素指定部分的样式。\",\"::first-line 伪元素用于向文本首行添加特殊样式，只能应用于块级元素。\",\"::first-letter 伪元素用于向文本的首字母添加特殊样式，只能用于块级元素。\",\"::before 伪元素用于在元素内容之前插入一些内容。\",\"在每个 h1 元素的内容前插入一副图像：\",\"h1::before { content: url(smiley.gif); }\",\"::after 伪元素用于在元素内容后插入一些内容。\",\"::selection 伪元素匹配用户选择的元素部分。\",\"选中文本添加黄色背景：\",\"::selection { color: red; background: yellow; }\",\"所有 CSS 伪元素：CSS 伪元素\"]},\"63\":{\"h\":\"伪类\",\"t\":[\"伪类用于定义元素的特殊状态。\",\":first-child 伪类与指定的元素匹配，该元素是另一个元素的第一个子元素。\",\"匹配作为任何元素的第一个子元素的任何 p 元素：\",\"p:first-child { color: blue; }\",\"匹配所有 p 元素中的第一个 i 元素：\",\"p i:first-child { color: blue; }\",\"匹配所有第一个 p 标签中的所有 i 元素：\",\"p:first-child i { color: blue; }\",\":lang 伪类允许为不同的语言定义特殊的规则。\",\"为属性 lang=\\\"en\\\" 的 q 元素定义引号：\",\"q:lang(en) { quotes: '~''~'; }\",\"所有 CSS 伪类：CSS伪类\"]},\"64\":{\"h\":\"选择器\",\"t\":[\"元素选择器。\",\"id 选择器。\",\"类选择器。如果将两个类选择器链接在一起，那么只会选择同时有这两个类的元素。\",\"通用选择器：使用 * 选择页面上所有的 HTML 元素。\",\"分组选择器：使用逗号分隔每个选择器。\",\"属性选择器：通过中括号选中包含某个属性的元素，可以指定属性值。 \",\"类型\",\"描述\",\"[title]\",\"选中有 title 属性的元素\",\"[class~=\\\"important\\\"]\",\"选中 class 属性中包含 important 的元素\",\"[title^=\\\"def\\\"]\",\"选中 title 属性值以 def开头的元素\",\"[title$=\\\"def\\\"]\",\"选中 title 属性值 以 def结尾的元素\",\"[title*=\\\"def\\\"]\",\"选中 title 属性值包含子串 def 的元素\",\"[title|=\\\"def\\\"]\",\"选中 title 属性值等于 def 或者是以 def- 开头的元素\",\"后代选择器：例如 h1 em{color:red;} 会选中作为 h1 元素后代的 em 元素。\",\"子元素选择器：只能选中作为某元素子元素的元素，例如 h1>strong 只会选择只作为 h1 元素子元素的 strong 元素，如果一个 strong 元素和 h1 元素之间还有其他元素则不会被选中。\",\"相邻兄弟选择器：选择紧接在另一个元素后的元素，而且二者有相同的父元素，例如 h1+p 选择紧接在 h1 元素后出现的段落，h1 和 p 元素有共同的父元素。\"]},\"65\":{\"h\":\"文本\",\"t\":[\"文本颜色：color。\",\"设置文本水平对齐：text-align。\",\"文本方向：direction 和 unicode-bidi。\",\"垂直对齐：vertical-align。\",\"文字装饰：text-decoration。 \",\"overline。\",\"line-through。\",\"underline。\",\"none。\",\"文本转换：text-transform 属性指定文本中的大写和小写字母。 \",\"uppercase 大写。\",\"lowercase 小写。\",\"capitalize 首字母大写。\",\"文字间距： \",\"文字缩进：text-indent 属性指定文本第一行的缩进。\",\"字母间距：letter-spacing 属性指定文本中字符之间的距离。\",\"行高：line-height。\",\"字间距：word-spacing。\",\"空白：white-space 指定元素内部空白的处理方式。\",\"文本阴影：text-shadow，水平阴影、垂直阴影、模糊效果、颜色。\"]},\"66\":{\"h\":\"异步\",\"t\":[\"Dart 代码库中有大量返回 Future 或 Stream 对象的函数，这些函数都是异步的，它们会在耗时操作（比如 I/O）执行完毕前直接返回而不会等待耗时操作执行完毕。\"]},\"67\":{\"h\":\"Future\",\"t\":[\"通过下面的方式可以获得 Future 执行完成的结果：\",\"使用 async 和 await。\",\"使用 Future API。\",\"注意\",\"必须在带有 async 关键字的异步函数中使用 await。\",\"异步函数的返回值类型应当是 Future。\",\"提示\",\"Future<T> 实例会返回一个类型为 T 的值。\",\"如果一个 Future 实例没有可用的返回值，则这个实例的类型是 Future<void>。\",\"一个 Future 实例可以是已完成或者是未完成状态。\",\"当调用一个返回 Future 的方法时，这个方法会把任务加入队列然后返回一个未完成状态的 Future 实例。\",\"当一个 Future 实例的操作完成时，这个实例会进入完成状态并附带一个值或者是错误。\"]},\"68\":{\"h\":\"声明异步函数\",\"t\":[\"异步函数是函数体被 async 关键字标记的函数。\",\"import 'dart:io'; Future<String> demo({int second = 0}) async { sleep(Duration(seconds: second)); return \\\"wuhu\\\"; } void main(List<String> args) async { var d = await demo(second: 3); print(d); }\",\"Future 非常类似 JavaScript 中的 Promise：\",\"Future<String> fetchUser() async { return Future.delayed(Duration(seconds: 3), () => \\\"test\\\"); } void main(List<String> args) { fetchUser().then((value) => print(value)).catchError((e) { print(e); }); }\"]},\"69\":{\"h\":\"Stream\",\"t\":[\"从 Stream 中获取值的方法：\",\"使用 async 关键字和一个异步循环（await for）。\",\"使用 Stream API。\",\"await for (varOrType identifier in expression) { // Executes each time the stream emits a value. }\",\"表达式的类型必须是 Stream，执行流程如下：\",\"等待直到 Stream 返回一个数据。\",\"使用 Stream 返回的数据执行循环体。\",\"重复上面两个过程直到 Stream 的数据返回完毕。\"]},\"70\":{\"h\":\"可调用类\",\"t\":[\"通过实现类的 call() 方法，允许使用类似函数调用的方式来使用该类的实例。\",\"class sum { int call(int a, int b) => a + b; } void main(List<String> args) { var s = sum(); print(s(4, 6)); }\"]},\"71\":{\"h\":\"类\"},\"72\":{\"h\":\"使用构造函数\",\"t\":[\"import 'dart:math'; void main() { var p1 = new Point(2, 2); }\",\"提示\",\"构造函数前的 new 关键字可以省略。\",\"一些类提供了常量构造函数。使用常量构造函数，在构造函数名之前加 const 关键字，来创建编译时常量时：\",\"import 'dart:math'; void main() { var p1 = const Point(2, 2); var p2 = const Point(2, 2); print(identical(p1, p2)); // true }\",\"提示\",\"两个使用相同构造函数、相同参数值构造的编译时常量是一个对象。\"]},\"73\":{\"h\":\"获取对象的类型\",\"t\":[\" import 'dart:math'; void main() { var p1 = const Point(2, 2); print(\\\"type of p1 is ${p1.runtimeType}\\\"); }\",\"使用 Object 对象的 runtimeType 属性在运行时获取一个对象的类型，该对象类型是 Type 的实例。\",\"注意\",\"不要使用类似o.runtimeType==Type这样表达式做条件语句，应当使用 is 运算符。\"]},\"74\":{\"h\":\"实例变量\",\"t\":[\"class User { String? name; String? password; int age = 0; }\",\"所有未初始化的实例变量都是 null，因此对于不能为 null 的类型的成员变量，必须制定初始值或者使用 late 关键字。\",\"所有的实例变量都会隐式的声明一个 Getter 方法，非终值实例变量和 late final 声明但没有初始化的实例变量还会隐式的声明一个 Setter 方法。\"]},\"75\":{\"h\":\"构造函数\",\"t\":[\"与大多数语言类似：\",\"class User { String? name; String? password; User(String name, String password) { this.name = name; this.password = password; } } void main(List<String> args) { var x = new User(\\\"PPG\\\", \\\"123456\\\"); }\",\"提示\",\"仅当命名冲突时使用 this 关键字才有意义，否则 Dart 会忽略 this 关键字。\",\"由于大多数情况下，构造函数的实例变量赋值过程都是一样的，所以 Dart 提供了语法糖：\",\"class User { String? name; String? password; // User(this.name, this.password); User(this.name); } void main(List<String> args) { var x = new User(\\\"PPG\\\"); print(x.name); print(x.password); }\"]},\"76\":{\"h\":\"默认构造函数\",\"t\":[\"如果没有声明构造函数，Dart 会自动生成一个无参数的构造函数并且该构造函数会调用其父类的无参构造方法。\"]},\"77\":{\"h\":\"构造函数不被继承\",\"t\":[\"子类不会继承父类的构造函数，如果子类没有声明构造函数，那么只会有一个默认无参数的构造函数。\"]},\"78\":{\"h\":\"命名式构造函数\",\"t\":[\"可以为一个类声明多个命名式构造函数来表达更明确的意图。\",\"class User { String? name; String? password; User(this.name, this.password); User.name(this.name); User.password(this.password); } void main(List<String> args) { print(User.name(\\\"name\\\").name); print(User.password(\\\"password\\\").password); }\"]},\"79\":{\"h\":\"调用父类非默认构造函数\",\"t\":[\"构造函数相关的执行顺序\",\"初始化列表。\",\"父类的无参数构造函数。\",\"当前类的构造函数。\",\"如果父类没有匿名无参构造函数，那么子类必须调用父类的一个构造函数：\",\"class father { String? name; father(this.name); } class son extends father { son(String x) : super(x) {} } void main(List<String> args) { son s = son(\\\"son\\\"); print(s.name); }\",\"注意\",\"传递给父类构造函数的参数不能使用 this 关键字，因为这一步时，子类构造函数尚未执行，子类实例对象未初始化，因此所有实例成员都不能被访问。\"]},\"80\":{\"h\":\"初始化列表\",\"t\":[\"除了调用父类构造函数之外，还可以在函数体执行之前初始化实例变量，每个实例变量之间使用逗号分隔。\",\"class User { String? name; String? password; User(Map<String, String> map) : name = map[\\\"name\\\"], password = map[\\\"password\\\"] {} } void main(List<String> args) { var user = User({\\\"password\\\": \\\"password\\\"}); print(user.name); print(user.password); }\",\"注意\",\"初始化列表右边的语句同样不能使用 this 关键字。\"]},\"81\":{\"h\":\"重定向构造函数\",\"t\":[\"class User { String? name; String? password; User(Map<String, String> map) : name = map[\\\"name\\\"], password = map[\\\"password\\\"] {} User.alia(String name, String password):this({\\\"name\\\": name, \\\"password\\\": password}); } void main(List<String> args) { var user = User.alia(\\\"name\\\", \\\"password\\\"); print(user.name); print(user.password); }\"]},\"82\":{\"h\":\"常量构造函数\",\"t\":[\"class User { final String name; final String password; const User(this.name, this.password); } void main(List<String> args) { const x = User(\\\"name\\\", \\\"password\\\"); const y = User(\\\"name\\\", \\\"password\\\"); print(identical(x, y)); }\"]},\"83\":{\"h\":\"工厂构造函数\",\"t\":[\"使用 factory 关键字标识类的构造函数将会令该构造函数变为工厂构造函数，这将意味着使用该构造函数构造类的实例时并非总是会返回新的实例对象。例如，工厂构造函数可能会从缓存中返回一个实例，或者返回一个子类型的实例。\",\"class User { String? name; static final Map<String, User> cache = {}; factory User(String name) { return cache.putIfAbsent(name, () => User._internal(name)); } User._internal(this.name); } void main(List<String> args) { var user1 = User(\\\"test\\\"); var user2 = User(\\\"test\\\"); print(identical(user1, user2)); // true }\",\"注意\",\"在工厂构造函数中无法访问 this。\"]},\"84\":{\"h\":\"方法\"},\"85\":{\"h\":\"实例方法\",\"t\":[\"import 'dart:math'; class Point { double x; double y; Point(this.x, this.y); double distanceTo(Point p) { var dx = this.x - p.x; var dy = this.y - p.y; return sqrt(pow(dx, 2) + pow(dy, 2)); } } void main(List<String> args) { var p1 = Point(3, 4); var p2 = Point(5, 6); print(p1.distanceTo(p2)); }\"]},\"86\":{\"h\":\"运算符重载\",\"t\":[\"import 'dart:math'; class Point { double x; double y; Point(this.x, this.y); double distanceTo(Point p) { var dx = this.x - p.x; var dy = this.y - p.y; return sqrt(pow(dx, 2) + pow(dy, 2)); } operator +(Point p) => Point(this.x + p.x, this.y + p.y); } void main(List<String> args) { var p1 = Point(3, 4); var p2 = Point(5, 6); var p3 = p1 + p2; print(p3.x); }\"]},\"87\":{\"h\":\"Getter、Setter\",\"t\":[\"使用 get、set 关键字添加 Getter、Setter 方法：\",\"import 'dart:math'; class Point { double x; double y; Point(this.x, this.y); double get distenceToZero => sqrt(pow(this.x, 2) + pow(this.y, 2)); set demo(double x) => this.x = x; } void main(List<String> args) { var p1 = Point(3, 4); p1.demo = 5; print(p1.x); }\"]},\"88\":{\"h\":\"抽象方法\",\"t\":[\"实例方法、Getter、Setter 都是可以抽象的，抽象方法只能存在于抽象类中。\"]},\"89\":{\"h\":\"抽象类\",\"t\":[\"如果希望抽象类可以实例化，可以定义工厂构造函数。\",\"import 'dart:math'; abstract class point { num x = 0; num y = 0; num distenctTo(point p); void hello() { print(\\\"hello\\\"); } point(this.x, this.y); } class intPoint extends point { @override num distenctTo(point p) { return sqrt(pow((this.x - p.x), 2) + pow((this.y - p.y), 2)); } intPoint(int x, int y) : super(x, y); } void main(List<String> args) { var p1 = intPoint(3, 4); var p2 = intPoint(5, 6); print(p1.distenctTo(p2)); }\"]},\"90\":{\"h\":\"隐式接口\",\"t\":[\"每个类都隐式的定义了一个接口并实现了这个接口，这个接口包含所有这个类的实例成员以及这个类所实现的其他接口。如果要创建一个 A 类支持调用 B 类的 API 但是不想继承 B 类，则可以实现 B 类的接口。\",\"class A { void hello(String x) { print(x); } } class B implements A { @override void hello(String x) { for (var i = 0; i < x.length; i++) { print(x[i]); } } } void main(List<String> args) { A a = B(); a.hello(\\\"test\\\"); }\"]},\"91\":{\"h\":\"扩展一个类\",\"t\":[\"子类可以重写父类的实例方法、操作符、Getter、Setter，使用 @override 注解表示重写了一个成员：\",\"class A { num hello(int a) { return 1; } } class B extends A { @override double hello(Object x) { return 2.5; } } void main(List<String> args) { A a = B(); print(a.hello(123)); }\",\"重写方法声明必须满足下面的条件：\",\"返回类型必须与被覆盖的方法的类型相同或者是其子类。\",\"参数类型必须与被覆盖的方法的类型相同或者是其父类。\",\"覆盖与被覆盖的两个方法的参数个数必须相等。\",\"泛型方法不能覆盖非泛型方法，非泛型方法不能覆盖泛型方法。\",\"如果调用了对象上不存在的方法或实例变量会触发 noSuchMethod 方法，可以重写这个方法来追踪和记录这个行为：\",\"class A{ @override void noSuchMethod(Invocation invocation) { print(\\\"你执行了一个不存在的方法或实例变量：${invocation.memberName}\\\"); } } void main(List<String> args) { dynamic a = A(); print(a.test); }\",\"只有下面任意一个条件成立时才能调用未实现的方法\",\"接收方是静态的 dynamic 类型。\",\"接收方具有动态类型，定义了为实现的方法（也可以是抽象方法），并且接收方的动态类型实现了 noSuchMethod 方法且具体的实现与 Object 中不同。\"]},\"92\":{\"h\":\"扩展方法\",\"t\":[\"扩展方法可以向现有库中添加方法：\",\"class A { String x = \\\"\\\"; A(this.x); } extension B on A { void hello() { print(this.x); } } void main(List<String> args) { A a = A(\\\"test\\\"); B(a).hello(); }\",\"注意\",\"扩展 B 调用时必须穿入一个被扩展对象的实例充当 this。\"]},\"93\":{\"h\":\"枚举类型\",\"t\":[\"enum Level { A, B, C, D, } void main(List<String> args) { print(Level.A.index); // 获取枚举值的索引 print(Level.values); // 获取枚举值列表 }\",\"注意\",\"如果将枚举类用在 switch 语句中，则必须覆盖每一个枚举值。\",\"枚举具有以下限制：\",\"枚举不能成为子类，也不能 mix in，也不可以被实现。\",\"不能显式地实例化一个枚举类。\"]},\"94\":{\"h\":\"使用 Mixin\",\"t\":[\"class A { String a = \\\"\\\"; void helloA() { print(this.a); } } class B { String b = \\\"\\\"; void helloB() { print(this.b); } B(this.b); } class C extends B with A { C(String b) : super(b); } void main(List<String> args) { var c = new C(\\\"B\\\"); c.helloB(); }\",\"使用 with 关键字使用 Mixin 模式，with 后可以 Mixin 多个类，用逗号分隔。\",\"注意\",\"Mixin 类不能声明任何构造器。\",\"extends 关键字必须在 with 关键字前。\",\"提示\",\"如果上面的例子中继承的类 B 和 Mixin 类 A 中具有同名方法，那么会执行 Mixin 类 A 的方法。\",\"如果上面的例子改为类 A 和 类 B 都是 Mixin 类且具有同名方法，则谁最后被 Mixin（在 with 的最后），就执行谁的方法。\",\"如果一个类只是用来 Mixin，应该使用 mixin 关键字代替 class 关键字。而且可以对于使用 mixin 声明的 Mixin 类，可以在后面再使用 on 关键字限制可以被混入的类：\",\"class A { String a = \\\"\\\"; void hello() { print(this.a); } } mixin B on A { String b = \\\"\\\"; void hello() { print(this.b); } } class C extends A with B {}\",\"上面的代码中，B 只能被 Mixin 入 A 类，因此 C 必须继承 A 才能 Mixin B。\"]},\"95\":{\"h\":\"静态变量和静态方法\",\"t\":[\"class A { static int x = 100; String a = \\\"\\\"; static void hello() { print(x); } } void main(List<String> args) { A.hello(); }\",\"提示\",\"静态方法不能访问实例成员，但是实例方法可以访问静态成员。\",\"实例对象不能调用静态方法。\"]},\"96\":{\"h\":\"异常\",\"t\":[\"与 Java 不同，Dart 中的异常都是非必检异常，方法不必声明会抛出哪些异常，也不必捕获任何异常。\",\"Dart 提供了 Exception 和 Error 两种类型的异常以及它们一系列的子类，你也可以定义自己的异常类型。但是在 Dart 中可以将任何非 null 对象作为异常抛出而不局限于 Exception 或 Error 类型。\",\"void exceptionDemo() => throw \\\"wuhu\\\"; void main() { exceptionDemo(); }\",\"捕获异常：\",\"void exceptionDemo() => throw \\\"wuhu\\\"; void main() { try { exceptionDemo(); } on String catch (e, s) { print(e); print(\\\"stack info: $s\\\"); } on Error { rethrow; } catch (e) { print(e); } finally { print(\\\"finally\\\"); } }\",\"使用 on 来指定异常类型，使用 catch 来捕获异常对象，两者可以结合使用，catch 可以接受第二个参数，第一个参数是抛出的异常对象，第二个参数是栈信息。\",\"可以使用 rethrow 将捕获的异常再次抛出。\",\"提示\",\"与 Java 不同，如果 finally 前没有 catch 捕获异常，则异常会在执行完 finally 后抛出。\"]},\"97\":{\"h\":\"函数\",\"t\":[\"在 Dart 中函数也是对象，是 Function 类型。\",\"函数可以不指定返回值，这种情况下返回值为 dynamic 类型：\",\"isOdd(int a) { return a.isOdd; }\",\"如果函数体中只有一个表达式，可以简写为箭头函数：\",\"isOdd(int a) => a.isOdd;\"]},\"98\":{\"h\":\"参数\",\"t\":[\"函数有两种形式的参数：必要参数和可选参数，必要参数定义在参数列表前面，可选参数定义在必要参数后面，可选参数可以是命名的或位置的。\"]},\"99\":{\"h\":\"命名参数\",\"t\":[\"命名参数默认为可选参数，除非被标记为 required。\",\"// 默认值 10 isOdd({int a = 10}) => print(a); void main(List<String> args) { isOdd(); }\",\"因为是可选参数所以如果参数类型不能为 null，需要指定默认值或者在类型后面加问号。\",\"isOdd({required int a}) => print(a); void main(List<String> args) { isOdd(a: 123); }\",\"但是如果是使用了 required 做了必填限制，那么可以不指定默认值。\"]},\"100\":{\"h\":\"可选的位置参数\",\"t\":[\"使用 [] 将一系列参数包裹起来作为位置参数。\",\"String Link(String a, String b, [String? c, String? d]){ var result = a+b; if (c != null) { result = \\\"$result$c\\\"; } if (d != null) { result = \\\"$result$d\\\"; } return result; } void main(List<String> args) { print(Link(\\\"a\\\", \\\"b\\\")); print(Link(\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\")); }\"]},\"101\":{\"h\":\"默认参数\",\"t\":[\"在命名参数和位置参数后使用等号（老版本使用冒号）定义默认值，默认值必须是编译时常量，没有指定默认值的情况下默认值为 null。\"]},\"102\":{\"h\":\"函数\",\"t\":[\"每个 Dart 程序都必须有一个 main() 顶级函数作为程序的入口， main() 函数返回值为 void 并且有一个 List<String> 类型的可选参数。\"]},\"103\":{\"h\":\"函数是一级对象\",\"t\":[\"函数可以作为参数传递给另一个参数：\",\"void hello(String a) { print(a); } void callHello(Function(String) f) { f.call(\\\"Hello World\\\"); } void main(List<String> args) { callHello(hello); }\",\"也可以赋值给一个变量：\",\"void main(List<String> args) { var x = hello; //var x = (msg) => print(msg); x.call(\\\"test\\\"); }\"]},\"104\":{\"h\":\"匿名函数\",\"t\":[\"void main(List<String> args) { var x = (msg) => print(msg); var y = (int a, int b) { return a+b; }; x.call(\\\"test\\\"); print(y(1, 2)); }\"]},\"105\":{\"h\":\"词法作用域\",\"t\":[\"void main() { int a = 1000; if (true) { int a = 100; print(a); // 100 } print(a); // 1000 }\"]},\"106\":{\"h\":\"词法闭包\",\"t\":[\"Function(int) test(int a) { return (int b) { return a + b; }; } void main(List<String> args) { var t1 = test(2); var t2 = test(100); print(t1.call(8)); // 10 print(t2.call(5)); // 105 t1 = test(-6); print(t1.call(8)); // 2 }\"]},\"107\":{\"h\":\"返回值\",\"t\":[\"所有的函数都有返回值，没有显式返回语句的函数最后一行默认执行 return null。\"]},\"108\":{\"h\":\"函数相等\",\"t\":[\"void foo() {} // A top-level function class A { static void bar() {} // A static method void baz() {} // An instance method } void main() { Function x; // Comparing top-level functions. x = foo; assert(foo == x); // Comparing static methods. x = A.bar; assert(A.bar == x); // Comparing instance methods. var v = A(); // Instance #1 of A var w = A(); // Instance #2 of A var y = w; x = w.baz; // These closures refer to the same instance (#2), // so they're equal. assert(y.baz == x); // These closures refer to different instances, // so they're unequal. assert(v.baz != w.baz); }\"]},\"109\":{\"h\":\"生成器\",\"t\":[\"当你需要延迟地生成一连串的值时，可以考虑使用 生成器函数。Dart 内置支持两种形式的生成器方法：\",\"同步生成器：返回一个 Iterable 对象。\",\"异步生成器：返回一个 Stream 对象。\",\"通过在函数上加 sync* 关键字并将返回值类型设置为 Iterable 来实现一个 同步 生成器函数，在函数中使用 yield 语句来传递值：\",\"Iterable<int> naturalsTo(int n) sync* { int k = 0; while (k < n) { yield k++; } } void main(List<String> args) { var x = naturalsTo(10).iterator; while (x.moveNext()) { print(x.current); } }\",\"实现 异步 生成器函数与同步类似，只不过关键字为 async* 并且返回值为 Stream：\",\"Stream<int> asynchronousNaturalsTo(int n) async* { int k = 0; while (k < n) { yield k++; } } void main(List<String> args) async { var numbers = asynchronousNaturalsTo(10); await for (var x in numbers) { print(x); } }\",\"如果生成器是递归调用的，可是使用 yield* 语句提升执行性能：\",\"Iterable<int> naturalsDownFrom(int n) sync* { if (n > 0) { yield n; yield* naturalsDownFrom(n - 1); } } void main(List<String> args) { var x = naturalsDownFrom(10).iterator; while (x.moveNext()) { print(x.current); } }\"]},\"110\":{\"h\":\"泛型\"},\"111\":{\"h\":\"使用泛型\",\"t\":[\"class Cache<T> { Map<String, T> cache = {}; T? get(String key) => this.cache[key]; void set(String key, T data) { cache[key] = data; } } void main(List<String> args) { var stringCache = Cache<String>(); var intCache = Cache<int>(); stringCache.set(\\\"cache1\\\", \\\"data\\\"); intCache.set(\\\"cache1\\\", 123); print(stringCache.get(\\\"cache1\\\")); print(intCache.get(\\\"cache\\\")); }\"]},\"112\":{\"h\":\"使用集合字面量\",\"t\":[\"void main(List<String> args) { var strings = <String>[\\\"s1\\\", \\\"s2\\\"]; var ints = <int>[1,2,3]; var map = <String, int>{ \\\"a\\\": 100, \\\"b\\\": 90, }; }\"]},\"113\":{\"h\":\"使用类型参数化的构造函数\",\"t\":[\"class Demo<T> { T? data; Demo(this.data); } void main(List<String> args) { var d = Demo<String>(\\\"test\\\"); print(d.data); }\"]},\"114\":{\"h\":\"泛型集合\",\"t\":[\"Dart 中的泛型类型是固化的，即使在运行时也会保持类型信息。\",\"这与 Java 的类型擦除不同，在 Java 中只能判断一个对象是不是 List，但不能判断一个对象是不是 List<String>。\"]},\"115\":{\"h\":\"限制参数化类型\",\"t\":[\"class A { } class B extends A{ } class C<T extends A> { T? data; } void main(List<String> args) { var c = C<B>(); }\"]},\"116\":{\"h\":\"使用泛型方法\",\"t\":[\"T hello<T>(T data) { print(data); return data; } void main(List<String> args) { var intFunc = hello<int>; print(intFunc(123)); }\",\"泛型方法中的泛型标志 T 可以在以下位置使用：\",\"返回值类型。\",\"参数类型。\",\"局部变量类型。\"]},\"117\":{\"h\":\"重要概念\",\"t\":[\"所有变量引用的都是对象，每个对象都是一个类的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了空安全）, 所有的类都继承于 Object 类。空安全在 2.12 版本被引入。\",\"Dart 是强类型语言， 但是可以通过 var 自动推断。\",\"如果开启了空安全，对于不能为 null 的类型，不能赋值为 null，例如 int，但是可以在类型后面加上问号将类型声明为可以是原类型也可以是 null，例如 int? a = null;，如果你明确一个表达式不会为空，但是编译器不这么认为，可以在表达式后面添加叹号表示断言，例如下面这样：\",\"int? nullAbleButNotNull() { return 1; } void main() { int a = nullAbleButNotNull()!; print(a); }\",\"如果要显式地声明允许任意类型，使用 Object?（如果开启了空安全）、 Object 或者特殊类型 dynamic 将检查延迟到运行时进行。\",\"Dart 支持泛型。\",\"Dart 支持顶级函数（main）、静态方法、实例方法。\",\"Dart 支持顶级变量、静态变量、实例变量。\",\"Dart 中如果一个标识符以下划线开头则表示是库内私有的\",\"Dart 中标识符可以以字母或者下划线开头。\"]},\"118\":{\"h\":\"内置类型\",\"t\":[\"由于 Dart 中每个变量引用都指向一个对象（一个类的实例），通常也可以使用 构造器 来初始化变量。\",\"此外，由于都是对象，所以变量也有方法。\"]},\"119\":{\"h\":\"Numbers(int double)\",\"t\":[\"int a = 10; double b = 3.14;\",\"int 和 double 都是 num 的子类。\",\"提示\",\"在 Dart 2.1 之前，在浮点数上下文中使用整数字面量是错误的。\",\"Numbers 和字符串互相转换：\",\"void main(List<String> args) { // String -> int var one = int.parse('1'); // String -> double var onePointOne = double.parse('1.1'); // int -> String String oneAsString = 1.toString(); // double -> String String piAsString = 3.14159.toStringAsFixed(2); }\"]},\"120\":{\"h\":\"Strings(String)\",\"t\":[\"String 对象是 UTF-16 编码的字符序列。可以使用单引号或者双引号来创建字符串。\",\"在字符串中，以 ${表达式} 的形式使用表达式，如果表达式是一个标识符，可以省略掉 {}。如果表达式的结果为一个对象，则 Dart 会调用该对象的 toString 方法来获取一个字符串。\",\"void main(List<String> args) { // Dart 中字符串的比较直接使用等号即可，例如true String a = \\\"test\\\"; String b = \\\"test\\\"; print(\\\"Dart 中字符串的比较直接使用等号即可，例如${a == b}\\\"); }\",\"使用 + 连接字符串：\",\"void main(List<String> args) { String a = \\\"test\\\"; String b = \\\"test\\\"; print(a+b); }\",\"使用三个单引号或者三个双引号创建多行字符串：\",\"void main(List<String> args) { String a = \\\"\\\"\\\" 这是一个 多行字符串 \\\"\\\"\\\"; print(a); }\",\"字符串前面加 r 创建不转义的字符串：\",\"void main(List<String> args) { // /n 会被输出而不是换行 String a = r\\\"test\\\\nstring\\\"; print(a); }\",\"注意\",\"如果要把插值字符串字面量赋值给一个 const 字符串，则插值的内容必须都是 const。\"]},\"121\":{\"h\":\"布尔类型\",\"t\":[\"void main(List<String> args) { bool condition = false; if (condition) { print(\\\"true\\\"); } }\"]},\"122\":{\"h\":\"Lists\",\"t\":[\"void main(List<String> args) { List<int> list = [1, 2, 3]; print(list); print(list.length); print(list.first); }\",\"下面两组语句都会报错，但是注意，不要使用第三种写法，这涉及到 const 的冗余。\",\"const List<int> list = [1, 2, 3]; list[1] = 3; List<int> list2 = const [1, 2, 3]; list2[1] = 3; const List<int> list3 = const [1, 2, 3];\",\"扩展操作符（...）和 空感知扩展操作符（...?）：\",\"void main(List<String> args) { const List<int> list = [1, 2, 3]; // [0, 1, 2, 3] var list2 = [0, ...list]; // [0, 1, 2, 3] var list3 = [0, ...?list]; // 可以防止扩展操作符右面为 null }\",\"集合中的 if 和 for 操作：\",\"void main(List<String> args) { // [test, true] var list = [\\\"test\\\", if (true) \\\"true\\\"]; print(list); // [value is test, value is true] var list2 = [for (var i in list) 'value is $i']; print(list2); }\"]},\"123\":{\"h\":\"Sets\",\"t\":[\"Dart 支持的集合由集合的字面量和 Set 类提供。\",\"提示\",\"Set 字面量在 2.2 加入。\",\"void main(List<String> args) { var demoSet = {0}; var list = [0, 1, 2]; for (var i = 0; i < 10; i++) { demoSet.add(i); } demoSet.addAll(list); print(demoSet); }\",\"可以使用在 {} 前加上类型参数的方式创建一个空的 Set，或者将 {} 赋值给一个 Set 类型的变量：\",\"void main(List<String> args) { var set1 = <String>{}; Set<String> set2 = {}; }\",\"set 也支持 if、for 以及扩展操作符：\",\"void main(List<String> args) { Set<int> demoSet = { for (var i = 0; i < 100; i++) if (i.isOdd) i }; print(demoSet); Set<int> anotherSet = {...?demoSet}; print(anotherSet); }\"]},\"124\":{\"h\":\"Maps\",\"t\":[\"Dart 中 Map 提供了 Map 字面量以及 Map 类型两种形式的 Map。\",\"void main(List<String> args) { var user = { \\\"name\\\": \\\"PPG007\\\", \\\"email\\\": \\\"1658272229@qq.com\\\", }; var user2 = Map<String, String>(); }\",\"添加与获取元素：\",\"void main(List<String> args) { var user = { \\\"name\\\": \\\"PPG007\\\", \\\"email\\\": \\\"1658272229@qq.com\\\", }; user[\\\"password\\\"] = \\\"123\\\"; for (var item in user.entries) { print(\\\"Key: ${item.key}\\\"); print(\\\"Value: ${item.value}\\\"); } // 不存在的键会返回 null print(user[\\\"null\\\"] == null); // true }\"]},\"125\":{\"h\":\"Runes 与 grapheme clusters\",\"t\":[\"类似 Golang。\",\"void main(List<String> args) { var hi = '🇩🇰'; print(hi.length); // 2 print(hi.runes.length); // 4 }\"]},\"126\":{\"h\":\"Symbols\",\"t\":[\"Symbol 表示 Dart 中声明的操作符或者标识符。你几乎不会需要 Symbol，但是它们对于那些通过名称引用标识符的 API 很有用，因为代码压缩后，尽管标识符的名称会改变，但是它们的 Symbol 会保持不变。\",\"void main(List<String> args) { String a = \\\"123\\\"; print(#a); // Symbol(\\\"a\\\") }\"]},\"127\":{\"h\":\"运算符\",\"t\":[\"这里主要是 Dart 中比较特别的运算符。\"]},\"128\":{\"h\":\"类型判断运算符\",\"t\":[\"as 运算符：负责类型转换。\",\"void main(List<String> args) { Object demo = \\\"123\\\"; print((demo as String).length); }\",\"提示\",\"当且仅当 a 实现了 b 的接口，a as b 才是 true，如果 b 是 Object，则必定为 true，因为所有类都是 Object 的子类。\",\"is、is! 运算符：判断对象是否是指定的类型\",\"void main(List<String> args) { Object demo = \\\"123\\\"; print(demo is! String); // false print(demo is String); // true if (demo is String) { print(demo.length); } }\",\"提示\",\"如果在分支语句中使用 is 判断后，则在这个分支作用域内，变量的类型就确定下来了，类似于 Golang 的 switch 类型断言。\",\"as 运算符如果变量不是指定的类型或者为 null 则会抛出异常，is、is! 不会。\",\"void main(List<String> args) { Object demo = 123; if (demo is String) { print(demo.length); // will not print } print((demo as String).length); // panic }\"]},\"129\":{\"h\":\"赋值运算符\",\"t\":[\"这里主要介绍 ??= 赋值运算符，可以为值为 null 的变量赋值：\",\"void main(List<String> args) { var a = null; a ??= 123; print(a); // 123 var b = 456; b ??= 123; print(b); // 456 }\",\"如果被赋值的变量不是 nulll，则这个变量会保持原来的值。\"]},\"130\":{\"h\":\"条件表达式\",\"t\":[\"三目运算符：这里的三目运算符与 Java 等其他语言相同。\",\"表达式1 ?? 表达式2：如果表达式 1 位非 null 则返回表达式 1 的值，否则执行表达式 2 病返回表达式 2 的值。\",\"Object demoFunction(var a, b) => a ?? b; void main(List<String> args) { print(demoFunction(null, 2)); // 2 print(demoFunction(1, 2)); // 1 }\"]},\"131\":{\"h\":\"级联运算符\",\"t\":[\"级联运算符 ..，?.. 可以在同一个对象上连续调用多个对象的变量或方法。\",\"class User { late String name; late int age; } void main(List<String> args) { User user = User() ..age = 22 ..name = \\\"PPG\\\"; print(user.name); print(user.age); }\",\"如果要级联的对象可能为 null，可以使用 ?.. 运算符。\"]},\"132\":{\"h\":\"其他运算符\",\"t\":[\"?[]：左侧调用者不为空时，访问 List 中特定位置的元素。\",\"void main(List<String> args) { List<String> demo = [\\\"123\\\"]; print(demo?[0]); }\",\"?.：左边的操作对象不能为 null，例如 foo?.bar，如果 foo 为 null 则返回 null ，否则返回 bar。\",\"void main(List<String> args) { User? user = User(); user = null; print(user?.age); } class User { late int age; }\"]},\"133\":{\"h\":\"流程控制\"},\"134\":{\"h\":\"if&else\",\"t\":[\"Dart 中 if、else 与其他语言相同，需要注意的是 if 语句中的条件表达式必须是布尔类型。\",\"void main(List<String> args) { var a = 10; if (a < 0) { print(\\\"a < 0\\\"); } else if (a == 0) { print(\\\"a == 0\\\"); } else { print(\\\"a > 0\\\"); } }\"]},\"135\":{\"h\":\"For\",\"t\":[\"标准 for 循环：\",\"void main(List<String> args) { String x = \\\"Hello World\\\"; for (var i = 0; i < x.length; i++) { print(x[i]); } }\",\"for 循环中的闭包会自动捕获循环的 索引值 以避免 JavaScript 中一些常见的陷阱。\",\"void main(List<String> args) { String x = \\\"Hello World\\\"; for (var i = 0; i < x.length; i++) { void Print() { print(i); } Print(); } }\",\"for in 与 forEach：用于可迭代对象。\",\"void main(List<String> args) { var list = [1, 2, 3, 4, 5, 6]; for (var i in list) { print(i); } list.forEach((element) { print(element); }); }\"]},\"136\":{\"h\":\"while&do while\",\"t\":[\"Dart 中 while、do while 与其他语言相同，不再赘述。\"]},\"137\":{\"h\":\"switch\",\"t\":[\"void main(List<String> args) { var x = \\\"D\\\"; switch (x) { case \\\"A\\\": print(90); break; case \\\"B\\\": print(80); break; case \\\"C\\\": print(70); break; case \\\"D\\\": default: print(60); break; } }\",\"Dart 中每个 case 都必须要包含一个 break，或者是使用 continue、throw、return 来结束非空 case。\",\"如果 case 语句为空，则这个 case 将会执行下一个 case 所要执行的内容。\",\"还可以通过 continue 结合 label实现跳转：\",\"void main(List<String> args) { var x = \\\"D\\\"; switch (x) { case \\\"A\\\": print(90); break; case \\\"B\\\": print(80); break; case \\\"C\\\": print(70); break; case \\\"D\\\": continue E; E: default: print(60); break; } }\"]},\"138\":{\"h\":\"断言\",\"t\":[\"void main(List<String> args) { var x = \\\"D\\\"; assert(x == \\\"d\\\", \\\"x is not equal to d\\\"); }\",\"assert 第一个参数为布尔值表达式，第二个参数为可选信息；如果表达式值为 true，则断言成功，继续执行，如果表达式值为 false，则断言失败，抛出 AssertionError 异常。\",\"提示\",\"断言是否生效取决于开发工具和所使用的框架，如果使用 dart run 执行时希望断言生效，可以添加 --enable-asserts 参数：dart run --enable-asserts hello.dart。\",\"提示\",\"生产环境中，断言会被忽略，与此同时传入 assert 的参数不被判断。\"]},\"139\":{\"h\":\"起步\"},\"140\":{\"h\":\"安装 Dart\",\"t\":[\"sudo apt-get update sudo apt-get install apt-transport-https sudo sh -c 'wget -qO- https://dl.google.com/linux/linux_signing_key.pub | apt-key add -' sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list' sudo apt-get update sudo apt-get install dart\",\"使用 Visual Studio Code 安装 Dart 插件即可。\"]},\"141\":{\"h\":\"一个简单地 Dart 程序\",\"t\":[\"创建 hello.dart：\",\"void hello(String name) { print(\\\"Hello $name\\\"); } void main(List<String> args) { var name = \\\"PPG007\\\"; hello(name); }\"]},\"142\":{\"h\":\"变量\"},\"143\":{\"h\":\"变量声明\",\"t\":[\"使用关键字声明变量：\",\"int a = nullAbleButNotNull()!; dynamic b = \\\"123\\\"; Object c = 123; var d = false;\"]},\"144\":{\"h\":\"默认值\",\"t\":[\"所有允许为空的类型的默认值都是 null，对于不允许为 null 的类型，需要在使用前初始化。\",\"int b; print(b); // Error: Non-nullable variable 'b' must be assigned before it can be used.\",\"如果你确定变量使用前已被初始化，可以在变量声明前添加 late，但是如果实际上没有初始化则会在运行期报错，late 关键字在 2.12 版本后引入。\",\"late int a; void main() { print(a); // 运行时报错 }\",\"如果一个变量使用了 late 修饰且在声明时就进行了初始化，那么这个变量直到被使用时才会被赋值（懒加载）。\",\"void init(){ print(\\\"init\\\"); } void main(List<String> args) { late var x = init(); // not print var a = init(); // print }\"]},\"145\":{\"h\":\"final 和 const\",\"t\":[\"使用 final 或 const 声明变量可以使变量不可变，这两个关键字可以替代 var 或者加在一个具体的类型前。\",\"一个 final 变量只可以被赋值一次，可以先声明，再赋值，const 必须声明时就赋值。全局 final 或者类的 final 变量在第一次使用时才会初始化。\",\"final demo = init(); // not print void main(List<String> args) { }\",\"类的实例变量不能是 const，只能是 final，类的静态变量可以是 const，顺序必须是 static const。\",\"如果 final 或 const 修饰的是对象，则 final 修饰的情况下对象属性仍然可变，但是 const 不行。\"]},\"146\":{\"h\":\"数组的扩展\"},\"147\":{\"h\":\"扩展运算符\",\"t\":[\"扩展运算符是三个点，将一个数组变为参数序列：\",\"console.log(...[1, 2, 3, 4]); function push(array, ...items) { array.push(...items); for (const x of array) { console.log(x); } } function add(x, y) { return x + y; } push([], ...[1, 2, 3, 4]); console.log(add(...[4, 3, 2, 1]));\",\"扩展运算符的应用：\",\"复制数组：\",\"let a1 = [1, 2, 3, 4]; let a2 = [...a1];\",\"合并数组：\",\"a1 = [{ foo: 1 }]; a2 = [{ bar: 2 }]; a3 = [...a1, ...a2];\",\"与解构赋值结合：\",\"const [first, ...rest] = [1, 2, 3, 4, 5];\",\"字符串：扩展运算符可以将字符串转为真正的数组。\",\"console.log([...'hello']);\",\"实现了 Iterator 接口的对象：任何定义了遍历器接口的对象都可以使用扩展运算符转为真正的数组。\",\"function User(name) { this.name = name; } User.prototype[Symbol.iterator] = function* () { let i = 0; while (i < 10) { ++i; yield this.name; } }; console.log([...new User('PPG')]);\"]},\"148\":{\"h\":\"数组实例的 find() 和 findIndex()\",\"t\":[\"find 方法用于找出第一个符合条件的数组成员，它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为 true 的成员，然后返回这个成员，如果没有符合条件的就返回 undefined。\",\"findIndex 方法返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件就返回 -1.\",\"这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象。\"]},\"149\":{\"h\":\"数组实例的 includes()\",\"t\":[\"此方法返回一个布尔值，表示某个数组是否包含给定的值。该方法可以接受第二个参数表示搜索的起始位置，如果是负数就表示倒数的位置。\"]},\"150\":{\"h\":\"async 函数\"},\"151\":{\"h\":\"基本用法\",\"t\":[\"async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数，当函数执行的时候，一旦遇到 await 就会先返回，等到异步操作完成再接着执行函数体内后面的语句。\",\"async function timeout(ms) { await new Promise(resolve => { setTimeout(resolve, ms); }); } async function asyncPrint(value, ms) { await timeout(ms); console.log(value); } asyncPrint('hello world', 5000);\"]},\"152\":{\"h\":\"语法\",\"t\":[\"async 函数返回一个 Promise 对象，函数内部 return 语句返回的值会成为 then 方法回调函数的参数。\",\"async 函数内部抛出错误会导致返回的 Promise 对象变为 reject 状态，抛出错误的对象会被 catch 方法回调函数收到。\",\"async 函数返回的 Promise 对象必须等到内部所有 await 命令后面的 Promise 对象执行完才会发生状态改变，除非遇到 return 语句或者抛出错误，只有 async 函数内部的异步操作执行完才会执行 then 方法指定的回调函数。\",\"await 命令后面的 Promise 对象如果变成 reject 状态，则 reject 的参数会被 catch 方法的回调函数接收到。而且只要任何一个 await 语句后面的 Promise对象变为 reject 状态，那么整个 async 函数都会中断执行。\",\"如果希望即使前面的异步操作失败也不中断后面的异步操作可以将前面的 await 放在 try...catch 结构里。\",\"await 后面的异步操作出错等同于 async 函数返回的 Promise 对象被 reject。\",\"使用注意点：\",\"最好把 await 命令放在 try 代码块中。\",\"多个 await 命令后面的异步操作如果不存在先后关系最好同时触发。\",\"await 命令只能用在 async 函数。\",\"async函数可以保留运行堆栈。\"]},\"153\":{\"h\":\"Class 的基本语法\",\"t\":[\"constructor() 方法是类的默认方法，通过 new 命令生成对象实例时自动调用该方法，一个类必须具有 constructor 方法，如果没有显式定义，一个空的 constructor() 方法会被默认添加。构造器可以返回其他实例对象。\",\"类内部可以使用 get 和 set 关键字对某个属性设置修改函数和取值函数，拦截该属性的取值行为。\",\"注意点：\",\"严格模式：类和模块的内部默认就是严格模式。\",\"不存在变量提升。\",\"某个方法前添加星号就表示这个方法是一个 Generator 函数。\",\"类的方法内部如果含有 this，默认指向类的实例，一旦单独使用可能会报错，这样可以考虑箭头函数。\",\"静态方法：在方法前加上 static 关键字表示该方法不会被实例继承，如果静态方法中包含 this 关键字，这个 this 指的是类而不是实例。静态方法可以被继承。\",\"静态属性：在属性声明前面添加 static 关键字。\"]},\"154\":{\"h\":\"Class 的继承\",\"t\":[\"使用 extends 关键字完成继承，子类必须在构造器中调用 super 方法，并且调用 super 之前不能使用 this，因为子类自己的 this 对象必须先通过父类的构造函数完成塑造然后再加工，super 中的 this 指的是子类的实例。\",\"super 指向父类的原型对象，所以定义在父类实例上的方法或属性是无法通过 super 调用的。在子类普通方法中通过 super 调用父类的方法时，方法内部的 this 指向当前的子类实例。\",\"class Animal { constructor(name) { this.name = name; } show() { console.log(this.name); } } class Dog extends Animal { constructor(name, sound) { super(name); this.sound = sound; } show() { console.log(this.name, this.sound); } }\",\"从子类获取父类：Object.getPrototypeOf()：\",\"Object.getPrototypeOf(Dog);\"]},\"155\":{\"h\":\"函数的扩展\"},\"156\":{\"h\":\"函数参数的默认值\",\"t\":[\"function add(x, inc = 1) { return x + inc; }\",\"与解构赋值默认值结合：\",\"function add({ x, y = 1 }) { return x + y; } console.log(add({ x: 1 }));\",\"指定了默认值以后，函数的 length 属性将返回没有指定默认值的参数个数。\"]},\"157\":{\"h\":\"参数的作用域\",\"t\":[\"如果设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域直到初始化结束，这个作用域就会消失。\",\"let x = 1; function foo( x, y = function () { x = 2; } ) { var x = 3; y(); console.log(x); } foo(); // 3 console.log(x); // 1\",\"在上面的代码中，如果函数中的 x 变量使用 var 声明，那么 foo 参数列表中的 x 变量和方法体内部的 x 变量不是一个变量，而 y 所指向的函数中操作的变量和参数列表中的 x 是一个变量，所以最后输出 3。如果不使用 var 声明，则这两个 x 是一个变量，输出 2。\"]},\"158\":{\"h\":\"rest 参数\",\"t\":[\"使用 ...变量名 形式定义 rest 参数：\",\"function sum(...number) { let sum = 0; for (const n of number) { sum += n; } return sum; } console.log(sum(1, 2, 3, 4, 5, 6, 7, 8));\",\"rest 参数必须在参数列表最后，函数的 length 属性不包含 rest 参数。\"]},\"159\":{\"h\":\"箭头函数\",\"t\":[\"由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上大括号：\",\"let getUser = (account = 'ppg', password = '123456') => ({ account, password }); console.log(getUser());\",\"箭头函数注意事项：\",\"箭头函数没有自己的 this 对象。\",\"不可以当做构造函数，也就是不能 new。\",\"不可以使用 arguments 对象，只能用 rest。\",\"不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。\",\"关于 this：普通函数内部的 this 指向函数运行时所在的对象；箭头函数内部的 this 对象是定义时上层作用域中的 this，箭头函数内部的 this 指向是固定的。\",\"箭头函数可以嵌套，但是无论如何嵌套，this 的指向永远都是指向外部。\",\"箭头函数不适用的场合：\",\"定义对象的方法：如果使用箭头函数定义对象的方法，因为对象不构成单独的作用域，会导致箭头函数定义时的作用域是全局作用域，其中的 this 就指向了全局对象。\",\"需要动态 this 的时候，例如事件监听函数。\"]},\"160\":{\"h\":\"let 和 const 命令\",\"t\":[\"暂时性死区：只要一个代码块中存在 let 命令，这个区块对这些命令声明的变量从一开始就形成了封闭作用域，如果在声明前使用这些变量就会报错。\",\"区块内定义的方法只能在区块内调用（如果将函数赋给一个 let 变量才会有这个限制）。\",\"const 命令声明一个不可变的变量，声明同时要初始化，不初始化会报错。\"]},\"161\":{\"h\":\"Map\",\"t\":[\"Map 可以设置任意类型的键，而不只是字符串。任何具有 Iterator 接口且每个成员都是一个双元素的数组的数据结构都可以当做 Map 构造函数的参数。\",\"map.set(['a'], 555); console.log(map.get(['a'])); // undefined\",\"如果键是对象类型，那么值相同的对象可能会被看作不同的键，因为它们在内存中的地址不一样。所有的 NaN 都是一个键。\"]},\"162\":{\"h\":\"与其他数据结构的互相转换\",\"t\":[\"Map 转数组：扩展运算符。\",\"数组转 Map：将数组传入 Map 构造函数。\",\"Map 转为对象：如果所有的键都是字符串就可以无损的转换。\",\"对象转为 Map：将对象传入 Object.entries() 方法并将返回值传入 Map 构造函数。\",\"Map 转 JSON：如果 Map 的键名都是字符串可以先转为对象再转为 JSON；如果键中存在非字符串可以选择转为数组 JSON。\",\"const map = new Map(); map.set('name', 'ppg'); map.set(['a', 'b'], 555); map.set(message, true); console.log(JSON.stringify([...map])); // [[\\\"name\\\",\\\"ppg\\\"],[[\\\"a\\\",\\\"b\\\"],555],[{\\\"body\\\":{\\\"user\\\":{\\\"firstName\\\":\\\"zhuang\\\"}}},true]]\",\"JSON 转 Map：JSON 转对象然后再转为 Map。\"]},\"163\":{\"h\":\"Module 的语法\"},\"164\":{\"h\":\"export 命令\",\"t\":[\"export 命令的常见写法：\",\"逐个导出：\",\"export var firstName = 'Michael'; export var lastName = 'Jackson'; export var year = 1958;\",\"合并导出：\",\"export { firstName, lastName, year };\",\"重命名导出：\",\"function v1() { ... } function v2() { ... } export { v1 as streamV1, v2 as streamV2, v2 as streamLatestVersion };\",\"默认导出：一个模块只能有一个默认导出，在 import 时可以不指定要引入的模块名。\",\"export default foo;\"]},\"165\":{\"h\":\"对象的扩展\"},\"166\":{\"h\":\"super 关键字\",\"t\":[\"指向当前对象的原型对象。super 表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错，而且只有对象方法的简写形式才可以。\"]},\"167\":{\"h\":\"对象的扩展运算符\",\"t\":[\"解构赋值：\",\"let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 }; x; // 1 y; // 2 z; // { a: 3, b: 4 }\",\"如果等号右边是 undefined 或 null 就会报错，因为它们无法转成对象，而且左侧解构赋值必须是最后一个参数。解构赋值的拷贝同样是浅拷贝。扩展运算符的解构赋值不能复制从原型对象继承的属性，但是普通的解构赋值可以\",\"扩展运算符：对象的扩展运算符用于取出参数对象的所有可比案例属性拷贝到当前对象之中。由于数组是特殊的对象，所以对象的扩展运算符也可以用于数组。\"]},\"168\":{\"h\":\"对象的新增方法\"},\"169\":{\"h\":\"Object.assign()\",\"t\":[\"此方法用于对象的合并，将原对象的所有可枚举属性复制到目标对象，第一个参数是目标对象，后面都是源对象，后面的属性会覆盖前面的属性。不可枚举和继承来的属性是不会拷贝的。\",\"const proto = { x: 'hello', foo() { console.log(this.x); }, y: 'test', }; const obj = { x: 'world', foo() { super.foo(); }, }; Object.setPrototypeOf(obj, proto); let backup = {}; Object.assign(backup, obj); console.log(backup); console.log(backup.y);\",\"注意事项：\",\"此方法是浅拷贝，如果源对象的某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\",\"一旦遇到同名属性，那么将会进行替换，整体替换整体。\",\"因为数组是特殊的对象，当为这个方法传入数组时，两个数组的对应位置上的内容会发生替换。\",\"这个方法只能进行值的复制，如果要复制的值是一个 getter 函数，那么会先执行这个函数再复制而不是复制这个函数。\",\"常见用途：\",\"为对象添加属性。\",\"为对象添加方法。\",\"克隆对象。\",\"合并多个对象。\",\"为属性指定默认值。\"]},\"170\":{\"h\":\"Object.keys()、Object.values()、Object.entries()\",\"t\":[\"Object.keys()：返回一个数组，成员是参数对象自身的所有可遍历属性的键名。\",\"for (const key of Object.keys(obj)) { console.log(key); }\",\"Object.values()：返回一个数组，成员是参数对象自身的所有可遍历属性的键值。\",\"for (const value of Object.values(obj)) { console.log(value); }\",\"Object.entries()：返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组。\",\"for (const [key, value] of Object.entries(obj)) { console.log([key, value]); }\"]},\"171\":{\"h\":\"运算符的扩展\"},\"172\":{\"h\":\"链判断运算符\",\"t\":[\"const message = { body: { user: { firstName: 'zhuang', }, }, }; console.log(message?.body?.user?.firstName || 'null'); console.log(message?.body?.user?.lastName || 'null');\",\"如果左侧对象为 null 或者 undefined，就不再往下运算而是返回 undefined。\"]},\"173\":{\"h\":\"Null 判断运算符\",\"t\":[\"只有运算符左侧的值为 null 或 undefined 时，才会返回右侧的值。\",\"console.log(message?.body?.demo ?? 'no');\"]},\"174\":{\"h\":\"逻辑赋值运算符\",\"t\":[\"或赋值运算符：||=。\",\"与赋值运算符：&&=。\",\"Null 赋值运算符：??=。\",\"逻辑赋值运算符先进行逻辑运算，再根据情况进行赋值运算。\"]},\"175\":{\"h\":\"Promise 对象\"},\"176\":{\"h\":\"基本用法\",\"t\":[\"Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。\",\"resolve 函数的作用是将 Promise 对象的状态从“未完成”变成“成功”，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。\",\"reject 函数的作用是将 Promise 对象的状态从“未完成”变成“失败”。\",\"Promise 实例生成以后可以用 then 方法分别制定 resolved 状态和 rejected 状态的回调函数。then 方法接受两个回调函数作为参数，第一个回调函数对应 resolved，第二个回调函数对应 rejected。Promise 创建后会立即执行，then 方法指定的回调函数会在当前脚本所有同步任务执行完才会执行。\"]},\"177\":{\"h\":\"then 方法\",\"t\":[\"then 方法返回的是一个新的 Promise 实例，不是原来那个 Promise 实例，因此可以采用链式写法。\"]},\"178\":{\"h\":\"catch 方法\",\"t\":[\"catch 方法相当于 then 方法的第一个参数为 null 或 undefined，用于指定发生错误时的回调函数，如果 Promise 已经是 resolved 状态，再抛出错误是无效的，等于没有抛出。\",\"Promise 对象的错误有“冒泡”性质，会一直向后传递，直到被捕获为止，错误总是会被下一个 catch 语句捕获。\",\"如果没有使用 catch 方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码。\"]},\"179\":{\"h\":\"finally 方法\",\"t\":[\"finally 方法用于指定一定会执行的操作。\"]},\"180\":{\"h\":\"Promise.all 方法\",\"t\":[\"all 方法用于将多个 Promise 实例包装成一个新的 Promise 实例。\",\"all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。\",\"如果多个 Promise 中有一个是 rejected，最终结果就是 rejected。\"]},\"181\":{\"h\":\"字符串的扩展\"},\"182\":{\"h\":\"模板字符串\",\"t\":[\"大括号中的内部就是执行 JavaScript 的代码，如果存在错误就会报错。\"]},\"183\":{\"h\":\"字符串的新增方法\",\"t\":[\"includes()、startsWith()、endsWith()： \",\"includes：返回布尔值，表示是否找到了参数字符串。\",\"startsWith：返回布尔值，表示参数字符串是否在原字符串的头部。\",\"endsWith：返回布尔值，表示参数字符串是否在原字符串的尾部。\",\"三个方法都支持通过第二个参数指定开始搜索的位置。\",\"repeat()：返回一个新字符串，表示将原字符串重复指定的次数，如果是小数会取证，负数会报错。\",\"padStart()、padEnd()：分别用于头部、尾部补全，接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。\",\"trimStart()、trimEnd()：消除字符串头部和尾部的空格，返回新字符串，不修改原始字符串。\"]},\"184\":{\"h\":\"变量的解构赋值\"},\"185\":{\"h\":\"数组的解构赋值\",\"t\":[\"解构：按照一定模式，从数组和对象中提取值，对变量进行赋值。\",\"只要等号两边模式相同，就能够解构成功；如果解构失败，变量就会被赋值为 undefined。\",\"解构赋值在左边括号中可以指定默认值：\",\"let [x, y = 'b'] = ['a', undefined];\",\"如果赋值为 undefined 则默认值仍然会生效，如果赋值为 null 则默认值失效，赋值为 null。默认值也可以引用其他变量但是这个变量必须已经声明。\"]},\"186\":{\"h\":\"对象的解构赋值\",\"t\":[\"对象解构属性没有次序，变量与属性同名就能取到正确的值。\",\"let { account, password, account: username } = { account: '1658', password: '123456' };\",\"如果变量名与属性名不一致要使用 ${右边已有的属性名}: ${变量名} 的形式。\"]},\"187\":{\"h\":\"字符串的解构赋值\",\"t\":[\"字符串也可以解构赋值，此时字符串被转换成了一个类似数组的对象：\",\"const [a, b, c, d, e] = 'hello'; const { length: len } = 'hello'; // len = 5\"]},\"188\":{\"h\":\"数值和布尔值的解构赋值\",\"t\":[\"解构赋值时，如果等号右边是数值和布尔值，则会先转为对象，只要等号右边的值不是对象或数组就先把它转为对象，由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值都会报错。\"]},\"189\":{\"h\":\"函数参数的解构赋值\",\"t\":[\"function add([x, y]) { console.log(x + y); } function move({ x = 0, y = 0 } = {}) { console.log([x, y]); }\"]},\"190\":{\"h\":\"URL\",\"t\":[\"URL：统一资源定位符，一个 URL 对应一个资源，同一个资源可能对应多个 URL。\",\"URL 的各个部分：\",\"协议。\",\"主机。\",\"端口。\",\"路径。\",\"查询参数。\",\"锚点。锚点名称通过网页元素的 id 属性命名。\",\"URL 字符只能使用以下这些字符：\",\"26个英文字母，包含大小写。\",\"阿拉伯数字。\",\"连词号 -。\",\"句点 .。\",\"下划线 _。\",\"此外，还有 18 个字符属于保留字符，只能在特定位置出现，在其它地方出现需要转义。\",\"通过 <base> 标签指定网页内部的所有相对 URL 的计算基准，整张网页只能有一个 <base> 标签，而且只能放在 <head> 里面，不需要闭合的单独标签，且这个标签必须至少具有 href 或 target 属性中的一个。\",\"<base href=\\\"https://www.google.com/\\\" target=\\\"_blank\\\" />\"]},\"191\":{\"h\":\"元素的属性\",\"t\":[\"属性名与标签名都不区分大小写。\"]},\"192\":{\"h\":\"全局属性\",\"t\":[\"常见的全局属性：\",\"id。\",\"class。\",\"title。用来为元素添加附加说明，鼠标悬浮在元素上面会将 title 属性值浮动显示。\",\"tabindex。表示按下 Tab 键，焦点的转移顺序。 \",\"负整数：该元素可以获取焦点但不参与 Tab 键对网页元素的遍历。\",\"0：该元素参与 Tab 遍历，顺序由浏览器指定。\",\"正整数：按大小参与 Tab 遍历，如果多个 tabindex 相同，按源码中出现的顺序。\",\"accesskey。指定网页元素获取焦点的快捷键，属性值必须是单个可打印的字符。需要通过功能键一起按下，Alt 或者 Ctrl +Alt。\",\"style。\",\"hidden。如果 CSS 可见性设置优先级高于此属性。\",\"lang。指定网页元素使用的语言。\",\"dir。表示文字的阅读方向。 \",\"ltr：从左到右。\",\"rtl：从右到左。\",\"auto：自动。\",\"contenteditable。设为 true 允许用户修改内容。\",\"spellcheck。\",\"data- 属性。用于存放自定义的数据。\",\"事件处理属性。属性值都是 JavaScript 代码。\"]},\"193\":{\"h\":\"表单\",\"t\":[\"form 标签的属性：\",\"accept-charset：服务器接受的字符编码列表，空格分隔。\",\"autocomplete：浏览器是否可以自动填充某个控件的值，取 off 或 on。\",\"enctype：当 method 属性指定为 POST 时，指定提交给服务器的 MIME 类型。关于 MIME：MIME,常用可取值如下： \",\"application/x-www-form-urlencoded：默认类型。\",\"multipart/form-data：用于文件上传，将文件分成多块传送\",\"fieldset 标签：块级容器标签，表示控件的集合。\",\"disabled 属性：一旦设置会使 fieldset 内部包含的控件不可用。\",\"form 属性：指定控件组所属 form，值等于 form 的 id 属性。\",\"legend 标签：用来设置 fieldset 控件组的标题。\",\"label 标签：提供控件文字说明，通过 for 属性和对应控件的 id 属性对应，或者直接将控件放在 label 标签之中，可以不使用 for 属性。可以通过 form 属性关联表单 id。\",\"input 标签属性：\",\"autofocus：是否在页面加载时自动获得焦点。\",\"disabled：是否禁用。\",\"form：关联表单的 id 属性。\",\"readonly：是否只读。\",\"input 标签的类型：\",\"text 类型：通过 maxlength 和 minlength 指定最大和最小输入字符数；通过 pattern 指定必须输入与正则表达式匹配的内容。\",\"image 类型：与 submit 完全一致，将一个图像文件作为提交按钮。\",\"reset 类型：重置控件。\",\"checkbox 类型：复选框，通过 name 和 value 属性形成键值对。\",\"radio 类型：单选框，checked 属性表示是否默认选中当前项，value 属性指定用户选中该项提交到服务器的值。\",\"email 类型：设置 multiple 属性可以输入以逗号分隔的多个电子邮箱。\",\"number 类型：只能输入数字，通过 step 属性指定每次递增、递减的步长。\",\"range 类型：一个滑块，选择给定范围之中的一个数值，通过 max、min 指定最大最小值，通过 step 属性指定步长。\",\"url 类型：一个只能输入网址的文本框。\",\"tel 类型：一个只能输入电话号码的输入框。\",\"color 类型：选择颜色。\",\"date 类型：一个只能输入日期的输入框，step 指定步长。\",\"time 类型：只能输入时间的输入框。\",\"month 类型：只能输入年份和月份的输入框。\",\"week 类型：输入一年之中第几周的输入框。\",\"datetime-local 类型：输入年月日和时分。\",\"button 标签属性：\",\"autofocus。\",\"disabled。\",\"type：可选 submit、reset、button。\",\"form：值为 form 的 id 属性。\",\"formenctype：数据提交到服务器的编码方式，会覆盖 form 元素的设置，三个可选值： \",\"application/x-www-form-urlencoded。\",\"multipart/form-data。\",\"text/plain。\",\"formmethod：覆盖 form 的 method 属性。\",\"select 属性：\",\"multiple：是否可以选择多个菜单项。\",\"option 属性：\",\"label：该项的说明，如果省略，就等于该项的文本内容。\",\"value：提交到服务器的值，如果省略，等于该项的文本内容。\",\"datalist：为指定控件提供一组相关数据，指定控件通过 list 属性和 datalist 的 id 对应。\",\"datalist 中的 option 标签可以不闭合，设置 value 即可。\",\"progress：表示完成进度，通过 max 属性设置进度条最大值，大于 0 的浮点数，value 属性是进度条的当前值\",\"meter：指示器，显示一致范围内的一个值。\",\"max：范围的上限，必须大于 min 属性。\",\"value：当前值。\",\"low：表示“低端”的上限门槛值，必须大于 min 属性，小于 high 属性和 max 属性。\",\"high：表示“高端”的下限门槛值，必须小于 max 属性，大于 low 属性和 min 属性。\",\"optimum：指定最佳值，必须在min属性和max属性之间。它应该与low属性和high属性一起使用，表示最佳范围。\",\"form：关联表单的id属性。\"]},\"194\":{\"h\":\"图像标签\"},\"195\":{\"h\":\"基础图像标签\",\"t\":[\"img：通过 loading 属性指定指定图片加载的行为。 \",\"auto：浏览器的默认行为。\",\"lazy：启用懒加载。\",\"eager：立即加载，无论它在页面那个位置。\",\"figure：图像区块，将图像和相关信息封装在一起。\",\"figcaption：figure 的可选子元素，表示图像的文本描述。\"]},\"196\":{\"h\":\"响应式图片\",\"t\":[\"img 标签：\",\"srcset 属性，指定多张图像，适应不同像素密度的屏幕。\",\"<img srcset=\\\"foo-320w.jpg, foo-480w.jpg 1.5x, foo-640w.jpg 2x\\\" src=\\\"foo-640w.jpg\\\" />\",\"sizes 属性：显示不同大小的图像。必须与 srcset 属性搭配。\",\"<img srcset=\\\"foo-160.jpg 160w, foo-320.jpg 320w, foo-640.jpg 640w, foo-1280.jpg 1280w\\\" sizes=\\\"(max-width: 440px) 100vw, (max-width: 900px) 33vw, 254px\\\" src=\\\"foo-1280.jpg\\\" />\",\"picture 标签：\",\"<picture> <source srcset=\\\"homepage-person@desktop.png, homepage-person@desktop-2x.png 2x\\\" media=\\\"(min-width: 990px)\\\" /> <source srcset=\\\"homepage-person@tablet.png, homepage-person@tablet-2x.png 2x\\\" media=\\\"(min-width: 750px)\\\" /> <img srcset=\\\"homepage-person@mobile.png, homepage-person@mobile-2x.png 2x\\\" alt=\\\"Shopify Merchant, Corrine Anestopoulos\\\" /> </picture>\"]},\"197\":{\"h\":\"链接标签\",\"t\":[\"target 属性的可选值：\",\"_self：当前窗口打开，默认。\",\"_blank：新窗口打开。\",\"_parent：上层窗口打开，如果没有上层窗口，等价于当前窗口。\",\"_top：顶层窗口打开，如果当前窗口就是顶层窗口，等价于 _self。\",\"download 属性：表明当前链接用于下载，不能跨域，如果设置了属性值，属性值就是下载下来的文件名。\",\"<!-- 点击这个链接会打开一个虚拟网页，显示 Hello World!，然后会下载一个 hello.txt 的文件，文件内容就是 Hello World! --> <a href=\\\"data:,Hello%2C%20World!\\\" download=\\\"hello.txt\\\">点击</a>\",\"link 标签的 rel 属性表示外部资源与当前文档之间的关系，是必需属性，常用可选值：\",\"author：文档作者的链接。\",\"icon：图标。\",\"stylesheet：加载一张样式表。\",\"preload：要求提前下载并缓存指定资源，优先级较高。\",\"dns-prefetch：要求提前执行指定网址的 DNS 查询。\",\"preconnect：要求浏览器提前与指定服务器建立连接。\",\"prerender：要求浏览器提前渲染指定链接。\",\"script 标签的一些属性：\",\"async：异步执行，默认是同步。\",\"defer：不是立即执行 JavaScript 代码，而是页面解析完成后执行。\",\"crossorigin：跨域方式加载外部脚本。\",\"integrity：给出脚本哈希值，只有哈希值相符的外部脚本才会被执行。\"]},\"198\":{\"h\":\"列表标签\",\"t\":[\"ol：一个有序列表容器。通过 reversed 属性产生倒序的数字列表，通过 start 属性指定数字列表的起始编号。type 属性指定数字编号的样式： \",\"a：小写字母。\",\"A：大写字母。\",\"i：小写罗马数字。\",\"I：大写罗马数字。\",\"1：（数字1）整数。\",\"ul：无序列表容器\",\"li：列表项，通过 value 属性指定当前列表项的编号，后面列表项会从这个值开始编号。\",\"dl：表示一组术语。\",\"dt：定义术语名。\",\"dd：定义术语解释。\"]},\"199\":{\"h\":\"元数据\",\"t\":[\"元数据 标签：\",\"此标签用于设置或说明网页的元数据，必须放在 <head> 里面，一个 <meta> 标签就是一个元数据，网页可以有多个。\",\"元数据标签的五个属性：\",\"charset 属性：用来指定网页的编码方式。\",\"name 属性：表示元数据的名字。\",\"content 属性：表示元数据的值。与 name 属性共用可以指定一项元数据。\",\"http-equiv 属性：用来覆盖 HTTP 响应头的信息字段（结合 content）。\"]},\"200\":{\"h\":\"多媒体标签\",\"t\":[\"video：视频。\",\"audio：音频。\",\"track：指定视频的字幕，格式是 WebVTT（.vtt 文件）。 \",\"label 属性：播放器显示的字幕名称。\",\"kind 属性：字幕类型。\",\"srclang 属性：字幕的语言。\",\"default 属性：是否默认打开。\",\"source：用于 <picture>、<video>、<audio> 的内部，用于指定一项外部资源。\",\"embed：用于嵌入外部内容。\",\"object：插入外部资源，embed 的替代品。\"]},\"201\":{\"h\":\"其他\",\"t\":[\"dialog：对话框，通过 open 属性让对话框显示。\",\"details：折叠内容，open 属性默认打开折叠。\",\"summary：定制折叠内容的标题\"]},\"202\":{\"h\":\"语义结构\",\"t\":[\"常用标签：\",\"header：放在头部，header 里不能包含另一个 header 或 footer。\",\"footer：放在尾部，不能在内部包含另一个 footer 或 header。\",\"main：表示页面主体，一个页面只有一个，顶层标签，不能放在 header 等内部。\",\"article。\",\"aside：放置与网页、文章主要内容间接相关的部分。\",\"section：表示一个含有主题的独立部分，通常用来表示一个章节。\",\"nav：放置页面或文档的导航信息，内部通常是列表，往往放置在 header 里面。\",\"hgroup：用来放置多级标题，内部只能包含 h1~h6 标签。\"]},\"203\":{\"h\":\"表格\",\"t\":[\"所有的表格内容都要放在 table 标签中。\",\"caption：table中的第一个子元素，表示表格的标题。\",\"thead：表头。\",\"tbody：表体。\",\"tfoot：表尾。\",\"colgroup：包含一组列的定义。 \",\"col：用来定义表格的一列，没有结束标志。\",\"tr：表示表格的一行。\",\"th：标题单元格。 \",\"scope 属性：表示该单元格是一行的标题还是一列的标题。\",\"td：数据单元格。 \",\"colspan 属性：跨列。\",\"rowspan 属性：跨行。\",\"headers 属性：对应 th 标签中的 id 属性值。\"]},\"204\":{\"h\":\"文本标签\",\"t\":[\"wbr：表示一个可选的断行，如果一行宽度足够就不断行，否则在指定位置断行。\",\"strong、b：加粗。\",\"em、i：倾斜。\",\"sub：下标。\",\"sup：上标。\",\"var：表示代码或数学公式的变量。\",\"u：下划线。\",\"s：删除线。\",\"blockquote：表示引用。\",\"cite：表示引言出处或作者，斜体。\",\"q：表示引用，不会换行，默认斜体，自动添加半角双引号。\",\"code：表示计算机代码。表示多行必须放在 <pre> 内部。\",\"kbd：各种输入。\",\"samp：计算机程序输出内容的一个例子，默认以等宽字体显示。\",\"mark：突出显示内容。\",\"small：以小一号的字号显示。\",\"time：通过 datatime 属性指定内容的具体日期。\",\"data：类似 time，用于非时间场合。\",\"address：表示某人、某个组织的联系方式。\",\"abbr：表示一个缩写，通过 title 属性指定缩写的完整形式。\",\"ins：表示原始文档添加的内容。通过 cite 属性表示某个 URL 可以解释这次删改，datatime 属性表示删改发生的时间。\",\"del：表示删除的内容。通过 cite 属性表示某个 URL 可以解释这次删改，datatime 属性表示删改发生的时间。\",\"dfn：表示一个术语。通过 title 属性实现鼠标悬停提示。\",\"ruby：表示文字的语音注释。 \",\"rp：为不支持语音注释的浏览器提供的兼容方案。\",\"rt：放置语音注释。\",\"rb：划分文字单位，与语音注释一一对应。\",\"bdo：表示文字方向与网页主题内容方向不一致，通过 dir 属性指定具体方向。\",\"bdi：用于不确定文字方向的情况。\"]},\"205\":{\"h\":\"Basic\"},\"206\":{\"h\":\"起步\",\"t\":[\"安装 i18next：\",\"yarn add i18next\",\"然后定义国际化文件：\",\"// i18n/locales/zh_cn.js const translation = { click: '点击', }; export default translation;\",\"然后配置 i18next：\",\"import i18next from 'i18next'; import en from './locales/en_us'; import zh from './locales/zh_cn'; const config = { debug: true, resources: { zh: { translation: zh, }, en: { translation: en, }, }, lng: 'zh', }; i18next.init(config); export default i18next;\",\"最后可以调用 translate 方法：\",\"import { log } from 'console'; import i18n from '../i18n'; log(i18n.t('click'));\"]},\"207\":{\"h\":\"命名空间\",\"t\":[\"命名空间是 i18next 国际化框架中的一个功能，它允许将多个文件中的翻译分开。在较小的项目中，将所有内容放在一个文件中可能是合理的，当项目逐渐增大，多个模块之间有不同的、相同的国际化定义，这时就需要拆分。例如将通用的部分放置在一个 common 命名空间，其他模块放置在自己的命名空间中，例如：\",\"// i18n/locales/modules/member/zh_cn.js const translation = { member: '客户' }; export default translation; // i18n/locales/modules/account/zh_cn.js const translation = { account: '账户' }; export default translation; // i18n/locales/modules/index.js import member_zh from './member/zh_cn'; import member_en from './member/en_us'; import account_zh from './account/zh_cn'; import account_en from './account/en_us'; export default { zh: { member: member_zh, account: account_zh, }, en: { member: member_en, account: account_en, } } // i18n/index.js import i18next from \\\"i18next\\\"; import common_en from \\\"./locales/en_us\\\"; import common_zh from \\\"./locales/zh_cn\\\"; import modules from \\\"./locales/modules\\\"; const config = { debug: true, resources: { zh: { common: common_zh, ...modules.zh, }, en: { common: common_en, ...modules.en, }, }, lng: 'zh', defaultNS: 'common', ns: ['common', 'member', 'account'] }; i18next.init(config); export default i18next;\",\"现在就可以根据不同的命名空间来访问国际化文件了，以访问 account 模块为例，由于默认命名空间是 common，因此要访问 account 模块需要明确指定命名空间，可以有以下几种写法：\",\"import { log } from 'console'; import i18n from '../i18n'; log(i18n.t('account:account')); log(i18n.t('account', { ns: 'account' }));\"]},\"208\":{\"h\":\"嵌套、上下文与动态内容\",\"t\":[\"如果国际化中包含对象嵌套，可以通过 . 来访问：\",\"const translation = { click: '点击', a: { b: '嵌套', }, }; log(i18n.t('a.b'));\",\"对于一些场景，根据上下文的不同，国际化文本会有一些差异，可以使用上下文实现，例如：\",\"const translation = { number: '数字', number_odd: '奇数', number_even: '偶数', }; log(i18n.t('number', { context: 'even' }));\",\"默认情况下是使用 _ 分隔上下文和国际化键的。\",\"有时需要将动态内容嵌入国际化文本中，这时可以使用动态替换：\",\"const translation = { click: '点击', a: { b: '嵌套', }, count: '当前数字是 {{count}}', }; log(i18n.t('count', { count: 123 }));\",\"默认情况下，动态内容要使用双括号包裹起来，这个符号可以通过 i18next 初始化配置设置：\",\"const config: InitOptions = { // ... interpolation: { prefix: '<<', suffix: '>>' } };\",\"现在将国际化文件中的双大括号替换为双尖括号即可，除了动态参数标志字符可以配置外，命名空间等均可配置。\",\"也可以通过对象的形式访问动态数据：\",\"const translation = { click: '点击', author: { name: '当前作者是：<<author.name>>', age: '当前作者年龄是：<<author.age>>', }, }; log(i18n.t('author.name', { author: { name: 'PPG007' } }));\",\"国际化文件中也可以嵌套其他国际化文本：\",\"const translation = { click: '点击 {{age}}', author: { name: '当前作者是：{{author.name}}, $t(click, {\\\\\\\"author\\\\\\\": {{author.age}} })', age: '当前作者年龄是：{{author.age}}', }, };\"]},\"209\":{\"h\":\"TypeScript\",\"t\":[\"对于 TypeScript 项目，如果是编译为 CommonJS，可以参考下面的 TypeScript 配置：\",\"{ \\\"compilerOptions\\\": { \\\"strict\\\": true, \\\"module\\\": \\\"CommonJS\\\", \\\"target\\\": \\\"ES6\\\", \\\"outDir\\\": \\\"lib\\\", \\\"moduleResolution\\\": \\\"Node10\\\", \\\"esModuleInterop\\\": true, \\\"allowSyntheticDefaultImports\\\": true }, \\\"include\\\": [\\\"src\\\", \\\"@types\\\", \\\"i18n\\\"] }\",\"这种情况下，esModuleInterop 和 allowSyntheticDefaultImports 都要设置为 true。\",\"为了实现对国际化键的 TypeScript 支持，需要自定义类型声明：\",\"// @types/resources.ts import common from '../i18n/locales/zh_cn'; import modules from '../i18n/locales/modules'; const resources = { common, ...modules.zh, } as const; export default resources; export const defaultNS = 'common'; // @types/i18next.d.ts import resources, { defaultNS } from './resources'; declare module 'i18next' { interface CustomTypeOptions { resources: typeof resources; defaultNS: typeof defaultNS; } }\",\"提示\",\"需要注意 i18next 的版本号，某些版本对 TypeScript 的支持有问题，上面代码基于 23.7.6。\"]},\"210\":{\"h\":\"React\",\"t\":[\"对于使用 React 的情况，直接使用 i18next-react：\",\"yarn install react-i18next i18next\",\"配置与普通用法完全一致，只是需要使用插件来提供 React Hooks 的支持：\",\"i18n.use(I18nextBrowserLanguageDetector).use(initReactI18next).init(initOption);\",\"initReactI18next 用于提供 Hooks 支持，I18nextBrowserLanguageDetector 会根据系统设置判断使用什么语言，在使用这个插件的情况下配置项中就不要指定语言了，这个插件对应的语言键参照Wiki。\",\"然后在组件中：\",\"function App() { const { t } = useTranslation(); const [count, setCount] = useState(0); return ( <Fragment> <button onClick={() => { setCount(count + 1); }} > {t('countTip', { myCount: count })} </button> </Fragment> ); }\"]},\"211\":{\"h\":\"异步操作\"},\"212\":{\"h\":\"定时器\",\"t\":[\"setTimeout()：用来指定某个函数或某段代码，在多少毫秒之后执行，返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。接受两个参数，第一个参数是要推迟执行的函数名或一段代码，第二个参数是推迟执行的毫秒数；还可以传入更多参数，它们将依次传入推迟执行的函数。\",\"setInterval()：指定某个任务每隔一段时间就执行依次，无限次定时运行。\",\"clearTimeout()、clearInterval()：将 setTimeout() 和 setInterval() 的返回值传入这两个方法中就可以取消对应的计时器。\"]},\"213\":{\"h\":\"基础\",\"t\":[\"变量提升：JavaScript 在解析时，先解析代码，获取所有被声明的变量，然后一行一行的运行，但是只是将变量的声明提前了，如果变量声明时同时进行了赋值，那么赋值将依然在原位置运行，且必须是 var 关键字声明的变量才能进行变量提升。\",\"switch 表达式与 case 后面的表达式比较时采用的是严格相等运算符 ===。\",\"标签：标签用在语句前面，相当于定位符，使用 break 和 continue 后添加标签名可以调到指定位置。\"]},\"214\":{\"h\":\"内置对象\"},\"215\":{\"h\":\"Array 对象\",\"t\":[\"push()、pop()： \",\"push() 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。\",\"pop() 方法用于删除数组的最后一个元素并返回这个元素，对空数组会返回 undefined。\",\"shift()、unshift()： \",\"shift() 方法用于删除数组的第一个元素并返回该元素。\",\"unshift() 方法用于在数组的第一个位置添加元素并返回添加后的数组长度。\",\"join()：以指定参数作为分隔符，将所有数组成员连接成一个字符串返回，如果不提供参数，默认是逗号，如果数组成员是 undefined 或 null 或空位，会被转成空字符串。\",\"concat()：用于多个数组的合并，将新数组的成员添加到原数组成员的后部然后返回一个新数组，原数组不变，如果数组成员包括对象，concat 方法返回当前数组的一个浅拷贝。\",\"reverse()：颠倒排列数组元素，返回改变后的数组。\",\"slice()：用于提取目标数组的一部分，返回一个新数组，原数组不变，第一个参数为起始位置，包括在返回值中，第二个参数为终止位置，不包含在返回值中。\",\"splice()：删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素，第一个参数是删除的起始位置，第二个参数是被删除的元素个数，后面的所有参数都是要被插入数组的元素。第一个参数如果是负数表示从后面开始计算。\",\"sort()：对数组成员进行排序，默认按照字典顺序排序，排序后原数组会被改变，可以通过为 sort 传入一个函数自定义排序方式，这个函数有两个参数。\",\"map()：将数组的所有成员依次传入参数函数，把每一次的执行结果组成一个新数组返回，map 会想这个函数传递当前成员、当前位置、数组本身。\",\"foreach()：传入一个函数做参数，该函数接受三个参数：当前元素、当前位置、整个数组。foreach 方法可以接受第二个参数绑定参数函数的 this 变量；foreach 方法无法终端执行；foreach 方法会跳过数组的空位，但不会跳过 undefined 和 null。\",\"filter()：用于过滤数组成员，满足条件的成员组成一个新数组返回。接受一个函数做参数，函数有一个当前元素值的参数，filter 可以接受第二个参数用来绑定参数函数内部的 this 变量。\",\"some()、every()： \",\"都接受一个函数作为参数，所有数组成员依次执行该函数，这个函数接受三个参数：当前成员、当前位置、整个数组，返回一个布尔值。\",\"some 方法只要一个成员的返回值是 true，整体就返回 true。\",\"every 方法只要一个成员的返回值是 false，整体就返回 false。\",\"对于空数组，some 方法返回 false，every 方法返回 true。\",\"都可以接受第二个参数绑定函数内部的 this 变量。\",\"indexOf()、lastIndexOf()： \",\"indexOf 方法返回给定元素在数组中第一次出现的位置，如果没有就返回 -1，可以接受第二个参数表示搜索开始的位置。\",\"lastIndexOf 方法返回给定元素在数组中最后一次出现的位置，没有就返回 -1.\",\"这两个方法不能用来搜索 NaN 的位置。\",\"reduce()、reduceRight()： \",\"依次处理数组的每个成员最终累计为一个值，reduce 从左往右处理，reduceRight 从右往左处理。\",\"第一个参数是一个函数，该函数接受四个参数： \",\"累积变量：第一次执行时默认为数组第一个成员，以后每次执行都是上一轮的返回值。\",\"当前变量：第一次执行时，默认为数组的第二个成员，以后每次执行都是下一个成员。\",\"当前位置。\",\"原数组。\"]},\"216\":{\"h\":\"String 对象\",\"t\":[\"concat() 方法：用于连接两个字符串，返回一个新字符串，不改变原字符串。\",\"slice() 方法：从原字符串取出子字符串并返回。\",\"substring() 方法：从原字符串取出子字符串并返回。\",\"indexOf()：返回一个字符串在另一个字符串中第一次出现的位置。\",\"lastIndexOf()：从尾部开始匹配，第二个参数表示从该位置向前匹配。\",\"trim()：去除字符串两端的空格，返回一个新字符串。\",\"toLowerCase()、toUpperCase()：将一个字符串全部转为小写或大写。\",\"match()：确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串，如果没有找到匹配就返回 null。返回的数组还有 index 属性和 input 属性，分别表示匹配字符串开始的位置和原始字符串。\",\"search()、replace()：search 方法与 match 类似，返回值为匹配的第一个位置，如果没有匹配就返回 -1；replace 方法用于替换匹配的子字符串，一般情况下只替换第一个匹配。\",\"split()：分隔字符串。\"]},\"217\":{\"h\":\"Math 对象\",\"t\":[\"abs()：返回参数的绝对值。\",\"max()、min()：返回参数中的最大最小值。\",\"floor()、ceil()：返回小于等于参数值的最大整数、返回大于或等于参数值的最小整数。\",\"round()：四舍五入\",\"pow()：返回以第一个参数为底数、第二个参数为指数的幂运算值。\",\"sqrt()：返回参数的平方根。\",\"log()：返回以 e 为底的自然对数值。\",\"exp()：返回常数 e 的参数次方。\",\"random()：返回大于等于 0，小于 1 的一个伪随机数。\"]},\"218\":{\"h\":\"JSON 对象\",\"t\":[\"JSON.stringify()：将一个值转为 JSON 字符串。\",\"JSON.parse()：将 JSON 字符串转换为对应的值。\"]},\"219\":{\"h\":\"数据类型\"},\"220\":{\"h\":\"概述\",\"t\":[\"确定一个值是什么类型：\",\"typeof 运算符：\",\"console.log(typeof '123'); // string console.log(typeof 123); // number\",\"instanceof 运算符：\",\"instanceof 运算符返回一个布尔值，表示对象是否是某个构造函数的实例。运算符左边是实例对象，右边是构造函数，检查右边构造函数的原型对象是否在左边对象的原型链上，等价于 Constructor.prototype.isPrototypeOf(instance)。\",\"Object.prototype.toString 方法：\"]},\"221\":{\"h\":\"布尔值、null、undefined\",\"t\":[\"null 在转换为数值时会转换为 0，undefined 会转换为 NaN。\",\"布尔值转换规则：\",\"下面这些内容会被转为 false：\",\"undefined。\",\"null。\",\"false。\",\"0。\",\"NaN。\",\"\\\"\\\" 或 ''。\",\"注意：空数组、空对象都会转为 true。\"]},\"222\":{\"h\":\"数值\",\"t\":[\"JavaScript 中所有数字都是以 64 位浮点数形式储存，即使是整数。\",\"关于 NaN：\",\"NaN 不是独立的数据类型，仍然是 number。\",\"NaN 不等于任何值，包括自己。\",\"NaN 与任何数运算得到的都是NaN。\",\"一些与数值相关的全局方法：\",\"parseInt：将字符串转为整数。 \",\"如果字符串头部有空格，空格会被自动去除。\",\"如果参数不是字符串则会先转换为字符串。\",\"转换时是一个个字符依次转换，如果遇到不能转为数字的字符，就不在进行下去，只返回已转好的部分。\",\"parseInt 的返回值要么是一个十进制整数，要么是 NaN。\",\"parseInt 可以接受第二个参数，表示被解析的值的进制，返回对应的十进制数。\",\"parseFloat：将一个字符串转为浮点数。\",\"isNaN：用来判断一个值是否为 NaN。此方法只对数值有效，如果传入其他值会被先转成数值，字符串会被转为 NaN 导致结果为 true。对于对象和数组同样返回 true，但是如果是空数组或者是只有一个数值成员的数组会返回 false。\",\"isFinite：返回一个布尔值，表示某个值是否为正常的数值。\"]},\"223\":{\"h\":\"字符串\",\"t\":[\"Base64 转码：\",\"btoa()：任意值转为 Base64 编码。\",\"atob()：Base64 编码转为原来的值。\",\"非 ASCII 码字符转为 Base64 编码中间必须插入一个转码环节。通过 encodeURIComponent() 进行编码，通过 decodeURIComponent() 进行解码。\",\"在 Node.js 中无法使用 btoa-atob 两个方法，需要使用 Buffer.from(str).toString('base64') 将字符串转换为 Base64 编码，使用 Buffer.from(str,'base64').toString() 将 Base64 编码转为字符串。\"]},\"224\":{\"h\":\"对象\",\"t\":[\"定义对象时，键加不加引号都可以，最后都会被转成字符串，如果键名不符合标识名的条件，例如第一个字符是数字，或者含有空格或运算符而且也不是数字，必须加引号。\",\"如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，指向同一块内存，修改一个变量，会影响所有变量；如果取消某个变量对于原对象的引用，不会影响到另一个变量。\",\"查看一个对象本身的所有属性：Object.keys 方法。\",\"删除对象的属性：delete，删除成功返回 true，如果删除一个不存在的属性也是返回 true。\",\"属性是否存在：in，包含就返回 true，不包含就返回 false，但是这个运算符不会区分哪些属性是继承的，哪些是自己的。\",\"判断是否是自身的属性：hasOwnProperty。\",\"属性的遍历：使用 for...in 可以对属性进行遍历，它遍历的是对象所有可遍历的属性，会跳过不可遍历的属性。不仅遍历对象自身的属性，还遍历继承的属性，一般结合 hasOwnProperties 方法使用：\",\"for (const key in user) { if (user.hasOwnProperty(key)) { console.log(`键：${key}`); console.log(`值：${user[key]}`); } }\",\"with 语句：操作一个对象的多个属性时提供方便，如果在 with 语句块内部进行赋值操作，必须是对象已有的属性，否则会创造一个当前作用域的全局变量\"]},\"225\":{\"h\":\"函数\",\"t\":[\"函数的声明：\",\"function 命令。\",\"函数表达式：将函数匿名赋给一个变量，结尾要加分号。\",\"Function 构造函数。\",\"函数的属性和方法：\",\"name 属性：返回函数的名字，如果是通过变量赋值定义的匿名函数，那么返回变量名。\",\"length 属性：返回函数预期传入的参数个数。\",\"toString()：返回一个字符串，内容是函数的源码。\",\"参数的传递：如果参数是原始类型的值，传递方式是值传递，函数体内修改参数值不会影响到函数外部，如果参数是符合类型的值，传递方式是传址传递，传入的是原始值地址，如果函数体中修改对象、数组是整体替换那将不会影响原来的对象，因为只是修改了一个引用。\",\"如果存在重名的参数，取最后的值。如果一个函数有两个重名参数，传入两个参数时，通过变量名只能获取第二个参数，如果传一个参数，则会变成 undefined。\",\"arguments 对象：\",\"这个对象包含了函数运行时的所有参数，可以通过下标对参数进行访问，这个对象只能在函数体内部使用，在严格模式下，修改 arguments 对象不会影响到实际的函数参数，通过 length 属性可以判断调用时带几个参数。\",\"虽然这个对象看起来很像数组，但它是一个对象，数组专有的方法不能在这个对象上使用。\",\"闭包：能够读取其他函数内部变量的函数，由于 JavaScript 的特点，这个函数就是一个函数的子函数，闭包将函数内部和函数外部连接起来一座桥梁。闭包使得内部变量记住上一次调用时的运算结果，每一次调用都是在上一次调用的基础上进行计算。闭包还可以封装对象的私有属性和私有方法。\"]},\"226\":{\"h\":\"数组\",\"t\":[\"length 属性：如果认为扩大 length，那么新出来的位置上都是空的。\",\"通过 in 运算符检查某个键名是否存在。\",\"使用 delete 命令删除数组中的某个元素时，不会影响 length 属性，length 属性不过滤空位。\"]},\"227\":{\"h\":\"浏览器模型\",\"t\":[\"defer 属性：为了解决脚本文件下载阻塞网页渲染，在 script 元素加入 defer 属性，等到 DOM 加载生成后再执行脚本。\",\"async 属性：为 script 元素加入 async 属性，使用另一个进程下载脚本，下载时不会阻塞渲染。但是无法控制脚本的执行顺序，那个先下载结束就先执行。\",\"如果脚本之间没有依赖关系，就使用 async 属性，如果脚本之间存在依赖关系就使用 defer 属性。\"]},\"228\":{\"h\":\"事件\"},\"229\":{\"h\":\"EventTarget 接口\",\"t\":[\"addEventListener()：用于当前节点或对象上，添加一个事件监听器，这个函数接受三个参数： \",\"type：事件名称，大小写敏感。\",\"listener：监听函数，事件发生时会被调用。\",\"一个监听器配置对象，该对象有以下属性： \",\"capture：布尔值，设为 true 表示监听函数在捕获阶段就会触发，默认值为 false，在冒泡阶段触发。\",\"once：布尔值，如果设置为 true，表示监听函数执行一次就会自动移除，默认为 false。\",\"passive：布尔值，设为 true 时表示禁止监听函数调用 preventDefault() 方法，默认为 false。\",\"signal：属性值为一个 AbortSignal 对象，为监听器设置了一个信号通道，用来在需要时发出信号，移除监听函数。\",\"removeEventListener()：移除添加的事件监听函数，接受的参数和 addEventListener() 一致，但是不能取消匿名函数的监听。\",\"dispatchEvent()：在当前节点上触发指定事件，从而触发监听函数的执行，参数是一个 Event 对象实例。\"]},\"230\":{\"h\":\"事件模型\",\"t\":[\"事件的传播：\",\"一个事件发生后，会在子元素和父元素之间传播，这个传播分为三个阶段：\",\"从 window 对象传导到目标节点，称为捕获阶段。\",\"在目标节点上触发，称为目标阶段。\",\"从目标节点传导会 window 对象，称为冒泡阶段。\",\"事件的代理：\",\"由父节点的监听函数同一处理多个子元素的事件称为事件的代理。\",\"如果希望事件到某个节点为止不再传播，可以使用事件对象的 event.stopPropagation() 方法阻止事件的传播。\",\"如果想要彻底取消一个事件，使用 stopImmediatePropagation() 方法。\"]},\"231\":{\"h\":\"Event 对象\",\"t\":[\"Event 构造函数接受两个参数：\",\"第一个参数 type 是字符串表示事件的名称。\",\"第二个参数 options 是一个对象，表示事件对象的配置： \",\"bubbles：布尔值，可选，默认 false，表示事件对象是否冒泡。\",\"cancelable：布尔值，可选，默认 false，表示事件是否可以被取消，即 Event.preventDefault()。\",\"实例方法：\",\"Event.preventDefault()：取消浏览器对当前事件的默认行为，前提是事件对象的 cancelable 属性为 true，此方法知识取消事件对当前元素的默认影响，不会阻止事件的传播。\",\"Event.stopPropagation()：阻止事件继续传播，防止再触发定义在别的节点上的监听函数，不包括在当前节点上其他事件监听函数。\",\"Event.stopImmediatePropagation()：阻止同一个事件的其他监听函数被调用，不管监听函数定义在当前节点还是其他节点。\",\"Event.composedPath()：返回一个数组，成员是事件的最底层节点和依次冒泡所经过的所有上层节点。\"]},\"232\":{\"h\":\"语法\"},\"233\":{\"h\":\"数据类型的转换\",\"t\":[\"Number() 函数：将任意类型的值转化为数值。这个函数比 parseInt 更加严格，只要有一个字符无法转换为数值，就会返回 NaN。\",\"String() 函数：将任意类型的值转化成字符串。\",\"Boolean() 函数：将任意类型的值转为布尔值，只有 undefined、null、0、NaN和空字符串会被转换成 false，所有对象的转换结果都是 true，包括 false 的布尔对象。\"]},\"234\":{\"h\":\"错误处理机制\",\"t\":[\"Error 实例对象：所有抛出的错误都是这个构造函数的实例，Error() 构造函数接受一个参数表示错误提示。\",\"throw 语句：手动中断程序执行，抛出一个错误。throw 可以抛出任何类型的值。\"]},\"235\":{\"h\":\"console 对象与控制台\",\"t\":[\"console 对象的静态方法：\",\"console.log()。\",\"console.info()。\",\"console.debug()。\",\"console.warn()。\",\"console.error()。\"]},\"236\":{\"h\":\"面向对象编程\"},\"237\":{\"h\":\"实例对象与 new 命令\",\"t\":[\"new 命令的工作流程：\",\"创建一个空对象，作为要返回的对象实例。\",\"将这个空对象的原型指向构造函数的 prototype 属性。\",\"将这个空对象赋值给函数内部的 this 关键字。\",\"开始执行构造函数内部的代码。\",\"如果构造函数内部存在 return 语句，而且返回的是一个对象，new 命令会返回 return 指定的对象，否则就会不管 return 语句而返回 this。\",\"函数内部可以使用 new.target 属性，如果当前函数是 new 命令调用，这个属性会指向当前函数，否则返回 undefined。\",\"如果希望从现有对象作为模板创建新的实例对象可以使用 Object.create() 方法。\"]},\"238\":{\"h\":\"this 关键字\",\"t\":[\"this 就是属性或方法“当前”所在的对象。\",\"内层的 this 不指向外部，而是指向顶层对象。\",\"this 的几个使用场合：\",\"全局环境，指向顶层对象 window。\",\"构造函数，指的是实例对象。\",\"对象的方法，指的是方法运行时所在的对象\",\"注意点：\",\"避免多层 this，使用一个变量固定 this 的值然后内层函数调用这个变量。\",\"避免数组处理方法中的 this。\",\"避免回调函数中的 this。\",\"绑定 this 的方法：\",\"函数实例 call 方法，传入一个对象做参数，如果参数为空、null 或 undefined，则默认传入全局对象；如果参数是一个原始值则会转成包装对象，然后再传入 call 方法。call 方法可以接受多个参数，第一个参数做 this，后面的参数是函数调用时的参数。\",\"函数实例 apply 方法，第一个参数是 this 的指向，如果设为 null 或 undefined 等同于全局对象；第二个参数是一个数组，该数组的成员依次传入原函数。\",\"函数实例的 bind 方法，将函数体内的 this 绑定到某个对象然后返回一个新函数，参数就是所要绑定 this 的对象，可以接受更多参数绑定原函数的参数。\"]},\"239\":{\"h\":\"对象的继承\",\"t\":[\"原型对象 prototype：\",\"每个原型对象都有一个 prototype 属性，指向一个对象，对于构造函数，生成实例的时候，该属性会自动成为实例对象的原型。\",\"原型对象的作用就是定义所有实例对象共享的属性和方法，实例对象可以看作从原型对象衍生出来的子对象。\",\"修改原型对象时一般要同时修改 constructor 属性的指向，指向原来的构造函数。\",\"继承的步骤：\",\"在子类构造函数中调用父类的构造函数。\",\"function Dog(name) { Animal.call(this, name); }\",\"让子类的原型指向父类的原型\",\"Dog.prototype = Object.create(Animal.prototype); Dog.prototype.constructor = Dog;\",\"或者直接将子类的原型对象指向一个父类实例。\"]},\"240\":{\"h\":\"Object 对象的相关方法\",\"t\":[\"Object.getPrototypeOf()：返回参数对象的原型。\",\"Object.setPrototypeOf()：为参数对象设置原型，返回该参数对象，接受两个参数，第一个是现有对象，第二个是原型对象。\",\"Object.create()：通过一个现有的实例对象生成另一个实例对象。\",\"isPrototypeOf()：判断一个对象是否是参数对象的原型。\",\"__proto__：返回一个对象的原型，可读可写。\",\"getOwnPropertyNames()：返回一个数组，成员是参数对象本身的所有属性的键名，不包含继承的键名。\",\"hasOwnProperty()：返回一个布尔值，用于判断某个属性定义在对象自身还是定义在原型链上。\"]},\"241\":{\"h\":\"运算符\",\"t\":[\"void 运算符：执行一个表达式，不返回任何值，或者说返回 undefined。\",\"逗号运算符：用于对两个表达式求值，并返回另一个表达式的值。\"]},\"242\":{\"h\":\"上下文\",\"t\":[\"Koa Context 将 node 的 request 和 response 对象封装到单个对象中，为编写 Web 应用程序和 API 提供了许多有用的方法。\"]},\"243\":{\"h\":\"API\",\"t\":[\"ctx.req：\",\"Node 的 request 对象。\",\"ctx.res：\",\"Node 的 response 对象。\",\"绕过 koa 的 response 处理是不被支持的，应避免使用以下 node 属性：\",\"res.statusCode。\",\"res.writeHead()。\",\"res.write()。\",\"res.end()。\",\"ctx.request：\",\"Koa 的 Request 对象。\",\"ctx.response：\",\"Koa 的 Response 对象。\",\"ctx.state：\",\"推荐的命名空间，用于通过中间件传递信息，例如：\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { ctx.state.userId = '123'; await next(); }); app.use(ctx => { ctx.body = ctx.state.userId; }); app.listen(8080, '0.0.0.0');\",\"ctx.app：\",\"应用程序的实例引用：\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { ctx.app.emit('wuhu', new Date(), 1, '2'); await next(); }); app.use(ctx => { ctx.body = ctx.state.userId; }); app.addListener('wuhu', (a, b, c) => { console.log(a, b, c); }); app.listen(8080, '0.0.0.0');\",\"ctx.cookie：\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { console.log(ctx.cookies.get('token', { signed: true })); await next(); ctx.cookies.set('user', 'PPG007', { maxAge: Date.now(), expires: new Date(), path: '/', domain: 'github.io', secure: true, httpOnly: true, sameSite: true, signed: true, overwrite: true, }); }); app.use(ctx => { ctx.body = ctx.state.userId; });\",\"所有选项：\",\"maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数。\",\"expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期)。\",\"path: 一个字符串, 表示 cookie 的路径 (默认是/)。\",\"domain: 一个字符串, 指示 cookie 的域 (无默认值)。\",\"secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true)。\",\"httpOnly: 一个布尔值, 表示 cookie 是否仅通过 HTTP(S) 发送，, 且不提供给客户端 JavaScript (默认为 true)。\",\"sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 \\\"相同站点\\\" cookie (默认为 false). 可以设置为 'strict', 'lax', 'none', 或 true (映射为 'strict')。\",\"signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false). 如果为 true, 则还会发送另一个后缀为 .sig 的同名 cookie, 使用一个 27-byte url-safe base64 SHA1 值来表示针对第一个 Keygrip 键的 cookie-name=cookie-value 的哈希值. 此签名密钥用于检测下次接收 cookie 时的篡改。\",\"overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此Cookie 时从 Set-Cookie 消息头中过滤掉。\",\"ctx.throw：\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { ctx.throw(400, new Error('Invalid token')); await next(); }); app.use(ctx => { ctx.body = ctx.state.userId; }); app.listen(8080, '0.0.0.0');\"]},\"244\":{\"h\":\"错误处理\",\"t\":[\"使用 async 中间件方法意味着可以使用 try catch：\",\"app.use(async (ctx, next) => { try { await next(); } catch (e) { ctx.response.body = e?.message; ctx.response.status = 400; } }); app.use(ctx => { throw new Error('test'); });\"]},\"245\":{\"h\":\"错误事件\",\"t\":[\"错误事件侦听器可以用 app.on('error') 指定。如果未指定错误侦听器，则使用默认错误侦听器。错误侦听器接收所有中间件链返回的错误，如果一个错误被捕获并且不再抛出，它将不会被传递给错误侦听器。如果没有指定错误事件侦听器，那么将使用 app.onerror，除非 error.expose 为 true 或 app.silent 为 true 或 error.status 为 404，否则只简单记录错误。\",\"app.use(async (ctx, next) => { await next(); }); app.use(ctx => { throw new Error('test'); }); app.addListener('error', arg => { console.log(`exception: ${arg}`); });\"]},\"246\":{\"h\":\"中间件\",\"t\":[\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { console.log('start'); await next(); console.log('end'); }); app.use(ctx => { ctx.body = 'Hello World'; console.log('running'); }); app.listen(8080, '0.0.0.0');\",\"注意\",\"注意 use 方法的调用顺序。\"]},\"247\":{\"h\":\"多个中间件结合\",\"t\":[\"import compose = require('koa-compose'); async function random(ctx: koa.ParameterizedContext, next: koa.Next) { if ('/random' == ctx.path) { ctx.body = Math.floor(Math.random() * 10); } else { await next(); } } async function backwards(ctx: koa.ParameterizedContext, next: koa.Next) { if ('/backwards' == ctx.path) { ctx.body = 'sdrawkcab'; } else { await next(); } } async function pi(ctx: koa.ParameterizedContext, next: koa.Next) { if ('/pi' == ctx.path) { ctx.body = String(Math.PI); } else { await next(); } } const all = compose([random, backwards, pi]); app.use(all);\"]},\"248\":{\"h\":\"请求\"},\"249\":{\"h\":\"请求头相关\",\"t\":[\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { const token = ctx.request.header['x-access-token']; console.log(token); ctx.request.header['x-auth-user'] = 'PPG007'; await next(); }); app.use(ctx => { console.log(ctx.request.header['x-auth-user']); }); app.listen(8080, '0.0.0.0');\"]},\"250\":{\"h\":\"http 方法相关\",\"t\":[\"使用下面的代码可以实现 methodOverWrite\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { console.log(ctx.request.method); ctx.request.method = 'PUT'; await next(); }); app.use(ctx => { console.log(ctx.request.method); }); app.listen(8080, '0.0.0.0');\"]},\"251\":{\"h\":\"请求路径相关\",\"t\":[\"app.use(async (ctx, next) => { const req = ctx.request; console.log(req.url); console.log(req.originalUrl); console.log(req.href); console.log(req.origin); console.log(req.path); await next(); });\",\"提示\",\"可以通过修改 req.url 实现对 url 的重写。\"]},\"252\":{\"h\":\"参数相关\",\"t\":[\"获取 query 参数。\",\"import koa = require('koa'); const app = new koa(); app.use(async (ctx, next) => { const req = ctx.request; console.log(req.querystring); console.log(JSON.stringify(req.query)); // query get response console.log(req.search); // include ? prefix await next(); });\",\"获取 body 参数：\",\"引入一个中间件：\",\"yarn add koa-bodyparser yarn add -D @types/koa-bodyparser\",\"import koa = require('koa'); const app = new koa(); import bodyParser = require('koa-bodyparser'); app.use(bodyParser()); app.use(async (ctx, next) => { console.log(ctx.request.body); await next(); }); app.use(ctx => { console.log(ctx.request.method); }); app.listen(8080, '0.0.0.0');\",\"指定参数解析选项：\",\"app.use( bodyParser({ enableTypes: ['json'], encoding: 'utf-8', jsonLimit: '2mb', detectJSON: ctx => { // 指定什么情况下解析 JSON return /\\\\.json$/i.test(ctx.path); }, onerror(err, ctx) { ctx.throw(400, err); }, }) );\"]},\"253\":{\"h\":\"客户端信息相关\",\"t\":[\"app.use(ctx => { console.log(ctx.request.ip); });\"]},\"254\":{\"h\":\"响应\"},\"255\":{\"h\":\"响应头相关\",\"t\":[\"app.use(ctx => { ctx.response.set({ reqId: '123123', }); ctx.response.set('wuhu', 'wuhu'); ctx.response.append('wuhu2', 'wuhu2'); console.log(ctx.response.get('wuhu')); ctx.response.remove('wuhu'); });\"]},\"256\":{\"h\":\"响应状态相关\",\"t\":[\"app.use(ctx => { ctx.response.status = 200; // 通常情况下 message 与 status 关联 ctx.response.message = '1!5!'; });\"]},\"257\":{\"h\":\"响应体相关\",\"t\":[\"将响应体设置为以下之一：\",\"string 写入。\",\"Buffer 写入。\",\"Stream 管道。\",\"Object || Array JSON-字符串化。\",\"null 无内容响应。\",\"app.use(ctx => { ctx.response.status = 200; ctx.response.body = { user: 'PPG007', }; });\"]},\"258\":{\"h\":\"重定向\",\"t\":[\"app.use(ctx => { ctx.response.redirect('https://baidu.com'); // 重定向到 referrer // ctx.redirect('back'); });\"]},\"259\":{\"h\":\"路由\",\"t\":[\"Koa 本身不支持路由，这里使用 koa-router 中间件：\",\"yarn add koa-router yarn add -D @types/koa-router\"]},\"260\":{\"h\":\"嵌套路由\",\"t\":[\"import koa = require('koa'); const app = new koa(); import Router = require('koa-router'); const routerv1 = new Router({ prefix: '/v1', }); routerv1.get('/user', (ctx, next) => { ctx.response.body = 'user v1'; }); const routerv2 = new Router({ prefix: '/v2', }); routerv2.get('/user', (ctx, next) => { ctx.response.body = 'user v2'; }); const router = new Router(); router.use(routerv1.routes()).use(routerv2.routes()); app.use(router.routes()).use(router.allowedMethods()); app.listen(8080, '0.0.0.0');\"]},\"261\":{\"h\":\"同一路由多个中间件\",\"t\":[\"routerv1.get( '/user', async (ctx, next) => { console.log('user v1'); await next(); }, (ctx, next) => { ctx.response.body = 'user v1'; } );\"]},\"262\":{\"h\":\"url 参数\",\"t\":[\"routerv2.get('/user/:id', (ctx, next) => { // url: /v2/user/PPG007 console.log(ctx.params['id']); ctx.response.body = 'user v2'; });\",\"使用 router.param 方法：\",\"routerv2 .param('id', async (id, ctx, next) => { console.log(id); await next(); }) .get('/user/:id', (ctx, next) => { ctx.response.body = ctx.params['id']; });\"]},\"263\":{\"h\":\"起步\"},\"264\":{\"h\":\"安装\",\"t\":[\"yarn add koa yarn add -D @types/koa\"]},\"265\":{\"h\":\"Hello World\",\"t\":[\"import koa = require('koa'); const app = new koa(); app.use(ctx => { ctx.body = 'Hello World'; }); app.listen(8080, '0.0.0.0');\"]},\"266\":{\"h\":\"通过脚手架创建 react 应用\",\"t\":[\"通过以下命令可以创建一个 react 应用：\",\"npx create-react-app my-app\",\"npx 是一个包执行器工具，随着 npm 一起分发，从 npm5.2.0 版本之后 npx 已经被包含在 npm 中，npx 的主要用途：\",\"直接运行包：如果没有全局安装某个包（上面的 create-react-app），但是仍想运行这个包可以使用 npx。\",\"避免全局安装：npx 可以在没有全局安装工具的情况下运行这些工具。\",\"如果不希望使用 npx，那么可以先使用 npm install -g create-react-app 命令全局安装 react 脚手架，然后执行脚手架创建应用。\"]},\"267\":{\"h\":\"配置 TypeScript\",\"t\":[\"首先要安装 react 类型声明：\",\"npm install @types/react @types/react-dom\",\"然后配置 tsconfig.json 文件，以下是一个示例：\",\"{ \\\"compilerOptions\\\": { \\\"module\\\": \\\"CommonJS\\\", \\\"target\\\": \\\"ES6\\\", \\\"lib\\\": [\\\"DOM\\\", \\\"DOM.Iterable\\\", \\\"ESNext\\\"], \\\"allowJs\\\": true, \\\"noEmit\\\": true, \\\"jsx\\\": \\\"preserve\\\", \\\"allowUnreachableCode\\\": false }, \\\"include\\\": [\\\"src/**/*.ts\\\", \\\"src/**/*.tsx\\\"], \\\"exclude\\\": [\\\"node_modules\\\"] }\",\"注意\",\"lib 必须要包含 DOM，如果没指定 lib 选项，那么默认情况下会包含 DOM。\",\"jsx 必须是一个有效值，通常使用 preserve，其他选项参考：JSX。\",\"其中几个主要设置：\",\"noEmit：不输出编译后的 JavaScript 代码，仅进行 TypeScript 类型检查。\",\"allowJs：有的库可能是 JavaScript 写的，此选项允许编译时包含 JavaScript 代码。\",\"allowUnreachableCode： 是否禁止不可达代码。例如 return 写在前面则后面的代码为不可达。\",\"最后将脚手架创建的 js 文件改写为 ts 文件，如果文件中有 JSX，那么文件后缀名应该是 .tsx。\"]},\"268\":{\"h\":\"样式模块化\",\"t\":[\"为了防止相同选择器的 css 定义重复导致样式混乱，可以使用样式模块化来实现类似 vue scoped style 的效果。样式模块化通过 CSS Modules 实现，如果是使用 create-react-app 创建的应用，CSS Modules 已经内置。\",\"模块化的样式应该遵循 xxx.module.css 的规则（webpack.config.js 中的配置），然后在要使用的组件文件中引用：\",\"import styles from './app.module.less'; function Title() { return <Tag className={styles.text}>123</Tag>; }\",\"如果使用的 TypeScript，那么需要安装 CSS Modules 的类型声明：yarn add -D @types/css-modules。\"]},\"269\":{\"h\":\"启用 less\",\"t\":[\"默认情况下 create-react-app 创建的应用不支持 less，需要手动开启对 less 的支持。\",\"首先安装 less 相关依赖：\",\"yarn add less less-loader\",\"然后要修改默认的 webpack 配置，使得能够处理 less 文件，首先执行下面的命令，此命令将所有的配置暴露出来，交给开发者维护，此操作不可逆：\",\"yarn eject\",\"运行之后，修改 config 目录下的 webpack.config.js，首先要定义 less 文件的匹配规则：\",\"const lessRegex = /\\\\.less$/; const lessModuleRegex = /\\\\.module\\\\.less$/;\",\"然后增加 less 的解析配置，在默认的 sass 解析配置之后增加下面的配置：\",\"// add less loader { test: lessRegex, exclude: lessModuleRegex, use: getStyleLoaders( { importLoaders: 3, sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment, modules: { mode: 'local', getLocalIdent: getCSSModuleLocalIdent, }, }, 'less-loader' ), sideEffects: true }, { test: lessModuleRegex, use: getStyleLoaders( { importLoaders: 3, sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment, modules: { mode: 'local', getLocalIdent: getCSSModuleLocalIdent, }, }, 'less-loader' ), sideEffects: true },\",\"关于上面的几个配置项：\",\"importLoaders：此选项表示在处理 css @import 之前要应用于 @import 的资源的处理器数量，这里设置为 3，因为需要 less-loader 的处理同时可能还有其他的处理器（见 getStyleLoaders 方法）。\",\"mode：此选项决定如何应用 CSS Modules，有以下取值：\",\"local：默认值，类名会被局部化，引用后实际的类名将会有一个随机后缀。\",\"global：所有类名都不会被局部化，但是又允许像 CSS Modules 那样引用。\",\"pure：类似 local，但是仅局部化纯类名，不会局部化使用了其他选择器的类名。\",\"globalAndLocal、localAndGlobal：允许在同一个文件中使用局部化和全局类名，使用 :global 和 :local 伪选择器来明确哪些类名被局部化，哪些保持全局化。\",\".localClassName { /* this will be localized */ } :global .globalClassName { /* this will remain as \\\"globalClassName\\\" */ }\"]},\"270\":{\"h\":\"配置代理\",\"t\":[\"为了解决开发时请求接口的跨域问题，需要给应用配置一个反向代理。\",\"修改 package.json：\",\"{ \\\"proxy\\\": \\\"http://127.0.0.1:8888\\\" }\"]},\"271\":{\"h\":\"组件\"},\"272\":{\"h\":\"函数式组件\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>hello</title> </head> <body> <div id=\\\"test\\\"></div> </body> <script type=\\\"text/javascript\\\" src=\\\"../js/react.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/react-dom.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/babel.min.js\\\"></script> <script type=\\\"text/babel\\\"> function Demo() { return <h2>component</h2>; } ReactDOM.render(<Demo />, document.getElementById('test')); </script> </html>\",\"函数式组件是一个返回 DOM 的函数，首字母要大写以表示这是一个组件。\",\"嵌套函数式组件：\",\"<script type=\\\"text/babel\\\"> const languages = ['Java', 'Go', 'JavaScript', 'PHP']; function ReaderLi(languages = []) { return languages.map((language, index) => <li key={index}>{language}</li>); } function Demo() { return <ul>{ReaderLi(languages)}</ul>; } ReactDOM.render(<Demo />, document.getElementById('test')); </script>\"]},\"273\":{\"h\":\"类组件\",\"t\":[\"除了使用函数定义组件，也可以使用类声明组件：\",\"<script type=\\\"text/babel\\\"> const languages = ['Java', 'Go', 'JavaScript', 'PHP']; class ListComponent extends React.Component { render() { return <ul>{this.getListItems()}</ul>; } getListItems() { return this.props.data.map((d, index) => <li key={index}>{d}</li>); } } ReactDOM.render(<ListComponent data={languages} />, document.getElementById('test')); </script>\"]},\"274\":{\"h\":\"响应事件\",\"t\":[\"React 中标签属性都使用驼峰命名，事件处理同样如此。\",\"<script type=\\\"text/babel\\\"> function MyButton() { return <button onClick={clickHandler}>click</button>; } function clickHandler() { console.log('click'); } ReactDOM.render(<MyButton />, document.getElementById('test')); </script>\",\"还可以使用内联事件处理器：\",\"<script type=\\\"text/babel\\\"> function MyButton() { return ( <button onClick={() => { console.log('click'); }} > click </button> ); } ReactDOM.render(<MyButton />, document.getElementById('test')); </script>\",\"事件处理函数会捕获子组件的事件，也就是冒泡，如果想要阻止事件向上传播，可以调用 stopPropagation() 方法：\",\"<script type=\\\"text/babel\\\"> const dom = ( <> <div style={{ width: '600px', height: '600px', backgroundColor: 'blue' }} onClick={() => { console.log('click out div'); }} > <div style={{ width: '300px', height: '300px', backgroundColor: 'yellow' }} onClick={event => { event.stopPropagation(); console.log('click inner div'); }} ></div> </div> </> ); ReactDOM.render(dom, document.getElementById('test')); </script>\",\"部分情况下，可能希望能够捕获子组件的全部事件，即使子组件阻止了冒泡，那么可以通过在事件名称末尾加入 Capture 来实现：\",\"<script type=\\\"text/babel\\\"> const dom = ( <> <div style={{ width: '600px', height: '600px', backgroundColor: 'blue' }} onClickCapture={() => { console.log('click out div'); }} > <div style={{ width: '300px', height: '300px', backgroundColor: 'yellow' }} onClick={event => { event.stopPropagation(); console.log('click inner div'); }} ></div> </div> </> ); ReactDOM.render(dom, document.getElementById('test')); </script>\",\"事件的处理顺序\",\"向下传播（从外到内）调用所有的 onXXXCapture 函数。\",\"调用实际发生事件的组件的 onXXX 函数。\",\"向上传播，调用所有的 onXXX 函数。\",\"有的事件具有默认的行为，例如表单 form 的 submit 事件会触发表单的提交事件导致重新加载整个页面，可以通过 preventDefault() 方法阻止默认行为：\",\"<script type=\\\"text/babel\\\"> const dom = ( <> <form onSubmit={event => { event.preventDefault(); console.log('submit'); }} > <button>submit</button> </form> </> ); ReactDOM.render(dom, document.getElementById('test')); </script>\"]},\"275\":{\"h\":\"函数柯里化\",\"t\":[\"柯里化是将一个接收多个参数的函数转为一个接收单一参数但是返回值是一个函数，且这个返回的函数接收下一个参数并再次返回函数，一直向下，例如：\",\"// 普通函数 fn(1, 2, 3, 4); // 柯里化后 fn(1)(2)(3)(4);\",\"下面的函数可以将一个函数柯里化：\",\"function curry(fn) { return function curried(...args) { if (args.length >= fn.length) { return fn.apply(this, args); } else { return function (...args2) { return curried.apply(this, args.concat(args2)); }; } }; }\",\"然后可以用如下方式调用：\",\"function sum(a, b) { return a + b; } const ss = curry(sum); console.log(ss(1)(2));\",\"当然也可以反柯里化：\",\"function uncurry(fn) { return (...args) => { let result = fn; args.forEach(arg => { result = result(arg); }); return result; }; } console.log(uncurry(curry(sum))(1, 2));\",\"react 中，事件处理函数应当传入一个函数，但是默认情况下这个回调函数只会收到一个 event 对象作为入参，如果希望传递自定义参数，那么可以使用函数柯里化。\",\"function Demo() { const languages = ['Java', 'JavaScript', 'Go']; const clickHandler = (language, event) => { console.log(language); console.log(event.target); }; return ( <ul> {languages.map(language => { return ( <li key={language}> <button onClick={curry(clickHandler)(language)}>{language}</button> </li> ); })} </ul> ); }\",\"在上面的例子中，有一个按钮列表，每个按钮都有点击事件处理函数，点击每个按钮要输出不同的内容，将普通函数柯里化之后传入 onClick 属性，原函数接收两个参数，由于 onClick 里只传了一个入参，所以函数不会发生调用，而是实际发生事件时才会调用。\"]},\"276\":{\"h\":\"Context\",\"t\":[\"按照之前的内容，如果在一个组件里想向子组件传递一些数据，那么可以使用 props，但是如果要连续多级传递数据那么就要连续传递 props，这回导致代码冗长，Context 允许父组件向下层的任何深度的任何组件传递信息，而无需 props 显式传递。\"]},\"277\":{\"h\":\"使用 Context\",\"t\":[\"现在以一个传递 memberId 的场景为例，多级传递 Context。\"]},\"278\":{\"h\":\"创建 Context\",\"t\":[\"export const MemberIdContext = createContext<string>('');\"]},\"279\":{\"h\":\"使用 Context\",\"t\":[\"创建 Context 之后，使用 useContext 使用 Context：\",\"// Son.tsx import { FC, useContext } from 'react'; import { GrandSon, MemberIdContext } from './index'; const Son: FC = () => { const memberId = useContext(MemberIdContext); return ( <> <h2>{memberId}</h2> <GrandSon /> </> ); }; export { Son }; // GrandSon.tsx import { FC, Fragment, useContext } from 'react'; import { MemberIdContext } from './index'; const GrandSon: FC = () => { const memberId = useContext(MemberIdContext); return ( <Fragment> <h3>{memberId}</h3> </Fragment> ); }; export { GrandSon };\",\"除了通过 useContext 使用 Context 之外，也可以使用 <Consumer>/<Consumer> 标签将要使用 Context 的标签包裹起来：\",\"import { FC } from 'react'; import { GrandSon, MemberIdContext } from './index'; const Son: FC = () => { return ( <> <MemberIdContext.Consumer>{value => <h2>{value}</h2>}</MemberIdContext.Consumer> <GrandSon /> </> ); }; export { Son };\",\"提示\",\"老版本 React 函数式组件可以通过第二个入参接收 Context，但是新版本建议使用 Hooks 或者 Consumer 标签。\"]},\"280\":{\"h\":\"提供 Context\",\"t\":[\"在最外层的组件中使用 <Provider></Provider> 标签将希望透传 Context 的标签包裹起来，这样在子组件中使用 Context 时，React 会将距离子组件最近的 <Provider></Provider> 标签传递的值传给子组件：\",\"// App.tsx import { FC, useEffect, useState } from 'react'; import { MemberIdContext, Son } from './components'; const MyApp: FC = () => { const [memberId, setMemberId] = useState(''); return ( <> <MemberIdContext.Provider value={memberId}> <Son /> </MemberIdContext.Provider> <button onClick={() => { setMemberId(memberId + '1'); }} > click </button> </> ); }; export { MyApp };\"]},\"281\":{\"h\":\"Context 的注意点\",\"t\":[\"在使用 Context 之前先考虑下面几种替代方案：\",\"从传递 props 开始：如果组件不是很复杂，可以通过 props 向下传递，这可以让数据的流动更加清晰。\",\"抽象组件并将 JSX 作为 children prop 传递。如果要将 props 经过多个不使用它的组件向下传递，那么可以在这些中间组件中接收 props.children 并在对应位置渲染，然后直接使用这些中间组件包裹要使用 props 的组件。\"]},\"282\":{\"h\":\"Context 的使用场景\",\"t\":[\"主题：例如修改外观的黑暗模式。\",\"当前账户：例如可以通过 Context 传递当前登录的用户的信息。\",\"路由。\",\"状态管理。\"]},\"283\":{\"h\":\"同时使用 Reducer 和 Context\",\"t\":[\"现在回到 Reducer 中的待办事项的例子，dispatch 方法仅在顶级组件 App 中可用，要让 TodoList 组件中可以调用那么必须要通过 props 显式传递状态和事件处理器。如果有很多组件、很多事件处理器和状态，那么传递所有的状态和事件处理器会非常麻烦，如果将状态和 dispatch 都通过 Context 传递，那么所有的子组件都能获取到状态和 dispatch 函数。下面改造此前的 Reducer 中的 TodoList 的例子。\",\"第一步仍然是创建 Context：\",\"export interface action extends Todo { type: 'add' | 'change' | 'delete'; } type TodosReducer = { todos?: Array<Todo>; dispatch?: Dispatch<action>; }; export const TodosContext = createContext<TodosReducer>({});\",\"然后在 TodoList 中改用 Context：\",\"const TodoList: FC = () => { const [editingTodo, setEditingTodo] = useState<Todo>(() => ({ id: '', content: '' })); const ctx = useContext(TodosContext); const todos = ctx.todos ? ctx.todos : []; const dispatch = ctx.dispatch; const isEditing = (todo: Todo) => editingTodo.id === todo.id; return ( <Fragment> <ul> {todos ? todos.map(todo => { return ( <li key={todo.id}> {isEditing(todo) ? ( <input value={editingTodo.content} onChange={e => { setEditingTodo({ ...editingTodo, content: e.target.value }); }} /> ) : ( todo.content )} <button onClick={() => { if (isEditing(todo) && dispatch) { dispatch({ type: 'change', ...editingTodo, }); setEditingTodo({ id: '', content: '' }); return; } setEditingTodo(todo); }} > {isEditing(todo) ? 'save' : 'edit'} </button> <button onClick={() => { if (dispatch) { dispatch({ type: 'delete', id: todo.id, content: '', }); } }} > delete </button> </li> ); }) : undefined} </ul> </Fragment> ); };\",\"最后从父组件中传入 Context：\",\"const App: FC = () => { const [todos, dispatch] = useReducer<Reducer<Array<Todo>, action>>(tasksReducer, []); const [value, setValue] = useState(''); const addHandler = (e: KeyboardEvent) => { if (e.key === 'Enter') { dispatch({ type: 'add', id: '', content: value, }); setValue(''); } }; return ( <TodosContext.Provider value={{ todos, dispatch }}> <input value={value} onChange={e => { setValue(e.target.value); }} onKeyDown={addHandler} /> <TodoList /> </TodosContext.Provider> ); };\"]},\"284\":{\"h\":\"Effect\",\"t\":[\"函数式组件不能使用类组件中的生命周期，但是生命周期的效果可以通过 Effect 实现（但是 Effect 不是生命周期），Effect 的定义就是“渲染引起的副作用”。\"]},\"285\":{\"h\":\"编写 Effect\",\"t\":[\"编写 Effect 的步骤：\",\"声明 Effect。默认情况下，Effect 会在每次渲染后都执行。\",\"指定 Effect 依赖。大多数 Effect 应该按需执行，而不是每次渲染后都被执行。\",\"必要时添加清理函数。有时 Effect 需要指定如何停止、撤销或者清除它的效果。\"]},\"286\":{\"h\":\"声明 Effect\",\"t\":[\"function MyVideo(props) { const ref = React.useRef(null); if (props.isPlaying) { ref.current.play(); } else { ref.current.pause(); } return ( <> <video src={props.src} ref={ref} /> </> ); } function Player(props) { const [isPlaying, setIsPlaying] = React.useState(false); return ( <div> <MyVideo isPlaying={isPlaying} src={props.src} /> <br /> <button onClick={() => { setIsPlaying(!isPlaying); }} > {isPlaying ? 'pause' : 'play'} </button> </div> ); }\",\"在上面的代码中，定义了两个组件，现在希望通过点击按钮来控制 video 的播放和暂停，但是不能直接在函数中通过 ref 操作 video 标签的 play() 和 pause() 方法，因为渲染过程中不能操作 DOM，而且在第一次渲染时还没有 DOM。\",\"可以使用 Effect 将控制 video 的方法分离到渲染逻辑之外，让 React 先渲染好界面再调用 Effect 的内容：\",\"function MyVideo(props) { const ref = React.useRef(null); React.useEffect(() => { if (props.isPlaying) { ref.current.play(); } else { ref.current.pause(); } }); return ( <> <video src={props.src} ref={ref} style={{ height: '900px', width: '500px' }} /> </> ); }\",\"当这个组件被渲染时，React 会首先刷新屏幕，确保元素出现在了 DOM 中，然后 React 执行 Effect，Effect 中根据 isPlaying 的值进行操作。\",\"注意\",\"由于渲染会触发 Effect，所以 Effect 中再调用 setState 会导致死循环。\"]},\"287\":{\"h\":\"指定 Effect 依赖\",\"t\":[\"一般情况下，Effect 将在每次渲染时都被调用，但是很多时候并不需要执行。例如上面的组件中，如果给 Player 增加一个 input 并绑定一个 state，那么每次修改这个 input 的内容都会导致 effect 被执行。\",\"function Player(props) { const [isPlaying, setIsPlaying] = React.useState(false); const [value, setValue] = React.useState(''); return ( <div> <MyVideo isPlaying={isPlaying} src={props.src} /> <br /> <button onClick={() => { setIsPlaying(!isPlaying); }} > {isPlaying ? 'pause' : 'play'} </button> <br /> <input value={value} onChange={event => { setValue(event.target.value); }} /> </div> ); }\",\"为了解决这个问题，useEffect 接收第二个参数，这个参数是一个数组，内容是在 Effect 中依赖的变量，每次渲染时进行判断，如果这个数组内的变量的值没有发生改变，那么将不会执行 Effect：\",\"function MyVideo(props) { const ref = React.useRef(null); React.useEffect(() => { console.log('effect'); if (props.isPlaying) { ref.current.play(); } else { ref.current.pause(); } }, [props.isPlaying]); return ( <> <video src={props.src} ref={ref} style={{ height: '900px', width: '500px' }} /> </> ); }\",\"提示\",\"React 是通过 Object.is() 方法进行比较的。\",\"注意\",\"不传依赖数组和传递空依赖数组是不一样的：\",\"useEffect(() => { // 这里的代码会在每次渲染后执行 }); useEffect(() => { // 这里的代码只会在组件挂载后执行 }, []);\"]},\"288\":{\"h\":\"添加清理函数\",\"t\":[\"在一些场景中，例如在线聊天，需要在组件挂载时连接服务器并在卸载时断开连接。Effect 可以返回一个函数，每次重新执行 Effect 之前 React 都会调用清理函数，组件被卸载时也会调用清理函数。\",\"React.useEffect(() => { console.log('effect'); return () => { console.log('GG'); }; });\",\"关于如何限制清理函数只在组件卸载时被调用见后文。\"]},\"289\":{\"h\":\"从 Effect 中读取 props 和 state 但是不响应\",\"t\":[\"假设 Effect 中需要上报一个客户事件，这个事件需要上报一些事件属性，其中有的事件属性是 props 或者 state 中的内容，因此 Effect 的依赖项里必须要声明这些字段，但是事件是否上报可能只取决于其中一个字段，也就是说需要只对部分字段做出响应，可以通过 useEffectEvent 来声明 Effect 事件。\",\"TODO: 非正式特性。\"]},\"290\":{\"h\":\"处理开发环境两次调用 Effect 的问题\",\"t\":[\"在开发环境中，React 重复挂载组件会调用两次 Effect，Effect 中可能会有不能连续调用两次的 API，例如 modal 标签的 showModal 方法，这种情况下，可以通过返回一个清理函数解决，这个清理函数将状态重置回调用前从而允许下次的调用：\",\"class MockAPI { isClosed = true; call() { if (this.isClosed) { this.isClosed = false; return; } else { throw new Error('error status'); } } close() { this.isClosed = true; } } const api = new MockAPI(); function MyVideo(props) { const ref = React.useRef(null); React.useEffect(() => { console.log('effect'); if (props.isPlaying) { ref.current.play(); } else { ref.current.pause(); } api.call(); return () => api.close(); }, [props.isPlaying]); return ( <> <video src={props.src} ref={ref} style={{ height: '900px', width: '500px' }} /> </> ); }\",\"提示\",\"与上面的例子类似，为了解决开发环境中 Effect 执行两次的问题，应当遵循下面的规范：\",\"如果 Effect 中订阅了事件（例如 addEventListener），那么清理函数中应该退订事件。\",\"如果 Effect 中获取了数据，那么清理函数要么终止上次的获取操作，要么忽略第二次的结果。终止操作可以通过第三方库 api 实现（如 axios）；忽略结果可以定义一个局部变量，在清理函数中修改此变量的值，并在发出请求前确认此变量。\",\"…………\",\"总之，Effect 中的逻辑需要考虑重复调用产生的影响和处理。\"]},\"291\":{\"h\":\"Hello World\"},\"292\":{\"h\":\"引入相关依赖\",\"t\":[\"在 CDN 上下载 react.development.js、react-dom.development.js、babel.min.js 这三个文件，因为是在浏览器环境，所以要下载 URL 中包含 umd 的文件，否则在浏览器中会因为 process.env 的调用报错。\"]},\"293\":{\"h\":\"第一个 react\",\"t\":[\"编写下面的 HTML：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>hello</title> </head> <body> <div id=\\\"test\\\"></div> </body> <script type=\\\"text/javascript\\\" src=\\\"../js/react.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/react-dom.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/babel.min.js\\\"></script> <script type=\\\"text/babel\\\"> const dom = <h1>Hello World</h1>; ReactDOM.render(dom, document.querySelector('#test')); </script> </html>\",\"提示\",\"注意渲染逻辑中 script 标签的 type 属性需要是 \\\"text/babel\\\"，因为浏览器不支持 JSX(Javascript XML)，需要通过 babel 翻译。\",\"这样就创建出了一个 react 应用。\"]},\"294\":{\"h\":\"不使用 JSX\",\"t\":[\"也可以只使用 JavaScript 语法创建 react 应用：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>hello</title> </head> <body> <div id=\\\"test\\\"></div> </body> <script type=\\\"text/javascript\\\" src=\\\"../js/react.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/react-dom.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/babel.min.js\\\"></script> <script type=\\\"text/javascript\\\"> const dom = React.createElement( 'h1', { id: '1' }, React.createElement('span', {}, 'Hello World') ); ReactDOM.render(dom, document.querySelector('#test')); </script> </html>\",\"通过 React.createElement 方法可以创建虚拟 DOM，第一个参数是标签名，第二个参数是个对象，表示为这个标签设置的属性值，第三个标签表示这个虚拟 DOM 中的内容，上面的程序会创建一个 <h1 id=\\\"1\\\"><span>Hello World</span></h1> 的虚拟 DOM。\"]},\"295\":{\"h\":\"Hooks\"},\"296\":{\"h\":\"自定义 Hook\",\"t\":[\"之前的 useState、useReduce 等以 use 开头的方法都是 React Hook，React Hook 能够提取重复逻辑降低耦合度，但是很多情况下 React 内置的 Hooks 无法满足需求，这时就可以自定义 Hook。\",\"要自定义 Hook 就要遵循 Hook 的命名公约：Hook 的名称必须以 use 开头，然后紧跟一个大写字母，就像 useState 这样，Hook 可以返回任意值。\"]},\"297\":{\"h\":\"抽取自定义 Hook\",\"t\":[\"现在有两个组件 Foo 和 Bar，当前登录用户信息保存在 localStorage 中，如果希望在两个组件都能获取到用户信息，那么可以将从 localStorage 中读取的逻辑抽取为一个 Hook。\",\"export interface user { id: string; name: string; } const useCurrentUser = () => { const str = localStorage.getItem('user'); if (str) { return JSON.parse(str) as user; } return null; }; export default useCurrentUser;\",\"然后在组件中引用：\",\"const Foo: FC = () => { const user = useCurrentUser(); return ( <p> {user ? ( <span> {user.id} - {user.name} </span> ) : ( 'null' )} </p> ); };\",\"提示\",\"Hook 共享的只是状态逻辑而不是状态本身，对 Hook 的每个调用完全独立。\"]},\"298\":{\"h\":\"自定义 Hook 的注意点\",\"t\":[\"可以将响应值从一个 Hook 传递到另一个 Hook，并且它们会保持最新。\",\"每次组件重新渲染时，所有的 Hook 会重新运行。\",\"自定义 Hook 应该是具体的、高级定制的，保持纯粹。\"]},\"299\":{\"h\":\"一些 React 内置的 Hook\"},\"300\":{\"h\":\"useId\",\"t\":[\"这个 Hook 会返回一个唯一的字符串 id：\",\"console.log(useId(), useId(), useId());\",\"如果一个页面中有多个 React 实例，那么可以在 createRoot 方法中传入 identifierPrefix 来为这个 React 应用的 useId 的结果设置前缀：\",\"ReactDOM.createRoot(document.getElementById('root')!, { identifierPrefix: 'PPG007', }).render( <React.StrictMode> <App /> </React.StrictMode> );\"]},\"301\":{\"h\":\"useMemo\",\"t\":[\"这个 Hook 接收两个参数，第一个参数应该是一个没有任何参数的纯函数，并且可以返回任意类型，第二个参数是依赖项数组。React 会在首次渲染时调用这个函数，在之后的渲染中，如果依赖项数组没有发生变化，那么 React 将直接返回相同的值，否则会再次调用这个函数并缓存。\",\"const memoTest = () => { console.log('memo test'); }; function App() { const [a, setA] = useState(0); const [b, setB] = useState(0); useMemo(memoTest, [b]); return ( <> <span>{a}</span> <button onClick={() => { setA(a + 1); }} > add </button> <br /> <span>{b}</span> <button onClick={() => { setB(b + 1); }} > add </button> </> ); }\",\"现在有这样一个组件，接收一个整数数组并渲染出来，但是很慢：\",\"const Count: FC<{ count: Array<number> }> = ({ count }) => { console.log('rendering count'); const start = performance.now(); while (performance.now() - start < 1000) { continue; } return <span>{count[0]}</span>; }; // App.tsx function App() { const [a, setA] = useState(0); return ( <> <Count count={[1]} /> <button onClick={() => { setA(a + 1); }} > add </button> </> ); }\",\"在上面的例子中，通过改变 state 可以实现重新渲染，向 Count 组件传入的内容始终相同，但是由于 Object.is 比较数组和对象时比较的是引用地址，因此每次相当于传入一个新数组，这会导致 Count 组件的重新渲染。你可能会想到 React 提供的 memo() 方法，此方法接收两个参数，第一个参数是一个组件，第二个参数是一个函数，是可选的，这个函数接收两个参数，prevProps 与 newProps，这个函数应当返回布尔值，当返回为 true 时 memo 中的组件不会重新渲染，这相当于是缓存。但是对于上面的例子来说，使用 memo() 方法并不会有效，原因就是每次传入的数组都是不一样的，这时，可以使用 useMemo 将传入的 props 的计算过程包裹起来，缓存这个过程。\",\"function App() { const [a, setA] = useState(0); const [b, setB] = useState(0); const count = useMemo(() => { return [a]; }, [a]); return ( <> <Count count={count} /> <button onClick={() => { setA(a + 1); }} > add </button> <Count count={count} /> <button onClick={() => { setB(b + 1); }} > add </button> </> ); }\",\"这时，count 仅依赖 a，点击 b 不会触发 Count 组件的重新渲染。\",\"提示\",\"组件渲染时，函数内的所有内容都会被执行，如果组件内有一个局部定义的数组或者对象，那么每次重新渲染得到的变量必然和上一次的不同，useMemo 会有无效问题，因此不应该缓存这个变量本身而是缓存这个变量的计算逻辑。\"]},\"302\":{\"h\":\"useCallback\",\"t\":[\"useCallback 也算是 useMemo，只不过缓存的是函数，如果要用 useMemo 缓存函数，那么 useMemo 的第一个参数必须也返回一个函数，useCallback 封装了这一步。\"]},\"303\":{\"h\":\"一些 React API\"},\"304\":{\"h\":\"lazy\",\"t\":[\"此方法能够延迟加载组件，例如：\",\"const Foo = lazy(() => import('./components/Foo')); function App() { return ( <div> <Foo /> </div> ); }\",\"此方法接收 import 的结果必须是默认导出，如果是非默认导出可以用下面的方法：\",\"const Foo = lazy(async () => { const foo = (await import('./components')).Foo; return { default: foo }; });\"]},\"305\":{\"h\":\"JSX\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>hello</title> <style> .test { background-color: cornflowerblue; } </style> </head> <body> <div id=\\\"test\\\"></div> </body> <script type=\\\"text/javascript\\\" src=\\\"../js/react.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/react-dom.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/babel.min.js\\\"></script> <script type=\\\"text/babel\\\"> const id = '123'; const content = 'Hello World'; const dom = ( <> <h1 id={id} className=\\\"test\\\"> <span>{content}</span> </h1> {/* 注释 */} <h1 id={id + '1'} style={{ backgroundColor: 'blue' }}> <span>{content}</span> </h1> </> ); ReactDOM.render(dom, document.querySelector('#test')); </script> </html>\",\"JSX 的语法规则：\",\"需要使用 JavaScript 语法的地方使用 {} 嵌入表达式。\",\"因为 ES6 中使用 class 作为类关键字，所以要为一个标签指定 class 属性需要使用 className，此外，JSX 中所有标签的属性都是驼峰命名。\",\"内联样式不能使用字符串定义，要使用 style={{}} 语法，外层表示要使用 JavaScript 嵌入表达式，内层表示要定义一个 JavaScript 对象。\",\"JSX 中只能有一个根节点，可以使用空标签 <></> 包裹。\",\"所有标签必须闭合。\",\"如果要在 JSX 中使用注释可以用 {/* 123 */} 这种语法。\",\"如果标签首字母大写，那么 React 会将这个标签解析为组件，如果首字母小写那么会被解析为 HTML 标签。\"]},\"306\":{\"h\":\"列表渲染\",\"t\":[\"现在有下面这样一个数组：const languages = ['Java', 'Go', 'JavaScript', 'PHP'];，需要将其渲染到 ul 标签中，可以使用 map() 方法从数组生成组件。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>hello</title> </head> <body> <div id=\\\"test\\\"></div> </body> <script type=\\\"text/javascript\\\" src=\\\"../js/react.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/react-dom.development.js\\\"></script> <script type=\\\"text/javascript\\\" src=\\\"../js/babel.min.js\\\"></script> <script type=\\\"text/babel\\\"> const languages = ['Java', 'Go', 'JavaScript', 'PHP']; const languagesDom = languages.map(language => { return <li>{language}</li>; }); const dom = ( <> <h2>languages</h2> <ul>{languagesDom}</ul> </> ); ReactDOM.render(dom, document.querySelector('#test')); </script> </html>\",\"上面的代码会报错，因为没有为 li 标签指定 key 值，key 值可以是字符串或者数字的形式，key 值需要满足下面的条件：\",\"key 值在兄弟节点之间必须是唯一的，但是不需要全局唯一，在不同的数组中可以使用相同的 key。\",\"key 值不能改变，否则就失去了使用 key 的意义。\",\"提示\",\"React key 值原理类似 Vue，不建议使用数组下标作为 key，这会在数组的插入、删除或者重新排序时发生问题。\",\"如果希望为每个列表项显示多个 DOM 节点而不是一个，需要使用一个根标签将多个 DOM 包裹起来，但是 <></> 标签无法接收 key 值，所以要么使用 <div> 标签，要么使用 <></> 的完整写法 <Fragment></Fragment>，这类似 Vue template 标签，不会渲染成 HTML 标签：\",\"<script type=\\\"text/babel\\\"> const languages = ['Java', 'Go', 'JavaScript', 'PHP']; const languagesDom = languages.map((language, index) => { return ( <React.Fragment key={index}> <li>{language}</li> <li>{language.toLowerCase()}</li> </React.Fragment> ); }); const dom = ( <> <h2>languages</h2> <ul>{languagesDom}</ul> </> ); ReactDOM.render(dom, document.querySelector('#test')); </script>\",\"注意\",\"因为浏览器不支持 ES6 的导入，babel 只负责语法翻译，不会执行模块解析和加载，所以上面的 Fragment 组件不能使用 import { Fragment } from 'react'; 引入，而是使用全局对象 React 直接访问。\"]},\"307\":{\"h\":\"条件渲染\",\"t\":[\"<script type=\\\"text/babel\\\"> const languages = ['Java', 'Go', 'JavaScript', 'PHP']; const lower = true; const languagesDom = languages.map(language => { return <li>{lower ? language.toLowerCase() : language}</li>; }); const dom = ( <> <h2>languages</h2> <ul>{languagesDom}</ul> </> ); ReactDOM.render(dom, document.querySelector('#test')); </script>\"]},\"308\":{\"h\":\"生命周期\",\"t\":[\"生命周期是 React 组件从装载至卸载的全过程，这个过程中有多个钩子函数。\",\"生命周期在线图示\"]},\"309\":{\"h\":\"constructor 构造器\",\"t\":[\"在组件挂载前会先调用构造函数，在为 React.Component 的子类实现构造函数时，应当在所有语句之前调用 super(props)。构造器通常用于初始化 state 或者为事件处理函数绑定 this。\",\"注意\",\"构造器中初始化 state 时应该直接赋值而不是使用 setState，其他地方要修改 state 应该调用 setState。\"]},\"310\":{\"h\":\"\",\"t\":[\"此方法会在调用 render 方法前调用，并且在初始挂载及后续更新时都会调用，这个方法应当返回一个对象来更新 state，如果返回 null 则不更新任何内容。\",\"class Foo extends React.Component { static getDerivedStateFromProps(props, state) { return null; } constructor(props) { super(props); this.state = {}; } render() { return <div>Foo</div>; } }\"]},\"311\":{\"h\":\"render\",\"t\":[\"此方法是类组件中唯一必须要实现的方法，此函数应该是一个纯函数。\"]},\"312\":{\"h\":\"\",\"t\":[\"此方法会在组件挂载后立即调用，此方法可以用来发起远程请求初始化数据等。\",\"const mockReq = () => { return new Promise(res => { setTimeout(() => { res({ value: '123' }); }, 100); }); }; class Foo extends React.Component { state = { value: '', }; render() { return ( <div> <span>value: </span> <span>{this.state.value}</span> </div> ); } async componentDidMount() { console.log('calling'); const { value } = await mockReq(); console.log(value); this.setState({ value }); } }\"]},\"313\":{\"h\":\"\",\"t\":[\"当组件因为 state 和 props 变化而发生更新时，在重新渲染前该函数会被触发。\",\"此函数如果返回 true 那么将调用 render 继续进行组件的渲染，否则停止渲染，render 及后续其他生命周期函数将不会再被触发。\",\"警告\",\"此函数中不应该再调用 setState，否则会因为重新触发渲染而导致死循环。\",\"下面是一个例子，点击按钮递增，只有是传入 props 的倍数才重新渲染：\",\"class Foo extends React.Component { state = { value: 0, }; render() { return ( <div> <span>{this.state.value}</span> <button onClick={() => { this.setState({ value: this.state.value + 1, }); }} > click </button> </div> ); } shouldComponentUpdate(nextProps, nextState) { const { step } = nextProps; const { value } = nextState; return value % step === 0; } }\"]},\"314\":{\"h\":\"\",\"t\":[\"此方法在最近一次渲染输出前调用，即提交到 DOM 节点之前，这可以让组件在发生更改前从 DOM 中捕获一些信息。\",\"此方法的任何返回值将作为参数传递给 componentDidUpdate()。\",\"例如，如果希望在更新后网页滚动的位置保持不变，可以在此方法中获取之前滚动的位置。\",\"class Foo extends React.Component { state = { arr: [], }; ulRef = React.createRef(); componentDidMount() { setInterval(() => { this.setState({ arr: [`item${this.state.arr.length}`, ...this.state.arr] }); }, 1000); } getSnapshotBeforeUpdate(prevProps, prevState) { return this.ulRef.current.scrollHeight; } componentDidUpdate(props, state, prevHeight) { this.ulRef.current.scrollTop += this.ulRef.current.scrollHeight - prevHeight; } render() { return ( <div> <ul style={{ height: '200px', width: '400px', overflowY: 'auto', border: '1px solid #ccc' }} ref={this.ulRef} > {this.state.arr.map((item, index) => { return ( <li key={index} style={{ height: '50px' }}> {item} </li> ); })} </ul> </div> ); } }\",\"scrollHeight 是只读属性，表示元素内容的整体高度，包括由于溢出导致在视线外的部分；scrollTop 是元素中被隐藏在滚动视图上方的元素高度。在 getSnapshotBeforeUpdate 中获取到的 scrollHeight 表示重新渲染之前的 ul 的高度，并将这个值返回给 componentDidUpdate 方法，此方法中再次获取到的 scrollHeight 的值为重新渲染之后的值，两者的差值就是新插入元素的高度，将 scrollTop 不断累加这个差值即可实现滚动条保持不变。\"]},\"315\":{\"h\":\"\",\"t\":[\"此方法将会在每次重新渲染后触发。\",\"componentDidUpdate(nextProps, nextState, snapshot) { console.log(snapshot) } getSnapshotBeforeUpdate(prevProps, prevState) { return { prevProps, prevState } }\"]},\"316\":{\"h\":\"\",\"t\":[\"此方法会在组件卸载及销毁之前直接调用，此方法中不应该再调用 setState() 因为此组件将永远不会再渲染。\",\"class Foo extends React.Component { render() { return ( <div> <h1>title</h1> <button onClick={() => { ReactDOM.unmountComponentAtNode(document.getElementById('test')); }} > remove </button> </div> ); } componentWillUnmount() { console.log('GG'); } }\"]},\"317\":{\"h\":\"props\",\"t\":[\"props 是传递给 JSX 标签的信息，可以将任意 JavaScript 值传递给一个组件，包括数组、对象和函数。\"]},\"318\":{\"h\":\"向组件传递 props\",\"t\":[\"<script type=\\\"text/babel\\\"> function PersonInfo(props) { return ( <div> <span>{props.person.name}</span> <br /> <span>{props.person.age}</span> <br /> <button onClick={props.print(props.person)}>print</button> </div> ); } const print = person => () => { console.log(person); }; ReactDOM.render( <PersonInfo person={{ name: 'PPG007', age: 23 }} print={print} />, document.getElementById('test') ); </script>\",\"函数式组件的参数是一个 props 对象，包含组件标签上传递的全部属性，也可以使用对象解构的写法：\",\"function PersonInfo({ person, print }) { return ( <div> <span>{person.name}</span> <br /> <span>{person.age}</span> <br /> <button onClick={print(person)}>print</button> </div> ); }\",\"注意\",\"props 是只读的，在组件内不能修改。\",\"类组件的构造函数的入参是 props 对象，用法同函数式组件。\"]},\"319\":{\"h\":\"使用 JSX 展开语法传递 props\",\"t\":[\"如果一个组件标签的属性过多，写起来很长，可以使用 JSX 的展开语法：\",\"function PersonInfo({ person, print }) { return ( <div> <span>{person.name}</span> <br /> <span>{person.age}</span> <br /> <button onClick={print(person)}>print</button> </div> ); } const print = person => () => { console.log(person); }; const props = { person: { name: 'PPG007', age: 23, }, print: print, }; ReactDOM.render(<PersonInfo {...props} />, document.getElementById('test'));\"]},\"320\":{\"h\":\"将 JSX 作为子组件传递\",\"t\":[\"组件之间发生嵌套时，父组件的 props 中将增加一个 children 属性：\",\"function Foo() { return <div>foo</div>; } function Bar({ children }) { return ( <div> bar {children} </div> ); } const dom = ( <Bar> <Foo /> </Bar> ); ReactDOM.render(dom, document.getElementById('test'));\",\"注意\",\"如果组件发生了嵌套，那么如果父组件不在自己返回的 JSX 中显式地使用 children 属性，那么嵌套在其中的内容将不会被渲染。\"]},\"321\":{\"h\":\"类组件传递 props\",\"t\":[\"class Time extends React.Component { render() { const props = { color: this.color, time: this.state.time, }; return ( <div> <Display {...props} /> {this.children} </div> ); } constructor(props) { super(props); const { color, children } = props; console.log(color, children); this.color = color; this.children = children; this.state = { time: new Date().toLocaleTimeString(), }; setInterval(() => { this.setState({ time: new Date().toLocaleTimeString() }); }, 1000); } } class Display extends React.Component { render() { const { color, time } = this.props; return ( <div> <h2 style={{ color: color }}>{time}</h2> </div> ); } } const dom = ( <Time color={'skyblue'}> <span>123</span> </Time> ); ReactDOM.render(dom, document.getElementById('test'));\"]},\"322\":{\"h\":\"使用 PropTypes 对 prop 做限制\",\"t\":[\"prop-types\",\"prop-types 定义了很多限制，可以通过定义组件的 propTypes 静态属性定义校验规则， 通过 defaultProps 定义默认值。\",\"function Demo(props) { return <button onClick={props.onClick}>{props.text}</button>; } Demo.defaultProps = { text: 'default text', onClick: () => { console.log('default click'); }, }; Demo.propTypes = { text: PropTypes.string, }; ReactDOM.render(<Demo text={123} />, document.getElementById('test'));\",\"上面的代码中限制了 text 是一个字符串类型，开发环境中控制台会输出报错，类组件使用方式类似，只要定义 propTypes 静态变量即可。\"]},\"323\":{\"h\":\"Reducer\",\"t\":[\"假设有下面这样一个场景，ul 列表中的每个 li 都具有编辑、删除的功能，如果按照 state 的方式可能会写出下面的代码：\",\"// components/TodoList.tsx import { FC, Fragment, useState } from 'react'; interface Todo { id: string; content: string; } type TodoListProps = { todos: Array<Todo>; changeHandler: (task: Todo) => void; deleteHandler: (id: string) => void; }; const TodoList: FC<TodoListProps> = ({ todos, changeHandler, deleteHandler }) => { const [editingTodo, setEditingTodo] = useState<Todo>(() => ({ id: '', content: '' })); const isEditing = (todo: Todo) => editingTodo.id === todo.id; return ( <Fragment> <ul> {todos ? todos.map(todo => { return ( <li key={todo.id}> {isEditing(todo) ? ( <input value={editingTodo.content} onChange={e => { setEditingTodo({ ...editingTodo, content: e.target.value }); }} /> ) : ( todo.content )} <button onClick={() => { if (isEditing(todo)) { changeHandler(editingTodo); setEditingTodo({ id: '', content: '' }); return; } setEditingTodo(todo); }} > {isEditing(todo) ? 'save' : 'edit'} </button> <button onClick={() => { deleteHandler(todo.id); }} > delete </button> </li> ); }) : undefined} </ul> </Fragment> ); }; export { TodoList, Todo }; // App.ts import { FC, Fragment, useState, KeyboardEvent } from 'react'; import { Todo, TodoList } from './components'; const App: FC = () => { const [todos, setTodos] = useState<Array<Todo>>([]); const [value, setValue] = useState(''); const changeHandler = (todo: Todo) => { setTodos( todos.map(item => { if (item.id === todo.id) { return todo; } return item; }) ); }; const deleteHandler = (id: string) => { setTodos(todos.filter(todo => todo.id !== id)); }; const addHandler = (e: KeyboardEvent) => { if (e.key === 'Enter') { setTodos([...todos, { id: `${todos.length + 1}`, content: value }]); } }; return ( <Fragment> <input value={value} onChange={e => { setValue(e.target.value); }} onKeyDown={addHandler} /> <TodoList todos={todos} changeHandler={changeHandler} deleteHandler={deleteHandler} /> </Fragment> ); }; export default App;\",\"在上面的例子中，App 组件里 setState 被多次调用了，如果以后还要添加其他需求，那么各种事件的处理函数可能会不断增加，为了将这种状态更新逻辑很多的组件的事件处理器集中起来，可以将所有的状态更新逻辑添加到一个外部函数中，即 reducer。通过下面的步骤可以将 useState 转为 useReducer：\",\"将设置状态的逻辑修改成 dispatch 的一个 action。\",\"编写一个 reducer 函数。\",\"在组件中使用 reducer。\",\"reducer 通过事件处理程序 dispatch 一个 action 来表明用户刚刚做了什么，状态更新逻辑保存在其他地方，不再像 state 那样通过事件处理器直接设置 task，而是 dispatch 一个添加、修改、删除任务的 action。\"]},\"324\":{\"h\":\"使用 Reducer 替换 state\",\"t\":[\"第一步，定义 reducer，替换掉之前的 useState：\",\"interface action extends Todo { type: 'add' | 'change' | 'delete'; } const tasksReducer = (prevState: Array<Todo>, action: action): Array<Todo> => { switch (action.type) { case 'add': return [...prevState, { id: `${prevState.length + 1}`, content: action.content }]; case 'change': return prevState.map(todo => { if (todo.id === action.id) { return { id: todo.id, content: action.content, }; } return todo; }); case 'delete': return prevState.filter(todo => todo.id !== action.id); } }; const [todos, dispatch] = useReducer<Reducer<Array<Todo>, action>>(tasksReducer, []);\",\"useReducer 函数会返回一个数组，第一个元素为一个 state，第二个元素是 dispatch 函数。\",\"第二步，修改之前的事件处理函数：\",\"const changeHandler = (todo: Todo) => { dispatch({ type: 'change', ...todo, }); }; const deleteHandler = (id: string) => { dispatch({ type: 'delete', id: id, content: '', }); }; const addHandler = (e: KeyboardEvent) => { if (e.key === 'Enter') { dispatch({ type: 'add', id: '', content: value, }); setValue(''); } };\"]},\"325\":{\"h\":\"Reducer 和 State 的对比\",\"t\":[\"通常情况下，使用 useState 时，一开始只需要编写少量的代码，而 useReducer 必须提前编写 reducer 函数和需要调度的 actions。当多个事件处理器以相似的方式修改 state 时，useReducer 可以减少代码量。\",\"当状态更新逻辑足够简单时，useState 可读性良好，但是一旦逻辑变得复杂可读性将会下降，useReducer 允许将状态的更新和事件处理器分离以提高可读性。\",\"当使用 state 出现问题时，很难发现具体的原因，使用 reducer 时，可以再 reducer 函数中通过日志等形式可以快速排查问题。\",\"reducer 是一个不依赖组件的纯函数，所以可以对它单独进行测试。\"]},\"326\":{\"h\":\"Reducer 注意事项\",\"t\":[\"reducer 必须是纯粹的。和状态更新函数类似，reducer 在渲染时运行，它不应该包含异步请求、定时器或者任何副作用，应该以不可变值的方式去更新对象和数组。\",\"每个 action 都描述了一个单一的用户交互，即使它会引发数据的多个变化。例如，如果是更新表单数据，应该一次性 dispatch 一个对象而不是分多次 dispatch。\"]},\"327\":{\"h\":\"Redux\"},\"328\":{\"h\":\"Redux 简介\",\"t\":[\"Redux 是一个使用 action 事件来管理和更新应用状态的工具，通过集中存储的方式对整个应用中的状态进行管理，确保状态以可预测的方式更新。Redux 可以帮助管理全局状态，可以更容易理解状态何时、何地、为什么以及如何被更新。\"]},\"329\":{\"h\":\"State 管理\",\"t\":[\"从一个小的 React 组件开始：\",\"const App: FC = () => { const [count, setCount] = useState(0); return ( <> <p>{count}</p> <button onClick={() => setCount(count + 1)}>incr</button> </> ); };\",\"上面的组件中包含下面的部分：\",\"state：驱动组件的真实数据。\",\"view：基于当前状态的视图描述。\",\"actions：根据用户输入在应用程序中发生的事件，触发状态更新。\",\"上面组件的工作流程可以用下面的步骤概括：\",\"用 state 来描述应用程序的状态。\",\"基于 state 来渲染 view。\",\"当发生事件时，state 根据发生的事情进行更新，生成新的 state。\",\"基于新的 state 渲染 view。\",\"上面的流程就是单项数据流。\",\"但是，如果有多个组件需要共享 state 时，事情会变的很复杂，尤其是当这些组件位于应用中的不同部分时，当然，这可以通过状态提升来解决，但是父组件需要维护大量的状态。为了解决这个问题，可以从组件中提取 state 并放入组件之外的另一个集中的位置，这样任何组件就能访问 state 或者触发 action 而无论它们在组件树的哪里。\"]},\"330\":{\"h\":\"不可变性\",\"t\":[\"Mutable 意为“可以改变的”，而 immutable 意为“不可改变的”。\",\"JavaScript 中的对象和数组都是可以改变的，如果创建一个对象，那么可以修改对象的属性；如果创建一个数组，那么可以修改数组内的元素。内存中还是原来对象或者数组的引用，但是里面的内容变化了。如果想要以不可变的方式更新，那么就必须先复制原来的对象或者数组，然后用这个复制结果更新。JavaScript 中的展开运算符可以实现对象或数组的拷贝。\",\"Redux 期望所有的状态更新都使用不可变的方式。这样具有以下优势：\",\"引用比较的简便性：如果状态对象不可变，那么就可以简单的通过比较对象和数组的引用来判断状态是否已经改变了，可以避免深度比较。\",\"撤销、重做更容易实现：由于使用不可变的方式更新状态，所以可以轻松实现撤销、重做或者状态的时间旅行，通过 Redux 开发者插件可以查看、修改、穿梭过去的状态。\"]},\"331\":{\"h\":\"术语\",\"t\":[\"Action：\",\"action 是一个具有 type 字段的普通的 JavaScript 对象，action 可以被视为描述应用程序中发生了什么的事件，type 字段是一个字符串，给这个 action 定义一个描述性的名字。action 对象也可以有其他字段，其中包含有关发生的事情的附加信息，按照惯例此信息放在 payload 字段中，以下是一个示例 action：\",\"const incrAction = { type: 'count/add', payload: 1, };\",\"Reducer：\",\"reducer 是一个函数，接收当前的 state 和一个 action 对象，必要时决定如何更新状态并返回新状态。(state, action) => newState。可以将 reducer 视为一个事件监听器，它根据接收到的 action 类型处理事件。\",\"Reducer 必须符合以下规则：\",\"仅使用 state 和 action 计算新的状态值。\",\"禁止直接修改 state，必须通过不可变方式更新。\",\"禁止任何的异步逻辑、依赖随机值或者会导致副作用的代码。\",\"Reducer 的执行内容通常是：检查当前 action 的 type 是否应该被处理，如果需要处理那么以不可变形式返回新的 state，否则返回之前的 state。\",\"Dispatch：\",\"更新 state 唯一的方法是调用 store.dispatch() 并传入一个 action 对象，store 将执行所有 reducer 函数并计算出更新后的 state，调用 getState() 可以获取新 state。\",\"Selector：\",\"随着状态的增多，可能会有很多地方需要读取 state 中的同一个字段，可以使用 selector 封装这个过程，避免重复逻辑。\",\"下面是结合 Redux 后组件状态的维护流程：\"]},\"332\":{\"h\":\"Redux Toolkit\",\"t\":[\"Redux Toolkit 是一个开箱即用的 Redux 开发工具集，封装了配置 store、定义 reducer、不可变的更新逻辑、立即创建整个状态的切片，不需要手动编写任何 action creator 或者 action type，还自带了一些常用的 Redux 插件。\",\"Redux 过于精简，需要很多的配置，使用 Redux Toolkit 可以简化代码。\"]},\"333\":{\"h\":\"示例：计数器\",\"t\":[\"下面编写一个计数器示例，首先是不使用 Redux 的情况：\",\"const Count: FC = () => { const [value, setValue] = useState(0); const [step, setStep] = useState(1); return ( <div> <button onClick={() => setValue(value + 1)}>+</button> <span>{value}</span> <button onClick={() => setValue(value - 1)}>-</button> <br /> <input value={step} onChange={e => { setStep(parseInt(e.target.value)); }} /> <button onClick={() => { setValue(value + step); }} > add by step </button> <button onClick={() => { setTimeout(() => { setValue(value + step); }, 1000); }} > add async </button> </div> ); };\",\"接下来将这个例子改造成使用 Redux，首先安装依赖：\",\"yarn add redux @reduxjs/toolkit react-redux yarn add -D @types/react-redux @types/redux\"]},\"334\":{\"h\":\"编写 Redux Store\",\"t\":[\"Redux Toolkit 提供了 Redux Slice，这是单个 Reducer 逻辑和 action 的集合，用来将根 Redux 对象拆分成多个部分。下面定义一个 CounterSlice 用来完成计数器的功能：\",\"import { createSlice, PayloadAction } from '@reduxjs/toolkit'; import { Dispatch } from 'react'; export type counterState = { value: number; }; export type counterIncByStepAction = PayloadAction<{ step: number }>; type counterReducer = { incr: (state: counterState) => void; desc: (state: counterState) => void; incrByStep: (state: counterState, action: counterIncByStepAction) => void; }; export const counterSlice = createSlice<counterState, counterReducer, 'counter'>({ initialState: { value: 0, }, name: 'counter', reducers: { incr: state => { state.value++; }, desc: state => { state.value--; }, incrByStep: (state, action) => { state.value += action.payload.step; }, }, }); export default counterSlice.reducer; export const { incr, incrByStep, desc } = counterSlice.actions; export const incrAsync = (step: number) => (dispatch: Dispatch<counterIncByStepAction>) => { setTimeout(() => { dispatch(incrByStep({ step: step })); }, 1000); }; export const selectCount = ({ counter }: { counter: counterState }) => { return counter.value; };\",\"使用 createSlice 方法创建一个 Redux Slice，首先需要指定一个 state 的初始值，这里将 state 初始值置为一个包含 value 字段的对象，然后需要一个 name，因为 action 是一个带有 type 字符串字段的对象，createSlice 方法会根据 name 值和 reducers 中方法的名字来自动生成 action，例如：\",\"export const { incr, incrByStep, desc } = counterSlice.actions; // {type: 'counter/incr', payload: undefined} console.log(incr());\",\"上面的 reducers 中并没有对 state 进行不可变式更新，而是直接操作的字段，这是因为 Redux Toolkit 使用了 immer 这个库，immer 检测到 draft state 改变时会基于这个改变去创建一个新的不可变的 state。\",\"selectCount 就是之前提到的 Selector，这个函数接收一个参数，这个参数就是根 state，由于这里我们使用了 Redux Slice 将根 state 切分为多个部分，所以 counterState 将会作为这个参数的其中一个字段，这个字段的字段名取决于在组装 Redux Store 时为当前 Slice 指定的名字。\",\"通过之前的内容我们知道，如果向改变 state，那么需要通过 dispatch 并传入 action 来完成，所以上面的 incrAsync 方法中有一个 dispatch 入参，这个dispatch 类型声明如下：type Dispatch<A> = (value: A) => void;。\",\"接下来将这个 Slice 组装为 Redux Store：\",\"import { configureStore } from '@reduxjs/toolkit'; import counterReducer, { counterState } from './count.ts'; const store = configureStore<{ x: counterState }>({ reducer: { x: counterReducer, }, }); export default store;\",\"这里使用 Redux Toolkit 中的 configureStore 方法来完成，这个方法接收一个配置对象，这里我们将之前定义的 counterSlice 赋值给 x 字段，这样的话在状态树中的 x 字段上就有了 counterSlice 对象了，这也是在 Slice 中 Selector 入参的字段名的依据。\",\"之前在介绍 reducer 时我们说 reducer 不能包含任何的异步逻辑，如果需要异步的话，我们需要使用 thunk。thunk 是一种特定类型的 Redux 函数，可以包含异步逻辑，Thunk 由两个函数编写：\",\"一个内部 thunk 函数，以 dispatch 和 getState 作为参数。\",\"外部创建者函数，创建并返回 thunk 函数。\",\"使用 thunk 需要在创建 Redux Store 时使用 redux-thunk 中间件，Redux Toolkit 封装了这个过程。然后我们就可以将 thunk 传给 dispatch 方法了。\"]},\"335\":{\"h\":\"编写计数器组件\",\"t\":[\"接下来修改 Count 组件：\",\"const Count: FC = () => { const count = useSelector<{ x: counterState }, number>(selectCount); const dispatch = useDispatch<Dispatch<counterIncByStepAction | PayloadAction>>(); const [step, setStep] = useState(1); return ( <div> <button onClick={() => { dispatch(incr()); }} > + </button> <span>{count}</span> <button onClick={() => { dispatch(desc()); }} > - </button> <br /> <input value={step} onChange={e => setStep(parseInt(e.target.value))} /> <br /> <button onClick={() => { dispatch(incrByStep({ step })); }} > add by step </button> <button onClick={() => { incrAsync(step)(dispatch); }} > add async </button> </div> ); };\",\"上面的组件中，展示用的 count 值我们使用 useSelector 方法并传入在 counterSlice 中定义的 Selector，useSelector 会将 state 作为入参调用我们的 Selector 并返回 Selector 的返回值。\",\"接下来，所有对 count 的修改都通过 dispatch 来进行，这里通过 useDispatch 方法获取 dispatch，这里有两种 action：带有 step 字段的 action 和空 action。\",\"最后，在事件处理函数中使用 dispatch 并传入由 action creator 构造的响应 action 即可实现对状态的修改。\"]},\"336\":{\"h\":\"provide store\",\"t\":[\"在完成上面的内容之后，还需要在用到 Store 状态管理的地方像 React Router 来提供一个 store provider：\",\"function App() { return ( <Provider store={store}> <Count /> </Provider> ); }\"]},\"337\":{\"h\":\"示例：文章管理\",\"t\":[\"接下来，我们来制作一个小型文章管理应用，这个应用能够展示、修改、添加文章，页面直接使用 Antd，首先我们来编写一个 Redux Slice 并组装一个 store：\",\"// slice import { createSlice, PayloadAction } from '@reduxjs/toolkit'; export type Article = { id: string; title: string; content: string; }; type ArticleState = Array<Article>; const initialArticles: Array<Article> = [ { id: '1', title: 'First Post!', content: 'Hello!', }, { id: '2', title: 'Second Post', content: 'More text', }, ]; interface upsertPayload { id?: string; title: string; content: string; } type ArticleReducer = { create: (state: ArticleState, action: PayloadAction<upsertPayload>) => void; update: (state: ArticleState, action: PayloadAction<upsertPayload>) => void; }; const articleSlice = createSlice<ArticleState, ArticleReducer, 'article'>({ name: 'article', initialState: initialArticles, reducers: { create(state, action) { state.push({ id: `${state.length + 1}`, content: action.payload.content, title: action.payload.title, }); }, update(state, action) { if (!action.payload.id) { return; } state = state.map(a => { if (a.id === action.payload.id) { a.title = action.payload.title; a.content = action.payload.content; } return a; }); }, }, }); export default articleSlice.reducer; export const { create, update } = articleSlice.actions; export const selectArticles = ({ article }: { article: ArticleState }) => { return article; }; export const selectArticle = (id: string) => ({ article }: { article: ArticleState }) => { return article.find(a => { return a.id === id; }); }; // store const store = configureStore({ reducer: { article: article, }, }); export default store; export type ArticleDispatch = typeof store.dispatch;\",\"接着，来编写创建文章的页面：\",\"// Create.tsx type formType = { title: string; content: string; }; const Create: FC = () => { const dispatch = useDispatch(); const [form] = Form.useForm<formType>(); const [sender, holder] = message.useMessage(); const onSubmit = ({ title, content }: formType) => { dispatch( create({ title, content, }) ); form.resetFields(); sender.success('ok'); }; return ( <> {holder} <Form onFinish={onSubmit} form={form}> <Form.Item name=\\\"title\\\" label={'标题'} rules={[{ required: true }]}> <Input /> </Form.Item> <Form.Item name=\\\"content\\\" label={'内容'} rules={[{ required: true }]}> <Input /> </Form.Item> <Form.Item> <Button type={'primary'} htmlType={'submit'}> Submit </Button> </Form.Item> </Form> </> ); };\",\"上面是一个简单的表单，输入标题和内容后点击提交，调用 dispatch 发出 action，然后触发 Redux 的 state 更新。\",\"然后是文章列表页面：\",\"// List.tsx const List: FC = () => { const articles = useSelector(selectArticles); return <AList dataSource={articles} renderItem={renderItem} rowKey={item => item.id} />; }; const renderItem = (article: Article) => { return ( <AList.Item> <AList.Item.Meta title={<Link to={`view/${article.id}`}>{article.title}</Link>} description={article.content} /> </AList.Item> ); };\",\"这里使用了 selector 来获取当前 Redux 中的文章列表，每个文章的标题是一个 Link 组件，跳转至下面的文章详情页面：\",\"const View: FC = () => { const params = useParams<{ id: string }>(); const article = useSelector(selectArticle(params.id ? params.id : '')); const [isEditing, setIsEditing] = useState(false); const [title, setTitle] = useState(article ? article.title : ''); const [content, setContent] = useState(article ? article.content : ''); const dispatch = useDispatch(); if (!article) { return <Empty />; } return ( <Card title={ isEditing ? <Input value={title} onChange={e => setTitle(e.target.value)} /> : article.title } extra={ <Space> <Button type={'link'} onClick={() => { setIsEditing(!isEditing); }} > {isEditing ? 'cancel' : 'edit'} </Button> <Link to={'..'}>back</Link> </Space> } > {isEditing ? ( <Input.TextArea showCount maxLength={100} value={content} onChange={e => { setContent(e.target.value); }} /> ) : ( article.content )} {isEditing ? ( <Button onClick={() => { dispatch( update({ id: article?.id, title, content, }) ); setIsEditing(false); }} > Submit </Button> ) : undefined} </Card> ); };\",\"View 组件复杂一些，这个组件首先获取路由参数中的 id 并调用 useSelector 获取 Redux 中对应的文章，如果文章获取不到就返回一个空页面。同时这个详情页面允许编辑，编辑和查看的状态通过 isEditing 这个布尔值来区分，点击按钮来回切换这个值，并使用两个局部 state 来保存编辑过程中的文章标题和内容，最后，使用 dispatch 来创建一个文章。\",\"最后是路由配置和应用入口的内容：\",\"// router/index.tsx const router = createHashRouter([ { path: '/', element: <App />, children: [ { path: 'create', element: <Create />, }, { element: <List />, index: true, }, { element: <View />, path: 'view/:id', }, ], }, ]); // App.tsx const Extra: FC = () => { const isCreate = useLocation().pathname === '/create'; let to = 'create'; if (isCreate) { to = '/'; } return ( <Space> <Link to={to}>{isCreate ? 'list' : 'create'}</Link> </Space> ); }; const App: FC = () => { return ( <Card title={'Articles'} extra={<Extra />}> <Outlet /> </Card> ); }; // main.tsx ReactDOM.createRoot(document.getElementById('root')!).render( <React.StrictMode> <Provider store={store}> <RouterProvider router={router} /> </Provider> </React.StrictMode> );\",\"总结\",\"到这里，这个文章应用包含了以下内容：\",\"通过 reducer 来更新 state。\",\"通过 dispatch 来在组件中触发 state 的更新。\",\"通过 selector 来获取数据，如果 selector 需要自定义参数，那么在定义 selector 时要使用函数柯里化。\",\"应用内的任意组件都能访问 Redux 管理的 state。\"]},\"338\":{\"h\":\"异步逻辑与数据请求\",\"t\":[\"上面的例子中，数据仍然是只在这个应用中流转，现在我们来编写一个 http server，通过 api 调用的方式来获取数据。\",\"这里使用 koa 来编写 http 服务，主要逻辑如下：\",\"import ObjectID from 'bson-objectid'; import * as Koa from 'koa'; import * as Router from 'koa-router'; import * as bodyParser from 'koa-bodyparser'; type Article = { id: string; title: string; content: string; }; const app = new Koa(); app.use(bodyParser()); app.use(async (ctx, next) => { try { await next(); if (!ctx.body) { ctx.body = {}; } } catch (e) { ctx.response.status = 400; ctx.response.body = (e as Error).message; } }); const router = new Router({ prefix: '/articles', }); type UpsertRequest = { title: string; content: string; }; let articles: Array<Article> = []; router.get('/', ctx => { ctx.body = articles; }); router.post('/', ctx => { if (!ctx.request.body) { throw new Error('missing body'); } const req: UpsertRequest = ctx.request.body as UpsertRequest; const newArticle: Article = { title: req.title, content: req.content, id: ObjectID().toHexString(), }; articles.push(newArticle); }); router.put('/:id', ctx => { const id = ctx.params['id']; if (!ctx.request.body) { throw new Error('missing body'); } const req: UpsertRequest = ctx.request.body as UpsertRequest; let articleFound = false; articles = articles.map(a => { if (a.id === id) { articleFound = true; a.title = req.title; a.content = req.content; } return a; }); if (!articleFound) { throw new Error('article not found'); } }); app.use(router.routes()).use(router.allowedMethods()); app.listen(8080, '0.0.0.0');\",\"通过上面的内容可知，reducer 不能包含异步逻辑，但是在 reducer 被调用之前，要先调用 dispatch，可以扩展 dispatch，也就是在调用 dispatch 之前发起异步逻辑，Redux 中的中间件为此提供了支持，最常用的异步中间件是 redux-thunk，Redux Toolkit 中的 configureStore 方法会默认开启此中间件，在加入 thunk 中间件之后，数据的流转就像下面这样：\",\"现在，将之前的创建、修改、获取文章改为使用 thunk 异步执行 Redux Toolkit 提供了 createAsyncThunk 方法来创建 asyncThunk，下面是对三个接口调用的封装：\",\"const axiosInstance = axios.create({ baseURL: '/v1/articles/', }); export const update = createAsyncThunk<void, upsertPayload>( 'articles/update', async ({ id, content, title }, { dispatch }) => { if (!id) { throw new Error('empty id'); } await axiosInstance.put<void, AxiosResponse<void>, upsertPayload>(`${id}`, { content, title, }); dispatch(list()); } ); export const create = createAsyncThunk<void, upsertPayload, { dispatch: ArticleDispatch }>( 'articles/create', async ({ content, title }, { dispatch }) => { await axiosInstance.post<void, AxiosResponse<void>, upsertPayload>('', { content, title, }); dispatch(list()); } ); export const list = createAsyncThunk<Array<Article>, void>('articles/list', async () => { const resp = await axiosInstance.get<Array<Article>>(''); return resp.data; });\",\"这个方法接收三个泛型类型，第一个类型是里面包裹的函数的返回类型，第二个类型是参数类型，这个参数可以在内部函数的入参中访问到，第三个参数是一个配置对象，这里只配置了 dispatch 的类型是 articleStore 的 dispatch 类型。\",\"为了在创建、更新文章之后能够及时更新 state，在 update 和 create 之后都再次 dispatch list，为了接收 asyncThunk 的返回值并更新到 state 中，修改 slice：\",\"const articleSlice = createSlice<ArticleState, {}, 'article'>({ name: 'article', initialState: initialArticles, extraReducers: builder => { builder.addCase(list.fulfilled, (_, action) => { return action.payload; }); }, reducers: {}, });\",\"extraReducers 选项是一个接收名为 builder 的参数的函数，builder 对象提供了一些方法，可以定义额外的 reducer 来响应各种 case，可以通过下面三种方式定义 case：\",\"addCase(actionCreator, reducer)：定义一个 case reducer 来响应一个 action。\",\"addMatcher(matcher, reducer)：定义一个 case reducer，如果 matcher 返回为 true 那么 reducer 将会被执行。\",\"addDefaultCase(reducer)：定义一个 case reducer，如果没有其他 case reducer 被执行，那么这个 reducer 会执行。\",\"提示\",\"如果多个 case 都匹配，那么它们将按照定义的顺序运行。\",\"上面的例子中使用了 addCase，下面是使用 addMatcher 的写法：\",\"// isFulfilled 是 Redux Toolkit 提供的内置方法 extraReducers: (builder) => { builder.addMatcher(isFulfilled(list), (_, action) => { return action.payload }) },\"]},\"339\":{\"h\":\"vite 反向代理设置\",\"t\":[\"在上面的例子中，如果使用 vite 管理项目，那么需要修改 vite.config.ts 来设置反向代理：\",\"export default defineConfig({ plugins: [react()], server: { proxy: { '^/v1/.*': { target: 'http://127.0.0.1:8080', rewrite: path => path.replace(/^\\\\/v1/, ''), }, }, }, });\"]},\"340\":{\"h\":\"在组件中执行异步\",\"t\":[\"现在，修改创建文章的组件，使用异步 dispatch：\",\"const dispatch = useDispatch<ArticleDispatch>(); const [form] = Form.useForm<formType>(); const [sender, holder] = message.useMessage(); const onSubmit = async ({ title, content }: formType) => { await dispatch( create({ title, content, }) ); form.resetFields(); sender.success('ok'); };\",\"由于在 createAsyncThunk 中抛出错误时，这个错误会被内部捕获处理，所以上面的代码中即使 create 中抛出异常 await 之后的逻辑也会执行，要想处理异步结果，有以下两种方法。\",\"第一种方法是将 dispatch 的结果展开为一个 Promise，对这个 Promise 做 await 可以获得异常：\",\"const onSubmit = async ({ title, content }: formType) => { try { await dispatch( create({ title, content, }) ).unwrap(); form.resetFields(); sender.success('ok'); } catch (e) { sender.error((e as Error).message); } };\",\"第二种方法时校验 dispatch 的结果是不是 rejected 或者 fulfilled 状态：\",\"const onSubmit = async ({ title, content }: formType) => { const resp = await dispatch( create({ title, content, }) ); if (create.fulfilled.match(resp)) { form.resetFields(); sender.success('ok'); } else if (create.rejected.match(resp)) { sender.error(resp.error.message); } };\"]},\"341\":{\"h\":\"性能与数据范式化\"},\"342\":{\"h\":\"缓存 Selector\",\"t\":[\"修改之前的 selectArticles，加入一句日志输出：\",\"export const selectArticles = ({ article }: { article: ArticleState }) => { console.log('selectArticles'); return article; };\",\"现在只要重新渲染使用到这个 Selector 的组件，这个日志就会被输出，这说明这个 Selector 被执行了多次。如果一个 Selector 中逻辑比较复杂、耗时，那么这样无意义的重复调用会影响性能。reselect 库提供了一个 createSelector 方法，此方法可以缓存 selector 的结果，此函数通常接受一组输入选择器和一个转换函数作为参数。输入选择器返回的数据将作为参数传递给转换函数，后者返回基于这些输入的派生数据。例如：\",\"export const selectArticlesWithDep = createSelector([selectArticles], articles => { console.log('selectArticlesWithDep'); return articles; });\",\"替换用到 selectArticles 的地方，然后来回切换页面，selector 将不会在依赖值不改变的情况下发生调用。\"]},\"343\":{\"h\":\"范式化数据\",\"t\":[\"在上面的例子中，selector 中主要是获取全部和根据 id 获取数据，如果数组很长，那么根据 id 查找的速度可能会受到影响，可能需要遍历大量元素才能找到对应的内容，因此最好有一种根据 id 直接查找单个元素的方法而不需要检查所有其他项，这个过程被称为“范式化”。\",\"范式化 state 是指：\",\"state 中每个特定数据只有一个副本，没有重复。\",\"已范式化的数据保存在查找表中，项目 id 是键，项目本身是值。\",\"也可能有一个特定项用于保存所有的 id 数组。\",\"Redux Toolkit 提供了 createEntityAdapter 方法来创建范式化 state，现在将之前的 ArticleSlice 替换为使用范式化 state，首先创建范式化 state：\",\"const articleAdapter = createEntityAdapter<Article>({ selectId: a => a.id, });\",\"createEntityAdapter 接收一个配置项，可以配置使用那个字段作为 id，还有一个 sortComparer 字段，这个字段是一个函数，工作方式与 array.sort() 相同，接收两个参数，用来排序，例如按照标题长度排序：\",\"const articleAdapter = createEntityAdapter<Article>({ selectId: a => a.id, sortComparer: (a, b) => a.title.length - b.title.length, });\",\"接着来替换初始 state，adapter 的 getInitialState() 方法返回一个空的范式化 state。：\",\"const articleSlice = createSlice({ name: 'article', initialState: articleAdapter.getInitialState(), // ...... });\",\"然后来替换 extraReducers，将 listArticles 的结果更新到 state 中：\",\"extraReducers: (builder) => { builder.addMatcher(isFulfilled(list), (state, action) => { articleAdapter.setMany(state, action.payload); }) },\",\"articleAdapter 上有增加、删除和更新方法，这里使用 set 是完全替换，也可以使用 updateMany 部分更新，更新时需要使用 change 来匹配需要更新的项目，就像下面这样：\",\"extraReducers: (builder) => { builder.addMatcher(isFulfilled(list), (state, action) => { articleAdapter.setMany(state, action.payload); const updater: ReadonlyArray<Update<Article>> = action.payload.map((a) => ({ id: a.id, changes: { title: a.title, content: a.content, } })) articleAdapter.updateMany(state, updater) }) },\",\"adapter 中也有封装好的 Selector 方法，通过调用 getSelectors() 方法可以获取内置的 Selectors，这个函数接收一个参数，此参数是一个函数，返回当前 Slice 在 Redux 状态树中的 state，下面的代码导出了 Selector：\",\"export const { selectIds, selectAll, selectTotal, selectById } = articleAdapter.getSelectors<StateType>(({ article }) => { console.log(article); return article; });\",\"如果使用 TypeScript，那么 getSelectors 的泛型可以通过导出 store 的 state 获取：\",\"const store = configureStore({ reducer: { article: article, }, }); store.dispatch(list()); export default store; export type StateType = ReturnType<typeof store.getState>;\",\"最后修改组件中对 Selector 的使用：\",\"// List.tsx const List: FC = () => { const articles = useSelector(selectAll); return ( <AList dataSource={articles} renderItem={renderItem} rowKey={(item) => item.id}/> ) } // View.tsx const View: FC = () => { const params = useParams<{id: string}>(); const article = useSelector((state: StateType) => selectById(state, params.id || '')); // other codes ......\"]},\"344\":{\"h\":\"RTK 查询\",\"t\":[\"在之前的内容中，异步更新 state 需要我们自行处理 fulfilled、rejected 等情况，并且每个方法都包含构造请求、发送请求的步骤，同时如果希望增加缓存功能也会比较复杂。为了简化与服务器的交互和状态的维护，可以使用 RTK Query（Redux Toolkit Query）来实现。\",\"使用 RTK Query 主要包含以下几个步骤：\",\"通过 createApi() 创建 API 切片。\",\"定义服务端点（endpoint）。\",\"使用自动生成的钩子。\",\"发起请求。\",\"根据上面的步骤，现在开始改造之前的文章管理中的内容，不再依赖 ArticleSlice，所有的数据都从服务端来，首先来创建一个 API 切片：\",\"import { BaseQueryFn, createApi, FetchArgs } from '@reduxjs/toolkit/query/react'; import axios from 'axios'; import { Article } from './article.ts'; interface UpsertArg { id?: string; content: string; title: string; } const axiosInstance = axios.create({ baseURL: '/v1/articles', }); const axiosBaseQuery: BaseQueryFn<FetchArgs> = args => { return axiosInstance.request({ method: args.method, params: args.params, data: args.body, url: args.url, }); }; const api = createApi({ reducerPath: 'articlesAPI', baseQuery: axiosBaseQuery, endpoints: builder => { return { fetchArticles: builder.query<Array<Article>, void>({ query: () => ({ url: '/', }), }), createArticles: builder.mutation<void, UpsertArg>({ query: (arg): FetchArgs => ({ url: '/', method: 'POST', body: arg, }), }), updateArticle: builder.mutation<void, UpsertArg>({ query: (arg: UpsertArg): FetchArgs => ({ url: `/${arg.id}`, method: 'PUT', body: arg, }), }), deleteArticle: builder.mutation<void, string>({ query: (id): FetchArgs => ({ url: `/${id}`, method: 'DELETE', }), }), getArticle: builder.query<Article, string>({ query: id => ({ url: `/${id}`, method: 'GET', }), }), }; }, });\",\"解释一下上面的主要内容：\",\"通过 createApi() 可以创建一个 API 切片，这个方法接收一个配置对象，配置对象中 reducerPath 指的是当这个 API 切片在 configureStore() 配置到 Redux Store 之后对应的 Reducer 的名字。\",\"baseQuery 是一个基础查询函数，这里用 axios 实现，RTK 本身也提供了 fetchBaseQuery 方法来创建 baseQuery 对象，这个方法是基于 Fetch API 的。自行构造 baseQuery 要注意参数类型，上面可以看到，自建的 axios baseQuery 中使用了 FetchArgs 这个泛型类型，这个类型就是 baseQuery 函数的第一个入参的类型，这个类型应该和下方 endpoints 中 query 返回的类型一致，在实际发出请求时，传入 baseQuery 的入参就是 endpoints query 的返回值。\",\"endpoints 定义了与服务器交互的一组操作，可以是 query 用来获取数据并缓存，也可以是 mutations 用来更新服务器数据，endpoints 是使用回调函数构造的，该函数接收 builder 对象，要创建 query 或者 mutation 可以使用 builder.query() 或 builder.mutation()。\",\"builder.query() 和 builder.mutation() 的两个泛型分别表示返回类型和入参类型，同时由于在 baseQuery 中将入参定义为 FetchArgs 类型，所以 endpoints 中所有 query 都应该是返回 FetchArgs 对象的函数。\",\"接着就可以导出自动生成的 Hooks 了：\",\"export default api; export const { useCreateArticlesMutation, useUpdateArticleMutation, useDeleteArticleMutation, useFetchArticlesQuery, useLazyFetchArticlesQuery, useGetArticleQuery, useLazyGetArticleQuery, } = api;\",\"警告\",\"要使用 Hooks 的话 createApi() 要使用 \\\"@reduxjs/toolkit/query/react\\\" 包中的，如果使用 TypeScript，只有用这个包里的 createApi() 才会有对应 Hook 的类型提示。\",\"然后配置 store，这可以集中管理状态并且可以实现 RTK Query 内置的自动缓存、请求去重、生命周期管理等。将 API Slice 的 cache reducer 配置到 Store 中，同时 API Slice 还会生成需要添加到 Store 的自定义中间件，需要一并添加：\",\"const store = configureStore({ reducer: { [api.reducerPath]: api.reducer, }, middleware: getDefaultMiddleware => getDefaultMiddleware().concat(api.middleware), }); export default store;\",\"然后修改之前的所有组件，使用 API Slice Hooks 替换 dispatch 和 useSelector：\",\"// Create.tsx const Create: FC = () => { const [form] = Form.useForm<formType>(); const [sender, holder] = message.useMessage(); const [create, { isLoading }] = useCreateArticlesMutation(); const onSubmit = async ({ title, content }: formType) => { try { await create({ title, content, }).unwrap(); form.resetFields(); sender.success('ok'); } catch (e) { sender.error((e as Error).message); } }; return ( <> {holder} <Spin spinning={isLoading}> <Form onFinish={onSubmit} form={form}> <Form.Item name=\\\"title\\\" label={'标题'} rules={[{ required: true }]}> <Input /> </Form.Item> <Form.Item name=\\\"content\\\" label={'内容'} rules={[{ required: true }]}> <Input /> </Form.Item> <Form.Item> <Button type={'primary'} htmlType={'submit'}> Submit </Button> </Form.Item> </Form> </Spin> </> ); }; // View.tsx const View: FC = () => { const params = useParams<{ id: string }>(); const query = useGetArticleQuery(params.id || ''); const [update, { isLoading }] = useUpdateArticleMutation(); const article = query.currentData; const [isEditing, setIsEditing] = useState(false); const [title, setTitle] = useState(''); const [content, setContent] = useState(''); const [sender, holder] = message.useMessage(); useEffect(() => { if (!article) { return; } setTitle(article.title); setContent(article.content); }, [article]); if (!article && query.isError) { return ( <Result status={'error'} title={'oop!'} extra={ <Link to={'..'}> <Button>back</Button> </Link> } /> ); } return ( <Spin spinning={isLoading || query.isFetching}> {holder} {query.isSuccess && article ? ( <Card title={ isEditing ? ( <Input value={title} onChange={e => setTitle(e.target.value)} /> ) : ( article.title ) } extra={ <Space> <Button type={'link'} onClick={() => { setIsEditing(!isEditing); }} > {isEditing ? 'cancel' : 'edit'} </Button> <Link to={'..'}>back</Link> </Space> } > {isEditing ? ( <Input.TextArea showCount maxLength={100} value={content} onChange={e => { setContent(e.target.value); }} /> ) : ( article.content )} {isEditing ? ( <Button onClick={async () => { await update({ id: article.id, content, title, }).unwrap(); setIsEditing(false); sender.success('ok'); }} > Submit </Button> ) : undefined} </Card> ) : undefined} </Spin> ); }; // List.tsx const List: FC = () => { const resp = useFetchArticlesQuery(); return ( <Spin spinning={resp.isFetching}> {resp.isSuccess ? ( <AList dataSource={resp.currentData} renderItem={renderItem} rowKey={item => item.id} /> ) : ( <Empty /> )} </Spin> ); }; const renderItem = (article: Article) => { const [deleteFunc] = useDeleteArticleMutation(); return ( <AList.Item extra={ <Button danger onClick={() => { deleteFunc(article.id); }} > delete </Button> } > <AList.Item.Meta title={<Link to={`view/${article.id}`}>{article.title}</Link>} description={article.content} /> </AList.Item> ); };\",\"Query Hook 会返回一个包含多个字段的对象，包括：\",\"data 或 currentData：响应内容，未收到响应之前是 undefined。\",\"isLoading：布尔值，表示此 Hook 是不是在发出第一次请求，如果后续改变参数再请求此字段仍然为 false。\",\"isFetching：布尔值，表示当前是否正在发出请求。\",\"isSuccess：布尔值，表示当前 Hook 请求是否已成功并有可用的缓存数据，此字段类似 isLoading，在后续调用时保持为 true。\",\"isError：布尔值，表示请求是否出错。\",\"error：一个序列化后的错误对象。\",\"Mutation Hook 返回的是一个数组，第一个元素是一个函数，可以视为是一个 asyncThunk 函数，也可以使用 unwrap 来处理错误，调用此函数可以发起 mutation 请求，第二个参数是一个包含多个字段的对象，包含 isLoading 等状态。\"]},\"345\":{\"h\":\"刷新缓存\",\"t\":[\"在完成后，首先创建一个文章，然后返回 List，可以发现页面并没有显示刚刚创建的内容，如果重复这个过程可以在控制台看到，在切换回 List 的时候并没有发生网络请求，也就是说创建后切换回 List 使用的是缓存的数据，为了让 RTK Query 刷新数据，可以在 List 中增加一个按钮，点击按钮刷新数据：\",\"const List: FC = () => { const resp = useFetchArticlesQuery(); return ( <Spin spinning={resp.isFetching}> {resp.isSuccess ? ( <Card title={ <Button onClick={() => { resp.refetch(); }} > refresh </Button> } > <AList dataSource={resp.currentData} renderItem={renderItem} rowKey={item => item.id} /> </Card> ) : ( <Empty /> )} </Spin> ); }; const renderItem = (article: Article) => { const [deleteFunc] = useDeleteArticleMutation(); return ( <AList.Item extra={ <Button danger onClick={() => { deleteFunc(article.id); }} > delete </Button> } > <AList.Item.Meta title={<Link to={`view/${article.id}`}>{article.title}</Link>} description={article.content} /> </AList.Item> ); };\",\"Query Hook 提供了一个 refetch() 方法来强制重新获取数据，现在点击此按钮会抛出一个错误：React has detected a change in the order of Hooks called by List. This will lead to bugs and errors if not fixed，这是因为 Query Hook 的 isSuccess 在第一次请求成功之后就一直是 true 了，在调用 refetch() 重新发起请求之后此字段仍然是 true，所以会渲染 List 组件，但是此时请求还没结束，List 中内容为空，没有 List Item，所以 renderItem 中的 useDeleteArticleMutation 这个 Hook 不会有任何执行，当请求就绪后再次渲染组件，此时 List 中存在内容，所以会调用 useDeleteArticleMutation，React 中不允许条件调用 Hooks，每次渲染组件时调用的 Hooks 数量应该相同，所以上面的代码会报错，为了解决这个问题，使用 !isFetching 来替代 isSuccess：\",\"const List: FC = () => { const resp = useFetchArticlesQuery(); return ( <Spin spinning={resp.isFetching}> {!resp.isFetching ? ( <Card title={ <Button onClick={() => { resp.refetch(); }} > refresh </Button> } > <AList dataSource={resp.currentData} renderItem={renderItem} rowKey={item => item.id} /> </Card> ) : ( <Empty /> )} </Spin> ); };\",\"当然这种手动刷新的机制在很多时候不太合适，而且对使用者来说也很繁琐，RTK Query 提供了基于标签的自动刷新机制，在 createApi() 中使用 tagTypes字段定义一系列标签，然后在 Query 中的 providesTags 定义需要重新刷新这个 Query 的一系列标签，在 Mutation 中的 invalidatesTags 定义这个 Mutation 会触发哪些标签导致的刷新，这样，在 Mutation 执行之后，providesTags 中包含这个 Mutation 的 invalidatesTags 中定义的标签的 Query 会被自动刷新，下面改造上面的手动刷新例子：\",\"const api = createApi({ // ... other codes tagTypes: ['Create', 'Update', 'Delete'], endpoints: builder => { return { fetchArticles: builder.query<Array<Article>, void>({ // ... other codes providesTags: ['Create', 'Update', 'Delete'], }), createArticles: builder.mutation<void, UpsertArg>({ // ... other codes invalidatesTags: ['Create'], }), updateArticle: builder.mutation<void, UpsertArg>({ // ... other codes invalidatesTags: ['Update'], }), deleteArticle: builder.mutation<void, string>({ // ... other codes invalidatesTags: ['Delete'], }), getArticle: builder.query<Article, string>({ // ... other codes providesTags: ['Create', 'Update', 'Delete'], }), }; }, });\",\"这样，再次创建、修改、删除文章时就会触发对应 Query 的重新加载，页面会被及时更新。\"]},\"346\":{\"h\":\"定时失效缓存\",\"t\":[\"在上面的例子中，从文章列表中点击任意一个文章进入详情页后，控制台可以看到一次接口调用，然后回到列表页，重复进入同一个详情页面时会因为数据缓存不再去调用接口，在文章列表等待 60 秒后再次进入则会有接口调用，这是因为默认情况下数据的缓存时间是 60 秒，这个数值可以通过 keepUnusedDataFor 来设置，例如将超时时间改为 10 秒：\",\"const api = createApi({ reducerPath: 'articlesAPI', // ... other codes keepUnusedDataFor: 10, });\"]},\"347\":{\"h\":\"失效特定的项目\",\"t\":[\"在最初实现编辑功能时，编辑完成后点击提交，页面的内容仍然是编辑之前的，这是因为数据缓存导致的，现在我们使用了 providesTags 和 invalidatesTags 两个字段来实现调用更新接口后失效查询接口，但是现在仍然存在一个问题：更新某个文章的内容后会导致所有的查询丢弃缓存，但是没有被更新到的文章实际上不需要重新请求，仍然使用缓存即可，为了解决这个问题，providesTags 和 invalidatesTags 可以是一个对象数组，每个对象包含 type 字段和 id 字段，type 字段就是之前数组中的字符串，id 是数字或者字符串，二者的 id 和 type 匹配后就会失效特定的项目。\",\"tagTypes: ['Create', 'Update', 'Delete'], endpoints: (builder) => { return { fetchArticles: builder.query<Array<Article>, void>({ providesTags: ['Create', 'Update', 'Delete'], }), createArticles: builder.mutation<void, UpsertArg>({ invalidatesTags: ['Create'], }), updateArticle: builder.mutation<void, UpsertArg>({ invalidatesTags: (_result, _error, arg) => { return [{ type: 'Update', id: arg.id, }] } }), deleteArticle: builder.mutation<void, string>({ invalidatesTags: (_result, _error, arg) => { return [ { type: 'Delete', id: arg, } ] } }), getArticle: builder.query<Article, string>({ providesTags: (result) => { if (result) { return [ { type: 'Update', id: result.id, }, { type: 'Delete', id: result.id, } ] } return []; } }) } },\",\"现在，更新或者删除文章时只会使得特定的数据失效。\"]},\"348\":{\"h\":\"在非 React 应用中使用 RTK Query\",\"t\":[\"在 React 应用中使用 RTK Query 会因为 Hooks 的存在变得简单，但是 Redux 是独立设计的，不依赖于 UI，因此应该在任意位置可用，API 切片中有一个 endpoints 字段，其中包含我们定义的查询，这些查询上有一个 initiate() 方法，执行此方法可以得到一个 ThunkAction，将这个 action 传给 dispatch 即可：\",\"store.dispatch(api.endpoints.fetchArticles.initiate());\",\"为了能够读取当前 state 的数据，同样可以使用 Selector，只不过这里的 Selector 是从 RTK Query 的缓存中读取的，也就是说下面的方法并不会发出请求，需要 dispatch endpoint：\",\"// api.ts export const selectArticlesResult = api.endpoints?.fetchArticles.select(); export const selectArticles = createSelector([selectArticlesResult], result => result ? result.data : [] ); // List.ts const articles = useSelector(selectArticles);\"]},\"349\":{\"h\":\"注入 Endpoints\",\"t\":[\"大型项目中接口的管理可能是分布在多个文件中的，为了将多个文件统一到一起，可以使用 API 切片上的 injectEndpoints() 方法：\",\"export const { useExtendQueryQuery } = api.injectEndpoints({ endpoints: builder => { return { extendQuery: builder.query<Article, string>({ query: id => ({ method: 'GET', url: `/${id}`, }), }), }; }, });\",\"注意\",\"injectEndpoints 会改变原来的 API 切片并返回新的切片，但是建议使用返回的新切片而不是旧切片，尽管它们是同一个对象。在使用 TypeScript 的情况下，返回的切片中才会有新的 Hooks 类型提示。\"]},\"350\":{\"h\":\"处理响应\",\"t\":[\"如果接口返回的数据格式和组件中需要的格式不同，这时就需要进行响应数据的转换，请求接口可以定义一个 transformResponse 方法来转换返回的数据，例如：\",\"getArticle: builder.query<Article, string>({ // ... other codes transformResponse: (baseQueryReturnValue: Article, _meta, _arg) => { return { id: baseQueryReturnValue.id, title: `${baseQueryReturnValue.title}_trans`, content: `${baseQueryReturnValue.content}_trans`, }; }, });\",\"这里只是简单的加了一个后缀，transformResponse 的第一个参数应该是服务器返回的类型，第三个参数 arg 是当前 query 的入参，在这里可以将响应对象转换为视图对象。\"]},\"351\":{\"h\":\"高级缓存更新\",\"t\":[\"现在来为文章列表中的每个元素增加一个收藏按钮，当然 Article 类型要增加相关的定义，同时 api 接口也要支持对收藏的更新：\",\"// API Slice favorite: builder.mutation<void, string>({ query: id => ({ url: `/${id}/favorite`, method: 'POST', }), invalidatesTags: ['Update'], }); // List.tsx const renderItem = (article: Article) => { const [deleteFunc] = useDeleteArticleMutation(); const [favorite] = useFavoriteMutation(); return ( <AList.Item extra={ <Button danger onClick={() => { deleteFunc(article.id); }} > delete </Button> } > <AList.Item.Meta title={<Link to={`view/${article.id}`}>{article.title}</Link>} description={article.content} avatar={ <Rate count={1} value={article.isFavorite ? 1 : 0} onChange={() => { favorite(article.id); }} /> } /> </AList.Item> ); };\",\"现在，点击任意一个文章的收藏按钮都会改变对应文章的状态，并且因为使用了 invalidatesTags，这会使得页面整体刷新。像更改收藏状态这样的小更新其实不需要重新获取整个帖子列表，我们甚至可以只更新 Redux 中已缓存的数据来匹配服务器上的预期改动，同时，立即更新缓存数据将使得页面更快速的更新，RTK Query 允许通过请求的生命周期函数来更新某个 query 的缓存：\",\"favorite: builder.mutation<void, string>({ query: id => ({ url: `/${id}/favorite`, method: 'POST', }), onQueryStarted: async (arg, { dispatch, queryFulfilled }) => { const action = api.util?.updateQueryData('fetchArticles', undefined, data => { const index = data.findIndex(a => a.id === arg); if (index >= 0) { data[index].isFavorite = !data[index].isFavorite; } }); const result = dispatch(action); try { await queryFulfilled; } catch { result.undo(); } }, });\",\"RTK Query 提供了 updateQueryData() 方法，此方法可以直接更新缓存中的查询数据，第一个参数指定要更新哪个 endpoint 的缓存数据，第二个参数是入参筛选，例如如果要更新的 endpoint 存在入参，那么通过指定第二个参数可以更新指定的缓存数据，第三个参数是一个函数，入参就是缓存中的数据，可以直接操作，当然操作缓存仍然要已不可变的形式完成，不过 RTK Query 中使用了 Immer，因此可以直接修改。updateQueryData() 方法会返回一个 action，dispatch 这个方法即可实现更新 state。\",\"onQueryStarted 是一个查询的生命周期函数，第一个参数是当前查询的入参，第二个参数是一个对象，包含多个内容，其中 dispatch 可以分发 action 来实现对状态的更改，queryFulfilled 是当前查询的一个 Promise，上面的例子中 await 这个 Promise 就是在等待调用接口成功，如果接口报错，那么取消 action 的执行。\",\"同时，在上面的例子中我们删除了 invalidatesTags 字段，因为现在的目标是更新收藏状态不重新拉取文章列表。\"]},\"352\":{\"h\":\"使用懒加载\",\"t\":[\"API 切片中除了普通的 Query Hooks 之外，每个 Query Hook 都有一个对应的 LazyQueryHook，这些 Hooks 可以实现懒加载而不是在组件被挂载时就执行，他们的用法类似 Mutation Hooks，例如，在 List 组件中控制挂载 3 秒后才拉取数据：\",\"const List: FC = () => { const [query, { data, isFetching }] = useLazyFetchArticlesQuery(); useEffect(() => { const id = setTimeout(() => { query(); }, 3000); return () => { clearTimeout(id); }; }, []); return ( <Spin spinning={isFetching}> {!isFetching ? ( <AList dataSource={data} renderItem={renderItem} rowKey={item => item.id} /> ) : ( <Empty /> )} </Spin> ); };\"]},\"353\":{\"h\":\"不使用 Redux Toolkit 的例子\",\"t\":[\"上面的文章管理中使用了 Redux Toolkit 来构建应用，下面是仅使用 Redux 的例子，不再使用 Redux Toolkit。我们同样从不使用异步接口的情况开始，首先构造一个 Article Reducer：\",\"export type Article = { id: string; title: string; content: string; isFavorite?: boolean; }; interface ArticlePayload { id?: string; title?: string; content?: string; } interface ArticleAction extends Action { type: 'articles/upsert' | 'articles/delete' | 'articles/updateFavorite'; payload: ArticlePayload; } type ArticleState = Array<Article>; const articleReducer: Reducer<ArticleState, ArticleAction> = (state = [], action) => { switch (action.type) { case 'articles/upsert': if (action.payload.id) { state = state.map(a => { if (a.id === action.payload.id) { a.title = action.payload.title || ''; a.content = action.payload.content || ''; } return a; }); } else { const temp: Article = { id: new ObjectID().toHexString(), title: action.payload.title || '', content: action.payload.content || '', }; state = [...state, temp]; } break; case 'articles/delete': state = state.filter(a => a.id !== action.payload.id); break; case 'articles/updateFavorite': state = state.map(a => { if (a.id === action.payload.id) { a.isFavorite = !a.isFavorite; } return a; }); break; } return state; }; const selectAllArticles: Selector<NativeState, Array<Article>> = state => state.article; const selectArticleById: (id: string) => Selector<NativeState, Article | undefined> = id => { return state => { return state.article.find(a => a.id === id); }; }; export { selectAllArticles, selectArticleById }; export default articleReducer;\",\"由于直接使用原生 Redux，因此 action type 的判断需要自行处理，同时由于原生 Redux 没有使用 Immer，因此不可变更新需要自行完成。同时定义了两个 Selector 用来获取数据。\",\"接下来构造 Store 对象，为了将各个 Reducer 组合起来，需要使用 combineReducers 方法：\",\"import { createStore, combineReducers } from 'redux'; import articleReducer from './article.ts'; const rootReducer = combineReducers({ article: articleReducer, }); const nativeStore = createStore(rootReducer); export type NativeDispatch = typeof nativeStore.dispatch; export type NativeState = ReturnType<typeof nativeStore.getState>; export default nativeStore;\",\"现在 Redux 已经配置好了，应用可以正常使用，但是 Redux DevTools 没有内容，我们需要将 DevTools 添加到 Enhancers 中：\",\"import { createStore, combineReducers } from 'redux'; import { composeWithDevTools } from 'redux-devtools-extension'; import articleReducer from './article.ts'; const rootReducer = combineReducers({ article: articleReducer, }); const nativeStore = createStore(rootReducer, composeWithDevTools());\"]},\"354\":{\"h\":\"subscribe\",\"t\":[\"Redux 中 Store 的 subscribe() 方法可以添加一个变化监听器，每当 dispatch action 的时候就会被执行。subscribe 回调中可以执行 dispatch()。\",\"现在来注册一个监听器，当 state 发生变化时打印日志：\",\"const unsubscribeFn = nativeStore.subscribe(() => { const nowState = nativeStore.getState(); if (!Object.is(nowState, prevState)) { console.log(`state changed from ${JSON.stringify(prevState)} to ${JSON.stringify(nowState)}`); } prevState = nowState; }); export { unsubscribeFn };\",\"现在改变 state 都会打印日志，subscribe() 方法会返回一个退订函数，调用这个函数可以取消一个订阅，例如：\",\"<Button onClick={unsubscribeFn}>unsubscribe</Button>\"]},\"355\":{\"h\":\"Enhancers\",\"t\":[\"StoreEnhancer 是一个函数，此函数接收一个 Store Creator 的入参，返回一个新的 Creator，例如现在要使得每次调用 dispatch 的时候打印日志，可以使用下面的 StoreEnhancer 来实现：\",\"const logEnhancer: StoreEnhancer = creator => { return (state, action) => { const store = creator(state, action); const originalDispatch = store.dispatch; store.dispatch = action => { console.log('Dispatching:', action); const result = originalDispatch(action); console.log('Dispatched, next state:', store.getState()); return result; }; return store; }; };\",\"同时，我们又希望能够继续使用 Redux DevTools，由于 createStore() 方法只接收一个 Enhancer，因此我们需要将多个 Enhancer 组合起来，需要使用 redux 中的 compose() 方法：\",\"const enhancers = compose(composeWithDevTools(), logEnhancer); const nativeStore = createStore(rootReducer, enhancers);\",\"现在再发生 dispatch 后控制台会有对应的输出。\"]},\"356\":{\"h\":\"Middleware\",\"t\":[\"Enhancer 非常强大，因为它可以覆盖或者替换 Store 上的任何内容，包括 dispatch、getState 和 subscribe，但是很多时候我们只需要定制 dispatch 即可，Redux middleware 可以实现仅对 dispatch 进行自定义。\",\"现在使用 middleware 来实现 dispatch 的日志功能，首先定义一个 middleware：\",\"const logMiddleware: Middleware = api => next => action => { console.log('dispatching', action); const result = next(action); console.log('Dispatched, next state:', api.getState()); return result; };\",\"middleware 是一个函数，返回另一个函数，此函数入参是 dispatch，然后返回下一个函数，这个函数入参是 action，通过这样包装实现 middleware 的功能。\",\"middleware 需要变为 Enhancer 并注入到 Store 中才会生效，使用 applyMiddleware() 方法可以将多个 middleware 连接为一个 Enhancer，然后可以加入到 Store 中：\",\"const middleEnhancer = applyMiddleware(logMiddleware); const enhancers = compose(composeWithDevTools(), middleEnhancer); const nativeStore = createStore(rootReducer, enhancers);\"]},\"357\":{\"h\":\"异步\"},\"358\":{\"h\":\"自定义异步 middleware\",\"t\":[\"Redux Reducer 不能包含副作用，例如异步请求、保存文件等，但是程序中总是要有处理异步的地方，Redux middleware 就是存放这些副作用逻辑的地方，接下来开始改造上面的内容，使用自定义 middleware 支持异步并从服务器获取数据。\",\"首先来修改一下之前 action 的类型定义：\",\"export type ArticleAsyncFn = ( dispatch: Dispatch<ArticleAction>, state: ArticleState ) => Promise<void>; export interface ArticleAction extends Action { // ...... payload?: ArticlePayload | ArticleAsyncFn; }\",\"现在，ArticleAction 的 payload 字段可以是一个函数了，在 middleware 中只要判断这一点就可以实现发出异步请求了，例如：\",\"const asyncMiddleware: Middleware = ({ dispatch, getState }) => next => async action => { if (typeof action.payload === 'function') { const fn = action.payload as ArticleAsyncFn; try { dispatch({ type: 'articles/pending' }); await fn(dispatch, getState()); } catch (e) { let message = JSON.stringify(e); if (e instanceof Error) { message = e.message; } dispatch({ type: 'articles/rejected', payload: { message: message } }); throw e; } } return next(action); };\",\"这个 middleware 中首先判断 payload 是不是函数，如果是的话就调用这个函数，并且根据结果 dispatch 相关的 action。\",\"接下来就需要定义发起异步请求的相关方法：\",\"const fetchArticlesFn: ArticleAsyncFn = async dispatch => { const resp = await axiosInstance.get<Array<Article>>('/'); dispatch({ type: 'articles/resolved', payload: { articles: resp.data, }, }); }; const deleteArticleFn = (id: string): ArticleAsyncFn => { return async dispatch => { await axiosInstance.delete<void>(`/${id}`); dispatch(fetchArticles()); }; }; const upsertArticleFn = (params: UpsertRequest): ArticleAsyncFn => { return async dispatch => { if (params.id) { await axiosInstance.put(`/${params.id}`, params); } else { await axiosInstance.post<void>('/', params); } dispatch(fetchArticles()); }; }; const updateFavoriteFn = (id: string): ArticleAsyncFn => { return async dispatch => { await axiosInstance.post<void>(`/${id}/favorite`); dispatch(fetchArticles()); }; };\",\"然后 dispatch 时传入这些函数作为 payload 即可，当然这样的方式要不断构造 action 对象，所以可以定义对应的 ActionCreator：\",\"const fetchArticles = (): ArticleAction => ({ type: 'articles/fetch', payload: fetchArticlesFn, }); const deleteArticle = (id: string): ArticleAction => ({ type: 'articles/delete', payload: deleteArticleFn(id), }); const upsertArticle = (params: UpsertRequest): ArticleAction => ({ type: 'articles/fetch', payload: upsertArticleFn(params), }); const updateFavorite = (id: string): ArticleAction => ({ type: 'articles/updateFavorite', payload: updateFavoriteFn(id), });\",\"这样在组件中就可以像下面这样使用了：\",\"const onSubmit = async ({ title, content }: formType) => { try { await dispatch(upsertArticle({ title, content })); } catch (e) { if (e instanceof Error) { sender.error(e.message); } else { sender.error(JSON.stringify(e)); } return; } sender.success('ok'); };\"]},\"359\":{\"h\":\"使用 thunk middleware\",\"t\":[\"除了自定义异步 middleware 之外，还可以直接使用 thunk middleware。\",\"安装：\",\"yarn add redux-thunk\",\"然后引入这个中间件：\",\"import thunk from 'redux-thunk'; const middleEnhancer = applyMiddleware(thunk);\",\"引入此中间件后，dispatch 可以接受函数作为参数了，所以现在来修改之前发出请求的异步函数：\",\"import { ThunkAction, ThunkDispatch } from 'redux-thunk'; const fetchArticles: ThunkAction< Promise<void>, NativeState, void, ArticleAction > = async dispatch => { const resp = await axiosInstance.get<Array<Article>>('/'); dispatch({ type: 'articles/resolved', payload: { articles: resp.data, }, }); }; const deleteArticle = ( id: string ): ThunkAction<Promise<void>, NativeState, void, ArticleAction> => { return async dispatch => { await axiosInstance.delete<void>(`/${id}`); await dispatch(fetchArticles); }; }; const upsertArticle = ( params: UpsertRequest ): ThunkAction<Promise<void>, NativeState, void, ArticleAction> => { return async dispatch => { if (params.id) { await axiosInstance.put(`/${params.id}`, params); } else { await axiosInstance.post<void>('/', params); } await dispatch(fetchArticles); }; }; const updateFavorite = ( id: string ): ThunkAction<Promise<void>, NativeState, void, ArticleAction> => { return async dispatch => { await axiosInstance.post<void>(`/${id}/favorite`); await dispatch(fetchArticles); }; };\",\"这里将函数或者函数的返回值声明为 ThunkAction 类型，这个类型接收四个泛型，第一个泛型是返回类型，这里都是返回 Promise<void>，第二个泛型是 Store 中状态树的类型，第三个泛型是额外参数，这里设置为 void，第四个泛型是当前 reducer 正常的 Action 类型。\",\"接下来，为了在 dispatch 传入函数的情况下仍然有 TypeScript 类型标注，因此需要定义一个新的 Dispatch 类型：\",\"export type ArticleDispatch = ThunkDispatch<NativeState, void, ArticleAction>;\",\"最后，在组件中使用这些 action：\",\"{ /* other codes */ } { isEditing ? ( <Button onClick={async () => { await dispatch(upsertArticle({ title, content, id: article?.id })); setIsEditing(false); sender.success('ok'); }} > Submit </Button> ) : undefined; } { /* other codes */ }\"]},\"360\":{\"h\":\"ref\",\"t\":[\"如果希望组件记住某些信息在之前可以使用 state，但是修改 state 会重新渲染页面，如果希望不渲染页面可以使用 ref。\",\"下面是一个例子，每次点击按钮会在控制台输出点击的总次数：\",\"<script type=\\\"text/babel\\\"> function RefDemo() { const ref = React.useRef(0); return ( <button onClick={() => { ref.current++; console.log(ref.current); }} > click </button> ); } ReactDOM.render(<RefDemo />, document.getElementById('test')); </script>\",\"和 state 一样，ref 可以指向任何东西，与 state 相比，ref 是一个普通的 JavaScript 对象，具有可以被读取和修改的 current 属性。\",\"提示\",\"与 state 一样，ref 会在每次重新渲染之间被保留，但是设置 state 会触发渲染，修改 ref 则不会。\",\"接下来制作一个秒表，需要显示时间、开始按钮、停止按钮，这涉及到页面的渲染，因此，显示的时间要用 state，计时实际上就是每隔一段时间刷新页面上的计数，这可以通过 setInterval 来实现，因为需要停止功能，所以需要通过 setInterval 的返回值停止计时器，因此，计时器 id 可以使用 ref 实现。\",\"<script type=\\\"text/babel\\\"> function RefDemo() { const start = React.useRef(null); const intervalId = React.useRef(null); const [now, setNow] = React.useState(null); return ( <div> <span>{now && start ? (now - start.current) / 1000 : (0.0).toFixed(3)}</span> <br /> <button onClick={() => { start.current = Date.now(); setNow(start.current); intervalId.current = setInterval(() => { setNow(Date.now()); }, 10); }} > start </button> <br /> <button onClick={() => { clearInterval(intervalId.current); }} > stop </button> </div> ); } ReactDOM.render(<RefDemo />, document.getElementById('test')); </script>\",\"因为类组件中修改 state 只会调用 render 方法，成员变量还在，所以上面的场景不需要 ref 即可实现。\"]},\"361\":{\"h\":\"ref 操作 DOM\",\"t\":[\"当需要直接操作一个 DOM 节点时，可以使用 ref，例如现在有一个输入框和一个按钮，点击按钮聚焦到输入框中：\",\"function Focus() { const ref = React.useRef(null); return ( <div> <input ref={ref} /> <button onClick={() => { ref.current.focus(); }} > focus </button> </div> ); }\",\"对于类组件，通过 createRef 来实现上面的效果：\",\"class Focus extends React.Component { render() { return ( <div> <input ref={this.inputRef} /> <button onClick={() => { this.inputRef.current.focus(); }} > focus </button> </div> ); } constructor(props) { super(props); this.inputRef = React.createRef(); } }\",\"对于类组件，ref 可以使用字符串形式，但是此形式已过时：\",\"class Demo extends React.Component { render() { return ( <div> <input ref=\\\"input\\\" /> <button onClick={() => { console.log(this.refs.input.value); }} > click </button> </div> ); } }\",\"标签的 ref 的值也可以是一个纯函数，此函数的入参就是这个标签，可以将这个标签赋值给一个变量，通过此变量就能操作 DOM：\",\"class Demo extends React.Component { render() { return ( <div> <input ref={ref => { this.inputRef = ref; }} /> <button onClick={() => { console.log(this.inputRef.value); }} > click </button> </div> ); } }\"]},\"362\":{\"h\":\"ref 访问其他组件的 DOM\",\"t\":[\"react 禁止一个组件通过 ref 访问其他组件，即使是自己的子组件，但是允许一个组件选择接收父组件的 ref，可以通过 forwardRef 方法将父组件传来的 ref 交给组件内的其他组件或者标签，例如有以下例子，点击按钮聚焦到封装的 input 上：\",\"const MyInput = React.forwardRef((props, ref) => { return <input ref={ref} placeholder=\\\"my input\\\" />; }); function MyForm() { const inputRef = React.useRef(null); return ( <div> <MyInput ref={inputRef} /> <button onClick={() => { inputRef.current.focus(); }} > focus </button> </div> ); }\",\"上面的代码中，MyInput 组件将父组件传递来的 ref 传递给了 input 标签，现在点击按钮可以成功聚焦了。\",\"通过持有 ref 就可以对 DOM 进行操作，包括修改样式，如果希望控制 ref 暴露的功能，例如只能执行聚焦操作而不能修改样式，可以使用 useImperativeHandle：\",\"const MyInput = React.forwardRef((props, ref) => { const realRef = React.useRef(null); React.useImperativeHandle(ref, () => { return { ppg() { realRef.current.focus(); }, }; }); return <input ref={realRef} placeholder=\\\"my input\\\" />; }); function MyForm() { const inputRef = React.useRef(null); return ( <div> <MyInput ref={inputRef} /> <button onClick={() => { inputRef.current.ppg(); }} > focus </button> <button onClick={() => { inputRef.current.style.borderRadius = '10px'; }} > change border </button> </div> ); }\",\"useImperativeHandle 第一个参数是一个 ref，第二个参数是一个函数，返回一个对象，这样第一个参数 ref 身上只会带有返回对象上的内容。\"]},\"363\":{\"h\":\"受控组件和非受控组件\",\"t\":[\"受控组件：\",\"元素的值或者状态由 state 控制。\",\"当元素发生交互，会触发一个事件处理函数，该函数更新 state。\",\"受控组件总是显示 state 中的值。\",\"非受控组件：\",\"元素的值或者状态直接由 DOM 管理。\",\"通过 ref 操作。\",\"大多数情况下，推荐使用受控组件，这可以使数据流更加清晰可预测。\",\"例如，以下是将 input 作受控组件使用：\",\"function Demo() { const [value, setValue] = React.useState(''); return ( <div> <input value={value} onChange={event => { setValue(event.target.value); }} /> <br /> <span>{value}</span> </div> ); }\",\"以下是将 input 作非受控组件使用：\",\"function Demo() { const inputRef = React.useRef(null); const [value, setValue] = React.useState(''); return ( <div> <input ref={inputRef} onChange={() => { setValue(inputRef.current.value); }} /> <br /> <span>{value}</span> </div> ); }\"]},\"364\":{\"h\":\"React Router\",\"t\":[\"安装 react-router：\",\"yarn add react-router-dom\"]},\"365\":{\"h\":\"示例组件\",\"t\":[\"首先构造一个 App.tsx：\",\"import { FC } from 'react'; import styles from './styles/app.module.less'; const App: FC = () => { return ( <div className={styles.app}> <div className={styles.sideBar}> <a> <button className={styles.button}>Home</button> </a> <a> <button className={styles.button}>About</button> </a> </div> <div className={styles.content}></div> </div> ); }; export default App;\",\"后面的内容基于此页面进行。\"]},\"366\":{\"h\":\"创建 Router 实例\",\"t\":[\"要在项目中使用 React Router，需要先创建一个 router 实例，就像使用 Vue Router 那样。\",\"React Router 6.4 版本之后引入了 Data APIs，要想使用 Data APIs 就要使用支持 Data APIs 的 router。\",\"支持 Data APIs 的 router：\",\"createBrowserRouter。\",\"createMemoryRouter。\",\"createHashRouter。\",\"createStaticRouter。\",\"不支持 Data APIs 的 router：\",\"<BrowserRouter>。\",\"<MemoryRouter>。\",\"<HashRouter>。\",\"<NativeRouter>。\",\"<StaticRouter>。\",\"一般的 web 项目建议使用 createBrowserRouter，相比 createHashRouter 能够更好地支持 SEO 和服务端渲染，但是要注意如果是将前端页面放在 nginx 中提供服务，那么需要配置将对应的路由发送给 index.html 而不是发给后端服务，防止 404 问题。当然为了方便也可以直接用 createHashRouter。\",\"下面创建一个 browserRouter 的例子（createHashRouter 用法与 createBrowserRouter 一致），首先定义路由规则：\",\"const router = createBrowserRouter([ { path: '/', element: <App />, children: [ { path: 'about', element: <About />, }, { path: '/home', element: <Home />, }, ], }, ]);\",\"然后在要使用 router 的位置：\",\"ReactDOM.createRoot(document.getElementById('root')!).render( <React.StrictMode> <RouterProvider router={router} /> </React.StrictMode> );\",\"修改 App 组件中 a 标签：\",\"<a href={'home'}> <button className={styles.button}>Home</button> </a>\",\"启动项目，应该能够看到 App 组件的内容，点击按钮会发现页面没有渲染出对应的组件，这是因为在 App 组件中没有定义子组件的展示位置，使用 Outlet 组件可以定义子组件的展示位置：\",\"<div className={styles.content}> <Outlet /> </div>\"]},\"367\":{\"h\":\"RouterProvider\",\"t\":[\"所有支持 DataAPIs 的 Router 都要将实例传入此组件的 router prop。\",\"如果没有使用 SSR(Server Side Render)，那么在浏览器还未渲染完成页面时，可以通过 fallbackElement prop 传递一个 JSX 标签，例如遮罩层或者鱼骨架等效果，用来提醒用户正在加载。\"]},\"368\":{\"h\":\"使用 Link、NavLink 组件替换 a 标签防止浏览器刷新界面\",\"t\":[\"上面的例子中，点击 a 标签会触发浏览器刷新，如果要去掉这种效果，可以使用 React Router Link 组件替换 a 标签：\",\"<Link to={'home'}></Link>\",\"此外，如果希望链接在被激活时有高亮效果，那么可以使用 NavLink，当一个 NavLink 被激活时，会给渲染出来的 a 标签添加一个 active class，如果项目中有这个类选择器的样式那么就会生效。但是如果使用了 CSS Modules，那么我们定义的 active 样式的类名可能就不是 active 了，这时可以通过 className 属性动态为 NavLink 添加样式。\",\"NavLink 组件的 className 属性除了可以像正常的 className 一样使用之外，还可以是一个纯函数，这个函数应该返回类名，此函数接收一个对象，对象上有三个布尔属性：isActive、isPending、isTransitioning。\",\"<NavLink to={'home'} className={({ isActive }) => (isActive ? styles.active : '')}> <button className={styles.button}>Home</button> </NavLink>\",\"NavLink 组件的 children 也可以是一个接收上面这个对象的纯函数，用于控制 NavLink 中显示的子元素，例如：\",\"<NavLink to={'home'} className={({ isActive }) => (isActive ? styles.active : '')}> {({ isActive }) => { let content = 'Home'; if (isActive) { content = content.toUpperCase(); } return <button className={styles.button}>{content}</button>; }} </NavLink>\",\"NavLink 组件的是否激活是通过 to 和 url 比较判断的，默认情况下会忽略大小写进行比较，如果希望大小写敏感，那么可以使用 caseSensitive 属性来限制大小写：\",\"<NavLink to={'HOME'} className={({isActive}) => isActive ? styles.active : ''} caseSensitive={false} >\",\"这样，如果访问 /home 那么此链接不会有 active 的效果。\",\"NavLink 组件也可以限制 URL 匹配是否匹配后缀，例如如果上面的 Home 组件还有子组件，那么访问子组件的 url 应该是 /home/sub，默认情况下访问这个子组件时 /home 对应的 NavLink 链接也会有 active 效果，如果希望去掉这种效果，那么可以使用 end 属性：\",\"<NavLink to={'home'} className={({isActive}) => isActive ? styles.active : ''} end >\"]},\"369\":{\"h\":\"不使用 Data Apis 的 router\",\"t\":[\"上面的例子也可以用不支持 Data APIs 的 router实现：\",\"ReactDOM.createRoot(document.getElementById('root')!).render( <React.StrictMode> <BrowserRouter> <Routes> <Route path=\\\"/\\\" element={<App />}> <Route path=\\\"home\\\" element={<Home />} /> <Route path=\\\"about\\\" element={<About />} /> </Route> </Routes> </BrowserRouter> </React.StrictMode> );\"]},\"370\":{\"h\":\"Route 配置项\",\"t\":[\"除了上面用到的 path、element、children 属性，路由规则还有很多配置项。\"]},\"371\":{\"h\":\"错误处理\",\"t\":[\"如果在渲染一个组件时报错，那么会跳转到一个错误页面，默认情况下是 React Router 的内置页面，可以通过 errorElement 属性指定自定义的报错页面：\",\"// 抛出错误 const About: FC = () => { throw new Error('test error'); return ( <h1>About</h1> ) } // 自定义错误页面 { path: 'about', element: <About/>, errorElement: <ErrorPage/> },\",\"提示\",\"渲染报错后，错误页面是距离报错组件最近的错误页面。例如如果上面的例子中 App 组件也指定了错误页面，那么显示的应该是 About 指定的错误页面。\",\"为了在错误页面中获取错误信息，可以使用 useRouteError 这个 hook：\",\"const ErrorPage: FC = () => { const err = useRouteError() as Error; return ( <div className={styles.page}> <span className={styles.text}>oop! There is an error: {err.message}</span> </div> ); };\"]},\"372\":{\"h\":\"参数路由\",\"t\":[\"参数路由（动态路由）是指某个节点可以匹配不同的内容并能获取对应的参数，获取到的结果就是 params 参数，React Router 中通过冒号来定义参数路由。\",\"首先定义一个 HomeDetailLink 组件：\",\"import { FC } from 'react'; const HomeLink: FC = () => { return <h3>link</h3>; }; export default HomeLink;\",\"然后为这个组件配置路由：\",\"const router = createBrowserRouter([ { path: '/', element: <App />, children: [ { path: 'about', element: <About />, ErrorBoundary: ErrorPage, }, { path: 'home', element: <Home />, children: [ { path: 'links', element: <HomeLink />, }, ], }, ], }, ]);\",\"然后修改 HomeDetail 组件，添加三个按钮，点击每个按钮跳转到 HomeDetailLink：\",\"const HomeDetail: FC = () => { return ( <div className={styles.detail}> <div className={styles.menus}> <NavLink to={'links'} className={({ isActive }) => (isActive ? styles.active : '')}> <button className={styles.menuButton}>link1</button> </NavLink> <NavLink to={'links'} className={({ isActive }) => (isActive ? styles.active : '')}> <button className={styles.menuButton}>link2</button> </NavLink> <NavLink to={'links'} className={({ isActive }) => (isActive ? styles.active : '')}> <button className={styles.menuButton}>link3</button> </NavLink> </div> <Outlet /> </div> ); };\",\"现在点击三个按钮内容所展示的内容完全一致，现在为 HomeDetailLink 组件配置参数路由，并修改上面 NavLink 的 to 属性：\",\"{ path: 'home', element: <Home/>, children: [ { path: 'links/:id', element: <HomeLink/>, } ] } // 修改 NavLink to 属性 <NavLink to={'links/1'} className={({isActive}) => isActive ? styles.active : ''} >\",\"现在再点击三个按钮，浏览器的地址栏 URL 会各不相同，而且同时只会有一个按钮有 active 效果。\",\"现在要在 HomeDetailLink 组件中获取参数路由中 id 的值并展示到页面上，这需要使用 useParams hook：\",\"type HomeLinkParams = { id: string; }; const HomeLink: FC = () => { const params = useParams<HomeLinkParams>(); return <h3>{`showing link${params.id}`}</h3>; };\"]},\"373\":{\"h\":\"可选路由\",\"t\":[\"修改上面 link1 按钮的 to 属性，改为 links，这时因为链接里没有上面的动态参数所以会导致 404，对于这种需要 URL 中某个部分允许忽略的情况可以使用可选路由：\",\"{ path: 'home', element: <Home/>, children: [ { path: 'links/:id?', element: <HomeLink/>, } ] }\",\"在 URL 中使用问号可以使某一部分可以忽略，当然我们也可以忽略上面的 links：\",\"{ path: 'home', element: <Home/>, children: [ { path: 'links?/:id?', element: <HomeLink/>, } ] }\",\"这样即使跳转路径为 /home/123 也能展示 HomeDetailLink 组件，但是只访问 /home 是不会渲染 HomeDetailLink 的，因为 Home 组件设置的路由会先被匹配到。\"]},\"374\":{\"h\":\"通配路由\",\"t\":[\"使用星号 * 可以进行通配，例如：\",\"{ path: 'home', element: <Home/>, children: [ { path: 'links/*', element: <HomeLink/>, } ] }\",\"这样凡是以 /home/links 开头的路径都会被 HomeLink 捕获，如果要在 HomeLink 中获取通配得到的内容，还是使用 useParams：\",\"type HomeLinkParams = { id?: string; '*'?: string; }; const HomeLink: FC = () => { const params = useParams<HomeLinkParams>(); return ( <> <h3>{`showing link${params.id ? params.id : '-'}`}</h3> <h3>get params from pattern: {params['*']}</h3> </> ); };\",\"如果 NavLink 的 to 为 /home/links/123/456 那么上面 params['*'] 的值就是 123/456。\"]},\"375\":{\"h\":\"大小写敏感设置\",\"t\":[\"默认情况下 URL 匹配大小写不敏感，可以通过将 caseSensitive 设置为 true 开启大小写敏感。\"]},\"376\":{\"h\":\"设置默认组件\",\"t\":[\"截止到现在，如果直接访问 localhost:5173 会发现右侧实际上没有渲染 Home 组件或者 About 组件导致空白，如果希望有一个默认首选组件，即使不指定 URL 也能渲染出一个组件可以使用 index 属性：\",\"const router = createBrowserRouter([ { path: '/', element: <App />, children: [ { index: true, element: <IndexPage />, }, { /*...other routes...*/ }, ], }, ]);\",\"现在再访问 localhost:5173 就会默认展示 IndexPage 了。\",\"注意\",\"如果一个 route 规则中设置了 children，那么此规则就不能设置 index 属性了。\"]},\"377\":{\"h\":\"组件懒加载\",\"t\":[\"Route 配置中可以通过 lazy 属性设置懒加载，可以懒加载 loader、action、element、errorElement 等，lazy 属性是一个 Promise 函数，返回一个路由配置对象，将现有的路由配置改为全部懒加载如下：\",\"const router = createBrowserRouter([ { path: '/', lazy: async () => ({ Component: (await import('../App')).default }), children: [ { index: true, lazy: async () => ({ Component: (await import('../components')).IndexPage }), }, { path: 'about', async lazy() { const { About, ErrorPage } = await import('../components'); return { element: <About />, errorElement: <ErrorPage />, }; }, }, { path: 'home', lazy: async () => ({ Component: (await import('../components')).Home }), children: [ { path: 'links/*', caseSensitive: false, lazy: async () => ({ Component: (await import('../components')).HomeLink }), }, ], }, ], }, ]);\",\"注意\",\"懒加载只能用于非路由匹配部分，path、index、children、caseSensitive 等属性要用来路由匹配，所以这些属性不能在 lazy 中返回。\"]},\"378\":{\"h\":\"导航到组件时获取数据\",\"t\":[\"为了在一个组件被导航激活时获取数据，可以使用 React Router 的 loader 来实现，这个属性是一个函数，一般来说是异步的，此函数接收一个对象，对象中包含两个属性：params 和 request。params 就是 params 参数，request 是 JavaScript Fetch API 的内容，参考：Request。\",\"下面做一个例子，基于上面的 HomeDetail 和 HomeLink 两个组件，需求是点击不同的按钮后跳转到 HomeLink，在 HomeLink 中根据收到的 params 参数调用接口获取数据并展示：\",\"首先 mock 一些数据：\",\"// 定义 link 类型 type link = { id: string; content: string; }; // mock 数据 const links: Array<link> = [ { id: '1', content: 'message of link1', }, { id: '2', content: 'message of link2', }, { id: '3', content: 'message of link3', }, ]; class Link { static getLink = async (id: string): Promise<link> => { await mockNetwork(); const index = links.findIndex(link => link.id === id); if (index >= 0) { return links[index]; } throw new Error('no link found'); }; } // 模拟网络请求 const mockNetwork = async () => { return new Promise<void>(res => { setTimeout(res, 300); }); };\",\"准备就绪后定义 loader 方法，此方法应该返回一个对象：\",\"const homeLinkLoader: LoaderFunction = ({ params }: { params: Params<'id'> }) => { if (!params.id) { throw new Error('empty link id!'); } return Link.getLink(params.id); };\",\"然后将这个 loader 添加到路由定义里：\",\"{ path: \\\"home\\\", lazy: async () => ({ Component: (await import(\\\"../components\\\")).Home }), children: [ { path: \\\"links/:id\\\", caseSensitive: false, lazy: async () => ({ Component: (await import(\\\"../components\\\")).HomeLink, loader: (await import(\\\"../components\\\")).homeLinkLoader, }), }, ], },\",\"要在组件中使用 loader 返回的数据，可以使用 useLoaderData 这个 hook：\",\"const HomeLink: FC = () => { const link = useLoaderData() as link; return ( <> <h3>{link.id}</h3> <p>{link.content}</p> </> ); };\",\"上面的这个 useLoaderData 只能在对应的组件中使用，现在假设我们要在外层 HomeDetail 组件中访问当前 link，那么可以使用 useRouteLoaderData 这个 hook，这个方法接收一个字符串 id，调用此方法会得到路由配置 id 选项等于这个 id 的组件的 loader 的结果：\",\"// 为 HomeLink 组件路由配置 id { path: \\\"links/:id\\\", caseSensitive: false, id: \\\"link\\\", lazy: async () => ({ Component: (await import(\\\"../components\\\")).HomeLink, loader: (await import(\\\"../components\\\")).homeLinkLoader, ErrorBoundary: (await import(\\\"../components\\\")).ErrorPage, }), }, // 在外部访问 loader const HomeDetail: FC = () => { const link = useRouteLoaderData(\\\"link\\\") as link; console.log(link); // ...... };\"]},\"379\":{\"h\":\"action\",\"t\":[\"现在，假设要增加两个按钮，点击第一个按钮创建一个 link 对象，点击第二个按钮删除最后一个 link，要求这两个操作都要触发 UI 重新渲染，根据之前的内容，要想触发 UI 的重新渲染可以通过改变 state 或者 props 来实现，在这个场景中，应该用 state 来实现：\",\"首先定义对 link 的操作：\",\"static listLinks = async (): Promise<Array<link>> => { return new Promise<Array<link>>((res) => { res(links); }); }; static createLink = async (): Promise<void> => { const newLink: link = { id: `${links.length + 1}`, content: `message of link${links.length + 1}`, }; links.push(newLink); }; static deleteLastLink = async (): Promise<void> => { links.pop(); };\",\"然后将 HomeLink 组件的路由中的 :id 参数改为可选项，并修改 loader 方法，如果不传 id 那么就返回全部 link：\",\"const homeLinkLoader: LoaderFunction = ({ params }: { params: Params<'id'> }) => { if (!params.id) { return Link.listLinks(); } return Link.getLink(params.id); };\",\"然后修改 HomeDetail 组件的 NavLink，设置其中一个按钮不传 id params 参数，使得能够展示所有 links，最后修改 HomeLink 组件：\",\"const HomeLink: FC = () => { const data = useLoaderData(); let links: Array<link>; if (data instanceof Array) { links = data as Array<link>; } else { links = [data as link]; } return ( <div> {links.length > 1 ? ( <div className={styles.buttons}> <button className={styles.menuButton}>add</button> <button className={styles.menuButton}>delete</button> </div> ) : undefined} <ul> {links.map(link => { return ( <> <li> {link.id} - {link.content} </li> </> ); })} </ul> </div> ); };\",\"现在开始引入 state，由于 add 和 button 都要操作同一个 state，但是因为有异步操作，所以还是用 state 而不是 reducer：\",\"const data = useLoaderData(); const [links, setLinks] = useState<Array<link>>([]); const onLinkAdd = async () => { await Link.createLink(); const newLinks = await Link.listLinks(); setLinks([...newLinks]); }; const onLinkDelete = async () => { await Link.deleteLastLink(); const newLinks = await Link.listLinks(); setLinks([...newLinks]); };\",\"注意，由于 HomeLink 组件是会随着动态路由不断重新渲染，而 useState 初始化只有第一次才会执行，所以上面的代码里 state 不能在 useState 中初始化，应该使用 useEffect 并且依赖 data：\",\"useEffect(() => { if (data instanceof Array) { setLinks(data as Array<link>); } else { setLinks([data as link]); } }, [data]);\",\"上面使用 sate 的实现方式过于复杂，其实只需要触发 loader 执行就可以了，为了解决这个问题，React Router 提供了 action 来支持，action 会改变 loader 的结果，调用 action 后会重新调用 loader，组件也会重新渲染，当组件发生非 GET 类型的提交请求时 action 都会被触发。\",\"action 也是一个函数，此函数接收一个对象，这个对象包含路由动态参数 params 和 Fetch Request 变量 requst，这个函数可以是异步的。\",\"最简单的仍然是表单提交的场景，这里在 About 组件中演示，首先创建一个表单，这个表单具有一个输入框和一个按钮，点击按钮会创建一个 link：\",\"const About: FC = () => { return ( <form method=\\\"post\\\" action=\\\"/about\\\"> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </form> ); };\",\"然后定义一个 action，接收这个表单传递的参数并创建 link：\",\"// link.ts static createLink = async (content?: string): Promise<void> => { console.log(\\\"calling \\\", \\\"createLink\\\"); await mockNetwork(); const newLink: link = { id: `${links.length + 1}`, content: content ? content : `message of link${links.length + 1}`, }; links.push(newLink); }; // 定义 action const aboutAction: ActionFunction = async ({ request }) => { const data = await request.formData(); const content = data.get(\\\"content\\\") as string; await Link.createLink(content); return redirect(\\\"/home/links\\\"); };\",\"上面的 action 返回一个 redirect，这个方法可以在 loader 或者 action 中使用，调用这个方法就相当于创建一个 302 状态的，同时设置了重定向地址的 Fetch API Response 对象。\",\"接下来配置路由，将这个 action 设置给 About 组件：\",\"{ path: \\\"about\\\", lazy: async () => ({ Component: (await import(\\\"../components\\\")).About, ErrorBoundary: (await import(\\\"../components\\\")).ErrorPage, action: (await import(\\\"../components\\\")).aboutAction, }), },\",\"现在，点击这个表单的按钮，会发现请求报错 404，这是因为原生表单提交时浏览器会向 action 发送请求并刷新页面，上面的代码中是向 /about 发送 POST 请求，这会导致 404，即使改为 GET 方式也不会创建 link，因此在这种场景中需要拦截浏览器对表单的默认处理，在 React Router 中可以使用封装的 Form 组件完成：\",\"const About: FC = () => { return ( <Form method=\\\"post\\\"> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </Form> ); };\",\"现在点击提交后会调用 action 并且重定向到 HomeLink 组件。\",\"提示\",\"action 属性如果不指定那么默认是交给当前路径对应的组件的 action 进行处理。\",\"因为 action 不响应 GET 方式的提交，如果上面的 form 是 get 方式提交的，那么可以在指定 action 中通过 loader 中的 request 来获取提交的内容，例如现在为 About 组件加一个 loader，只获取并输出提交的内容：\",\"// 添加 loader 获取 GET 方式提交的表单 const aboutLoader: LoaderFunction = ({ request }) => { const url = new URL(request.url); return url.searchParams.get('content'); }; // 在 loader 对应的组件中使用 useLoaderData const About: FC = () => { console.log(useLoaderData()); return ( <Form method=\\\"get\\\"> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </Form> ); };\",\"HomeLink 中的例子不适合表单实现，React Router 提供了 useSubmit 这个 hook，此方法返回一个函数，此函数第一个参数是 target, 可以是 FormData、JsonValue 等，用来传递数据；第二个参数是提交选项，可以控制 method、action 等属性，要改写上面的 HomeLink，先修改 HomeLink 组件：\",\"// 移除事件处理函数和 state <button className={styles.menuButton} onClick={() => {submit({method: 'create'}, {method: 'post', encType: 'application/json'})}}> add </button> <button className={styles.menuButton} onClick={() => {submit({method: 'delete'}, {method: 'delete', encType: 'application/json'})}}> delete </button>\",\"注意\",\"上面如果使用 JSON 传递数据那么必须手动设置 encType 为 application/json。\",\"然后定义 action：\",\"const linkAction: ActionFunction = async ({ request }) => { const data = (await request.json()) as { method: 'create' | 'delete' }; if (data.method === 'create') { await Link.createLink(); } else { await Link.deleteLastLink(); } return null; };\",\"现在点击添加或者删除组件同样会重新渲染而不再依赖 state。\",\"action 也可以返回数据，返回的内容可以在对应组件中使用 useActionData 这个 hook 来获取，例如上面的 linkAction 我们返回一个 Fetch API 的 Response 对象，并将状态设置为 200：\",\"const linkAction: ActionFunction = async ({ request }) => { const data = (await request.json()) as { method: 'create' | 'delete' }; if (data.method === 'create') { await Link.createLink(); } else { await Link.deleteLastLink(); } return new Response('{\\\"status\\\": \\\"ok\\\"}', { headers: { 'Content-Type': 'application/json', }, }); };\",\"然后我们在 HomeLink 中使用 useActionData 获取：\",\"const actionData = useActionData(); console.log('action data', actionData, typeof actionData);\"]},\"380\":{\"h\":\"shouldRevalidate\",\"t\":[\"默认情况下，渲染组件或者触发 action 都会导致调用 loader，shouldRevalidate 方法会在 loader 新数据之前调用，此方法如果返回 false，那么 loader 将不会被调用，也就是说展示的数据还是旧数据，此方法接收一个对象参数，这个对象中包含触发 action 的数据（formData、json 等）以及一些其他数据，现在为 HomeLink 组件定义一个 shouldRevalidate，使得点击添加后创建 link 但是不更新页面，点击删除正常更新页面。\",\"首先定义 shouldRevalidate 方法：\",\"const homeLinkShouldRevalidate: ShouldRevalidateFunction = ({ json }) => { if (!json) { return false; } const temp = json as { method: 'create' | 'delete' }; return temp.method !== 'create'; };\",\"然后修改 HomeLink 组件的路由配置：\",\"lazy: async () => ({ Component: (await import(\\\"../components\\\")).HomeLink, loader: (await import(\\\"../components\\\")).homeLinkLoader, ErrorBoundary: (await import(\\\"../components\\\")).ErrorPage, action: (await import(\\\"../components\\\")).linkAction, shouldRevalidate: (await import(\\\"../components\\\")).homeLinkShouldRevalidate, }),\",\"接下来点击 add 或者 delete 会发现页面仍然在正常更新，似乎 shouldRevalidate 没有生效？不，其实已经生效了，可以在 loader 中打印 log 来证明这一点，页面正常更新是因为 Link 类中 listLinks 返回了存储 links 的数组变量，这导致在第一次渲染的时候拿到的就是这个变量，后面即使 loader 不执行但是因为引用的关系在组件中使用 useLoaderData 仍然能拿到最新的 links 值，因此修改 listLinks：\",\"static listLinks = async (): Promise<Array<link>> => { console.log(\\\"calling \\\", \\\"listLinks\\\"); await mockNetwork(); return new Promise<Array<link>>((res) => { res([...links]); }); };\",\"警告\",\"React 中很多值要理解为不可变，例如 useState、useLoader，这些方法的结果必须是全新的数据，不能是引用。\"]},\"381\":{\"h\":\"编程式路由\",\"t\":[\"使用 useNavigate 获取 navigate 对象，通过此对象操作路由。\",\"首先构造一个导航组件：\",\"const NavigatePage: FC = () => { const ngv = useNavigate(); const navigate = () => {}; return ( <div className={styles.top}> <button className={styles.button} onClick={() => { navigate(); }} > Go </button> </div> ); };\",\"调用 useNavigate 获取一个 NavigateFunction 对象，类型声明如下：\",\"export interface NavigateFunction { (to: To, options?: NavigateOptions): void; (delta: number): void; }\",\"用法一，前进后退指定步数：\",\"const navigate = () => { ngv(-1); };\",\"用法二，通过配置项跳转：\",\"const navigate = () => { ngv('/home/links', { state: { now: new Date() } }); };\",\"此外，此方法支持相对路径，默认情况下，相对路径被解析为以路由为相对，举例来说，如果当前路径是 /test/nvg，之前的路径是 /home，那么这种情况下 navigate('..') 会向上跳转一级路由，也就是跳转到 /home，如果函数的选项中设置了 Relative 属性为 path，那么相对跳转就是相对于 URL 了，例如 /test/nvg 向上跳转会跳转到 /test。\",\"ngv('..', { relative: 'path' });\"]},\"382\":{\"h\":\"传递参数\"},\"383\":{\"h\":\"传递 params 参数\",\"t\":[\"见上文。\"]},\"384\":{\"h\":\"传递 query 参数\",\"t\":[\"如果要读取 query 参数，除了在 loader 中使用 Fetch API Request 的相关方法外，还可以使用 useSearchParams 方法，此方法类似 useState，返回的第一个元素是 query 参数，第二个元素是这个 query 参数的 setter：\",\"const About: FC = () => { const [query] = useSearchParams(); console.log(query.get('a')); return ( <Form method=\\\"get\\\"> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </Form> ); };\",\"这个 hook 也可以像 useState 那样设置初始值。\"]},\"385\":{\"h\":\"传递 state\",\"t\":[\"这里的 state 不是 React useState 的 state，这里指的只是临时的数据传输对象，传递数据时，数据被保存在了浏览器历史记录 history 对象的 state 字段上。\",\"有很多方法可以传递 state：Link、NavLink 组件、navigate 编程式路由、Form 组件、useSubmit 等，下面一一演示：\",\"Link、NavLink 传递：\",\"<NavLink to={\\\"links\\\"} className={({ isActive }) => (isActive ? styles.active : \\\"\\\")} state={{ now: new Date() }} end={true} >\",\"Form 传递：\",\"<Form method=\\\"get\\\" state={{ now: new Date() }}> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </Form>\",\"编程式路由传递：\",\"const ngv = useNavigate(); const navigate = () => { ngv('..', { state: { now: new Date() } }); };\",\"useSubmit 传递：\",\"submit( { method: 'delete' }, { method: 'post', encType: 'application/json', state: { now: new Date() } } );\",\"读取 state 可以使用 useLocation：\",\"type myState = { now: Date }; const { state }: { state: myState } = useLocation(); console.log(state.now);\",\"提示\",\"如果 state 是 Form 或者 submit 传递，那么 action 不能 return redirect 重定向，否则 state 会清空。\"]},\"386\":{\"h\":\"获取当前组件的路由信息\",\"t\":[\"有时候需要在组件中获取当前路由的一些信息，这时可以使用 useNavigation 这个 hook，这个方法会返回一个对象，这个对象包含了很多的属性。\"]},\"387\":{\"h\":\"state\",\"t\":[\"这里的 state 不是 useState 和 Link 传递的那个 state，这里是一个表示当前组件渲染的状态，有 loading、submitting、idle 三种状态。\",\"<span> {navigation.state === 'submitting' ? 'saving' : navigation.state === 'loading' ? 'saved' : 'go'} </span>\",\"idle：当前没有正在发生的导航。\",\"submitting：当前有 action 被触发。\",\"loading：正在调用 loader。\",\"一个组件的 navigation.state 一般有以下两种变化顺序：\",\"没有 action 被执行： idle -> loading -> idle 有 action 执行： idle -> submitting -> loading -> idle\"]},\"388\":{\"h\":\"formData、text、json\",\"t\":[\"navigation.formData 中保存着以 formData 传输的数据，如果是 Form 表单提交的数据或者 useSubmit 使用默认的 encType 传输的数据保存在这里。\",\"如果 encType 设置为 application/json，那么数据会保存在 navigation.json 中，例如我们上面的例子中，HomeLink 组件点击添加或者删除后是通过 JSON 传递的数据，从这里就能够取到。\",\"如果 encType 设置为 text/plain，那么传递的数据保存在 navigation.text 中。\"]},\"389\":{\"h\":\"location\",\"t\":[\"内容与调用 useLocation() 的结果相同，包含 state。\",\"注意\",\"以上的各个字段在 idle 状态下是取不到的。\"]},\"390\":{\"h\":\"defer 异步加载数据\",\"t\":[\"目前通过 loader 加载数据时，如果接口的响应很慢，那么组件的渲染会在接口响应结束后进行，这可能会导致一些体验上的问题，为了解决这个问题，React Router 提供了 defer 方法，此方法包裹的内容会异步执行，也就是说会先渲染组件再等待响应，这样就可以在页面上添加加载中的效果，defer 要配合 React Suspense 组件和 React Router Await 组件使用，例如我们现在修改 HomeLink 的 loader：\",\"const homeLinkLoader: LoaderFunction = ({ params }: { params: Params<'id'> }) => { console.log('home link loader running...'); if (!params.id) { return defer({ links: Link.listLinks() }); } return defer({ links: Link.listLinks(params.id) }); };\",\"然后修改 HomeLink 组件：\",\"const HomeLink: FC = () => { console.log('rendering HomeLink'); const { links } = useLoaderData() as { links: Promise<Array<link>> }; const navigation = useNavigation(); const submit = useSubmit(); return ( <div> <span> {navigation.state === 'submitting' ? 'saving' : navigation.state === 'loading' ? 'saved' : 'go'} </span> <Suspense fallback={<p>loading...</p>}> <Await resolve={links} errorElement={<ErrorPage />}> {(links: Array<link>) => ( <> {links.length > 1 ? ( <div className={styles.buttons}> <button className={styles.menuButton} onClick={() => { submit( { method: 'create', action: '/home/links' }, { method: 'post', encType: 'application/json' } ); }} > add </button> <button className={styles.menuButton} onClick={() => { submit( { method: 'delete' }, { method: 'post', encType: 'application/json', } ); }} > delete </button> </div> ) : undefined} <ul> {links.map(link => { return ( <li key={link.id}> {link.id} - {link.content} </li> ); })} </ul> </> )} </Await> </Suspense> </div> ); };\",\"现在在初次加载此页面时会有 loading 显示，而不是白屏。\"]},\"391\":{\"h\":\"Await\",\"t\":[\"为了实现数据的异步渲染，React Router 提供了 Await 组件，此组件有三个属性。\",\"resolve：\",\"此属性接收一个 Promise 对象，并在 resolve 后开始执行渲染。\",\"errorElement：\",\"此属性用来指定如果 resolve 中的 Promise 报错了应该显示什么内容。\",\"children：\",\"这个属性可以是一个元素标签或者是一个函数，如果是函数的话，那么 resolve 中的 Promise 中的内容将被作为参数传递到这个函数里。\"]},\"392\":{\"h\":\"异步加载的错误处理\",\"t\":[\"为了对异步加载可能导致的报错进行处理，可以在 Await 组件中设置 errorElement 属性：\",\"<Await resolve={links} errorElement={<ErrorPage />}> ...\",\"这种情况下，错误处理的组件使用之前的 useRouteError 将得到 undefined，应该使用 useAsyncError()：\",\"const ErrorPage: FC = () => { const err = useAsyncError() as Error; return ( <div className={styles.page}> <span className={styles.text}>oop! There is an error: {err.message}</span> </div> ); };\"]},\"393\":{\"h\":\"useAsyncData\",\"t\":[\"上面 Await 中包裹的内容过多，可读性不强，为了提高可读性，可以将其中的内容抽取为一个组件，在这个组件里，为了获取异步得到的数据，使用 useAsyncValue() 方法：\",\"const Links: FC<{ submit: SubmitFunction }> = ({ submit }) => { const links: Array<link> = useAsyncValue() as Array<link>; // ..... }; // 修改 Await 组件的内容 <Await resolve={links} errorElement={<AsyncErrorPage />}> <Links submit={submit} /> </Await>;\"]},\"394\":{\"h\":\"部分异步\",\"t\":[\"有的数据可能必须要在页面渲染前处理，因此可以在 defer 中通过 await 来限制部分异步：\",\"const homeLinkLoader: LoaderFunction = async ({ params }: { params: Params<'id'> }) => { console.log('home link loader running...'); if (!params.id) { return defer({ links: await Link.listLinks() }); } return defer({ links: Link.listLinks(params.id) }); };\",\"上面的代码中，第一个 links 将会在组件被渲染前调用。\"]},\"395\":{\"h\":\"Fetcher\",\"t\":[\"在之前的例子中，如果想触发一个 loader，那么必须要导航到此 loader 的路由，但是有些时候出于代码复用的考虑，可能需要不跳转就调用 loader，此时可以使用 Fetcher 来实现。\",\"首先通过 useFetcher() 获取一个 fetcher 实例：\",\"const About: FC = () => { console.log('rendering About'); const fetcher = useFetcher(); // .... };\"]},\"396\":{\"h\":\"state\",\"t\":[\"fetcher 也有 state 属性，此属性取值与 useNavigation 中的 state 一致。\"]},\"397\":{\"h\":\"调用 loader、action\",\"t\":[\"现在，为 About 定义一个 button，每次点击就调用 HomeLink 组件的 loader：\",\"return ( <div> <button onClick={() => { fetcher.load('/home/links/1'); }} > click </button> </div> );\",\"loader 或者 action 返回的数据都包含在 fetcher.data 中，现在要将结果渲染到页面上：\",\"const About: FC = () => { const fetcher = useFetcher<{ links: Array<link> }>(); return ( <div> <button onClick={() => { fetcher.load('/home/links/1'); }} > click </button> {fetcher.data ? ( <ul> {fetcher.data.links.map(link => ( <li key={link.id}> {link.id}-{link.content} </li> ))} </ul> ) : ( <p>loading...</p> )} </div> ); };\",\"调用 action 与调用 loader 类似，使用 fetcher.submit 方法触发一个 action，此方法用法和 useSubmit 类似：\",\"<button onClick={() => { fetcher.submit( { method: 'delete' }, { method: 'post', encType: 'application/json', action: '/home/links', } ); }} > click </button>\",\"获取即将提交的数据\",\"当使用 fetcher 触发 loader 或者 action 时，传递给 loader 或者 action 的参数保存在 formData、json、text 属性中，并根据 encType 决定到底保存在哪个字段里。注意，只有 submitting state 的情况下能够取到这些内容。\"]},\"398\":{\"h\":\"提交表单\",\"t\":[\"fetcher 提供了封装的 Form 组件，此组件支持调用其他 action，将之前的 aboutAction 转移给其他页面，然后修改 About 组件：\",\"return ( <div> <fetcher.Form method=\\\"post\\\" action=\\\"/test/navigate\\\"> <input name=\\\"content\\\" type=\\\"text\\\" /> <button type=\\\"submit\\\">create</button> </fetcher.Form> {fetcher.data ? ( <ul> {fetcher.data.links.map(link => ( <li key={link.id}> {link.id}-{link.content} </li> ))} </ul> ) : ( <p>loading...</p> )} </div> );\"]},\"399\":{\"h\":\"实现路由守卫功能\",\"t\":[\"很多网站都有权限管理功能，每个页面要求访问者具有相应的权限，为了实现这个功能，我们需要一个全局路由守卫，React Router 并没有提供这个功能，因此需要我们自行实现。要实现此功能需要先了解 React Router 的 Navigator 组件，此组件可以指定 to 属性，一旦此组件被渲染，那么就会立即跳转到对应路由，基于此可以实现路由守卫功能。\",\"首先，由于子路由会被渲染到父组件中使用 <Outlet/> 的位置上，因此我们可以包装一层，并且在代码中使用自己的 Outlet，例如：\",\"const GuardRouter: FC<{ context?: unknown }> = ({ context }) => { const pathName = useLocation().pathname; let isAuthorized = true; if (!['/'].includes(pathName)) { isAuthorized = Link.isAuthorized(); } console.log('rendering GuardRouter'); return <>{!isAuthorized ? <Navigate to={'/'} /> : <Outlet context={context} />}</>; };\",\"在这个组件中，如果当前路径不在免认证路径中，那么进行验证，验证成功返回 Outlet 组件，否则通过渲染 Navigate 组件将路由重定向到根路径。\",\"如果希望更细粒度的控制，可以使用下面的组件：\",\"const ProtectedRoute: FC<{ children: ReactElement }> = ({ children }) => { return <>{Link.isAuthorized() ? children : <Navigate to={'/'} />}</>; };\",\"然后在路由配置中使用自定义组件包裹正常组件：\",\"{ path: \\\"links/:id?\\\", id: \\\"link\\\", lazy: async () => { const components = await import(\\\"../components\\\"); return { element: ( <components.ProtectedRoute> <components.HomeLink /> </components.ProtectedRoute> ), loader: components.homeLinkLoader, ErrorBoundary: components.ErrorPage, action: components.linkAction, }; }, },\"]},\"400\":{\"h\":\"其他 hooks\"},\"401\":{\"h\":\"useMatches\",\"t\":[\"这个 hook 返回当前组件在路由中的信息，返回值为一个数组，此数组包含从根路径一直到当前组件路径的路由，数组内元素：\",\"export interface UIMatch<Data = unknown, Handle = unknown> { id: string; pathname: string; params: AgnosticRouteMatch['params']; data: Data; handle: Handle; }\",\"id：路由的 id。\",\"pathname：路由的路径。\",\"params：参数路由中的参数值。\",\"data：从 loader 中传来的数据，如果 loader 用了 defer，那么这个字段会是 Promise 对象。\",\"handle：定义路由时设置的参数，例如：\",\"{ path: \\\"about\\\", lazy: async () => ({ Component: (await import(\\\"../components\\\")).About, ErrorBoundary: (await import(\\\"../components\\\")).ErrorPage, handle: { now: new Date() }, loader: (await import(\\\"../components\\\")).aboutLoader, }), },\"]},\"402\":{\"h\":\"useOutletContext\",\"t\":[\"有时父组件希望向子组件传递 state 或者是一些其他值，可以向 Outlet 组件传递 context 属性来实现，为了在子组件中获取传递的值，可以使用 useOutletContext()：\",\"// App.tsx <Outlet context={{ now: new Date() }} />; // About.tsx console.log(useOutletContext<{ now: Date }>().now);\"]},\"403\":{\"h\":\"state\",\"t\":[\"很多时候需要修改一个变量的值来实现响应式，这需要通过 state 来实现，首先是不使用 state 的例子：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let index = 0; return ( <div> <button onClick={() => { index++; }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"上面的代码不会修改页面上现实的数值，不会发生变化的原因：\",\"局部变量无法在多次渲染中持久保存，当再次渲染这个组件时会从头开始渲染而不会考虑之前对局部变量的任何更改。\",\"更改局部变量不会触发渲染。\",\"要使用数据动态更新页面，需要两步操作：\",\"保留渲染之间的数据。\",\"触发重新渲染的逻辑。\",\"通过 useState 可以实现这个要求：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [index, setIndex] = React.useState(0); return ( <div> <button onClick={() => { setIndex(index + 1); }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"useState 方法接收一个值并作为返回变量的初始值，此方法返回一个数组，数组第一个元素为创建的变量，第二个元素为这个变量的 setter，通过调用 setter 即可实现对变量值的修改，以下是实际的情况：\",\"组件进行第一次渲染，因为将 0 传递给了 useState，React 记住 0 是 state 的最新值。\",\"调用 setter 更新了 state，React 记住当前 index 是 1 并触发下一次渲染。\",\"组件进行下一次渲染，React 仍然看到 useState(0)，但是因为第二步，所以返回的 index 值就变成了 1。\",\"setter 方法接收一个 nextState，它可以是任意类型的值，如果传递的是函数，那么这个函数必须是纯函数，且只接受当前 state 作为唯一的参数。\",\"纯函数\",\"纯函数是函数式编程的概念，需要满足一下两个主要条件：\",\"相同的输入总是产生相同的输出。\",\"没有副作用，例如不会修改外部变量、进行 I/O 操作、修改 DOM、调用其他纯函数等。\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [index, setIndex] = React.useState(0); return ( <div> <button onClick={() => { setIndex(index => index + 10); }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"注意事项：\",\"setter 方法仅更新下一次渲染的状态变量，如果在 set 函数后读取状态变量，则仍然会得到之前的值。\",\"React 会批量处理状态的更新，它会在所有的事件处理函数运行并调用 setter 函数后更新页面，这可以防止在单个事件期间多次重新渲染。\",\"在严格模式中，React 将两次调用传入 useState 或者是 setter 的更新函数以确保这是纯函数，如果两次调用结果相同则其中一次调用结果将被忽略（仅在开发环境有此行为）。\",\"参考下面的代码，由于 setter 方法仅更新下一次渲染的状态变量，而且 React 是批量处理状态的更新，所以下面传入 setter 的 index 值相同，所以实际上点击一次按钮页面只会加一。\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [index, setIndex] = React.useState(0); return ( <div> <button onClick={() => { setIndex(index + 1); setIndex(index + 1); }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"但是如果使用的状态更新函数，那么调用多少次 setter 就会生效多少次：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [index, setIndex] = React.useState(0); return ( <div> <button onClick={() => { setIndex(index => index + 1); }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"为了避免重复创建初始状态提高性能，useState 的参数可以传入初始化函数，这同样必须是一个纯函数：\",\"<script type=\\\"text/babel\\\"> // init 将只输出一次 function getInitialIndex() { console.log('init'); return 0; } function MyComponent() { let [index, setIndex] = React.useState(getInitialIndex); return ( <div> <button onClick={() => { setIndex(index + 1); }} > click </button> <span>{index}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"当存在多个变量时，可以使用对象替代多个 useState 调用：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [person, setPerson] = React.useState({ name: 'PPG007', age: 23 }); return ( <div> <button onClick={() => { setPerson(({ name, age }) => { return { name: name + '_1', age: age + 1, }; }); }} > click </button> <br /> <span>{person.name}</span> <br /> <span>{person.age}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"注意\"]},\"404\":{\"h\":\"state 更新对象\",\"t\":[\"当 state 变量是一个对象时，不能只更新其中一个字段而不显式复制其他字段，所以上面的例子中如果只希望每次点击年龄加 1 而名字不做改动，那么不能写成 setPerson({age: age+1})，如果希望只设置一部分字段，那么应该使用对象展开，例如：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [person, setPerson] = React.useState({ name: 'PPG007', age: 23 }); return ( <div> <button onClick={() => { setPerson(({ name, age }) => { return { ...person, age: age + 1, }; }); }} > click </button> <br /> <span>{person.name}</span> <br /> <span>{person.age}</span> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"state 是隔离且私有的，如果渲染同一个组件多次，每个副本都会有完全隔离的 state，改变一个不会影响另一个，例如：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { let [person, setPerson] = React.useState({ name: 'PPG007', age: 23 }); return ( <div> <button onClick={() => { setPerson(({ name, age }) => { return { ...person, age: age + 1, }; }); }} > click </button> <br /> <span>{person.name}</span> <br /> <span>{person.age}</span> </div> ); } const dom = ( <div> <MyComponent /> <br /> <MyComponent /> </div> ); ReactDOM.render(dom, document.getElementById('test')); </script>\"]},\"405\":{\"h\":\"state 更新数组\",\"t\":[\"与处理对象相同，在更新 state 中的数组时，需要创建一个新数组并将其设置为新的 state。这意味着不能通过访问数组下表直接修改数组，也不应该使用 push 等修改原始数组的方法，在操作 React state 中的数组时，避免使用左侧的方法，首选右侧的方法：\",\"避免使用（修改原数组）\",\"建议使用（返回新数组）\",\"添加元素\",\"push, unshift\",\"concat, [...arr]\",\"删除元素\",\"pop, shift, splice\",\"filter, slice\",\"替换元素\",\"splice, arr[i]=...\",\"map\",\"排序\",\"reverse, sort\",\"先复制一份数组\",\"向数组中添加、删除元素：\",\"<script type=\\\"text/babel\\\"> function MyComponent() { const [values, setValues] = React.useState([]); const [value, setValue] = React.useState(''); return ( <div> <input onChange={event => { setValue(event.target.value); }} value={value} /> <button onClick={() => { if (value === '') { return; } setValues([...values, value]); setValue(''); }} > add </button> <br /> <ul> {values.map((value, index) => { return ( <li key={index}> {value} <button onClick={() => { setValues(values => { return values.filter((v, ii) => { return ii !== index; }); }); }} > delete </button> </li> ); })} </ul> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"更新数组内部的对象：\",\"<script type=\\\"text/babel\\\"> const items = [ { name: 'PPG007', age: '23', }, ]; function MyComponent() { const [a, setA] = React.useState(items); const [b, setB] = React.useState(items); function grow(items, index, setter) { const temp = [...items]; const target = temp.find((v, i) => { return i === index; }); target.age++; setter(temp); } return ( <div> <h1>A</h1> <ul> {a.map((v, index) => { return ( <li key={index}> {v.name} __ {v.age} <button onClick={() => { grow(a, index, setA); }} > grow </button> </li> ); })} </ul> <h1>B</h1> <ul> {b.map((v, index) => { return ( <li key={index}> {v.name} __ {v.age} <button onClick={() => { grow(b, index, setB); }} > grow </button> </li> ); })} </ul> </div> ); } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"在上面的代码中，点击按钮会发现操作同时影响了 a 和 b，这是因为数组展开拷贝是浅拷贝，拷贝出的数组中的元素指向的还是同一个对象，所以直接找到对象并修改会导致这个问题，可以通过 map 解决：\",\"function grow(items, index, setter) { setter( items.map((item, i) => { if (index === i) { return { name: item.name, age: item.age + 1, }; } return item; }) ); }\"]},\"406\":{\"h\":\"类组件的 state\",\"t\":[\"通过继承 React Component 类来定义组件类，这个组件类中有一个 state 变量，将数据存储在这里然后调用实例方法 setState() 即可实现 state 更新：\",\"<script type=\\\"text/babel\\\"> class MyComponent extends React.Component { render() { return ( <div> <button onClick={this.growUp}>click</button> <br /> <span>{this.state.name}</span> <br /> <span>{this.state.age}</span> </div> ); } constructor(props) { super(props); this.state = { name: props.name, age: props.age, }; } // 这里要使用箭头函数赋值，同时不能定义成一般函数，而是要赋值给一个成员变量， // 因为需要使用箭头函数，由于箭头函数中 this 指向外层的 this， // 通过这种方式防止事件回调时 this 时 undefined。 growUp = () => { this.setState({ age: this.state.age + 1 }); }; } ReactDOM.render(<MyComponent name=\\\"PPG007\\\" age={23} />, document.getElementById('test')); </script>\",\"setState 如果是设置对象的话，只会设置传入的字段，不会覆盖没传入的字段，这与 useState 不同，此外 setState 还有两种用法：\",\"// 通过更新函数（纯函数）传参 this.setState(self => { return { age: self.age + 1, }; }); // 设置状态更新并重新渲染后的回调函数 this.setState({ age: this.state.age + 1 }, () => { console.log('updated'); });\",\"setState 更新数组时可以不必构造新数组，可以直接通过下标修改：\",\"<script type=\\\"text/babel\\\"> const items = [ { name: 'PPG007', age: 23, }, { name: 'LiHua', age: 24, }, ]; class MyComponent extends React.Component { render() { return ( <div> <ul> {this.state.items.map((item, index) => { return ( <li key={index}> {item.name}__{item.age} <button onClick={() => { this.grow(index); }} > grow </button> </li> ); })} </ul> </div> ); } grow = index => { this.setState(state => { state.items[index].age++; return state; }); }; state = { items }; } ReactDOM.render(<MyComponent />, document.getElementById('test')); </script>\",\"提示\",\"无论是 useState 还是 setState，都建议创建一个新的副本而不是直接修改原始状态，主要原因：\",\"不变性：保持状态的不变性可以简化复杂的 UI 逻辑和提高组件的性能。\",\"批量更新：React 会批量处理多个 state 改动，导致状态的更新不会立即渲染，通过不变的数据和基于前一个状态的函数式更新可以确保状态的正确。\"]},\"407\":{\"h\":\"状态提升\",\"t\":[\"有时候希望两个组件的状态始终同步更改，可以将相关 state 从这两个组件上移动到它们的公共父级，再通过 props 将 state 传递给两个组件，这被称为状态提升。\",\"现在假设有以下场景：页面有两个组件，Search 组件和 List 组件，在 Search 组建中输入内容按下回车后，List 组件请求相关数据并展示，这里 state 的维护就要提升到他们的共同父组件中。\",\"首先编写搜索组件，此组件接收三个属性：搜索关键字、搜索关键字设置回调、执行搜索回调：\",\"import { FC, Fragment } from 'react'; interface SearchProps { searchKey: string; onSearchKeyChange: (value: string) => void; onSearch: () => void; } const Search: FC<SearchProps> = ({ searchKey, onSearchKeyChange, onSearch }) => { return ( <Fragment> <input value={searchKey} onChange={e => { onSearchKeyChange(e.target.value); }} onKeyDown={e => { if (e.key === 'Enter') { onSearch(); } }} /> </Fragment> ); }; export { Search };\",\"然后编写 List 组件，这里为了简单，List 组件只接收搜索关键字并展示：\",\"import { FC, Fragment } from 'react'; const List: FC<{ searchKey: string }> = ({ searchKey }) => { return <Fragment>{searchKey ? <h2>searching {searchKey}...</h2> : undefined}</Fragment>; }; export { List };\",\"最后在它们的共同父组件中管理 state：\",\"import { FC, Fragment, useState } from 'react'; import { Search } from './Search'; import { List } from './List'; const App: FC = () => { const [searchKey, setSearchKey] = useState(''); const [editingSearchKey, setEditingSearchKey] = useState(''); return ( <Fragment> <Search searchKey={editingSearchKey} onSearchKeyChange={setEditingSearchKey} onSearch={() => { setSearchKey(editingSearchKey); }} /> <List searchKey={searchKey} /> </Fragment> ); }; export default App;\"]},\"408\":{\"h\":\"订阅发布\",\"t\":[\"使用父组件管理 state 会导致代码冗余，既要将 state 作为 props 传递给子组件，又要传递回调给子组件调用，父组件中可能需要管理很多的状态，为了简化开发，可以使用消息订阅发布模型来实现兄弟组件之间的通信。\",\"实现了订阅发布模型的库有很多，这里使用mitt。\",\"安装 mitt：\",\"yarn add mitt\",\"订阅发布的实现需要基于同一个 mitt 实例，使用下面的代码获取一个实例：\",\"// utils/index.ts import mitt, { Emitter } from 'mitt'; type Events = { search: { searchKey: string; }; }; let emitter: Emitter<Events>; const getEmitter = (): Emitter<Events> => { if (!emitter) { emitter = mitt<Events>(); } return emitter; }; export { getEmitter };\",\"然后修改 Search 和 List 两个组件，并移除 App 组件中管理的 state：\",\"// Search.tsx const Search: FC = () => { const [searchKey, setSearchKey] = useState(''); const onSearch = () => { const emitter = getEmitter(); emitter.emit('search', { searchKey: searchKey, }); }; return ( <Fragment> <input value={searchKey} onChange={e => { setSearchKey(e.target.value); }} onKeyDown={e => { if (e.key === 'Enter') { onSearch(); } }} /> </Fragment> ); }; //List.tsx const List: FC = () => { const [searchKey, setSearchKey] = useState(''); useEffect(() => { const emitter = getEmitter(); emitter.on('search', ({ searchKey }) => { setSearchKey(searchKey); }); return () => { emitter.off('search'); }; }, []); return <Fragment>{searchKey ? <h2>searching {searchKey}...</h2> : undefined}</Fragment>; };\",\"注意上面的 List 组件中订阅事件的地方需要在 useEffect hook 中进行，并且依赖空数组，限制订阅动作只在组件挂载时执行，同时要返回一个清理函数，此函数中取消订阅。\"]},\"409\":{\"h\":\"进阶\"},\"410\":{\"h\":\"类型别名\",\"t\":[\"类型别名用于给一个类型起个新名字：\",\"type Name = string; type NameResolver = () => string; type NameOrResolver = Name | NameResolver; function getName(n: NameOrResolver): string { if (typeof n == 'string') { return n as Name; } return n(); } console.log(getName('ppg007')); console.log( getName(() => { return 'PPG007'; }) );\"]},\"411\":{\"h\":\"字符串字面量类型\",\"t\":[\"字符串字面量类型用来约束取值只能是某几个字符串中的一个。\",\"type language = 'Java' | 'TypeScript'; function show(l: language): void { console.log(l); } show('Java');\"]},\"412\":{\"h\":\"元组\",\"t\":[\"数组合并了相同类型的对象，元组 Tuple 合并了不同类型的对象。\",\"let tom: [string, number] = ['Tom', 25]; console.log(tom[0].toLowerCase()); console.log(tom[1].toFixed());\",\"当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型：\",\"let tom: [string, number] = ['', 0]; tom.push(20); console.log(tom);\"]},\"413\":{\"h\":\"枚举\",\"t\":[\"enum WeekDay { Sunday, Monday, TuesDay, Wednesday, Thursday, Friday, Saturday, } console.log(WeekDay['Monday'] === 1); // true console.log(WeekDay['TuesDay'] === 2); // true console.log(WeekDay['Saturday'] === 6); // true console.log(WeekDay[1] === 'Monday'); // true console.log(WeekDay[2] === 'TuesDay'); // true console.log(WeekDay[6] === 'Saturday'); // true\",\"也可以给枚举项手动赋值，未手动赋值的项的递增步长仍为 1。\",\"enum WeekDay { Monday = 1, TuesDay, Wednesday, Thursday, Friday, // 手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 Saturday = <any>'6', } console.log(WeekDay['Monday'] === 1); // true console.log(WeekDay['TuesDay'] === 2); // true console.log(WeekDay['Saturday'] === 6); // false console.log(WeekDay[1] === 'Monday'); // true console.log(WeekDay[2] === 'TuesDay'); // true console.log(WeekDay['6'] === 'Saturday'); // true\"]},\"414\":{\"h\":\"常数项和计算所得项\",\"t\":[\"枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。\",\"计算所得项示例：\",\"enum Color { Red, Green, Blue = 'blue'.length, }\",\"注意\",\"如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错：\",\"enum Color { Red, Green, Blue = 'blue'.length, Yellow, }\",\"当满足以下条件时，枚举成员被当作是常数：\",\"不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 1。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 0。\",\"枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：- 数字字面量。- 引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用。- 带括号的常数枚举表达式。- +, -, ~ 一元运算符应用于常数枚举表达式。- +, -, *, /, %, <<, >>, >>>, &, |, ^ 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错。 所有其它情况的枚举成员被当作是需要计算得出的值。\"]},\"415\":{\"h\":\"常数枚举\",\"t\":[\"常数枚举是使用 const enum 定义的枚举类型，常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。\",\"const enum color { Red, Green, Blue, } console.log(color.Blue);\",\"编译后：\",\"console.log(2 /* color.Blue */);\"]},\"416\":{\"h\":\"外部枚举\",\"t\":[\"参考npm 包声明文件 export default\"]},\"417\":{\"h\":\"类\",\"t\":[\"ES6 的类\",\"Reference\",\"ES7 中有一些关于类的提案，TypeScript 也实现了它们。\",\"实例属性：\",\"ES6 中实例的属性只能通过构造函数中的 this.xxx 来定义，ES7 提案中可以直接在类里面定义。\",\"class Animal { name = 'Jack'; constructor() { // ... } } let a = new Animal(); console.log(a.name); // Jack\",\"静态属性：\",\"ES7 提案中，可以使用 static 定义一个静态属性。\",\"class Animal { static num = 42; constructor() { // ... } } console.log(Animal.num); // 42\"]},\"418\":{\"h\":\"修饰符\",\"t\":[\"TypeScript 可以使用三种访问修饰符：\",\"public：修饰的属性或方法是公有的，可以在任何地方被访问到，默认修饰符。\",\"private：修饰的属性或方法是私有的，不能在声明它的类的外部访问。\",\"protocted：修饰的属性或方法是受保护的，子类中也允许访问。\",\"class Animal { protected name: string; public getName(): string { return this.name; } public constructor(name: string) { this.name = name; } } class Cat extends Animal { public constructor() { super('cat'); console.log(this.name); } } console.log(new Animal('123')); console.log(new Cat());\",\"提示\",\"当构造函数修饰为 private 时，该类不允许被继承或者实例化。\",\"当构造函数修饰为 protected 时，该类只允许被继承。\"]},\"419\":{\"h\":\"参数属性\",\"t\":[\"修饰符和readonly还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更简洁。\",\"class Animal { public getName(): string { return this.name; } public constructor(private name: string) { this.name = name; } } console.log(new Animal('123').getName());\"]},\"420\":{\"h\":\"readonly\",\"t\":[\"只读属性关键字，只允许出现在属性声明或索引签名或构造函数中。\",\"class Animal { readonly name: string; public constructor(name: string) { this.name = name; } } let a = new Animal('Jack'); console.log(a.name); a.name = '123'; // error\",\"注意\",\"如果 readonly 和其他访问修饰符同时存在的话，需要写在其后面。\",\"class Animal { public constructor(public readonly name: string) { this.name = name; } }\"]},\"421\":{\"h\":\"抽象类\",\"t\":[\"抽象类不能被实例化，抽象方法必须由子类实现。\",\"abstract class Animal { constructor(private readonly name: string) { this.name = name; } public getName(): string { return this.name; } public abstract say(): void; } class Cat extends Animal { public say(): void { console.log('miao'); } } let tom: Animal = new Cat('tom'); tom.say();\"]},\"422\":{\"h\":\"类与接口\"},\"423\":{\"h\":\"类实现接口\",\"t\":[\"interface Alarm { alert(): void; } class Door {} class SecurityDoor extends Door implements Alarm { alert() { console.log('SecurityDoor alert'); } } class Car implements Alarm { alert() { console.log('Car alert'); } } let a: Alarm; a = new SecurityDoor(); a.alert(); a = new Car(); a.alert();\",\"实现多个接口：\",\"interface Alarm { alert(): void; } interface Light { lightOn(): void; lightOff(): void; } class Car implements Alarm, Light { alert() { console.log('Car alert'); } lightOn() { console.log('Car light on'); } lightOff() { console.log('Car light off'); } } let car = new Car(); let a: Alarm = car; let l: Light = car; a.alert(); l.lightOn(); l.lightOff();\"]},\"424\":{\"h\":\"接口继承接口\",\"t\":[\"interface Alarm { alert(): void; } interface Light extends Alarm { lightOn(): void; lightOff(): void; } class Car implements Light { alert() { console.log('Car alert'); } lightOn() { console.log('Car light on'); } lightOff() { console.log('Car light off'); } } let car = new Car(); let l: Light = car; l.lightOn(); l.lightOff(); l.alert();\"]},\"425\":{\"h\":\"接口继承类\",\"t\":[\"class Point { x: number; y: number; constructor(x: number, y: number) { this.x = x; this.y = y; } } interface Point3d extends Point { z: number; } let point3d: Point3d = { x: 1, y: 2, z: 3 };\",\"在声明 class Point 时，除了会创建一个名为 Point 的类，还会创建一个名为 Point 的类型，所以接口继承类就相当于接口继承接口。\",\"提示\",\"声明类时创建的类型只包含其中的实例属性和实例方法，不包含构造函数、静态属性和静态方法。\"]},\"426\":{\"h\":\"泛型\",\"t\":[\"简单例子：\",\"function createArray<T>(): Array<T> { return []; } let intArray = createArray<number>(); intArray.push(1); console.log(intArray);\"]},\"427\":{\"h\":\"多个类型参数\",\"t\":[\"function createTuple<A, B>(a: A, b: B): [A, B] { return [a, b]; } let a = createTuple<number, boolean>(2, true); a.pop(); console.log(a);\"]},\"428\":{\"h\":\"泛型约束\",\"t\":[\"在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性，这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 length 属性的变量。这就是泛型约束：\",\"interface Alert { alert(): string; } function log<T extends Alert>(a: T): void { console.log(a.alert()); } class Door implements Alert { public alert(): string { return 'Door alert'; } } log<Door>(new Door()); log(new Door());\",\"多个类型参数之间也可以互相约束，要求 T 继承 U，这样就保证了 U 上不会出现 T 中不存在的字段：\",\"function copyFields<T extends U, U>(target: T, source: U): T { for (let id in source) { target[id] = (<T>source)[id]; } return target; } let x = { a: 1, b: 2, c: 3, d: 4 }; copyFields(x, { b: 10, d: 20 }); console.log(x);\"]},\"429\":{\"h\":\"泛型接口\",\"t\":[\"import { log } from 'console'; interface createArrayFunc { <T>(): T[]; } let fn: createArrayFunc = function <T>(): T[] { return []; }; let arr = fn<boolean>(); arr.push(false); log(arr);\",\"泛型约束也可以放到接口上：\",\"interface CreateArr<T> { create(...items: Array<T>): Array<T>; createEmpty(): Array<T>; } class CreateNumberArr implements CreateArr<number> { public create(...items: number[]): number[] { return items; } public createEmpty(): number[] { return []; } } const fn = new CreateNumberArr(); console.log(fn.create(1, 2, 3)); console.log(fn.createEmpty().push(4));\"]},\"430\":{\"h\":\"泛型类\",\"t\":[\"class ResponseResult<T> { code: number; data: T; message: string; } let resp = new ResponseResult<Map<string, string>>(); resp.code = 200; resp.message = 'OK'; let data = new Map<string, string>(); data.set('key', 'value'); resp.data = data;\"]},\"431\":{\"h\":\"泛型参数的默认类型\",\"t\":[\"在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。\",\"class ResponseResult<T = string> { code: number; data: T; message: string; } let resp = new ResponseResult(); resp.code = 200; resp.message = 'OK'; resp.data = '123'; console.log(JSON.stringify(resp));\"]},\"432\":{\"h\":\"声明合并\"},\"433\":{\"h\":\"函数的合并\",\"t\":[\"可以使用重载定义多个函数类型。\"]},\"434\":{\"h\":\"接口的合并\",\"t\":[\"接口中的属性在合并时会简单的合并到一个接口中：\",\"interface Alarm { price: number; } interface Alarm { weight: number; }\",\"相当于：\",\"interface Alarm { price: number; weight: number; }\",\"注意\",\"合并的属性的类型必须是唯一的。\",\"interface Alarm { price: number; } interface Alarm { price: number; // 虽然重复了，但是类型都是 `number`，所以不会报错 weight: number; }\",\"interface Alarm { price: number; } interface Alarm { price: string; // 类型不一致，会报错 weight: number; }\",\"接口中方法的合并，与函数的合并一样：\",\"interface Alarm { price: number; alert(s: string): string; } interface Alarm { weight: number; alert(s: string, n: number): string; }\",\"相当于：\",\"interface Alarm { price: number; weight: number; alert(s: string): string; alert(s: string, n: number): string; }\"]},\"435\":{\"h\":\"类的合并\",\"t\":[\"类的合并与接口的合并规则一致。\"]},\"436\":{\"h\":\"基础\"},\"437\":{\"h\":\"原始数据类型\",\"t\":[\"let isEnabled: boolean = true; let user: string = 'PPG007'; let age: number = 23; function voidFunc(message: string): void { console.log(message); } let u: undefined = undefined; let n: null = null;\",\"提示\",\"在非严格模式下，可以将 undefined 赋值给其他类型变量，需要在项目中有一个 tsconfig.json 配置文件，使用下面的配置关闭严格模式：\",\"{ \\\"compilerOptions\\\": { \\\"strict\\\": false } }\"]},\"438\":{\"h\":\"任意值\",\"t\":[\"如果是一个普通类型，在赋值过程中改变类型是不被允许的，但是对于 any 类型是可以的。\",\"let x: any = 123; x = '123';\",\"变量如果在声明的时候没有指定类型那么就会被识别为任意类型。\"]},\"439\":{\"h\":\"类型推论\",\"t\":[\"如果没有明确指定类型，那么会依照类型推论的规则推断出是什么类型：\",\"let x = 1; x = '7'; // error\",\"提示\",\"如果声明时不赋值那么将被推断为 any 类型。\",\"let x; x = 1; x = '7';\"]},\"440\":{\"h\":\"联合类型\",\"t\":[\"联合类型表示取值可以是多种类型中的一种。\",\"let x: string | number; x = '123'; x = 123;\",\"当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型的共有属性或方法。\",\"// error function demo(x: string | number): void { console.log(x.length); } // ok function demo(x: string | number): void { console.log(x.toString()); }\",\"联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型。\",\"let x: string | number; x = '123'; console.log(x.length); x = 123; // error， 此时推断 x 为 number console.log(x.length);\"]},\"441\":{\"h\":\"接口\",\"t\":[\"TypeScript 使用接口来定义对象的类型。TypeScript 除了用于对类的一部分进行抽象，还可以对对象的形状进行描述。\",\"interface Person { name: string; age: number; } // 定义的变量必须和接口里的一样 let me: Person = { name: 'PPG007', age: 23, };\",\"如果希望某些字段是可选的，那么可以使用可选属性：\",\"interface Person { name: string; age: number; city?: string; } let me: Person = { name: 'PPG007', age: 23, };\",\"如果希望某些字段只能在创建的时候赋值，那么可以使用只读属性：\",\"interface Person { readonly name: string; age: number; city?: string; } let me: Person = { name: 'PPG007', age: 23, }; // error me.name = '123';\",\"如果希望一个接口允许任意的属性：\",\"interface Person { [propName: string]: string | number; } let me: Person = { name: 'PPG007', age: 23, };\",\"一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型。\"]},\"442\":{\"h\":\"数组的类型\",\"t\":[\"基础表示法：\",\"let arr: number[]; arr = [1, 2, 3]; // error arr.push('123');\",\"数组泛型：\",\"let arr: Array<string>; arr.push('123'); // error arr.push(123);\",\"用接口表示数组：\",\"interface StringArray { [index: number]: string; } let arr: StringArray = ['1', '2'];\",\"any 数组：\",\"let list: any[] = [1, '2', false, { user: '123' }];\"]},\"443\":{\"h\":\"函数的类型\"},\"444\":{\"h\":\"函数声明\",\"t\":[\"function sum(a: number, b: number): number { return a + b; } sum(1, 2);\",\"注意\",\"多余的或者少于的参数输入是不被允许的。\"]},\"445\":{\"h\":\"函数表达式\",\"t\":[\"let sum: (a: number, b: number) => number = function (a, b) { return a + b; }; console.log(sum(2, 4));\",\"提示\",\"在 TypeScript 的类型定义中，=> 表示函数的定义，左边是参数类型，右边是返回值类型。\"]},\"446\":{\"h\":\"用接口定义函数\",\"t\":[\"interface Sum { sumNumber: (a: number, b: number) => number; sumString: (a: string, b: string) => string; } let sumImpl: Sum = { sumNumber(a, b) { return a + b; }, sumString(a, b) { return `${a}${b}`; }, }; console.log(sumImpl.sumNumber(1, 2)); console.log(sumImpl.sumString('1', '2'));\"]},\"447\":{\"h\":\"可选参数\",\"t\":[\"function sub(a: number, b: number, abs?: boolean): number { if (!abs) { return a - b; } return Math.abs(a - b); } console.log(sub(1, 2)); console.log(sub(1, 2, true));\",\"注意\",\"可选参数必须在必需参数后面，可选参数后不能再有必需参数。\"]},\"448\":{\"h\":\"参数默认值\",\"t\":[\"function sub(a: number, b: number = 100, abs?: boolean): number { if (!abs) { return a - b; } return Math.abs(a - b); } console.log(sub(1)); console.log(sub(1, 10, true));\"]},\"449\":{\"h\":\"剩余参数\",\"t\":[\"function sum(...nums: number[]): number { let total: number = 0; nums.forEach(num => { total += num; }); return total; } console.log(sum(1, 2, 3, 4)); console.log(sum());\",\"注意\",\"剩余参数只能是最后一个参数。\"]},\"450\":{\"h\":\"重载\",\"t\":[\"function sum(a: number, b: number): number; function sum(a: string, b: string): string; function sum(a: number | string, b: number | string): number | string { if (typeof a == 'number') { return Number(a) + Number(b); } return a.concat(String(b)); } console.log(sum(1, 2)); console.log(sum('1', '2'));\"]},\"451\":{\"h\":\"类型断言\",\"t\":[\"类型断言可以用来手动指定一个值的类型。\",\"语法：${value} as ${type} 或者 <${type}>${value}，建议使用前一种。\",\"将联合类型断言为其中一个类型：\",\"function sum(a: number, b: number): number; function sum(a: string, b: string): string; function sum(a: number | string, b: number | string): number | string { if (typeof a == 'number') { return <number>a + <number>b; } return a.concat(String(b)); }\",\"将一个父类断言为更加具体的子类：\",\"class HttpError extends Error { code: number = 200; } function isHttpError(err: Error): boolean { if (typeof (err as HttpError).code == 'number') { return true; } return false; } console.log(isHttpError(new HttpError()));\",\"将任何一个类型断言为 any：\",\"当我们确定一个属性或者方法存在时，可以将对象断言为 any 类型，在 any 变量上，访问任何属性都是允许的。\",\"(window as any).foo = 1;\",\"将 any 断言为一个具体的类型：\",\"let cache: any[] = ['123']; console.log((cache[0] as string).length);\",\"类型断言的限制：\",\"联合类型可以被断言为其中一个类型。\",\"父类可以被断言为子类。\",\"任何类型都可以被断言为 any。\",\"要使得 A 能够被断言为 B，只需要 A 兼容 B 或者 B 兼容 A 即可。\",\"提示\",\"兼容可以理解为结构相同。\"]},\"452\":{\"h\":\"双重断言\",\"t\":[\"any 可以断言为任意类型，任意类型可以断言为 any，所以任意类型可以断言为 any 后在断言为其他任意类型：\",\"interface Cat { run(): void; } interface Fish { swim(): void; } function testCat(cat: Cat) { return (cat as any as Fish).swim(); }\",\"尽管两个类型并不兼容，但是还是能断言成功，不建议使用。\"]},\"453\":{\"h\":\"断言与类型转换\",\"t\":[\"类型断言只会影响 TypeScript 编译时的类型，类型断言语句在变异结果中会被删除。\",\"如果真的希望类型转换应该调用类型转换的方法。\"]},\"454\":{\"h\":\"断言与类型声明\",\"t\":[\"类型声明比断言更加严格，如果向一个 A 类型的变量赋值一个 B 类型的变量，则 A 必须兼容 B。\",\"interface Animal { name: string; } interface Cat { name: string; run(): void; } const animal: Animal = { name: 'tom', }; // ok let tom1: Cat = animal as Cat; // error let tom2: Cat = animal;\"]},\"455\":{\"h\":\"声明文件\",\"t\":[\"当使用第三方库时，需要引用它的声明文件以获得对应的代码补全、接口提示等功能。\"]},\"456\":{\"h\":\"示例\",\"t\":[\"如果希望使用 jQuery，一般通过 script 引入后就可以使用全局变量 $ 或者是 jQuery 了，但是在 TypeScript 中，编译器不知道 $ 和 jQuery 是什么，这时我们需要 declare var 来定义它的类型。\",\"declare var $: (selector: string) => any; declare var jQuery: (selector: string) => any; $('#foo'); jQuery('body');\",\"declare var 并不会真的定义一个变量，只是定义了全局变量 $ 和 jQuery 的类型，仅仅用作编译时的检查。\"]},\"457\":{\"h\":\"声明文件\",\"t\":[\"通常把声明语句放到一个单独的文件中，这个文件就是声明文件，声明文件必须以 .d.ts 做后缀。\",\"使用 @types 统一管理第三方库的声明文件，以 jQuery 为例：\",\"# npm npm install @types/jquery --save-dev # yarn yarn add @types/jquery --dev\"]},\"458\":{\"h\":\"书写声明文件\",\"t\":[\"当一个第三方库没有提供声明文件时，就需要自行编写声明文件。\"]},\"459\":{\"h\":\"全局变量\",\"t\":[\"通过 <script> 标签引入第三方库，注入全局变量。\",\"全局变量主要包含以下语法：\",\"declare var 声明全局变量。\",\"declare function 声明全局方法。\",\"declare class 声明全局类。\",\"declare enum 声明全局枚举类型。\",\"declare namespce 声明（含有子属性的）全局对象。\",\"interface 和 type 声明全局类型。\",\"declare var：\",\"declare var accountId: string; declare const println: (selector: string) => void;\",\"当使用 const 定义时，表示此全局变量是一个常量，不允许再去修改它的值了。\",\"注意\",\"声明语句里只能定义类型，不能在声明语句中定义具体的实现。\",\"declare function：\",\"declare function 用来定义全局函数的类型。jQuery 其实就是一个函数，所以也可以用 function 来定义：\",\"declare function jQuery(selector: string): any; // 支持函数重载 declare function jQuery(domReadyCallback: () => any): any;\",\"declare class：\",\"当全局变量是一个类的时候，可以用 declare class 来定义它的类型。\",\"// user.d.ts declare class User { constructor(name: string); name: string; getName(): string; } // user.ts class User { constructor(name: string) { this.name = name; } name: string; getName(): string { return this.name; } } // main.ts const user: User = new User('PPG007'); console.log(user.getName()); // tsc user.ts main.ts --outFile=main.js && node main.js\",\"declare enum：\",\"// httpCode.d.ts declare enum HttpCode { OK, BadRequest, InternalServerError, } // main.ts const code: HttpCode = HttpCode.BadRequest;\",\"declare namespace：\",\"namespace 是早期为了解决模块化而创造的关键字，在早期没有 ES6 的时候，ts 使用 module 关键字表示内部模块，后来由于 ES6 也使用 module 关键字，ts 将 module 改为 namespace。\",\"namespace 被淘汰了，但是在声明文件中，declare namespace 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。\",\"比如 jQuery 是一个全局变量，它是一个对象，提供了一个 jQuery.ajax 方法可以调用，那么我们就应该使用 declare namespace jQuery 来声明这个拥有多个子属性的全局变量。\",\"// axios.d.ts declare namespace Axios { const version: number; enum HttpCode { OK, } class Response { code: HttpCode; Data: any; } function get(url: string): Response; } // main.ts const resp = Axios.get('url'); resp.code;\",\"提示\",\"namespace 中可以直接使用 function 声明函数而不是 declare function，类似的也可以使用 enum、class、const 等。\",\"如果对象拥有深层的层级，则需要用嵌套的 namespace 来声明深层的属性的类型。\",\"declare namespace Axios { const version: number; enum HttpCode { OK, } class Response { code: HttpCode; Data: any; } function get(url: string): Response; namespace interceptor { function run(): void; } } // main.ts Axios.interceptor.run();\",\"如果只有内层 namespace，可以使用如下声明：\",\"declare namespace Axios.interceptor { function run(): void; }\",\"在声明文件中可以直接使用 interface 和 type 来声明一个全局接口或类型：\",\"declare namespace Axios { const version: number; enum HttpCode { OK, } class Response { code: HttpCode; Data: any; } function get(url: string, setting: AxiosSetting): Response; } interface AxiosSetting { headers?: Object; } type AxiosSettingType = { headers?: Object; }; // main.ts let setting: AxiosSetting = { headers: { 'x-user-name': 'PPG007', }, }; Axios.get('url', setting);\",\"为了防止命名重复，可以将 interface 或 type 放到 namespace 中：\",\"declare namespace Axios { const version: number; enum HttpCode { OK, } class Response { code: HttpCode; Data: any; } interface AxiosSetting { headers?: Object; } function get(url: string, setting: AxiosSetting): Response; } // main.ts let setting: Axios.AxiosSetting = { headers: { 'x-user-name': 'PPG007', }, }; Axios.get('url', setting);\",\"对于 jQuery 这种既是一个函数可以被直接调用，又是一个对象，拥有子属性，那么可以组合多个声明语句，它们会不冲突地合并起来：\",\"declare function jQuery(selector: string): any; declare namespace jQuery { function ajax(url: string, settings?: any): void; } // main.ts jQuery('#id'); jQuery.ajax('url');\"]},\"460\":{\"h\":\"npm 包\",\"t\":[\"通过 import foo from 'foo' 导入，符合 ES6 模块规范。\",\"一般来说，npm 包的声明文件可能存在于两个地方：\",\"与该 npm 包绑定在一起，package.json 中有 types 字段或者有一个 index.d.ts 声明文件。\",\"发布到 @types 里，尝试安装即可：npm install @types/XXX --save-dev。\",\"如果上述方式都无法找到声明文件，那么需要自行编写。\",\"首先新建一个本地 npm 包，使用 npm init 或 yarn init 初始化，设置 package.json 中 private 为 true，编写 src/index.js（因为声明文件只有在引用 JavaScript 库时才有意义）：\",\"export class StrUtil { static lower = source => { return source.toLowerCase(); }; static upper = source => { return source.toUpperCase(); }; static reverse = source => { return source.split('').reverse().join(''); }; static concat = (...source) => { return ''.concat(...source); }; }\",\"然后执行：npm install -D @babel/core @babel/preset-env @babel/cli 安装 babel，因为我们需要将 ES6 代码编译成 CommonJS，然后编写 .babelrc：\",\"{ \\\"presets\\\": [\\\"@babel/preset-env\\\"] }\",\"修改 package.json 中 main 字段，改为 dist/index.js（即编译后输出到来的地方），同时添加 scripts：\",\"\\\"scripts\\\": { \\\"build\\\": \\\"babel src -d dist\\\" }\",\"最后执行编译：npm run build。\",\"然后我们在 TypeScript 项目中执行 yarn add ../strutil 引入本地的 JavaScript 包，新建 types/strutil 目录，在其中编写声明文件 index.d.ts，npm 包的声明文件有多种写法：\",\"在此之前，需要先配置一下 TypeScript 编译选项：\",\"{ \\\"compilerOptions\\\": { \\\"strict\\\": false, \\\"module\\\": \\\"CommonJS\\\", \\\"baseUrl\\\": \\\"./\\\", \\\"paths\\\": { \\\"*\\\": [\\\"types/*\\\"] } } }\",\"export 导出：\",\"export class StrUtil { static lower(source: string): string; static upper(source: string): string; static reverse(source: string): string; static concat(...source: string[]): string; }\",\"提示\",\"npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。\",\"在 main.ts 中引用：\",\"import { StrUtil } from 'strutil'; console.log(StrUtil.reverse('PPG007'));\",\"declare 与 export 混用：\",\"declare class StrUtil { static lower(source: string): string; static upper(source: string): string; static reverse(source: string): string; static concat(...source: string[]): string; } export { StrUtil };\",\"export namespace：\",\"首先修改一下 StrUtil 包中的 index.js，增加一个内部对象：\",\"static inner = { author: 'PPG007' }\",\"然后重新编译、引入后，编写声明文件：\",\"export namespace StrUtil { function lower(source: string): string; function upper(source: string): string; function reverse(source: string): string; function concat(...source: string[]): string; namespace inner { const author: string; } }\",\"在 main.ts 引入：\",\"import { StrUtil } from 'strutil'; console.log(StrUtil.inner.author);\",\"export default：\",\"// 在 StrUtil index.js 里增加一个枚举： export default Object.freeze({ UPPER: 'UPPER', LOWER: 'LOWER', });\",\"然后修改声明文件：\",\"declare enum Case { UPPER, LOWER, } export default Case;\",\"在 main.ts 中引用：\",\"import Case from 'strutil'; console.log(Case.LOWER);\",\"注意\",\"只有 function、class、interface 可以直接默认导出，其他变量需要先定义出来再默认导出。\",\"export =：\",\"修改一下 StrUtil，改为 CommonJS：\",\"class StrUtil { static lower = source => { return source.toLowerCase(); }; static upper = source => { return source.toUpperCase(); }; static reverse = source => { return source.split('').reverse().join(''); }; static concat = (...source) => { return ''.concat(...source); }; } module.exports = StrUtil;\",\"声明文件：\",\"declare class StrUtil { static lower(source: string): string; static upper(source: string): string; static reverse(source: string): string; static concat(...source: string[]): string; } export = StrUtil;\",\"main.ts 引用：\",\"import StrUtil = require('strutil'); console.log(StrUtil.lower('QWE'));\"]},\"461\":{\"h\":\"UMD 库\",\"t\":[\"即可以通过 <script> 标签引入又可以通过 import 导入。相比于 npm 包的声明文件，我们需要额外声明一个全局变量，export as namespace。\",\"UMD 是一种模块规范,使库可以同时支持多种模块加载方案,比较流行的有\",\"CommonJS:用于 Node.js,通过 require() 导入。\",\"AMD:用于浏览器,通过 define() 定义和 require() 导入。\",\"全局变量:将库暴露为一个全局变量,用于直接在浏览器中使用。\",\"首先修改之前的 strutil：\",\"(function (root, factory) { if (typeof define === 'function' && define.amd) { define([], factory); } else if (typeof exports === 'object') { module.exports = factory(); } else { root.StrUtil = factory(); } })(this, function () { function StrUtil() {} StrUtil.lower = function (source) { return source.toLowerCase(); }; StrUtil.upper = function (source) { return source.toUpperCase(); }; // 其他方法... return StrUtil; });\",\"然后书写声明文件：\",\"export as namespace su; export = su; declare function su(): string; declare namespace su { function lower(source: string): string; function upper(source: string): string; }\",\"然后就可以在 main.ts 中引用了：\",\"import * as su from 'strutil'; console.log(su.upper('ppg007'));\"]},\"462\":{\"h\":\"直接扩展全局变量\",\"t\":[\"通过 <script> 引入后，改变一个全局变量的结构。\",\"修改 strutil：\",\"String.prototype.reverse = function () { return this.split('').reverse().join(''); };\",\"编写声明文件：\",\"export as namespace su; export class StrUtil { static lower(source: string): string; static upper(source: string): string; static reverse(source: string): string; static concat(...source: string[]): string; } declare global { interface String { reverse(): string; } }\",\"在 main.ts 中引用：\",\"import * as su from 'strutil'; console.log(su.StrUtil.upper('ppg').reverse());\"]},\"463\":{\"h\":\"在 npm 包或 UMD 库中扩展全局变量\",\"t\":[\"引用 npm 包或者 UMD 库后，改变一个全局变量的结构。\",\"对于一个 npm 包或者 UMD 库的声明文件，只有 export 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库，如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 declare global。\",\"修改 strutil：\",\"export class StrUtil { static lower = source => { return source.toLowerCase(); }; static upper = source => { return source.toUpperCase(); }; static reverse = source => { return source.split('').reverse().join(''); }; static concat = (...source) => { return ''.concat(...source); }; } globalThis.author = 'PPG007';\",\"编写声明文件：\",\"export as namespace su; export class StrUtil { static lower(source: string): string; static upper(source: string): string; static reverse(source: string): string; static concat(...source: string[]): string; } declare global { const author: string; }\",\"在 main.ts 中引用：\",\"import * as su from 'strutil'; console.log(su.StrUtil.upper('ppg')); console.log(author);\"]},\"464\":{\"h\":\"模块插件\",\"t\":[\"通过 <script> 或 import 导入后，改变另一个模块的结构。\",\"修改 strutil：\",\"import moment from 'moment'; moment.yesterday = function () { return moment().subtract(1, 'day'); }; export default moment;\",\"编写声明文件：\",\"import moment = require('moment'); declare module 'moment' { function yesterday(): moment.Moment; } export default moment;\",\"main.ts:\",\"import moment from 'strutil'; console.log(moment.yesterday().toISOString());\"]},\"465\":{\"h\":\"声明文件中的依赖\",\"t\":[\"除了使用 import 导入另一个声明文件中的类型之外，还可以使用三斜线指令。\",\"与 import 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 import：\",\"当我们在书写一个全局变量的声明文件时。\",\"当我们需要依赖一个全局变量的声明文件时。\",\"书写一个全局变量的声明文件：\",\"在全局变量的声明文件中，是不允许出现 import, export 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了。\",\"修改 strutil：\",\"export function foo(arg) { console.log(arg); }\",\"声明文件：\",\"/// <reference types=\\\"moment\\\"/> export function foo(p: moment.Moment): void;\",\"main.ts：\",\"import moment = require('moment'); import { foo } from 'strutil'; foo(moment());\",\"注意\",\"注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。\",\"依赖一个全局变量的声明文件：\",\"在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 import 导入，当然也就必须使用三斜线指令来引入了。\",\"首先安装 nodejs 类型声明：\",\"yarn add @types/node --dev\",\"// types/node-plugin/index.d.ts /// <reference types=\\\"node\\\" /> export function foo(p: NodeJS.Process): string;\",\"main.ts：\",\"import { foo } from 'strutil'; foo(process);\"]},\"466\":{\"h\":\"自动生成声明文件\",\"t\":[\"如果库本身就就是 TypeScript 变下的，那么可以自动生成声明文件。\",\"修改 strutil 为一个纯 TypeScript 项目：\",\"src/bar/index.ts：\",\"export function bar(): string { return 'bar'; }\",\"src/index.ts：\",\"export * from './bar'; export function foo(): string { return 'foo'; }\",\"tsconfig.json：\",\"{ \\\"compilerOptions\\\": { \\\"strict\\\": false, \\\"outDir\\\": \\\"lib\\\", \\\"declaration\\\": true, \\\"module\\\": \\\"CommonJS\\\" } }\",\"修改 package.json main 字段，指向 lib/index.js。\",\"默认情况下，对于一个库会去先找最外层的 index.d.ts，没找到的话再去找 main 文件的目录中的 index.d.ts，如果再没有找到就会视为一个没有声明文件的库。\",\"如果声明文件名字不是 index.d.ts，需要修改 package.json，例如修改 lib/index.d.ts 为 lib/foo.d.ts：\",\"{ \\\"name\\\": \\\"strutil\\\", \\\"version\\\": \\\"1.0.0\\\", \\\"main\\\": \\\"lib/index.js\\\", \\\"license\\\": \\\"MIT\\\", \\\"private\\\": true, \\\"types\\\": \\\"lib/foo.d.ts\\\" }\"]},\"467\":{\"h\":\"内置对象\",\"t\":[\"TypeScript 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作。\",\"Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件。\",\"npm install @types/node --save-dev\"]},\"468\":{\"h\":\"起步\"},\"469\":{\"h\":\"安装 TypeScript\",\"t\":[\"mkdir playground cd playground # please install yarn before next command yarn init yarn add typescript\"]},\"470\":{\"h\":\"Hello World\",\"t\":[\"main.ts:\",\"function helloWorld(name: string) { console.log(`I am ${name}, hello TypeScript!`); } const me = 'PPG007'; helloWorld(me);\",\"然后执行 tsc main.ts，此时会得到一个 main.js 文件，这个文件就是执行编译的结果，执行这个 js 文件即可。\"]},\"471\":{\"h\":\"MVVM模型\"},\"472\":{\"h\":\"M\",\"t\":[\"M(Model)模型：对应 data 中的数据。\"]},\"473\":{\"h\":\"V\",\"t\":[\"V(View)视图：Vue 模板。\"]},\"474\":{\"h\":\"VM\",\"t\":[\"VM(ViewModel)视图模型：Vue 实例对象，进行数据绑定和 DOM 监听。\"]},\"475\":{\"h\":\"内置指令\"},\"476\":{\"h\":\"v-text\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>{{name}}</h2> <h2 v-text=\\\"name\\\"></h2> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', }; }, }); </script> </body> </html>\",\"v-text 指令：\",\"作用：向其所在节点渲染文本内容。\",\"与插值语法的区别：v-text 会替换掉节点中的内容，插值语法不会。\"]},\"477\":{\"h\":\"v-html\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> button { border-radius: 10px; background-color: skyblue; } button:hover { border-radius: 10px; background-color: red; } </style> </head> <body> <div id=\\\"root\\\"> <div v-html=\\\"str\\\"></div> </div> <script> const vm = new Vue({ el: '#root', data() { return { str: '<button>按钮</button>', }; }, }); </script> </body> </html>\",\"v-html 指令：\",\"作用：向指定节点渲染包含 HTML 结构的内容。\",\"与插值语法的区别： \",\"v-html 会替换掉节点中所有的内容，插值语法则不会。\",\"v-html 可以识别 HTML 结构。\",\"v-html存在安全问题： \",\"在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击。\",\"一定要在可信的内容上使用 v-html，永远不要用在用户提交的内容上。\"]},\"478\":{\"h\":\"v-cloak 指令\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> [v-cloak] { display: none; } </style> </head> <body> <div id=\\\"root\\\"> <h2 v-cloak>{{name}}</h2> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', }; }, }); </script> </body> </html>\",\"通过 v-cloak 和 CSS 属性选择器配合，防止在网速过慢短时间内无法加载 Vue 时出现插值语法模板显示在页面上的情况。\",\"v-cloak 本质是一个特殊属性，Vue 实例创建完毕并接管容器后，会删掉 v-cloak 属性\"]},\"479\":{\"h\":\"v-once\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> [v-cloak] { display: none; } </style> </head> <body> <div id=\\\"root\\\"> <h2 v-once>n的初值为：{{n}}</h2> <h2 v-cloak>n:{{n}}</h2> <button @click=\\\"n++\\\">点我n+1</button> </div> <script> const vm = new Vue({ el: '#root', data() { return { n: 1, }; }, }); </script> </body> </html>\",\"v-once 指令:\",\"v-once 所在节点在初次动态渲染后，就视为静态内容了。\",\"以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能。\"]},\"480\":{\"h\":\"v-pre 指令\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> [v-cloak] { display: none; } </style> </head> <body> <div id=\\\"root\\\"> <h2 v-pre>李在干神魔</h2> <h2>n:{{n}}</h2> <button @click=\\\"n++\\\">点我n+1</button> </div> <script> const vm = new Vue({ el: '#root', data() { return { n: 1, }; }, }); </script> </body> </html>\",\"v-pre 指令:\",\"跳过其所在节点的编译过程。\",\"可利用它跳过没有使用指令语法、没有使用插值语法的节点，会加快编译。\"]},\"481\":{\"h\":\"绑定 class 与 style\"},\"482\":{\"h\":\"绑定 class 样式\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> .basic { height: 100px; width: 500px; border: 2px; border-color: black; border-style: solid; } .a { background-image: linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%); } .b { background-image: linear-gradient(to right, #fa709a 0%, #fee140 100%); } .c { background-image: linear-gradient(120deg, #f093fb 0%, #f5576c 100%); } .font1 { font-size: 30px; background-color: skyblue; } .font2 { font-size: 50px; text-shadow: 10px 10px 10px; background-color: skyblue; } .font3 { font-size: 50px; background-color: skyblue; border-radius: 20px; } </style> </head> <body> <div id=\\\"root\\\"> <div @click=\\\"changeStyle\\\" :class=\\\"color\\\" class=\\\"basic\\\">{{name}}</div> <hr /> <div :class=\\\"classes\\\" class=\\\"basic\\\">{{name}}</div> <hr /> <div :class=\\\"classesObj\\\" class=\\\"basic\\\">{{name}}</div> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', color: '', classes: ['font1', 'font2', 'font3'], classesObj: { // 默认都是false font1: false, font2: true, font3: true, }, }; }, methods: { changeStyle() { const arr = ['a', 'b', 'c']; this.color = arr[Math.floor(Math.random() * 3)]; }, }, }); </script> </body> </html>\",\"三种写法总结：\",\"字符串写法：适用于样式的类名不确定，需要动态指定。\",\"数组写法：适用于要绑定的样式个数不确定，名字也不确定。\",\"对象写法：适用于要绑定的样式个数确定，名字也确定，但要动态决定用不用。\"]},\"483\":{\"h\":\"绑定 style 样式\",\"t\":[\"<div class=\\\"basic\\\" v-bind:style=\\\"styleObj\\\">{{name}}</div> <div class=\\\"basic\\\" v-bind:style=\\\"[styleObj,styleObj2]\\\">{{name}}</div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', styleObj: { //必须使用驼峰命名 backgroundImage: 'linear-gradient(120deg, #f093fb 0%, #f5576c 100%)', }, styleObj2: { //必须使用驼峰命名 fontSize: '100px', }, }; }, }); </script>\",\"与绑定 class 样式类似，即可以使用字符串写法，也可以使用数组写法，但是要注意：\",\"写在 Vue 中的属性名必须采用驼峰命名。\",\"属性值要使用引号。\"]},\"484\":{\"h\":\"Vue 脚手架配置代理\"},\"485\":{\"h\":\"方式一\",\"t\":[\"在 vue.config.js 中添加如下配置：\",\"'use strict'; module.exports = { devServer: { //将请求代理到localhost的80端口 proxy: 'http://localhost', //前端服务器端口号设置为90 port: 90, }, };\",\"优点：配置简单，请求资源时直接发送给前端即可。\",\"缺点：不能配置多个代理，不能灵活的控制请求是否走代理。\",\"工作方式：当请求的资源在 public 夹(即前端服务器根目录)中找不到时，向代理目标发送请求。\"]},\"486\":{\"h\":\"方式二\",\"t\":[\"在 vue.config.js 中添加如下配置：\",\"'use strict'; module.exports = { devServer: { port: 90, proxy: { //设置请求前缀，请求端口号后紧跟这个前缀才会被这条规则转发 '/api': { //设置目标服务器 target: 'http://localhost', //由于请求时要加前缀而服务器真实路径没有前缀，所以要去掉前缀 pathRewrite: { '^/api': '' }, }, }, }, };\",\"优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\",\"缺点：配置略繁琐，请求资源必须加前缀。\"]},\"487\":{\"h\":\"进行请求\",\"t\":[\"路径要变为请求代理服务器地址而不是被代理服务器：\",\"axios.get('http://localhost:90/api/getAllStudents').then( response => { console.log(response.data); }, error => { console.log(error.message); } );\"]},\"488\":{\"h\":\"Vue 组件\"},\"489\":{\"h\":\"基本使用\",\"t\":[\"Vue使用组件三大步骤：\",\"定义组件。\",\"注册组件。\",\"使用组件。\",\"如何定义一个组件：\",\"使用 Vue.extend(options) 创建，options 与创建 Vue 实例对象时传入的几乎一致。\",\"注意\",\"不要使用el。\",\"data必须写成函数。\",\"如何注册组件：\",\"局部注册：创建 Vue 实例对象时传入 components 选项，使用键值对注册。\",\"全局注册：使用 Vue.component('组件名',组件)。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <student></student> <hr /> <school></school> </div> <script> const school = Vue.extend({ template: ` <div> <h2>name:{{name}}</h2> <h2>address:{{address}}</h2> </div> `, data() { return { name: 'SDUST', address: 'QD', }; }, }); const student = Vue.extend({ template: ` <div> <h2>name:{{name}}</h2> <h2>age:{{age}}</h2> </div> `, data() { return { name: 'PPG', age: 21, }; }, }); const vm = new Vue({ el: '#root', components: { school, student, }, }); // 全局注册 Vue.component('school', school); </script> </body> </html>\"]},\"490\":{\"h\":\"几个注意点\",\"t\":[\"关于组件名：\",\"一个单词组成： \",\"全小写。\",\"首字母大写。\",\"多个单词： \",\"kebab-case 命名。\",\"驼峰命名(需要使用 Vue 脚手架)。\",\"注意\",\"组件名尽可能回避 HTML 中已有名称。\",\"可以使用 name 配置项指定组件在开发者工具中呈现的名字(定义组件时就起名字)。\",\"关于组件标签：\",\"第一种写法：<school></school>。\",\"第二种写法：<school/>。\",\"警告\",\"不使用脚手架时，第二种写法会导致后续组件不能渲染。\",\"一个简写方式：\",\"const school=Vue.extend(options) 可简写为 const school=options。\"]},\"491\":{\"h\":\"组件嵌套\",\"t\":[\"直接上代码：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"></div> <script> const student = Vue.extend({ template: ` <div> <h2>name:{{name}}</h2> <h2>age:{{age}}</h2> </div> `, data() { return { name: 'PPG', age: 21, }; }, }); const school = Vue.extend({ template: ` <div> <h2>name:{{name}}</h2> <h2>address:{{address}}</h2> <student></student> </div> `, data() { return { name: 'SDUST', address: 'QD', }; }, components: { student, }, }); const hello = { template: ` <div> <h2>{{msg}}</h2> </div> `, data() { return { msg: 'Hello World', }; }, }; const app = { components: { school, hello, }, template: ` <div> <school></school> <hello></hello> </div> `, }; const vm = new Vue({ el: '#root', components: { app, }, template: '<app></app>', }); </script> </body> </html>\"]},\"492\":{\"h\":\"关于 VueComponent\",\"t\":[\"上述代码中的 school 组件本质是一个名为 VueComponent 的构造函数，而且不是程序员定义的，是 Vue.extend 生成的。\",\"我们只需要对应的标签，Vue 解析时会创建响应组件的实例对象，即 Vue 执行了 new VueComponent(options)。\",\"提示\",\"每次调用 Vue.extend，返回的都是一个全新的 VueComponent。\",\"关于this的指向： \",\"组件配置中： data 函数，methods 中的函数、watch 中的函数、computed 中的函数，它们的 this 都是 VueComponent 实例对象。\",\"new Vue(options) 配置中： data 函数、methods 函数、watch 函数、computed 函数，它们的 this 均是 Vue 实例对象。\",\"VueComponent 的实例对象，简称 vc (也可称为组件实例对象)，Vue 实例对象简称 vm。\",\"vm 管理着所有的 vc，每个 vc 管理着自己的子组件。\"]},\"493\":{\"h\":\"一个重要的内置关系\",\"t\":[\"VueComponent.prototype.__proto__===Vue.prototype。\",\"所以组件实例对象也可以使用 Vue 原型上的属性。\"]},\"494\":{\"h\":\"单文件组件\",\"t\":[\"单文件组件后缀名是 .vue。\",\"定义两个组件：\",\"School.vue：\",\"<template> <div class=\\\"demo\\\"> <h2>name:{{ name }}</h2> <br /> <h2>address:{{ address }}</h2> </div> </template> <script> const school = Vue.extend({ name: 'School', data() { return { name: 'SDUST', address: 'QD', }; }, }); // 统一暴露 // export{school} // 默认暴露 export default school; </script> <style> .demo { color: skyblue; background-color: orange; } </style>\",\"Student.vue：\",\"<template> <div> <h2>name:{{ name }}</h2> <hr /> <h2>age:{{ age }}</h2> </div> </template> <script> const student = Vue.extend({ data() { return { name: 'PPG', age: 21, }; }, }); export default student; </script>\",\"所有的组件通过一个 App.vue 进行统一管理：\",\"<template> <div> <Student></Student> <School></School> </div> </template> <script> import School from './School'; import Student from './Student.vue'; export default { name: 'App', components: { School, Student, }, }; </script> <style></style>\",\"创建 main.js 以创建 Vue 实例：\",\"import App from './App.vue'; new Vue({ el: '#root', components: { App, }, });\",\"创建 index.html 做入口页面：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> </head> <body> <div id=\\\"root\\\"> <App></App> </div> <script src=\\\"../../js/vue.js\\\"></script> <script src=\\\"./main.js\\\"></script> </body> </html>\"]},\"495\":{\"h\":\"组件自定义事件\"},\"496\":{\"h\":\"绑定自定义事件\",\"t\":[\"父组件定义一个方法：\",\"f1(str){ console.log(str); }\",\"父组件为子组件绑定事件：\",\"写法一：\",\"<Start :send=\\\"receive\\\" v-on:event=\\\"f1\\\" />\",\"子组件：\",\"<template> <div class=\\\"todo-header\\\" @click=\\\"myEvent\\\"></div> </template> <script> export default { name: 'Start', methods: { myEvent() { this.$emit('event', 'test'); }, }, }; </script>\",\"调用 $emit() 方法，第一个参数是父组件给子组件绑定的事件的名字，后面参数为要传递给父组件中定义的方法的参数。\",\"自定义事件也可以使用修饰符：\",\"@event.once=\\\"f1\\\"\",\"写法二,使用 ref 属性：\",\"父组件：\",\"<Start :send=\\\"receive\\\" ref=\\\"ref1\\\" />\",\"mounted() { let temp = localStorage.getItem(\\\"todos\\\"); if (temp){ this.todos=JSON.parse(temp).todos; } this.$refs.ref1.$on('event',this.f1); },\",\"使用修饰符：\",\"this.$refs.ref1.$once('event', this.f1);\",\"写法二虽然复杂，但是更加灵活，可以控制绑定的时机等等。\"]},\"497\":{\"h\":\"解绑自定义事件\"},\"498\":{\"h\":\"解绑单个事件\",\"t\":[\"子组件中：\",\"mounted() { setTimeout(()=>{ this.$off('event') console.log('自定义事件解绑了') },10000); }\",\"10秒后事件被解绑\"]},\"499\":{\"h\":\"解绑多个事件\",\"t\":[\"子组件中：\",\"mounted() { setTimeout(()=>{ this.$off(['event1', 'event2]) console.log('自定义事件解绑了') },5000); }\",\"使用数组传递所有要解绑的事件。\"]},\"500\":{\"h\":\"解绑所有事件\",\"t\":[\"子组件中：\",\"mounted() { setTimeout(()=>{ this.$off() console.log('自定义事件解绑了') },5000); }\",\"解绑的是所有自定义事件，原有的鼠标点击事件等不会解绑\"]},\"501\":{\"h\":\"给组件绑定原生事件\",\"t\":[\"使用 native 修饰符，绑定的原生事件解绑自定义事件后仍然有效：\",\"<Start :send=\\\"receive\\\" @click.native=\\\"demo('123')\\\" />\"]},\"502\":{\"h\":\"总结\",\"t\":[\"组件自定义事件：\",\"一种组件间通信方式(子组件传递数据到父组件)。\",\"使用场景：A 是父组件，B 是子组件，B 想给 A 传递数据，就要在 A 中为 B 绑定自定义事件，事件回调在 A 中定义。\",\"绑定自定义事件：\",\"第一种方式：\",\"在父组件中使用 <Component v-on:自定义事件名=\\\"回调函数\\\"></Component>。\",\"第二种方式： 在父组件中使用 ref 属性。\",\"<Start ref=\\\"demo\\\" />\",\"mounted() { this.$refs.demo.$on('demo',this.demo); },\",\"如果想让事件只触发一次或其他限制，使用 .once 修饰符或 $once() 方法或其他修饰符或方法。\",\"子组件触发自定义事件：\",\"定义一个方法，使用原生事件触发这个事件并在这个方法中调用自定义的事件。\",\"myEvent(){ this.$emit('demo','test'); }\",\"解绑自定义事件：\",\"子组件中：\",\"//解绑一个事件 this.$off('demo'); //解绑多个事件 this.$off(['demo', 'demo2']); //解绑所有自定义事件 this.$off();\",\"组件绑定原生 DOM 事件：使用 .native 修饰符。\",\"注意\",\"通过 this.$refs.xxx.$on('event',callback) 绑定自定义事件时，如果把 callback 直接写成函数，要使用箭头函数，这样回调方法中 this 才是当前组件对象，如果是普通函数，this 指向的是触发这个自定义事件的组件对象，即父组件对象，或者在 methods 中定义回调函数。\"]},\"503\":{\"h\":\"计算属性\",\"t\":[\"注意\",\"methods 和 computed 中方法不要重名。\",\"提示\",\"methods 中定义的是方法，调用时要加括号，而且每次调用返回值是重新计算的。\",\"computed 中定义的是属性，调用时不加括号，每次调用返回值不会重新计算，除非它所依赖的内容发生改变。\",\"计算属性相当于缓存。\"]},\"504\":{\"h\":\"计算属性示例\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> 姓:<input type=\\\"text\\\" v-model:value=\\\"firstName\\\" /> <hr /> 名:<input type=\\\"text\\\" v-model:value=\\\"lastName\\\" /> <hr /> <span>姓名：{{name}}</span> <hr /> </div> <script> const vm = new Vue({ el: '#root', data() { return { firstName: '', lastName: '', }; }, computed: { name: { // 初次读取 // 所依赖的数据发生变化 get() { // 此处this是vm return this.firstName + '-' + this.lastName; }, //可以不写set方法，如果不写set方法，将不能修改对应的属性 }, }, }); </script> </body> </html>\"]},\"505\":{\"h\":\"get 方法调用时机\",\"t\":[\"初次读取时会执行一次。\",\"当依赖的数据发生改变时会被再次调用。\",\"计算属性原理：\",\"与数据代理类似，借助 getter、setter 实现。\",\"提示\",\"计算属性最终会出现在 Vue 实例上，可以直接调用。\"]},\"506\":{\"h\":\"计算属性简写\",\"t\":[\"const vm = new Vue({ el: '#root', data() { return { firstName: '', lastName: '', }; }, computed: { name() { //相当于getter return this.firstName + '-' + this.lastName; }, }, });\",\"警告\",\"一个计算属性中不能操作自己，包括调用和赋值，会无限递归出错。\"]},\"507\":{\"h\":\"条件渲染\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2 v-show=\\\"flag\\\">欢迎{{name}}</h2> <h2 v-if=\\\"flag\\\">欢迎{{name}}</h2> <h2>当前n的值为：{{n}}</h2> <button v-on:click=\\\"n++\\\">点我</button> <div v-if=\\\"n===1\\\">C</div> <div v-else-if=\\\"n==2\\\">C++</div> <div v-else>JAVA</div> <!--template只能使用v-if不能使用v-show，template不影响页面的结构，即template不会出现在渲染后的页面中而把内部元素直接暴露出来--> <template v-if=\\\"n===3\\\"> <h2>A</h2> <h2>B</h2> <h2>C</h2> </template> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', flag: true, n: 0, }; }, }); </script> </body> </html>\",\"v-if：\",\"写法：\",\"v-if='表达式'。\",\"v-else-if='表达式'。\",\"v-else。\",\"适用于切换频率较低的场景。\",\"特点：不展示的 DOM 元素直接被移除。\",\"注意\",\"v-if 可以和 v-else-if、v-else 组合使用，但是其中结构不能被打断。\",\"v-show：\",\"写法：\",\"v-show='表达式'。\",\"适用于切换频率较高的场景。\",\"特点：不显示的 DOM 元素没有被移除，只是设置了 display: none。\",\"提示\",\"使用 v-if 时，元素可能无法获取到，但使用 v-show 一定可以\"]},\"508\":{\"h\":\"数据绑定\",\"t\":[\"Vue 中有两种数据绑定方式：\",\"单向绑定(v-bind)：数据只能从 data 流向页面。\",\"双向绑定(v-model)：数据既能从 data 流向页面，也能从页面流向 data。\",\"提示\",\"双向绑定一般应用在表单类元素上。\",\"v-model:value 可以简写成 v-model，因为 v-model 默认收集的就是 value 的值。\"]},\"509\":{\"h\":\"单向绑定 v-bind\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> 单向数据绑定:<input type=\\\"text\\\" v-bind:value=\\\"name\\\" /> <hr /> 双向数据绑定:<input type=\\\"text\\\" v-model:value=\\\"name\\\" /> </div> <script> const vm = new Vue({ el: '#root', data: { name: 'ppg', }, }); </script> </body> </html>\"]},\"510\":{\"h\":\"双向绑定 v-model\",\"t\":[\"提示\",\"双向数据绑定：\",\"当数据发生变化，视图也发生变化，当视图发生变化，数据也会跟着变化。\",\"注意\",\"v-model 只能用于绑定表单类元素\",\"绑定 input：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title>demo</title> <script src=\\\"./vue.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> </head> <body> <div id=\\\"demo\\\"><input type=\\\"text\\\" name=\\\"text\\\" id=\\\"text\\\" value=\\\"\\\" v-model=\\\"text\\\" />{{text}}</div> <script type=\\\"text/javascript\\\"> let vm = new Vue({ el: '#demo', data: { text: '', }, }); </script> </body> </html>\",\"绑定单选框：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title>demo</title> <script src=\\\"./vue.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> </head> <body> <div id=\\\"demo\\\"> <input type=\\\"radio\\\" name=\\\"radio\\\" id=\\\"radio1\\\" value=\\\"A\\\" v-model=\\\"choice\\\" />A <input type=\\\"radio\\\" name=\\\"radio\\\" id=\\\"radio2\\\" value=\\\"B\\\" v-model=\\\"choice\\\" />B <p>你选择了：{{choice}}</p> </div> <script type=\\\"text/javascript\\\"> let vm = new Vue({ el: '#demo', data: { choice: '', }, }); </script> </body> </html>\",\"绑定多个多选框：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title>demo</title> <script src=\\\"./vue.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> </head> <body> <div id=\\\"demo\\\"> <input type=\\\"checkbox\\\" name=\\\"\\\" id=\\\"c1\\\" value=\\\"A\\\" v-model=\\\"choices\\\" />A <input type=\\\"checkbox\\\" name=\\\"\\\" id=\\\"c2\\\" value=\\\"B\\\" v-model=\\\"choices\\\" />B <input type=\\\"checkbox\\\" name=\\\"\\\" id=\\\"c3\\\" value=\\\"C\\\" v-model=\\\"choices\\\" />C <input type=\\\"checkbox\\\" name=\\\"\\\" id=\\\"c4\\\" value=\\\"D\\\" v-model=\\\"choices\\\" />D <li v-for=\\\"choice in choices\\\">{{choice}}</li> </div> <script type=\\\"text/javascript\\\"> let vm = new Vue({ el: '#demo', data: { choices: [], }, }); </script> </body> </html>\",\"绑定 select：\",\"<!DOCTYPE html> <html> <head> <meta charset=\\\"utf-8\\\" /> <title>demo</title> <script src=\\\"./vue.js\\\" type=\\\"text/javascript\\\" charset=\\\"utf-8\\\"></script> </head> <body> <div id=\\\"demo\\\"> <select v-model=\\\"choice\\\"> <option value=\\\"\\\" disabled>请选择</option> <option value=\\\"A\\\">A</option> <option value=\\\"B\\\">B</option> <option value=\\\"C\\\">C</option> </select> <p>你选择了：{{choice}}</p> </div> <script type=\\\"text/javascript\\\"> let vm = new Vue({ el: '#demo', data: { choice: '123', }, }); </script> </body> </html>\",\"注意：\",\"如果 v-model 表达式的初始值未能匹配任何选项，select 元素将被渲染为未选中状态。\"]},\"511\":{\"h\":\"v-model 修饰符\",\"t\":[\".lazy：\",\"提示\",\"在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了输入法组织文字时)。你可以添加 lazy 修饰符，从而转为在 change 事件（失去焦点）之后进行同步。\",\"<!-- 在“change”时而非“input”时更新 --> <input v-model.lazy=\\\"msg\\\" />\",\".number：\",\"提示\",\"如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符。\",\"<input v-model.number=\\\"age\\\" type=\\\"number\\\" />\",\".trim：\",\"提示\",\"如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符。\",\"<input v-model.trim=\\\"msg\\\" />\"]},\"512\":{\"h\":\"收集表单数据总结\",\"t\":[\"如果表单是 text，则 v-model 绑定的就是 value 值，value 值就是用户输入的值。\",\"如果表单是 radio，则 v-model 绑定的就是 value 值，要给标签配置 value 属性。\",\"如果是多选框： \",\"没有配置 input 的 value 属性，那么 v-model 绑定的是 checked，是布尔值。\",\"配置了 value 属性： \",\"绑定的数据类型不是数组，那么收集的是 checked。\",\"如果是数组，那么收集的就是每个 CheckBox 的 value。\"]},\"513\":{\"h\":\"数据代理\"},\"514\":{\"h\":\"数据代理基本原理\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <script> let person = { name: 'PPG', sex: 'male', }; let number = 21; //默认：不可枚举，不可修改，不可删除 Object.defineProperty(person, 'age', { // value:number, enumerable: true, //控制属性可枚举 // writable:true,//控制属性是否能被修改 configurable: true, //控制属性是否能被删除 //get、set方法代理了修改、获取属性值，不能和value、writable属性共存 // 任何获取age属性值的尝试都会走向get方法 get() { return number; }, // 任何修改age属性值的尝试都会走向set set(value) { // 这里也不要添加this关键字 number = value; }, }); console.log(person); </script> </body> </html>\"]},\"515\":{\"h\":\"数据代理\",\"t\":[\"数据代理\",\"通过一个对象代理对另一个对象中属性的操作(读/写)。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> </head> <body> <script> let obj = { x: 100, }; let obj2 = { y: 200, }; //这样，通过obj2就可以获取、修改obj的x属性值了 Object.defineProperty(obj2, 'x', { get() { return obj.x; }, set(x) { obj.x = x; }, }); </script> </body> </html>\"]},\"516\":{\"h\":\"Vue 中的数据代理\",\"t\":[\"Vue 中的数据代理：\",\"通过 Vue 实例代理 data 对象中属性的操作。\",\"数据代理的作用：\",\"更加方便的操作 data 中的数据。\",\"基本原理：\",\"通过 Object.defineProperty() 把 data 对象中的所有属性添加到 Vue 实例上(其实是先将 Vue 实例的 _data 属性赋值成data，_data 中也有相应的 getter、setter，只做到这一步(_data)只是完成了收集数据(数据劫持)，并没有进行数据代理，将 _data 中的内容再代理到实例上，这样在访问 data 中的内容时就可以直接 Vue实例.属性名，而不需要 Vue实例._data.属性名)。\",\"为每一个添加到 Vue 实例的属性创建 getter、setter。\",\"在 getter、setter 中操作 data 中对应的属性。\",\"数据劫持：\",\"修改对象属性时调用 setter 进行修改并重新渲染模板。\"]},\"517\":{\"h\":\"实现一个简单的数据双向绑定\",\"t\":[\"首先编写一个简单的 HTML：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Test</title> </head> <body> <div id=\\\"root\\\"> <span>姓名：{{ name }}</span> <input type=\\\"text\\\" v-model=\\\"name\\\" /> <span>更多：{{ more.like }}</span> <input type=\\\"text\\\" v-model=\\\"more.like\\\" /> </div> <script src=\\\"./myvue.js\\\"></script> <script> const vm = new Vue({ el: '#root', data: { name: 'ppg007', more: { like: 'test', }, }, }); </script> </body> </html>\",\"然后开始编写 myvue.js，首先我们需要一个 Vue 类，并且其构造函数接收一个对象：\",\"class Vue { constructor(objInstance) { this.$data = objInstance.data; observer(this.$data); compile(objInstance.el, this); } }\",\"其中，将接收对象的 data 属性值赋值给 Vue 对象示例的 $data 属性，并且调用 observer 函数对数据进行监听，调用 compile 函数将数据渲染到页面上。\",\"然后编写 observer 函数，这个函数接收一个 data 对象，通过 Object.keys() 函数遍历这个对象的所有第一层属性，这个方法无法为上面的 more.like 属性增加 getter setter，因此对于嵌套的对象，需要使用递归调用，递归终止条件为参数已经不是对象。注意 getter 中不能直接返回 dataInstance[key]，因为我们给这个属性添加了 getter，如果在 getter 中直接返回就会再次触发 getter，然后陷入死循环，这里在 Object.defineProperty 方法调用前增加一个 temp 中间变量，并且在 setter 中也是修改这个变量。\",\"function observer(dataInstance) { if (!dataInstance || typeof dataInstance !== 'object') return; Object.keys(dataInstance).forEach(key => { let temp = dataInstance[key]; // 对于嵌套的对象，递归监听内部属性 observer(temp); Object.defineProperty(dataInstance, key, { get() { return temp; }, set(newValue) { temp = newValue; // 如果这里不调用 observer 函数会导致在将上面 data 中的属性修改为对象时，对象中的属性没有 getter、setter observer(newValue); // 这里 notifier 是一个全局变量，负责通知所有对应的节点更新视图，在下面会见到 notifier.notifyAllSubscribers(); }, }); }); }\",\"到这里已经实现了通过 getter setter 代理数据，接下来编写 Notifier 和 Subscriber 类，实现修改数据时，对应的视图内容会被修改：\",\"Notifier 类持有一个订阅者数组并在构造函数中初始化这个数组，addSubscribers 方法可以将指定的订阅者添加到数组中，notifyAllSubscribers 方法可以通过调用每个订阅者的 update 方法实现更新页面。\",\"Subscriber 类构造器接收四个参数，vm 就是创建的 Vue 实例，key 就是插值表达式的内容（more.like），callback 是一个函数，将会在 update 方法中调用，notifier 是一个 Notifier 对象实例，通过调用其 addSubscribers 方法添加订阅者。\",\"class Notifier { constructor() { this.subscribers = []; } addSubscribers(subscriber) { this.subscribers.push(subscriber); } notifyAllSubscribers() { this.subscribers.forEach(subscriber => { subscriber.update(); }); } } class Subscriber { constructor(vm, key, callback, notifier) { this.vm = vm; this.key = key; this.callback = callback; notifier.addSubscribers(this); } update() { // 首先对形如 more.like 这样的属性链通过 . 分割，然后调用数组原型的 reduce 方法，这个方法第一个参数是一个函数，第二个参数 // 是前面函数中 total 的初始值，然后 reduce 函数会将数组中的每个元素分多次传入 current 变量，然后将每次调用的结果作为下 // 一次 total 的值，这样就能获取到对象中深层的属性值，这里就获取到了 vm.$data 对象对应属性的最新取值。 const newValue = this.key.split('.').reduce((total, current) => total[current], this.vm.$data); // 然后调用传进来的回调函数更新 DOM 节点 this.callback(newValue); } } // 这里就是上面 observer 函数中的全局变量。 const notifier = new Notifier();\",\"然后编写页面的解析函数，负责将数据填充到插值表达式中：\",\"function compile(element, vm) { // 获取需要绑定的 DOM 容器 vm.$el = document.querySelector(element); // 创建一个新的空白的文档片段 const fragment = document.createDocumentFragment(); // 下面将指定容器内的所有元素添加到 fragment 中 let child; while ((child = vm.$el.firstChild)) { fragment.append(child); } // 然后调用下面的函数进行编译 fragmentCompile(fragment, vm); // 将渲染后的内容添加到页面上 vm.$el.appendChild(fragment); } function fragmentCompile(node, vm) { // 插值表达式的正则表达式 const pattern = /\\\\{\\\\{\\\\s*(\\\\S+)\\\\s*\\\\}\\\\}/; // nodeType 为 3 表示这是一个 text 节点，需要将其中的插值表达式渲染进数据。 if (node.nodeType === 3) { // 使用中间变量存储此节点的内容，因为如果其中包含插值语法表达式的话后面更新时还要使用正则进行匹配，如果没有这个变量，第一次替 // 换插值语法后，插值语法表达式就不存在了，也就无法使用上面的正则表达式进行匹配了，下面调用 replace 方法也就无效了。 const sourceNodeValue = node.nodeValue; // 使用正则表达式对节点的内容进行匹配，结果是一个数组或者 null，数组的第二个元素是捕获到的插值表达式内容 const result = pattern.exec(sourceNodeValue); if (result) { // 同样使用 reduce 方法获取深层属性值 const array = result[1].split('.'); const value = array.reduce((total, current) => total[current], vm.$data); // 这里是初始化时首先进行一次数据替换。 node.nodeValue = sourceNodeValue.replace(pattern, value); // 创建订阅者，并在 callback 中传入一个更新函数，这里就是一个闭包 new Subscriber( vm, result[1], newValue => { node.nodeValue = sourceNodeValue.replace(pattern, newValue); }, notifier ); } // 对于 input 表单： } else if (node.nodeType === 1 && node.nodeName === 'INPUT') { // 首先获取标签的属性 const attributes = Array.from(node.attributes); // 遍历属性 attributes.forEach(attribute => { // 如果属性名是 v-model 就进行绑定 if (attribute.nodeName === 'v-model') { // 首先将对应的属性值渲染到表单中 const value = attribute.nodeValue .split('.') .reduce((total, current) => total[current], vm.$data); node.value = value; // 然后需要为这个表单增加订阅者 new Subscriber( vm, attribute.nodeValue, newValue => { node.value = newValue; }, notifier ); // 然后为 input 表单添加 input 事件监听器 node.addEventListener('input', e => { // 下面使用 reduce 方法获取到属性链最后一个元素之前的属性，例如 more.like 在这里首先获取 more 属性值，是一个对 // 象，然后再通过中括号访问 like 属性进行赋值操作。 const sourcePropertiesArray = attribute.nodeValue.split('.'); const propertiesArrayWithoutLast = sourcePropertiesArray.slice( 0, sourcePropertiesArray.length - 1 ); propertiesArrayWithoutLast.reduce((total, current) => total[current], vm.$data)[ sourcePropertiesArray[sourcePropertiesArray.length - 1] ] = e.target.value; }); } }); } // 对于参数节点的子节点递归渲染 node.childNodes.forEach(child => { fragmentCompile(child, vm); }); }\"]},\"518\":{\"h\":\"el 与 data 的两种写法\",\"t\":[\"el 有两种写法： \",\"创建 Vue 实例时指定 el。\",\"先创建 Vue 实例，通过 Vue实例.$mount('#root') 进行挂载指定 el。\",\"data 有两种写法： \",\"对象式。\",\"函数式。\",\"对象式函数式共存的时候，只有函数式才会生效。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h1>Hello,{{name}}</h1> </div> <script> const vm = new Vue({ // el:'#root', // data:{ // name:'PPG007' // } data() { return { name: 'PPG007', }; }, }); vm.$mount('#root'); </script> </body> </html>\"]},\"519\":{\"h\":\"事件\"},\"520\":{\"h\":\"事件处理\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>Hello {{name}}</h2> <button v-on:click=\\\"showInfo($event,123)\\\">点击提示信息</button> <button @click=\\\"showInfo($event,456)\\\">点击提示信息</button> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', }; }, methods: { showInfo(event, number) { console.log(event); console.log(number); alert('Hello'); }, }, }); </script> </body> </html>\",\"使用 v-on 指令绑定事件，可以简写为 @XXX，XXX 是事件的名字。\",\"事件的毁掉需要配置在 methods 对象中。\",\"methods 中的函数不要使用箭头函数，否则 this 就不是 Vue 实例了。\",\"methods 中的函数都是被 Vue 所管理的函数，this 指向是 Vue 实例或组件实例对象。\",\"注意\",\"如果事件处理器需要同时接收事件对象和其他对象作参数，为了防止事件对象丢失，要使用 $event 进行占位。\"]},\"521\":{\"h\":\"事件修饰符\",\"t\":[\"Vue中的事件修饰符：\",\"prevent：阻止默认事件，例如阻止a标签跳转\",\"stop：阻止事件冒泡，例如div标签和内部的button同时有点击事件，使用stop修饰后，点击按钮只会执行按钮的点击事件\",\"once：事件只触发一次，点击后在刷新前不能再次点击\",\"capture：使用事件的捕获模式，捕获后立即执行(事件触发时，先从DOM根开始向下找到点击的元素，期间可能穿过了其他拥有点击事件的上层模块，向下的这个过程称为捕获，到达目标元素后开始向上执行点击事件称为冒泡，默认先执行内部元素的点击事件)\",\"self：只有event.target是当前操作的元素时才触发事件，也能阻止冒泡\",\"passive：事件将会被立即执行，默认情况下，先执行点击事件函数，然后才执行事件、\",\"==修饰符可以连着写(.stop.once)==\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> .demo1 { height: 100px; background-color: aqua; } * { margin-top: 20px; } .box1 { padding: 5px; background-color: skyblue; } .box2 { padding: 5px; background-color: orange; } .list { width: 200px; height: 200px; background-color: peru; overflow: auto; } li { height: 100px; } </style> </head> <body> <div id=\\\"root\\\"> <h2>Hello {{name}}</h2> <a href=\\\"https://www.baidu.com\\\" @click.prevent=\\\"showInfo\\\">What's up</a> <div class=\\\"demo1\\\" @click=\\\"showInfo\\\"> <button @click.stop=\\\"showInfo\\\">点我</button> </div> <button @click.once=\\\"showInfo\\\">点我</button> <div class=\\\"box1\\\" @click.capture=\\\"showMsg(1)\\\"> div1 <div class=\\\"box2\\\" @click=\\\"showMsg(2)\\\">div2</div> </div> <div class=\\\"demo1\\\" @click.self=\\\"showInfo\\\"> <button @click=\\\"showInfo\\\">点我</button> </div> <!-- @wheel鼠标滚轮 --> <!-- @scroll滚动条 --> <ul class=\\\"list\\\" @wheel.passive=\\\"demo\\\"> <li>1</li> <li>2</li> <li>3</li> <li>4</li> </ul> </div> <script> const vm = new Vue({ el: '#root', data() { return { name: 'PPG', }; }, methods: { showInfo(event) { // event.preventDefault(); // event.stopPropagation(); alert('Hello'); }, showMsg(msg) { console.log(msg); }, demo() { for (let index = 0; index < 100000; index++) { console.log('#'); } console.log('over'); }, }, }); </script> </body> </html>\"]},\"522\":{\"h\":\"键盘事件\",\"t\":[\"Vue中常用按键别名： \",\"回车：enter。\",\"删除：delete，包含删除和退格。\",\"退出：esc。\",\"空格：space。\",\"换行：tab，由于 tab 默认功能是切换焦点，如果绑定的是 keyup 事件，将不会出发，因此应当绑定 keydown 事件。\",\"上：up。\",\"下：down。\",\"左：left。\",\"右：right。\",\"提示\",\"Vue 中未提供别名的按键，可以使用按键原始的 key 值(调用 event.key 查看按键名，调用 event.keyCodes 查看按键编码)，使用按键名时要注意不能使用驼峰命名，而应当使用 xxx-yyy 且全为小写，这与 Vue 修改 CSS 中的修改属性名规则也是相同的。\",\"系统修饰键：ctrl、alt、shift、meta(Windows 中的 win 键)： \",\"配合 keyup 使用时，按下修饰键的同时，按下任意其他按键，随后释放其他按键事件才会被触发。\",\"配合 keydown 使用：正常触发。\",\"如果要指定 keyup 时的另一个按键，可以在这四个修饰符后再添加指定的按键，例如：.ctrl.y 指定 ctrl+y 才触发。\",\"可以使用 keyCode 指定具体按键(不推荐，逐渐失去浏览器支持)。\",\"可以使用 Vue.config.KeyCodes.自定义键名=按键编码 定制按键别名。\",\"添加 exact 修饰符，在有且只有操作指定按键时才会触发。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>Hello,{{name}}</h2> <input type=\\\"text\\\" placeholder=\\\"按下回车提示输入\\\" @keyup.ppg=\\\"showInfo\\\" /> </div> <script> Vue.config.keyCodes.ppg = 13; const vm = new Vue({ el: '#root', data() { return { name: 'PPG', }; }, methods: { showInfo(event) { // if(event.keyCode!==13) return console.log(event.target.value); }, }, }); </script> </body> </html>\"]},\"523\":{\"h\":\"鼠标按钮修饰符\",\"t\":[\"鼠标按钮修饰符：\",\".left：左键。\",\".middle：滑轮按键。\",\".right：右键。\",\"<input type=\\\"button\\\" name=\\\"submit\\\" id=\\\"submit\\\" value=\\\"提交\\\" @click.middle=\\\"submit\\\" />\"]},\"524\":{\"h\":\"全局事件总线\",\"t\":[\"全局事件总线：\",\"一种组件间通信方式，适用于任意组件通信.\"]},\"525\":{\"h\":\"设置全局总线\",\"t\":[\"main.js 中通过为 Vue 原型对象添加属性实现创建总线，且该总线能够访问所有的 Vue 对象方法:\",\"new Vue({ render: h => h(App), beforeCreate() { Vue.prototype.$bus = this; }, }).$mount('#app');\"]},\"526\":{\"h\":\"使用事件总线\"},\"527\":{\"h\":\"接收数据\",\"t\":[\"A 组件要接收数据，A 组件中在总线上创建自定义事件:\",\"mounted() { this.$bus.$on('getInfo',(student,school)=>{ if (school){ this.school={'name':school.name,'address':school.address}; } if (student){ this.student={'name':student.name,'age':student.age}; } }) }\"]},\"528\":{\"h\":\"发送数据\",\"t\":[\"B 组件要发送数据，B 组件中调用 $emit() 方法调用其他组件创建的自定义事件并传递数据:\",\"methods:{ showAll(){ this.$bus.$emit('getInfo',{'name':this.name,'age':this.age}); } }\",\"提示\",\"最好在 beforeDestroy() 中解绑自己创建的事件：\",\" beforeDestroy() { this.$bus.$off('getInfo'); }\"]},\"529\":{\"h\":\"过滤器\",\"t\":[\"通过管道符 | 使用：\",\"v-bind 和插值语法可以使用过滤器。\",\"v-model 不可以使用过滤器。\",\"多个过滤器可以串联。\",\"过滤器并没有修改源数据。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <script src=\\\"https://cdn.bootcdn.net/ajax/libs/dayjs/1.10.6/dayjs.min.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>Time</h2> <!-- 计算属性实现 --> <h2>{{fmtTime}}</h2> <!-- methods实现 --> <h2>{{getFormatTime()}}</h2> <!-- 过滤器实现 --> <h2>{{time|timeFormater('YYYY年MM月DD日')}}</h2> <h2>{{time|timeFormater('YYYY年MM月DD日')|mySlice}}</h2> </div> <script> Vue.filter('mySlice', function (val) { return val.slice(0, 4); }); const vm = new Vue({ el: '#root', data() { return { time: 1627296335622, }; }, computed: { fmtTime() { return dayjs(this.time).format('YYYY年MM月DD日 HH:mm:ss'); }, }, methods: { getFormatTime() { return dayjs(this.time).format('YYYY年MM月DD日 HH:mm:ss'); }, }, filters: { // 局部过滤器 timeFormater(val, formatStr = 'YYYY年MM月DD日 HH:mm:ss') { return dayjs(val).format(formatStr); }, }, }); </script> </body> </html>\"]},\"530\":{\"h\":\"生命周期\",\"t\":[\"常用生命周期钩子：\",\"mounted：发送网络请求，启动定时器、绑定自定义事件、订阅消息等初始化操作。\",\"beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等收尾工作。\",\"关于销毁Vue实例：\",\"销毁后自定义事件会失效，但原生 DOM 事件依然有效。\",\"在 beforeDestroy 中操作数据不会再出发更新流程。\",\"图中有三个钩子没有体现：\",\"activated：VueRouter 相关，激活组件对应路由时触发。\",\"deactivated：VueRouter 相关，离开组件对应路由(失活)时触发。\",\"$nextTick：Vue 渲染界面结束后调用，可以用来获取焦点等操作。\"]},\"531\":{\"h\":\"列表渲染\"},\"532\":{\"h\":\"基本列表\",\"t\":[\"现有如下数据：\",\"const vm = new Vue({ el: '#root', data() { return { persons: [ { id: '1', name: 'CTY' }, { id: '2', name: 'ZCH' }, { id: '3', name: 'ZZL' }, ], admin: { name: 'PPG', age: 21, sex: 'male', }, str: 'hello world', }; }, });\",\"遍历数组：\",\"<!-- 遍历数组 --> <h2>人员列表</h2> <ul> <li v-for=\\\"(item,index) in persons\\\" :key=\\\"index\\\">{{item.id}}-{{item.name}}</li> </ul>\",\"遍历对象：\",\"<!-- 遍历对象 --> <h2>遍历对象</h2> <ul> <li v-for=\\\"(value,key,index) in admin\\\" v-bind:key=\\\"index\\\">{{value}}--{{key}}--{{index}}</li> </ul>\",\"遍历字符串：\",\"<!-- 遍历字符串 --> <h2>遍历字符串</h2> <ul> <li v-for=\\\"(char,index) in str\\\" :key=\\\"index\\\">{{char}}--{{index}}</li> </ul>\",\"遍历指定次数：\",\"<!-- 遍历指定次数 --> <h2>遍历指定次数</h2> <ul> <li v-for=\\\"(item,index) in 10\\\">{{item}}--{{index}}</li> </ul>\"]},\"533\":{\"h\":\"key 的作用和原理\"},\"534\":{\"h\":\"示例\",\"t\":[\"现有如下界面:\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <!-- 遍历数组 --> <h2>人员列表</h2> <button @click.once=\\\"addOne\\\">添加一个人</button> <ul> <li v-for=\\\"(item,index) in persons\\\" :key=\\\"index\\\"> {{item.id}}-{{item.name}} <input type=\\\"text\\\" /> </li> </ul> <hr /> </div> <script> const vm = new Vue({ el: '#root', data() { return { persons: [ { id: '1', name: 'CTY' }, { id: '2', name: 'ZCH' }, { id: '3', name: 'ZZL' }, ], admin: { name: 'PPG', age: 21, sex: 'male', }, str: 'hello world', }; }, methods: { addOne() { const p = { id: '4', name: 'TEST' }; this.persons.unshift(p); }, }, }); </script> </body> </html>\",\"点击按钮后添加一个人，添加函数是将新人添加到原数组的头部，此时数组中所有元素的下标都发生了改变，若使用遍历 index 做 key 值，且已经在每行的输入框中输入了内容，点击添加按钮后，经过重新渲染，新人出现在了头部，但是原先的 input 却没有发生改变：\",\"添加前：\",\"添加后：\",\"原因分析：\",\"用户操作的是真实 DOM，Vue 渲染时是从虚拟 DOM 转换为真实 DOM，此时虚拟 DOM 中的 input 元素没有 value 值，使用 index 做 key 值的时候(key 值只对 Vue 内部可见，用于 DOM 比较算法)，添加新人后进行 DOM 比较，此时新人的 li 标签的 key 值成了 0，于是 Vue 去寻找此前的虚拟 DOM 中 key 值为 0 的元素，找到 1-CTY 这一条数据，经过比较，Vue 认为人物信息发生了变化，所以人物信息使用了新的人，而 li 中的第二个元素 input 输入框由于都没有 value 属性，Vue 认为输入框没有改变，于是使用之前的输入框，即不做修改直接保留，剩下的同理，也就是说更新 DOM 时只更新了一部分导致了问题，如果同样使用 index 做 key 值，但是添加的时候加在数组尾部就不会出现这个问题，因为其他元素没有受到影响。\",\"注意\",\"使用 index 做 key 值时不一定会出问题，但是要注意如果原数据排序因为新数据发生了修改就会出现上面的问题。\"]},\"535\":{\"h\":\"总结\",\"t\":[\"虚拟 DOM 中 key 的作用：\",\"key 值时虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据新数据生成新的虚拟 DOM，随后 Vue 进行新虚拟 DOM 与旧虚拟 DOM 的差异比较。\",\"新旧虚拟 DOM 对比规则：\",\"旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：\",\"若虚拟 DOM 中的内容没变，直接使用之前已经渲染过的真实 DOM。\",\"若虚拟 DOM 内容改变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM。\",\"旧虚拟DOM中未找到与新虚拟DOM相同的key：\",\"创建新的真实 DOM，渲染到页面。\",\"用 index 做 key 会引发的问题：\",\"如果对数据进行诸如逆序添加、逆序删除等破坏顺序的操作：\",\"会产生没有必要的真实 DOM 更新，导致页面效果正常，效率低。\",\"如果结构中还包含输入类 DOM：\",\"会产生错误的 DOM 更新，导致页面有问题。\",\"如何选择 key：\",\"最好使用每条数据的唯一标识做 key，例如 id、手机号、身份证号等。\",\"如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用 index 做为 key 也是可以的。\"]},\"536\":{\"h\":\"列表过滤\",\"t\":[\"有如下页面，输入字符，模糊搜索。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <!-- 列表过滤 --> <h2>人员列表</h2> <input type=\\\"text\\\" placeholder=\\\"输入名字查询\\\" v-model:value=\\\"keyWord\\\" /> <ul> <li v-for=\\\"(item,index) in persons\\\" :key=\\\"index\\\">{{item.id}}-{{item.name}}</li> </ul> <hr /> </div> </body> </html>\",\"监视属性实现：\",\"const vm = new Vue({ el: '#root', data() { return { persons_source: [ { id: '1', name: 'CTY' }, { id: '2', name: 'ZCH' }, { id: '3', name: 'ZZL' }, ], keyWord: '', persons: [], }; }, methods: { addOne() { const p = { id: '4', name: 'TEST' }; this.persons.unshift(p); }, }, watch: { keyWord: { immediate: true, handler(newValue, oldValue) { if (newValue === '') { this.persons = this.persons_source; } this.persons = this.persons_source.filter(p => { return p.name.indexOf(newValue) !== -1; }); }, }, }, });\",\"计算属性实现：\",\"const vm = new Vue({ el: '#root', data() { return { persons_source: [ { id: '1', name: 'CTY' }, { id: '2', name: 'ZCH' }, { id: '3', name: 'ZZL' }, ], keyWord: '', }; }, computed: { persons: { get() { return this.persons_source.filter(p => { return p.name.indexOf(this.keyWord) !== -1; }); }, set() {}, }, }, });\"]},\"537\":{\"h\":\"列表排序\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <!-- 列表过滤 --> <h2>人员列表</h2> <input type=\\\"text\\\" placeholder=\\\"输入名字查询\\\" v-model:value=\\\"keyWord\\\" /> <button @click=\\\"sortByScore(1)\\\">成绩升序</button> <button @click=\\\"sortByScore(-1)\\\">成绩降序</button> <button @click=\\\"sortByScore(0)\\\">默认顺序</button> <ul> <li>id-姓名-成绩</li> <li v-for=\\\"(item,index) in persons\\\" :key=\\\"index\\\"> {{item.id}}-{{item.name}}-{{item.grade}} </li> </ul> <hr /> </div> </body> </html>\",\"JavaScript 代码：\",\"const vm = new Vue({ el: '#root', data() { return { persons_source: [ { id: '1', name: 'CTY', grade: '101' }, { id: '2', name: 'ZCH', grade: '80' }, { id: '3', name: 'ZZL', grade: '90' }, ], keyWord: '', persons: [], }; }, methods: { sortByScore(a) { if (a === 0) { this.persons = this.persons_source; } else if (a > 0) { this.persons = this.persons.sort((p1, p2) => { return p1.grade - p2.grade; }); } else { this.persons = this.persons.sort((p1, p2) => { return p2.grade - p1.grade; }); } }, }, watch: { keyWord: { immediate: true, handler(newValue, oldValue) { if (newValue === '') { this.persons = this.persons_source; } this.persons = this.persons_source.filter(p => { return p.name.indexOf(newValue) !== -1; }); }, }, }, });\"]},\"538\":{\"h\":\"变量更新时的一个问题\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <!-- 列表过滤 --> <h2>人员列表</h2> <button @click=\\\"updateCTY\\\">更新CTY的信息</button> <ul> <li>id-姓名-成绩</li> <li v-for=\\\"(item,index) in persons_source\\\" :key=\\\"index\\\"> {{item.id}}-{{item.name}}-{{item.grade}} </li> </ul> <hr /> </div> <script> const vm = new Vue({ el: '#root', data() { return { persons_source: [ { id: '1', name: 'CTY', grade: '101' }, { id: '2', name: 'ZCH', grade: '80' }, { id: '3', name: 'ZZL', grade: '90' }, ], }; }, methods: { updateCTY() { // 以下代码可以修改页面 // this.persons_source[0].name=\\\"cty\\\" // this.persons_source[0].grade=\\\"100\\\" // 以下代码不会修改页面，但是信息已被修改 this.persons_source[0] = { id: '1', name: 'cty', grade: '100' }; }, }, }); </script> </body> </html>\",\"注意\",\"如果不使用函数对数组或对象的某个元素或者属性进行修改，必须指明数组下标或者对象的某个键，不要做数组或对象的整体替换。\"]},\"539\":{\"h\":\"Vue监视数据改变的原理\",\"t\":[\"Vue 会监视 data 中所有层次的数据。\",\"如何监测‘对象’中的数据：\",\"通过 setter 实现监视，且要在创建 Vue 实例时就传入要监测的数据。\",\"对象中后追加的数据，Vue 默认不进行响应式处理。\",\"如果要为后追加的数据添加响应式，要使用 Vue 提供的两个 API 的其中一个：\",\"Vue.set(对象, 属性, 属性值); this.$set(对象, 属性, 属性值);\",\"特别注意\",\"上文中 Vue 的两个 API 不能给 Vue 实例或 Vue 实例根数据对象（vm._data 或 vm.data） 添加属性。\",\"如何监测‘数组’中的数据：\",\"通过包裹了一部分数组更新方法，即使用了自己的数组修改方法，先修改数组，然后重新渲染界面，这些可以被监测到的被包裹方法包括： \",\"push()。\",\"pop()。\",\"shift()。\",\"unshift()。\",\"splice()。\",\"sort()。\",\"reverse()。\",\"使用以下非变更方法时，可以将新数组赋值给原数组实现响应式： \",\"filter()。\",\"concat()。\",\"slice()。\",\"示例代码：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> <style> button { border-radius: 10px; margin: 10px; padding: 10px; background-color: skyblue; } button:hover { border-radius: 10px; margin: 10px; padding: 10px; background-color: red; } </style> </head> <body> <div id=\\\"root\\\"> <button @click=\\\"student.age++\\\">age plus 1</button> <button @click=\\\"addSex\\\">add age attribute</button> <button @click=\\\"addFriend\\\">addFriend</button> <button @click=\\\"updateNameOfFirstFriend\\\">change name of first friend</button> <button @click=\\\"addOneHobby\\\">add a hobby</button> <button @click=\\\"updateTheFirstHobby\\\">change the first hobby</button> <h2>姓名：{{student.name}}</h2> <h2>年龄：{{student.age}}</h2> <h2 v-if=\\\"student.sex\\\">性别：{{student.sex}}</h2> <hr /> <h3>hobbies:</h3> <ul> <li v-for=\\\"(hobby,index) in student.hobbies\\\" :key=\\\"index\\\">{{hobby}}</li> </ul> <hr /> <h3>friends</h3> <ul> <li v-for=\\\"(friend,index) in student.friends\\\" :key=\\\"index\\\"> {{friend.name}}--{{friend.age}} </li> </ul> </div> <script> const vm = new Vue({ el: '#root', data() { return { student: { name: 'PPG007', age: 21, hobbies: ['Java', 'Spring', 'Vue'], friends: [ { name: 'ZZL', age: '20' }, { name: 'CTY', age: '22' }, ], }, }; }, methods: { addSex() { // Vue.set(this.student,'sex','男'); this.$set(this.student, 'sex', '男'); }, addFriend() { this.student.friends.unshift({ name: 'ABC', age: 69 }); }, updateNameOfFirstFriend() { this.student.friends[0].name = '张三'; }, addOneHobby() { this.student.hobbies.unshift('TEST'); }, updateTheFirstHobby() { // this.student.hobbies.splice(0,1,'hobby-after') Vue.set(this.student.hobbies, 0, 'another hobby'); }, }, }); </script> </body> </html>\"]},\"540\":{\"h\":\"消息订阅与发布\",\"t\":[\"提示\",\"消息订阅与发布是一种解决通信问题的思想，这里使用 pubsub-js 库。\"]},\"541\":{\"h\":\"安装\",\"t\":[\"npm i pubsub-js\"]},\"542\":{\"h\":\"引入\",\"t\":[\"import pubsub from 'pubsub-js';\"]},\"543\":{\"h\":\"接收数据\",\"t\":[\"mounted() { this.channel=pubsub.subscribe('test',(msg,data)=>{ console.log(\\\"频道：\\\" + msg); console.log(data); }) }, beforeDestroy() { pubsub.unsubscribe(this.channel); }\",\"调用 pubsub 的 subscribe() 方法订阅消息，返回一个 ID，第一个参数是订阅的消息的名字，第二个参数是回调函数，此处回调函数如果写成普通函数，则回调函数中的 this 是 undefined，应当写成箭头函数，或者在 methods 中定义函数并在 subscribe 中传入。\"]},\"544\":{\"h\":\"发送数据\",\"t\":[\"pubsub.publish('test', '发布成功');\",\"调用 pubsub 的 publish() 方法发布消息，第一个参数是消息，对应订阅中的第一个参数，第二个参数是要传递的数据。\"]},\"545\":{\"h\":\"自定义指令\"},\"546\":{\"h\":\"定义指令\",\"t\":[\"局部指令：\",\"向 Vue 配置对象中添加 directives 属性即可，类似于计算属性与监视属性，两种写法，调用的时机不同。\",\"directives:{ // 指令与元素成功绑定时调用 // 指令所在模板被重新解析时调用 ppg(element,binding){ element.innerText=binding.value*3 }, fbind:{ // 当指令与元素成功绑定时调用 bind(element,binding){ element.value=binding.value; }, // 指令所在元素被插入页面时调用 inserted(element,binding){ element.focus(); }, // 指令所在模板被重新解析时调用 update(element,binding){ element.value=binding.value; element.focus() } } }\"]},\"547\":{\"h\":\"指令定义对象的钩子函数\",\"t\":[\"bind()：只调用一次，指令第一次绑定到元素时调用，进行初始化设置。\",\"inserted()：被绑定元素插入父节点时调用。\",\"update()：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。\",\"componentUpdated()：指令所在组件的 VNode 及其子 VNode 全部更新后调用。\",\"unbind()：只调用一次，指令与元素解绑时调用。\",\"钩子函数的参数：\",\"el(element)：指令所绑定的元素，可以用来直接操作 DOM。\",\"binding：一个对象，包含： \",\"name：指令名，不包括 v- 前缀。\",\"value：指令的绑定值，例如：v-my-directive=\\\"1 + 1\\\" 中，绑定值为 2。\",\"oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\",\"expression：字符串形式的指令表达式。例如 v-my-directive=\\\"1 + 1\\\" 中，表达式为 \\\"1 + 1\\\"。\",\"arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \\\"foo\\\"。\",\"modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\",\"vnode：Vue 编译生成的虚拟节点。\",\"oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。\",\"注意\",\"除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行。\",\"指令定义没有前缀 v-，使用时要加前缀。\",\"指令名如果是多个单词，要使用 kebab-case 命名方式，不要用驼峰命名。\"]},\"548\":{\"h\":\"实例\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>n:{{n}}</h2> <hr /> <h2>n*3=<span v-ppg=\\\"n\\\"></span></h2> <hr /> <button @click=\\\"n++\\\">n++</button> <hr /> <input type=\\\"text\\\" v-fbind=\\\"n\\\" /> </div> <script> Vue.directive('fbing', { bind(el, binding, vnode) {}, inserted(el, binding, vnode) {}, update(el, binding, vnode, oldVnode) {}, componentUpdated(el, binding, vnode) {}, unbind(el, binding, vnode) {}, }); const vm = new Vue({ el: '#root', data() { return { n: 1, }; }, directives: { // 指令与元素成功绑定时调用 // 指令所在模板被重新解析时调用 ppg(element, binding) { element.innerText = binding.value * 3; }, fbind: { // 当指令与元素成功绑定时调用 bind(element, binding) { element.value = binding.value; }, // 指令所在元素被插入页面时调用 inserted(element, binding) { element.focus(); }, // 指令所在模板被重新解析时调用 update(element, binding) { element.value = binding.value; element.focus(); }, }, }, }); </script> </body> </html>\"]},\"549\":{\"h\":\"插槽\",\"t\":[\"父组件可以在子组件指定位置插入 HTML 结构，也是一种组件间通信方式，父组件传到子组件，如果子组件中不包含插槽，父组件中写在子组件标签中的所有内容都会丢失，如果没有东西要插入插槽，则子组件中插槽标签中的内容会作为默认值出现。\"]},\"550\":{\"h\":\"默认插槽\",\"t\":[\"子组件中直接使用 <slot></slot> 标签，如果有多个插槽，则父组件中要插入的内容在每个插槽中都会重复出现：\",\"<template> <div class=\\\"container\\\"> <Category :listData=\\\"foods\\\"> <img src=\\\"http://fenchingking.top/source/src/1291.jpg\\\" width=\\\"200\\\" height=\\\"300\\\" /> </Category> <Category :listData=\\\"games\\\"> </Category> <Category :listData=\\\"films\\\"> </Category> </div> </template>\",\"<template> <div class=\\\"category\\\"> <h3>{{ listData.title }}分类</h3> <slot> <ul> <li v-for=\\\"(item, index) in listData.data\\\" :key=\\\"index\\\"> {{ item }} </li> </ul> </slot> </div> </template>\"]},\"551\":{\"h\":\"具名插槽\",\"t\":[\"使用 slot 标签的 name 属性用来区分插槽，如果一个 slot 没有显式指定 name 属性，则默认 name 为 default，父组件中可以在任意标签上使用 slot 属性指定插槽，从 vue2.6.0 起，这两个 attribute 已被废弃，应当使用 v-slot 指令指定插槽，但是这个指令只能使用在 template 标签上，且 v-slot 指令冒号后直接跟插槽名即可，不需要等号。\",\"<Category :listData=\\\"foods\\\"> <img src=\\\"http://fenchingking.top/source/src/1291.jpg\\\" height=\\\"25%\\\" width=\\\"100%\\\" slot=\\\"slot1\\\"> <img src=\\\"http://fenchingking.top/source/src/1292.jpg\\\" height=\\\"25%\\\" width=\\\"100%\\\" slot=\\\"slot2\\\"> <img src=\\\"http://fenchingking.top/source/src/1293.jpg\\\" height=\\\"25%\\\" width=\\\"100%\\\" slot=\\\"slot2\\\"> <template v-slot:slot2> <img src=\\\"http://fenchingking.top/source/src/1293.jpg\\\" height=\\\"25%\\\" width=\\\"100%\\\"> </template> </Category>\",\"<template> <div class=\\\"category\\\"> <h3>{{ listData.title }}分类</h3> <slot name=\\\"slot1\\\"> <ul> <li v-for=\\\"(item, index) in listData.data\\\" :key=\\\"index\\\"> {{ item }} </li> </ul> </slot> <slot name=\\\"slot2\\\"> </slot> </div> </template>\",\"提示\",\"v-slot: 可以简写成 #，井号后接插槽名。\"]},\"552\":{\"h\":\"作用域插槽\",\"t\":[\"现有如下子模板：\",\"<template> <div class=\\\"category\\\"> <h3>{{ foods.title }}分类</h3> <slot> {{ foods.title }} </slot> </div> </template> <script> export default { name: 'Category', // props:['listData'], data() { return { foods: { title: 'foods', data: ['foodA', 'foodB', 'foodC', 'foodD'] }, }; }, }; </script>\",\"子模板默认显示的是 foods.title 属性，如果在父组件中要使显示内容改变，变为 foods.data 应当使用作用域插槽：\",\"<slot :slotFoods=\\\"foods\\\"> {{foods.title}} </slot>\",\"使用 v-bind 指令将数据绑定到 slot 元素上，通过这种方式绑定的 attribute 称为插槽 prop，接下来通过 slot-scope 属性或 v-slot 指令将包含所有插槽 prop 的对象起个名字，然后通过这个对象去访问所有插槽 prop，slot-scope 已过时，vue2.6.0 后使用 v-slot 指令：\",\"<template> <div class=\\\"container\\\"> <Category> <template slot-scope=\\\"ppg\\\"> <ul> <li v-for=\\\"(item, index) in ppg.slotFoods.data\\\" :key=\\\"index\\\">{{ item }}</li> </ul> </template> </Category> <Category> <template v-slot:default=\\\"ppg\\\"> <ol> <li v-for=\\\"(item, index) in ppg.slotFoods.data\\\" :key=\\\"index\\\">{{ item }}</li> </ol> </template> </Category> </div> </template>\",\"上述写法中，子组件中的插槽是默认插槽(没有 name 属性)，所有父组件中 v-slot 指令冒号后跟的是 default，如果子组件仅有默认插槽，则 default 也可不写，一旦子组件中包含具名插槽，则每个 template 都要指定插槽名，且如果 v-slot 使用简写形式，default 不能省略。\",\"提示\",\"只要出现多个插槽，请为所有的插槽使用完整的 template 语法。\"]},\"553\":{\"h\":\"第一个 Vue 程序\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> Hello World {{name}} <hr /> <a :href=\\\"url\\\">点击前往主页</a> <p>{{url.toUpperCase()}}</p> </div> <script> //关闭生产模式提醒(Vue全局配置) Vue.config.productionTip = false; //一对一 const vm = new Vue({ el: '#root', //el指定当前Vue实例为那个容器服务 data: { //存储数据供el绑定的容器使用 name: 'ppg', age: 21, url: 'http://www.fenchingking.top', }, }); </script> </body> </html>\",\"初识 Vue：\",\"想让 Vue 工作，必须创建一个 Vue 实例，且要传入一个配置对象。\",\"容器(被绑定的 HTML 代码块)仍然符合 HTML 规范，混入了 Vue 语法。\",\"Vue 实例和容器只能是一对一的。\",\"实际开发中只会有一个 Vue 实例，并且会配合组件一起使用。\",\"双大括号中要写 JavaScript 表达式，例如下面的代码会显示 2：\",\"{{ 1 + 1 }}\",\"一旦 data 中内容发生改变，容器中对应的位置也会改变。\"]},\"554\":{\"h\":\"模板指令\",\"t\":[\"Vue 模板有两大类语法：\",\"插值语法： \",\"功能：用于解析标签体内容。\",\"写法：{{xxx}}，xxx 是 JavaScript 表达式，且可以获取 data 中的所有属性。\",\"指令语法： \",\"功能：用于解析标签(标签属性、标签体内容、绑定事件)。\",\"举例：v-bind:href='xxx' 或简写(仅有 v-bind 指令可以)为 :href='xxx'，xxx 同样是 JavaScript 表达式。\",\"Vue 中有很多指令，形式都是 v-xxx。\"]},\"555\":{\"h\":\"浏览器本地存储\",\"t\":[\"本地存储分为 localStorage 和 sessionStorage,前者持久保存(清除浏览器缓存可能导致失效)，后者关闭浏览器即清空，都是 window 的对象，二者 API 名字完全一致。\"]},\"556\":{\"h\":\"localStorage\",\"t\":[\"function saveData() { let person = { name: 'PPG', age: 21 }; window.localStorage.setItem('msg', JSON.stringify(person)); } function readData() { alert(localStorage.getItem('msg')); console.log(JSON.parse(localStorage.getItem('msg'))); } function deleteData() { console.log(localStorage.removeItem('msg')); } function deleteAll() { localStorage.clear(); }\"]},\"557\":{\"h\":\"sessionStorage\",\"t\":[\"function saveData() { let person = { name: 'PPG', age: 21 }; sessionStorage.setItem('msg', JSON.stringify(person)); } function readData() { alert(sessionStorage.getItem('msg')); console.log(JSON.parse(sessionStorage.getItem('msg'))); } function deleteData() { console.log(sessionStorage.removeItem('msg')); } function deleteAll() { sessionStorage.clear(); }\",\"浏览器本地存储：\",\"存储内容大小一般为 5MB。\",\"浏览器端通过 sessionStorage 或 localStorage 实现本地存储。\",\"获取不存在的 key 得到的 value 为null。\"]},\"558\":{\"h\":\"使用 Vue 脚手架\"},\"559\":{\"h\":\"安装 Vue-CLI 并创建 Hello World\",\"t\":[\"首先需要安装 Node.js 环境。\",\"成功安装 Node.js 后在命令行输入：\",\"npm install -g @vue/cli\",\"如果安装过旧版本可以用这个命令卸载：\",\"npm uninstall vue-cli -g\",\"如果安装太慢可以使用国内镜像：\",\"npm config set registry https://repo.huaweicloud.com/repository/npm/ npm cache clean -f npm config set disturl https://repo.huaweicloud.com/nodejs npm config set sass_binary_site https://repo.huaweicloud.com/node-sass\",\"打开 CMD，进入到想要创建项目的文件夹，执行：\",\"vue create [项目名] #例如： vue create demo\",\"在可选项中根据实际情况选择 Vue 的版本等选项。\",\"创建结束后得到一个以项目名命名的文件夹，进入到这个文件夹中，执行：\",\"npm run serve\",\"成功启动了Hello World项目\"]},\"560\":{\"h\":\"render 函数\",\"t\":[\"main.js 中有这样一行代码：\",\"import Vue from 'vue';\",\"默认情况下引入的是 vue.runtime.esm.js，不包含模板解析器，所以 main.js 的Vue实例中不能添加 template 属性，会报错。\",\"使用render可以在这个环境中完成模板渲染：\",\"render(createElement){ return createElement('h1','Hello Wrold'); }\",\"可以简写成箭头函数：\",\"render:h=>h('h1',Hello World);\",\"如果使用组件直接传入组件即可，不需要第二个参数：\",\"import Vue from 'vue'; import App from './App.vue'; Vue.config.productionTip = false; new Vue({ render: h => h(App), }).$mount('#app');\"]},\"561\":{\"h\":\"修改默认配置\",\"t\":[\"使用如下命令将现有配置输出到指定文件：\",\"vue inspect > out.js\",\"在 package.json 同级目录下创建 vue.config.js，这个文件应该导出一个包含了选项的对象：\",\"module.exports = {};\",\"可选参考项：Vue-CLI配置项。\",\"示例，关闭保存时语法检查：\",\"module.exports = { lintOnSave: false, };\",\"如果定义了一个配置项但是没有设置配置值，那么将会报错，而且如果要使配置生效要重新启动：\",\"npm run serve\"]},\"562\":{\"h\":\"ref 属性\",\"t\":[\"ref 属性：\",\"用来给元素或子组件注册引用信息(id 的替代者)。\",\"应用在 HTML 标签上获取的是真实 DOM 元素，应用在组件上是组件实例对象(vc)。\",\"获取：vm.$refs.xxx。\",\"<template> <div> <!-- <Student></Student> --> <h2 ref=\\\"title\\\">Hello{{ msg }}</h2> <button v-on:click=\\\"showDOM\\\">点我输出上方DOM</button> <School></School> </div> </template> <script> import School from './components/School'; import Student from './components/Student'; export default { name: 'App', components: { School, }, data() { return { msg: 'World', }; }, methods: { showDOM() { console.log(this.$refs.title); }, }, }; </script> <style></style>\"]},\"563\":{\"h\":\"props 属性\",\"t\":[\"功能：让组件接收外部传来的数据。\"]},\"564\":{\"h\":\"传递参数\",\"t\":[\"在使用到组件的地方：\",\"<template> <div> <Student name=\\\"PPG\\\" :age=\\\"21\\\" sex=\\\"male\\\"></Student> </div> </template>\"]},\"565\":{\"h\":\"接收参数\",\"t\":[\"方式一：\",\"props: ['name', 'age', 'sex'];\",\"方式二：\",\"props:{ name:String, age:Number, sex:String }\",\"方式三：\",\"props:{ name:{ type:String, required:true }, age:{ type:Number, default:20 }, sex:{ type:String, required:false } },\",\"注意\",\"props 是只读的，如果进行修改会产生警告，如果确实需要修改，要将 props 中的指定内容在 data 中复制一份，由于 props 优先级较高，所以不会出现字段未定义的错误。\",\"const student = Vue.extend({ data() { return { msg: 'Hello Vue', studentAge: this.age, }; }, props: { name: { type: String, required: true, }, age: { type: Number, default: 20, }, sex: { type: String, required: false, }, }, methods: { changeAge() { this.studentAge++; }, }, });\"]},\"566\":{\"h\":\"mixin 混入\",\"t\":[\"功能：可以把多个组件共用的配置提取成一个混入对象。\"]},\"567\":{\"h\":\"定义 mixin\",\"t\":[\"'use strict'; export const mixin = { methods: { showName() { alert(this.name); }, }, };\"]},\"568\":{\"h\":\"引用 mixin\",\"t\":[\"局部引入，在组件中引用混合，mixins:['xxx','xxx']：\",\"<script> import Vue from 'vue'; import { mixin } from '@/mixin'; const student = Vue.extend({ data() { return { msg: 'Hello Vue', name: 'PPG', age: 21, sex: 'male', }; }, mixins: [mixin], }); export default student; </script>\",\"全局引入，Vue.mixin(xxx)：\",\"import { mixin } from '@/mixin'; Vue.mixin(mixin);\",\"提示\",\"如果一个组件内部定义了和混入中定义的相同的 data、method，最后得到的是内部定义的，如果是钩子函数，那么内部和混合中定义的都会保留。\"]},\"569\":{\"h\":\"插件\",\"t\":[\"功能：用于增强 Vue。\",\"本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。\",\"使用插件：Vue.use(xxx)。\",\"应用举例：添加全局过滤器、添加全局指令、配置全局混入、在 Vue 的原型对象上定义全局方法。\",\"定义插件：\",\"'use strict'; const plugin1 = { install(vue, a, b) { console.log('Plugin 1 installed'); vue.prototype.hello = function () { console.log('Vue 全局方法'); console.log('另外两个参数为', a, b); }; }, }; export { plugin1 };\",\"使用插件：\",\"import { plugin1 } from '@/plugins'; Vue.use(plugin1, Date.now(), 'hello');\",\"<template> <div class=\\\"demo\\\"> <h2 @click=\\\"showName\\\">name:{{ name }}</h2> <br /> <h2>address:{{ address }}</h2> <button @click=\\\"helloTest()\\\">点我控制台输出</button> </div> </template> <script> import Vue from 'vue'; const school = Vue.extend({ name: 'School', data() { return { name: 'SDUST', address: 'QD', }; }, methods: { helloTest() { this.hello(); }, }, }); export default school; </script>\"]},\"570\":{\"h\":\"scoped 样式\",\"t\":[\"每个组件中定义的 style 属性在编译后会混在一个文件中，如果存在重名 CSS 样式，后引入的组件中的会覆盖之前组件的 CSS，为 style 标签添加 scoped 属性限定样式只在当前组件中可用：\",\"<style scoped> .demo { background-color: orange; } </style>\",\"style 的另一个属性 lang 可以选择 css 或 less 使 Vue 能够解析，如果选择 less 需要安装 less-loader，要注意版本问题。\"]},\"571\":{\"h\":\"vue-resource\"},\"572\":{\"h\":\"安装 vue-resource\",\"t\":[\"npm install vue-resource\"]},\"573\":{\"h\":\"使用 vue-resource\",\"t\":[\"注册插件：\",\"Vue.use(vueResource);\",\"发起请求：\",\"this.$http.get('http://localhost:90/api/getAllStudents').then( response => { console.log(response.data); }, error => { console.log(error.message); } );\",\"vue-resource 与 Axios 使用方法基本一致，发送请求要通过 $http 对象完成，但是 vue-resource 维护频率低，推荐使用 Axios。\"]},\"574\":{\"h\":\"Vue Router\"},\"575\":{\"h\":\"安装 VueRouter\",\"t\":[\"npm install vue-router\"]},\"576\":{\"h\":\"使用 VueRouter\",\"t\":[\"在 src 目录下创建 router 文件夹，并在其中创建 index.js：\",\"import VueRouter from 'vue-router'; import Home from '@/components/Home'; import About from '@/components/About'; import News from '@/components/News'; import Message from '@/components/Message'; import Detail from '@/components/Detail'; export default new VueRouter({ routes: [ { //指定路径 path: '/home', //对应组件 component: Home, }, { path: '/about', component: About, }, ], });\",\"在 main.js 中引用 VueRouter 并使用上述配置：\",\"import Vue from 'vue'; import App from './App.vue'; import VueRouter from 'vue-router'; import router from './router'; Vue.config.productionTip = false; Vue.use(VueRouter); new Vue({ render: h => h(App), router, }).$mount('#app');\",\"在 APP 组件中添加超链接：\",\"<template> <div> <router-link active-class=\\\"active\\\" to=\\\"/about\\\">About</router-link> <router-link active-class=\\\"active\\\" to=\\\"/home\\\">Home</router-link> <div> <router-view></router-view> </div> </div> </template>\",\"通过 router-link 标签使用路由，to 属性指定要跳转的目的地，active-class 属性指定了当这个路径被触发时，这个超链接的样式，通过 router-view 标签指定链接到的组件的显示位置。\",\"提示\",\"切换时销毁前一个组件 vc，嵌套时先销毁外层组件，再销毁内层组件。\"]},\"577\":{\"h\":\"多级路由\",\"t\":[\"import VueRouter from 'vue-router'; import Home from '@/components/Home'; import About from '@/components/About'; import News from '@/components/News'; import Message from '@/components/Message'; import Detail from '@/components/Detail'; export default new VueRouter({ routes: [ { path: '/home', component: Home, }, { path: '/about', component: About, children: [ { path: 'news', component: News, }, { path: 'message', component: Message, children: [ { path: 'detail', component: Detail, }, ], }, ], }, ], });\",\"提示\",\"使用 children 属性指定子路由，子路由 path 不能加斜线，router-link 的 to 属性从根路径开始写到目的子路径。\"]},\"578\":{\"h\":\"query 参数\",\"t\":[\"通过将参数拼接在 URL 中传递参数。\",\"写法一：\",\"<router-link :to=\\\"`/about/message/detail?id=${msg.id}&title=${msg.title}`\\\" >{{ msg.id }}-{{ msg.title }}</router-link>\",\"通过反引号并将 to 属性改为绑定形式，使用${}取得要传递的参数。\",\"写法二：\",\"<router-link :to=\\\"{ path: '/about/message/detail', query: { id: msg.id, title: msg.title, }, }\\\" > {{ msg.id }}-{{ msg.title }} </router-link>\",\"to 属性依然是绑定方式，写成对象形式。\",\"提示\",\"无论哪种写法，在目的组件中都要使用 $route.query.XXX 访问传递的参数。\"]},\"579\":{\"h\":\"命名路由、重定向、别名、命名视图\"},\"580\":{\"h\":\"命名路由\",\"t\":[\"可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称：\",\"routes: [ { path: '/home', component: Home, name: 'home', }, { path: '/about', component: About, name: 'about', }, ];\",\"在使用时通过绑定 to 属性并采用对象形式传递一个 name 参数指定要跳转到的路由。\"]},\"581\":{\"h\":\"重定向\",\"t\":[\"从 /a 重定向到 /b：\",\"const router = new VueRouter({ routes: [{ path: '/a', redirect: '/b' }], });\",\"重定向到命名路由：\",\"const router = new VueRouter({ routes: [{ path: '/a', redirect: { name: 'foo' } }], });\",\"重定向到函数：\",\"const router = new VueRouter({ routes: [ { path: '/a', redirect: to => { // 方法接收 目标路由 作为参数 // return 重定向的 字符串路径/路径对象 }, }, ], });\"]},\"582\":{\"h\":\"别名\",\"t\":[\"/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样：\",\"const router = new VueRouter({ routes: [{ path: '/a', component: A, alias: '/b' }], });\"]},\"583\":{\"h\":\"命名视图\",\"t\":[\"你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default：\",\"<router-view class=\\\"view one\\\"></router-view> <router-view class=\\\"view two\\\" name=\\\"a\\\"></router-view> <router-view class=\\\"view three\\\" name=\\\"b\\\"></router-view>\",\"多个视图需要多个组件，路由配置中使用配置项 components：\",\"const router = new VueRouter({ routes: [ { path: '/', components: { default: Foo, a: Bar, b: Baz, }, }, ], });\"]},\"584\":{\"h\":\"params 参数(RestFul)\",\"t\":[\"在 index.js 中修改：\",\"import VueRouter from 'vue-router'; import Home from '@/components/Home'; import About from '@/components/About'; import News from '@/components/News'; import Message from '@/components/Message'; import Detail from '@/components/Detail'; export default new VueRouter({ routes: [ { path: '/home', component: Home, name: 'home', }, { path: '/about', component: About, name: 'about', children: [ { path: 'news', component: News, name: 'news', }, { path: 'message', component: Message, name: 'message', children: [ { path: 'detail/:id/:title', component: Detail, name: 'detail', }, ], }, ], }, ], });\",\"在 path 属性中的路径后使用/分隔参数，:后接参数键。\",\"传递参数：\",\"<router-link :to=\\\"{ name: 'detail', params: { id: msg.id, title: msg.title, }, }\\\" > {{ msg.id }}-{{ msg.title }} </router-link>\",\"使用了 params 参数后必须使用 name 而不能使用 path。\",\"获取参数：\",\"$route.params.id;\"]},\"585\":{\"h\":\"props 配置\"},\"586\":{\"h\":\"布尔模式\",\"t\":[\"在 params 基础上，修改路由配置：\",\"{ path:'message', component:Message, name:'message', children:[ { path:'detail/:id/:title', component:Detail, name:'detail', props:true } ], }\",\"props 属性如果为 true，则使用 params 传递的参数都将变成 props 形式传递到目的地，即 route.params 将变成组件的属性，router-link 标签写法与 params 一致。\",\"目的组件修改为：\",\"<template> <div> <h3>Detail</h3> <h5>{{ id }}</h5> <h5>{{ title }}</h5> </div> </template> <script> export default { name: 'Detail', mounted() { console.log(this.$route); }, props: ['id', 'title'], }; </script>\"]},\"587\":{\"h\":\"对象模式\",\"t\":[\"props 写成：\",\"props:{id:'test',title:'test'}\",\"此对象所有的键值对都会以 props 形式传递，当 props 是静态时是有用的，目的组件中用法与布尔模式相同。\"]},\"588\":{\"h\":\"函数模式\",\"t\":[\"目的组件用法依然不变。\",\"接收 params：\",\"props(route){ return{ id: route.params.id, title: route.params.title } }\",\"接收 query：\",\"props(route){ return{ id: route.query.id, title: route.query.title } }\"]},\"589\":{\"h\":\"router-link 的 replace 属性\",\"t\":[\"浏览器的历史记录分为两种模式：push 模式和 replace 模式，push 模式是每访问一个链接，就把这个链接入栈，所以能够一直返回直到最开始的链接，replace 模式是每访问一个链接，就把这个链接替换掉上一条链接。\",\"开启 router-link 的 replace 模式：\",\"<router-link replace to=\\\"/about/news\\\" active-class=\\\"active\\\">News</router-link> <router-link :replace=\\\"true\\\" to=\\\"/about/message\\\" active-class=\\\"active\\\">Message</router-link>\",\"开启 replace 模式后，后退跳转到的是最后一个不是 replace 的链接。\"]},\"590\":{\"h\":\"编程式路由\",\"t\":[\"为其他控件实现跳转、跳转前处理数据等需要使用编程式路由。\"]},\"591\":{\"h\":\"push 方法\",\"t\":[\"用法如下，需要传递一个参数对象，参数对象与 router-link 标签 to 属性一致：\",\"this.$router.push({ name: 'detail', query: { id: msg.id, title: msg.title, }, });\"]},\"592\":{\"h\":\"replace 方法\",\"t\":[\"传递一个参数对象，参数对象与 router-link 标签 to 属性一致：\",\"this.$router.replace({ name: 'detail', query: { id: msg.id, title: msg.title, }, });\"]},\"593\":{\"h\":\"back 方法\",\"t\":[\"后退功能：\",\"this.$router.back();\"]},\"594\":{\"h\":\"forward 方法\",\"t\":[\"前进功能：\",\"this.$router.forward();\"]},\"595\":{\"h\":\"go 方法\",\"t\":[\"传递一个整数做参数，如果是正数就是前进对应的步数，负数则后退相应步数：\",\"this.$router.go(5); this.$router.go(-19);\"]},\"596\":{\"h\":\"缓存路由组件\",\"t\":[\"使不展示的组件保持挂载不销毁。\",\"使用 keep-alive 标签包裹 <router-view></router-view>：\",\"<keep-alive> <router-view></router-view> </keep-alive>\",\"要缓存哪个组件，就去哪个组件的对应的 router-view 组件，即最后这个组件的展示位置两边使用 keep-alive 标签。\",\"keep-alive 默认缓存中间的所有组件，通过 include 属性指定仅缓存其中的某几个组件。\",\"使用 include 属性指定要缓存的组件，值为组件名，如果是多个组件，使用逗号分隔，或者使用绑定传入数组。\",\"<keep-alive include=\\\"News,Message\\\"> <router-view></router-view> </keep-alive> <keep-alive :include=\\\"['News', 'Message']\\\"> <router-view></router-view> </keep-alive>\"]},\"597\":{\"h\":\"两个新的生命周期钩子\"},\"598\":{\"h\":\"activated\",\"t\":[\"组件对应的路由被激活时触发，如果不使用缓存，这个钩子不会被执行，使用缓存后，一次激活对应路由以后 mounted 不会再次调用，但这个路由激活钩子会反复调用。\",\"提示\",\"这个钩子只有开启缓存后才会生效。\"]},\"599\":{\"h\":\"deactivated\",\"t\":[\"组件对应的路由失活时触发，如果不使用缓存，这个钩子不会被执行，使用缓存后，beforeDestroy 不会调用。\",\"提示\",\"这个钩子只有开启缓存后才会生效。\"]},\"600\":{\"h\":\"路由元信息\",\"t\":[\"定义路由的时候可以配置 meta 字段。\",\"一个路由匹配到的所有路由记录会暴露为 $route 对象 (还有在导航守卫中的路由对象) 的 $route.matched 数组。因此，我们需要遍历 $route.matched 来检查路由记录中的 meta 字段。\"]},\"601\":{\"h\":\"路由守卫\",\"t\":[\"提示\",\"参数或查询的改变并不会触发进入/离开的导航守卫。\",\"导航守卫是应用在目标上的。\"]},\"602\":{\"h\":\"全局前置守卫\",\"t\":[\"每次路由切换之前调用、初始化时被调用。\",\"router.beforeEach((to, from, next) => { if (to.meta.authRequired) { if (localStorage.getItem('access') !== 'admin') { alert('403 Forbidden'); } else { next(); } } else { next(); } });\",\"router 是创建的 VueRouter 对象，并在需要验证的路由规则的 meta 属性中使用标识符决定是否要进行鉴权。\",\"to: 目的地的路由对象。\",\"from: 起点的路由对象。\",\"next: 函数，执行效果依赖传入的参数。\",\"next()：进行下一个钩子，如果全部钩子执行完，就确认导航，达到目的地。\",\"next(false)：中断当前导航，如果 URL 改变，则会重置到 from 对应的地址。\",\"next('/') 或 next({path:'/'})：跳转到一个不同的地址，采用对象写法可以像编程式路由中的 push 等方法一样传递参数等。\",\"next(error)：传入 Error 实例，该导航被中断，错误被传递给 router.onError() 注册过的回调。\"]},\"603\":{\"h\":\"全局后置守卫\",\"t\":[\"每次路由切换之后调用、初始化时被调用。\",\"接收两个参数，不接收 next 函数。\",\"router.afterEach((to, from) => { //用于修改界面标题 document.title = to.meta.title || 'VueRouter'; console.log(from); });\",\"上述代码用于修改页面标题，每个路由规则的 meta 属性都配置一个 title，进入不同路由显示不同标题。\"]},\"604\":{\"h\":\"独享路由守卫\",\"t\":[\"提示\",\"独享路由守卫只有前置路由守卫。\",\"接收三个参数，和全局前置守卫相同：\",\"routes: [ { path: '/home', component: Home, name: 'home', meta: { title: 'Home' }, beforeEnter: (to, from, next) => {}, }, ];\"]},\"605\":{\"h\":\"组件内路由守卫\",\"t\":[\"三种守卫都接收 to、from、next 三个参数。\",\"beforeRouteEnter：\",\"在渲染该组件的对应路由被 confirm 之前(调用 next() 会导致 confirm )，不能获取组件实例 this，因为此时组件还没有被创建。\",\"beforeRouteUpdate(2.2 新增)：\",\"当前路由改变但是该组件被复用时调用，举例来说，对于使用 params 动态路径传参，路径定义为 '/test/:id' 时，在 '/test/1' 和 '/test/2' 之间跳转时，由于渲染同样的组件，因此组件实例会被复用，这个钩子此时调用，可以访问组件实例对象 this。\",\"beforeRouteLeave：\",\"导航离开该组件的对应路由时调用，可以访问组件实例对象 this。\"]},\"606\":{\"h\":\"全局解析守卫\",\"t\":[\"在 2.5.0+ 你可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。\"]},\"607\":{\"h\":\"完整的导航解析流程\"},\"608\":{\"h\":\"HTML5 History 模式\",\"t\":[\"vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。\",\"井号 # 后面的内容就是 hash 值。\",\"hash 值不会包含在 HTTP 请求中，即 hash 值不会发送给服务器。\",\"切换模式：\",\"配置 VueRouter 时除了传递 route 参数，还可以传递一个 mode 参数指定工作模式。\",\"mode:'hash', routes: []\",\"history 模式由于会将路径发送给服务器，所以在部署时需要后端具有全路径资源匹配能力，防止 404 问题。\"]},\"609\":{\"h\":\"滚动行为\",\"t\":[\"使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。\",\"当创建一个 Router 实例，提供一个 scrollBehavior 方法：\",\"const router = new VueRouter({ routes: [...], scrollBehavior (to, from, savedPosition) { // return 期望滚动到哪个的位置 } })\",\"返回值示例\",\"{ x: number, y: number }。\",\"{ selector: string, offset? : { x: number, y: number }}。\",\"平滑滚动：\",\"将 behavior 选项添加到 scrollBehavior 内部返回的对象中。\",\"scrollBehavior (to, from, savedPosition) { if (to.hash) { return { selector: to.hash, behavior: 'smooth', } } }\"]},\"610\":{\"h\":\"导航故障\",\"t\":[\"router.onError(callback);\",\"注册一个回调，该回调会在路由导航过程中出错时被调用。注意被调用的错误必须是下列情形中的一种：\",\"错误在一个路由守卫函数中被同步抛出。\",\"错误在一个路由守卫函数中通过调用 next(err) 的方式异步捕获并处理。\",\"渲染一个路由的过程中，需要尝试解析一个异步组件时发生错误。\"]},\"611\":{\"h\":\"Vuex\"},\"612\":{\"h\":\"Vuex 工作原理\"},\"613\":{\"h\":\"配置 Vuex 环境\",\"t\":[\"安装 Vuex：\",\"npm install vuex --save\",\"在 src 文件夹中创建 store 文件夹，并在其中创建 index.js 文件，编写如下内容：\",\"'use strict'; import Vuex from 'vuex'; import Vue from 'vue'; Vue.use(Vuex); const actions = {}; const mutations = {}; const state = {}; export default new Vuex.Store({ actions, mutations, state, });\",\"注意\",\"Vue.use() 必须要写在创建 store 对象前，如果写在 main.js 中然后引用 index.js，且使用了 Vue-CLI 脚手架，则脚手架会先执行所有的 import 语句，导致导入 index.js 前没有执行 Vue.use() 发生报错，所以要写在 index.js 中。\",\"main.js 引入 index.js：\",\"import Vue from 'vue'; import App from './App.vue'; import store from './store'; Vue.config.productionTip = false; new Vue({ render: h => h(App), store, }).$mount('#app');\"]},\"614\":{\"h\":\"求和案例\",\"t\":[\"求和子模块：\",\"通过 store 的 dispatch() 方法触发 actions：\",\"<template> <div> <h2>当前n为{{ n }}</h2> <select v-model.number=\\\"step\\\"> <option value=\\\"1\\\">1</option> <option value=\\\"2\\\">2</option> <option value=\\\"3\\\">3</option> </select> <button @click=\\\"increment\\\">+</button> <button @click=\\\"decrement\\\">-</button> <button @click=\\\"incrementOdd\\\">当前求和为奇数才加</button> <button @click=\\\"incrementWait\\\">延迟两秒加</button> </div> </template> <script> export default { name: 'Counter', data() { return { step: 1, }; }, methods: { increment() { this.$store.dispatch('add', this.step); }, decrement() { this.$store.dispatch('sub', this.step); }, incrementOdd() { this.$store.dispatch('addOdd', this.step); }, incrementWait() { this.$store.dispatch('addWait', this.step); }, }, computed: { n: { get() { return this.$store.state.n; }, }, }, }; </script>\",\"actions 和 mutations：\",\"const actions = { // context与 store 实例具有相同方法和属性 add(context, data) { context.commit('ADD', data); }, sub(context, data) { context.commit('SUB', data); }, addOdd(context, data) { //在actions中再次分发给其他action并接受返回值，返回值是promise类型 context.dispatch('isOdd', context.state.n).then(result => { console.log(result); if (result) { context.commit('ADD', data); } }); }, addWait(context, data) { setTimeout(() => { context.commit('ADD', data); }, 2000); }, isOdd(context, data) { return data % 2 !== 0; }, }; const mutations = { ADD(state, data) { state.n += data; }, SUB(state, data) { state.n -= data; }, }; const state = { n: 0, };\"]},\"615\":{\"h\":\"getters\",\"t\":[\"当要获取加工后的 state 数据时使用：\",\"<h2>当前n的算术平方根为{{sqrtN}}</h2> <script> export default { name: 'Counter', computed: { sqrtN: { get() { return this.$store.getters.process; }, }, }, }; </script>\",\"index.js：\",\"const getters = { process(state) { return Math.sqrt(state.n); }, }; export default new Vuex.Store({ actions, mutations, state, getters, });\",\"getters 定义与计算属性类似，但是能做到全局复用，计算属性只能组件内复用，都通过返回值获取属性值。\"]},\"616\":{\"h\":\"mapState 与 mapGetters\",\"t\":[\"在组件中频繁写 this.$store.state 过于繁琐，使用 mapState 与 mapGetters 可以简化代码。\",\"首先在组件中引入 mapState 和 mapGetters：\",\"import { mapState, mapGetters } from 'vuex';\",\"在计算属性中使用，前面加三个点表示以对象形式加入：\",\"computed: { // 对象写法 // ...mapState({n:'n',name:'name',age:'age'}) // ...mapState({n:state => state.n,name:state => state.name,age:state => state.age}) ...mapState({ n(state) { return state.n; }, name(state) { return state.name; }, age(state) { return state.age*100; } }), // 数组写法 // ...mapState(['n','name','age']) ...mapGetters({sqrtN:'process'}) // ...mapGetters(['process']) }\",\"mapState 有四种写法：\",\"对象写法，对象中是键值对，键为需要的计算属性名，值必须用引号，表示在 state 中对应数据的名字。\",\"对象写法，对象中是键值对，键为需要计算的属性名，值为箭头函数，参数为 state。\",\"对象写法，对象中是函数，函数参数为 state，可以进行复杂处理。\",\"数组写法，仅适用于需要的计算属性与 state 中属性重名的情况。\",\"mapGetters 有两种写法：\",\"数组写法，仅适用于需要的计算属性与 getters 中函数重名的情况。\",\"对象写法，对象中是键值对，键为需要的计算属性，值为 getters 中对应函数的名字。\"]},\"617\":{\"h\":\"mapActions 与 mapMutations\",\"t\":[\"在组件中频繁创建方法调用 actions 或 mutations 非常繁琐，使用 mapActions 和 mapMutations 可以简化代码。\",\"首先在组件中引入 mapActions 和 mapMutations：\",\"import { mapActions, mapMutations } from 'vuex';\",\"在 methods 中应用：\",\"methods: { // 调用时传参 ...mapMutations({increment:'ADD',decrement:'SUB'}), // 调用时传参 // ...mapMutations(['ADD','SUB']), // 调用时要传参数 ...mapActions({incrementOdd:'addOdd', incrementWait:'addWait'}) // 调用时要传参数 // ...mapActions(['addWait','addOdd']) },\",\"mapActions 有两种写法：\",\"对象写法，键为要定义的方法名，值为 actions 中定义的方法。\",\"数组写法，仅适用于要定义的方法名和定义在 actions 中的方法同名的情况。\",\"mapMutations 有两种写法：\",\"对象写法，键为要定义的方法名，值为 mutations 中已定义的方法名。\",\"数组写法，仅适用于要定义的方法名和定义在 mutations 中的方法同名的情况。\",\"提示\",\"mapActions 和 mapMutations 不论使用哪种写法，都必须在调用时传入参数，否则默认参数是 event。\",\"示例：\",\"<button @click=\\\"incrementOdd(step)\\\"></button> <button @click=\\\"incrementWait(step)\\\"></button>\"]},\"618\":{\"h\":\"多组件共享数据\",\"t\":[\"在此前计数器组件基础上，添加人员列表组件，完成人员列表组件能看到计数器当前值，计数器组件能看到人员列表长度。\",\"在 index.js 中给 actions 添加方法：\",\"addPerson(context,data) { if (data.trim()===''){ alert('请输入内容') }else { context.commit('ADD_PERSON',data) } }\",\"在mutations中添加：\",\"ADD_PERSON(state,data){ state.people.unshift(data) alert('陈坤') }\",\"为 state 添加一个人员数组：\",\"const state = { n: 0, name: 'PPG', age: 21, people: [], };\",\"在计数器组件模板中添加：\",\"<h4>当前人员列表中人数为：{{number}}</h4>\",\"其中 number 是计算属性，定义如下：\",\"computed: { ...mapState({ n(state) { return state.n; }, name(state) { return state.name; }, age(state) { return state.age; }, number(state) { return state.people.length; } }),\",\"创建人员列表组件：\",\"<template> <div> <div> <input v-model=\\\"temp\\\" type=\\\"text\\\" placeholder=\\\"输入姓名，回车确认\\\" @keydown.enter=\\\"addPerson(temp)\\\" /> </div> <ul> <li v-for=\\\"(item, index) in people\\\" :key=\\\"index\\\"> {{ item }} </li> </ul> <div>计数器组件的当前值为:{{ n }}</div> </div> </template> <script> import { mapActions, mapState } from 'vuex'; export default { name: 'People', data() { return { temp: '', }; }, methods: { ...mapActions(['addPerson']), }, computed: { ...mapState(['people', 'n']), }, //通过监视people数组变化清空输入框 watch: { people: { deep: true, handler() { this.temp = ''; }, }, }, }; </script>\"]},\"619\":{\"h\":\"模块化\",\"t\":[\"由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。\",\"将上一个部分中人员列表和计数器的 vuex 拆分，可以写在 index.js 中，也可以每个模块拆分出一个文件然后 index 中进行引用。\",\"people.js：\",\"'use strict'; export default { namespaced: true, actions: { addPerson(context, data) { if (data.trim() === '') { alert('请输入内容'); } else { context.commit('ADD_PERSON', data); } }, }, mutations: { ADD_PERSON(state, data) { state.people.unshift(data); alert('陈坤'); }, }, getters: {}, state: { people: [], }, };\",\"counter.js：\",\"'use strict'; export default { namespaced: true, actions: { addOdd(context, data) { context.dispatch('isOdd', context.state.n).then(result => { if (result) { context.commit('ADD', data); } }); }, addWait(context, data) { setTimeout(() => { context.commit('ADD', data); }, 2000); }, isOdd(context, data) { return data % 2 !== 0; }, }, mutations: { ADD(state, data) { state.n += data; }, SUB(state, data) { state.n -= data; }, }, getters: { process(state) { return Math.sqrt(state.n); }, }, state: { n: 0, name: 'PPG', age: 21, }, };\",\"index.js：\",\"'use strict'; import Vuex from 'vuex'; import Vue from 'vue'; import counterOptions from '@/store/counter'; import peopleOptions from '@/store/people'; Vue.use(Vuex); export default new Vuex.Store({ modules: { peopleOptions, counterOptions, }, });\",\"在分模块中添加 namespaced 属性开启命名空间，如果不写，默认为 false，每个模块中的 actions 和 mutations 为全局可用，state 不是全局可用，要访问可以使用模块名前缀。\",\"counter.vue：\",\"<script> import { mapState, mapGetters } from 'vuex'; import { mapActions, mapMutations } from 'vuex'; export default { name: 'Counter', data() { return { step: 1, }; }, methods: { ...mapMutations('counterOptions', { increment: 'ADD', decrement: 'SUB' }), ...mapActions('counterOptions', { incrementOdd: 'addOdd', incrementWait: 'addWait' }), }, computed: { ...mapState('counterOptions', { n(state) { return state.n; }, name(state) { return state.name; }, age(state) { return state.age; }, }), ...mapState('peopleOptions', { number(state) { return state.people.length; }, }), ...mapGetters('counterOptions', { sqrtN: 'process' }), }, }; </script>\",\"people.vue：\",\"<script> import { mapActions, mapState } from 'vuex'; export default { name: 'People', data() { return { temp: '', }; }, methods: { ...mapActions('peopleOptions', ['addPerson']), }, computed: { ...mapState('peopleOptions', ['people']), ...mapState('counterOptions', ['n']), }, watch: { people: { deep: true, handler() { this.temp = ''; }, }, }, }; </script>\",\"在所有的 map 辅助函数中第一个参数传入在 index.js 中注册的模块名即可。\",\"如果不使用辅助函数，要注意访问的路径为命名空间/getters 方法名。\",\"例如通过如下方式在 counter.vue 中访问。\",\"//返回值就是getters对应函数的结果 this.$store.getters['counterOptions/process'];\",\"对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState。\",\"对于模块内部的 getter，根节点状态会作为第三个参数暴露出来。\"]},\"620\":{\"h\":\"监视属性\"},\"621\":{\"h\":\"基本用法\",\"t\":[\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>今天天气很{{info}}</h2> <hr /> <button @click=\\\"change\\\">切换天气</button> </div> <script> const vm = new Vue({ el: '#root', data() { return { isHot: true, }; }, computed: { info() { return this.isHot ? '炎热' : '寒冷'; }, }, methods: { change() { this.isHot = !this.isHot; }, }, watch: { isHot: { immediate: false, //设为true时，初始化时就调用 handler(newValue, oldValue) { console.log('旧值：' + oldValue); console.log('新值：' + newValue); }, }, }, }); //监视属性的第二种写法 // vm.$watch('isHot',{ // handler(newValue,oldValue){ // console.log(\\\"旧值：\\\"+oldValue) // console.log(\\\"新值：\\\"+newValue) // } // }) </script> </body> </html>\",\"注意\",\"handler 方法中第一个参数是新值，第二个是旧值，不可交换顺序。\",\"监视属性 watch：\",\"当被监视的属性发生变化时，回调函数自动调用。\",\"监视的属性必须存在。\",\"监视的两种写法： \",\"创建 Vue 实例时传入 watch 配置。\",\"通过 vm.$watch 监视，第一个参数是要监视的属性名，要使用引号包裹，第二个参数与第一种写法一致。\"]},\"622\":{\"h\":\"深度监视\",\"t\":[\"现在有如下 HTML 代码：\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" /> <title>Document</title> <script src=\\\"../js/vue.js\\\"></script> </head> <body> <div id=\\\"root\\\"> <h2>今天天气很{{info}}</h2> <hr /> <button @click=\\\"change\\\">切换天气</button> <hr /> <h2>a:{{numbers.a}}</h2> <button @click=\\\"numbers.a++\\\">点我加一</button> <hr /> <h2>b:{{numbers.b}}</h2> <button @click=\\\"numbers.b++\\\">点我加一</button> </div> </body> </html>\",\"如果要只监视 a 的变化：\",\"// 监视多级结构中某个属性的变化 //这里必须加引号，平时不加是因为简写，但是多层次不连续的属性名不能简写 'numbers.a':{ handler(newValue,oldValue){ console.log(\\\"旧值：\\\"+oldValue) console.log(\\\"新值：\\\"+newValue) } },\",\"如果要能够监视 numbers 中任意值的变化：\",\"numbers:{ //开启深度监视 deep:true, handler(newValue,oldValue){ console.log(\\\"旧值：\\\"+oldValue) console.log(\\\"新值：\\\"+newValue) } }\",\"深度监视：\",\"Vue 中 watch 默认不监视对象的内部值的变化。\",\"配置 deep 属性为 true 可以监测对象内部值的变化。\",\"Vue 自身可以监测对象内部值的改变，但 Vue 提供的 watch 默认不可以。\",\"使用 watch 时根据数据的具体结构决定是否采用深度监视。\"]},\"623\":{\"h\":\"监视的简写形式\",\"t\":[\"简写时，只有 handler 中的内容，不能配置其他参数：\",\"watch:{ isHot(newValue,oldValue){ console.log(\\\"旧值：\\\"+oldValue) console.log(\\\"新值：\\\"+newValue) } } //或者 vm.$watch('isHot',function(newValue,oldValue){ console.log(\\\"旧值：\\\"+oldValue) console.log(\\\"新值：\\\"+newValue) })\"]},\"624\":{\"h\":\"计算属性与监视属性的区别与联系\",\"t\":[\"区别：\",\"计算属性能完成的，监视属性一定也能完成。\",\"监视属性能完成的，计算属性不一定能完成，例如异步操作。\",\"提示\",\"除非必须要使用监视属性，否则能够使用计算属性完成的就不要使用监视属性，监视属性会监视被监视对象的所有内容，包括不会影响结果的值的内容，计算属性只有影响结果的数据发生变化才会重新计算，性能更好。\",\"两个原则：\",\"所有被 Vue 管理的函数，最好写成普通函数，这样 this 的指向才是 Vue 实例或组件的实例对象。\",\"所有不被 Vue 锁管理的函数(定时器回调函数，ajax 回调函数)，最好写成箭头函数，这样其中的 this 的指向才是 Vue 实例或者组件实例对象。\"]},\"625\":{\"h\":\"常用 Composition API\"},\"626\":{\"h\":\"setup\",\"t\":[\"setup 是 Vue3 中的一个新的配置项，值为一个函数。\",\"setup 是所有 Composition API 表演的舞台。\",\"组件中所用到的数据、方法等均要配置在 setup 中。\",\"setup 函数的两种返回值： \",\"若返回一个对象，则对象中的属性、方法在模板中可以直接使用。\",\"若返回一个渲染函数，则可以自定义渲染内容。\",\"注意\",\"不要与 Vue2 混用： \",\"Vue2 配置（data、method、computed）中可以访问到 setup 中的属性、方法。\",\"setup 中不能访问 Vue2 配置。\",\"如果有重名，setup 优先。\",\"setup 不能是一个异步方法（async），因为返回值不再是 return 对象，而是 promise(使用异步引入 Suspense 的情况除外)。\",\"setup 只有返回的内容才能被模板使用。\",\"<template> <h1>{{ name }}</h1> <h1>{{ age }}</h1> <button @click=\\\"demo\\\">测试</button> </template> <script> export default { name: 'App', setup() { let name = 'ppg'; let age = 21; function demo() { alert(name + ' ' + age); } return { name, age, demo, }; }, }; </script>\"]},\"627\":{\"h\":\"ref函数\",\"t\":[\"作用：定义一个响应式数据。\",\"语法：let x=ref(val)。\",\"注意：在方法中操作响应式数据时，有两种方式： \",\"使用 this.x=xxx 直接修改。\",\"不使用 this 使用 x.value=xxx 修改。\",\"对于基本数据类型，响应式依靠的是 Object.defineProperty() 的 get 与 set 完成的。\",\"对象类型的数据，内部使用了 Vue3 的新函数 reactive 函数。\",\"不使用 this 进行响应式修改：\",\"let name = ref('ppg'); let age = ref(21); let person = ref({ name: 'test', age: 1, }); function demo() { alert(name + ' ' + age); } function changeAge() { age.value++; } function changePerson() { person.value.age++; }\",\"使用 this 进行修改：\",\"let name = ref('ppg'); let age = ref(21); let person = ref({ name: 'test', age: 1, }); function demo() { alert(name + ' ' + age); } function changeAge() { this.age++; } function changePerson() { this.person.age++; }\"]},\"628\":{\"h\":\"reactive 函数\",\"t\":[\"作用：定义一个对象类型的响应式数据。\",\"语法：const 代理对象=reactive(源对象) 接收一个对象或数组，返回一个代理对象(proxy 对象)。\",\"reactive 定义的响应式数据是深层次的。\",\"内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。\",\"reactive 既可以用 this 直接修改，也可以不用 this 直接修改，省去了 value。\",\"let person = reactive({ name: 'test', age: 1, }); function changePerson() { person.age++; this.person.age++; }\",\"修改数组内容可以直接通过下标修改：\",\"let arr = reactive([1, 2, 3]); function demo() { alert(name + ' ' + age); } function changeArr() { arr[0] = 100; }\"]},\"629\":{\"h\":\"Vue 的响应式原理\"},\"630\":{\"h\":\"Vue2 的响应式\",\"t\":[\"原理： \",\"对象类型：通过 Object.defineProperty() 对属性的读取、修改进行拦截（数据劫持）。\",\"数组类型：通过重写更新数组的一系列方法来实现拦截（对数组的变更方法进行了包裹。\",\"存在问题： \",\"新增属性、删除属性，界面不会更新。\",\"直接通过下标修改数组，界面不会自动更新。\"]},\"631\":{\"h\":\"Vue3 的响应式\",\"t\":[\"原理： \",\"通过 Proxy(代理)，拦截对象中任意属性的变化，包括属性值的读写、属性的添加、属性的删除等。\",\"通过 Reflect(反射)，对被代理对象的属性进行操作。\",\"原理示例：\",\"let person = { name: 'PPG', age: 21, }; const p = new Proxy(person, { get(target, p) { console.log(`读取了${p},内容为${target[p]}`); return Reflect.get(target, p); //返回内容 }, set(target, p, value) { console.log(`修改了${p}属性，改成了${value}`); Reflect.set(target, p, value); }, deleteProperty(target, p) { console.log(`删除了${p}属性，删除的内容为：${target[p]}`); return Reflect.deleteProperty(target, p); //返回删除结果，布尔值 }, });\",\"提示\",\"Reflect 是 window 中的一个对象，可以进行增加、删除、修改属性等操作。\",\"使用 Reflect 增加属性：\",\"let person = { name: 'PPG', age: 21, }; Reflect.defineProperty(person, 'email', { temp: '', get() { return Reflect.get(this, 'temp'); }, set(v) { Reflect.set(this, 'temp', v); }, });\"]},\"632\":{\"h\":\"reactive 对比 ref\",\"t\":[\"定义数据角度： \",\"ref 用来定义：基本类型数据。\",\"reactive 用来定义：对象(或数组)类型数据。\",\"ref 也可以用来定义对象(或数组)类型数据，它内部会自动通过 reactive 转为代理对象。\",\"原理角度： \",\"ref 通过 Object.defineProperty() 的 get 与 set 来实现响应式。\",\"reactive 通过使用 Proxy 来实现响应式，并通过 Reflect 操作源对象内部的数据。\",\"使用角度： \",\"ref 定义的数据：操作数据需要 .value，读取数据时模板中直接读取不需要 .value。\",\"reactive 定义的数据，操作数据与读取数据均不需要 .value。\"]},\"633\":{\"h\":\"setup 的两个注意点\",\"t\":[\"执行时机： \",\"在 beforeCreate 之前执行，this 是 undefined。\",\"参数 \",\"props：值为对象，包含组件外部传递过来，且组件内部声明接收了的属性。\",\"context：上下文。 \",\"attrs：值为对象，包含组件外部传递过来，但没有在 props 配置中声明的属性，相当于 this.$attrs。\",\"slots：收到的插槽内容，相当于 this.$slots。\",\"emit：分发自定义事件的函数，相当于 this.$emit。\",\"父组件：\",\"<template> <Demo @demo=\\\"hello\\\" :msg=\\\"msg\\\"> <span>这是一个插入内容</span> </Demo> </template> <script> import { reactive, ref } from 'vue'; import Demo from './components/Demo.vue'; //引入不加后缀名会404 export default { name: 'App', components: { Demo, }, setup(props, context) { let msg = 'vue3'; function hello(val) { alert('hello事件被触发，收到参数：' + val); } return { hello, msg, }; }, }; </script>\",\"子组件：\",\"<template> <div> <h1>demo {{ msg }}</h1> <button @click=\\\"demo\\\">测试按钮</button> <br /> <slot></slot> </div> </template> <script> export default { name: 'Demo', props: ['msg'], setup(props, context) { function demo() { console.log(props); console.log(context.attrs); context.emit('demo', '嘿嘿嘿'); } return { demo, }; }, }; </script> <style scoped></style>\"]},\"634\":{\"h\":\"计算属性与监视\"},\"635\":{\"h\":\"计算属性\",\"t\":[\"简写形式：\",\"setup(){ let person=reactive({ name:'PPG', age:21 }) person.info=computed(()=>{ return person.name+'-'+person.age }) return{ person } }\",\"完整形式：\",\"setup(){ let person=reactive({ name:'PPG', age:21 }) person.info=computed({ get(){ return person.name+'-'+person.age }, set(val){ console.log(val) } }) return{ person } }\"]},\"636\":{\"h\":\"监视\",\"t\":[\"情况一，监视 ref 所定义的一个响应式数据：\",\"let sum = ref(0); let msg = ref('hello'); let person = reactive({ name: 'PPG', age: 21, }); watch( sum, (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true } );\",\"情况二，监视 ref 所定义的多个响应式数据：\",\"watch( [sum, msg], (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true } );\",\"情况三，监视 reactive 所定义的一个响应式数据的全部属性：\",\"注意\",\"此处可能无法正确获取 oldValue，属于 Vue 的 bug，后续 Vue 更新可能修复。\",\"此处强制开启了深度监视，无论是否设置 deep 为 false 都无效。\",\"watch( person, (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true } );\",\"情况四，监视 reactive 定义的一个响应式数据中的某个属性：\",\"提示\",\"这种情况可以获取 oldValue。\",\"watch( () => person.name, (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true } );\",\"情况五，监视 reactive 所定义的一个响应式数据的某些属性：\",\"提示\",\"这种情况也可以获取 oldValue。\",\"watch( [() => person.name, () => person.age], (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true } );\",\"特殊情况，监视 reactive 定义的一个响应式数据的某个对象属性：\",\"注意\",\"这种情况也不能获取 oldValue。\",\"let person = reactive({ name: 'PPG', age: 21, a: { b: { c: 1, }, }, }); watch( () => person.a, (newValue, oldValue) => { console.log(newValue, oldValue); }, { immediate: true, deep: true } );\"]},\"637\":{\"h\":\"watchEffect 函数\",\"t\":[\"watch 的套路是:既要指明监视的属性,也要指明监视的回调。\",\"watchEffect 的套路是:不用指明监视哪个属性,监视的回调中用到哪个属性,那就监视哪个属性。\",\"watch Effect 有点像 computed: \",\"但 computed 注重的计算出来的值(回调函数的返回值),所以必须要写返回值。\",\"而 watch Effect 注重的是过程(回调函数的函数体),所以不用写返回值。\",\"watchEffect(() => { const x = person.value.a.b.c; //要调用到最后一层 console.log('watch'); });\"]},\"638\":{\"h\":\"生命周期\",\"t\":[\"Vue3 中生命周期与 Vue2 基本相同，只是将销毁修改为了卸载。\"]},\"639\":{\"h\":\"配置项形式使用生命周期钩子\",\"t\":[\"export default { name: 'Demo', setup(props, context) {}, beforeCreate() { console.log('beforeCreate'); }, created() { console.log('created'); }, beforeMount() { console.log('beforeMount'); }, mounted() { console.log('mounted'); }, beforeUpdate() { console.log('beforeUpdate'); }, updated() { console.log('updated'); }, beforeUnmount() { console.log('beforeUnmount'); }, unmounted() { console.log('unmounted'); }, };\"]},\"640\":{\"h\":\"使用组合式 API 编写钩子\",\"t\":[\"import { onBeforeMount, onBeforeUnmount, onBeforeUpdate, onMounted, onUnmounted, onUpdated, ref, } from 'vue'; export default { name: 'Demo', setup(props, context) { onBeforeMount(() => { console.log('onBeforeMount'); }); onMounted(() => { console.log('onMounted'); }); onBeforeUpdate(() => { console.log('onBeforeUpdate'); }); onUpdated(() => { console.log('onUpdated'); }); onBeforeUnmount(() => { console.log('onBeforeUnmount'); }); onUnmounted(() => { console.log('onUnmounted'); }); }, };\",\"组合式 API 就是将原来的钩子前加了 on。\",\"注意\",\"beforeCreate() 和 created() 没有组合式 API，且如果一个钩子同时使用两种写法，两个写法都会执行，组合式 API 先执行。\"]},\"641\":{\"h\":\"自定义 hook 函数\",\"t\":[\"什么是 hook： \",\"本质是一个函数，将可能复用的 setup 中的组合式 API，包括生命周期钩子进行封装。\",\"类似 mixin 混合。\",\"自定义 hook 示例：\",\"要完成一个鼠标点击后将坐标显示在界面上，那么就需要为 window 绑定事件，并且在组建卸载时取消这个事件。\",\"在 src 目录下创建 hooks 文件夹，在其中创建自定义 hook，命名规范：useXXX.js。\",\"usePoint.js：\",\"import { onBeforeUnmount, onMounted, reactive } from 'vue'; export default function usePoint() { let point = reactive({ x: 0, y: 0, }); function f(event) { point.x = event.pageX; point.y = event.pageY; } onMounted(() => { window.addEventListener('click', f); }); onBeforeUnmount(() => { window.removeEventListener('click', f); }); return point; //此处要返回 }\",\"在组件中引入：\",\"<template> <div> <h2>x:{{ point.x }}</h2> <h2>y:{{ point.y }}</h2> </div> </template> <script> import usePoint from '../hooks/usePoint'; export default { name: 'Demo', setup(props, context) { let point = usePoint(); return { point, }; }, }; </script>\"]},\"642\":{\"h\":\"toRef/toRefs\",\"t\":[\"作用：创建一个 ref 对象,其 value 值指向另一个对象中的某个属性。\",\"语法：const name=toRef(person,'name')。\",\"应用：要将响应式对象中的某个属性单独提供给外部使用时。\",\"扩展: toRefs 与 toRef 功能致,但可以批量创建多个 ref 对象,语法: toRefs(person)。\",\"使用 toRef，第一个参数是对象，第二个参数是对象中的键：\",\"<template> <h2>{{ name }}</h2> <h2>{{ age }}</h2> <h2>{{ c }}</h2> <button @click=\\\"name += '~'\\\">name++</button> <button @click=\\\"age++\\\">age++</button> <button @click=\\\"c += '!'\\\">c++</button> </template> <script> import { reactive, ref, toRef, toRefs } from 'vue'; export default { name: 'App', setup() { let person = reactive({ name: 'ppg', age: 21, a: { b: { c: 'd', }, }, }); return { name: toRef(person, 'name'), age: toRef(person, 'age'), c: toRef(person.a.b, 'c'), }; }, }; </script>\",\"使用 toRefs，只接受一个对象参数，只去除最外层：\",\"<template> <h2>{{ name }}</h2> <h2>{{ age }}</h2> <h2>{{ a.b.c }}</h2> <button @click=\\\"name += '~'\\\">name++</button> <button @click=\\\"age++\\\">age++</button> <button @click=\\\"a.b.c += '!'\\\">c++</button> </template> <script> import { reactive, ref, toRef, toRefs } from 'vue'; export default { name: 'App', setup() { let person = reactive({ name: 'ppg', age: 21, a: { b: { c: 'd', }, }, }); return { ...toRefs(person), }; }, }; </script>\",\"提示\",\"toRef 和 toRefs 使得返回的数据被修改时，源数据也能被修改，这与下面的写法是不同的，以下写法的修改不会影响源数据：\",\"return { name: ref(person.name), };\"]},\"643\":{\"h\":\"新的组件\"},\"644\":{\"h\":\"Fragment\",\"t\":[\"在 Vue2 中：组件必须有一个根标签。\",\"在 Vue3 中：组件可以没有根标签,内部会将多个标签包含在一个 Fragment 虚拟元素中。\",\"好处：减少标签层级,减小内存占用。\"]},\"645\":{\"h\":\"Teleport\",\"t\":[\"Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下渲染了 HTML，而不必求助于全局状态或将其拆分为两个组件。\",\"例如：子组件中使用了对话框组件，希望点击按钮后弹出到页面中心\",\"修改 Dialog.vue：\",\"<template> <div> <button @click=\\\"isShow = true\\\">弹窗</button> <teleport to=\\\"body\\\" ><!--to属性指定了teleport标签内部的HTML渲染到的目标位置，使用选择器写法--> <div class=\\\"mask\\\" v-if=\\\"isShow\\\"> <div class=\\\"dialog\\\"> <h3>弹窗</h3> <h4>something</h4> <h4>something</h4> <h4>something</h4> <button @click=\\\"isShow = false\\\">关闭</button> </div> </div> </teleport> </div> </template> <script> import { ref } from 'vue'; export default { name: 'Dialog', setup() { let isShow = ref(false); return { isShow, }; }, }; </script> <style scoped> .dialog { width: 300px; height: 300px; background-color: green; text-align: center; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute; } .mask { position: absolute; top: 0; bottom: 0; left: 0; right: 0; background-color: rgba(0, 0, 0, 0.5); } </style>\"]},\"646\":{\"h\":\"Suspense\",\"t\":[\"在网速较慢的情况下，默认引入会导致只有所有组件都准备好才渲染界面，使用异步引入则可以依次渲染，让应用有更好体验。\",\"异步引入组件：\",\"import { defineAsyncComponent } from 'vue'; const A = defineAsyncComponent(() => import('./components/A.vue')); export default { name: 'App', components: { A, }, setup() {}, };\",\"使用 Suspense 标签包裹组件，并使用提供的 default 与 fallback 插槽：\",\"<template> <div class=\\\"app\\\"> <h3>APP</h3> <Suspense> <template v-slot:default> <A /> </template> <template v-slot:fallback> <h3>loading</h3> </template> </Suspense> </div> </template>\",\"提示\",\"使用 Suspense 包裹的组件中 setup 函数可以是 async 的。\"]},\"647\":{\"h\":\"其它 Composition API\"},\"648\":{\"h\":\"shallowReactive 与 shallowRef\",\"t\":[\"shallowReactive： \",\"只处理对象最外层属性的响应式(浅响应式)。\",\"shallowRef： \",\"只处理基本数据类型的响应式，不进行对象的响应式处理。\",\"何时使用： \",\"如果有一个对象数据，结构比较深，但变化时只是外层属性变化：使用 shallowReactive。\",\"如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换：使用 shallowRef。\"]},\"649\":{\"h\":\"readonly 与 shallowReadonly\",\"t\":[\"readonly：让一个响应式数据变为只读(深只读)。\",\"shallowReadonly：让一个响应式数据变为只读(浅只读)。\",\"应用场景：不希望数据被修改时。\",\"以下代码使得 person 中浅层属性 name 与 age 只读：\",\"let person = reactive({ name: 'ppg', age: 21, a: { b: { c: 'd', }, }, }); person = shallowReadonly(person);\",\"以下代码使得 person 所有层次属性只读：\",\"person = readonly(person);\"]},\"650\":{\"h\":\"toRaw 与 markRaw\",\"t\":[\"toRaw： \",\"作用：将一个由 reactive 生成的响应式对象转为普通对象。\",\"使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。\",\"markRaw： \",\"作用：标记一个对象，使其永远不会再成为响应式对象。\",\"使用场景： \",\"有些值不应被设置为响应式的，例如复杂的第三方库等。\",\"当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。\"]},\"651\":{\"h\":\"customRef\",\"t\":[\"作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。\",\"示例：\",\"<template> <input type=\\\"text\\\" v-model=\\\"keyWord\\\" /> <h3>{{ keyWord }}</h3> </template> <script> import { customRef } from 'vue'; export default { name: 'App', setup() { function myRef(val) { //自定义ref return customRef((track, trigger) => { //两个参数 return { get() { track(); //调用跟踪，否则不会响应式 return val; }, set(newVal) { val = newVal; trigger(); //触发页面更新 }, }; }); } let keyWord = myRef('hello'); //使用自定义ref return { keyWord, }; }, }; </script>\"]},\"652\":{\"h\":\"provide 与 inject\",\"t\":[\"作用：实现组件隔代通信。\",\"使用一对 provide 和 inject。无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者。这个特性有两个部分：父组件有一个 provide 选项来提供数据，子组件有一个 inject 选项来开始使用这些数据。\"]},\"653\":{\"h\":\"使用 provide\",\"t\":[\"<template> <h1>{{ sum }}</h1> <button @click=\\\"add\\\">sum++</button> <Demo /> </template> <script> import Demo from './components/Demo.vue'; import { provide, readonly, ref } from 'vue'; export default { name: 'App', components: { Demo, }, setup() { let sum = ref(0); function add() { this.sum++; } provide('sum', readonly(sum)); //使用键值对形式传递 provide('add', add); return { sum, add, }; }, }; </script>\"]},\"654\":{\"h\":\"使用 inject\",\"t\":[\"<template> <div> <h3>{{ sum }}</h3> <button @click=\\\"add\\\">sum++</button> </div> </template> <script> import { inject } from 'vue'; export default { name: 'Demo', setup(props, context) { let sum = inject('sum', 100); //第二个参数是默认值 const add = inject('add'); return { sum, add, }; }, }; </script> <style scoped></style>\"]},\"655\":{\"h\":\"响应式数据的判断\",\"t\":[\"isRef：检查一个值是否为一个 ref 对象。\",\"isReactive：检查一个对象是否是由 reactive 创建的响应式代理。\",\"isReadonly：检查一个对象是否是由 readonly 创建的只读代理。\",\"isProxy：检查一个对象是否是由 reactive 或者 readonly 方法创建的代理。\",\"let sum = ref(0); let person = reactive({ name: 'ppg', }); let x = readonly(person); console.log(isReadonly(x)); //true console.log(isReactive(person)); //true console.log(isRef(sum)); //true console.log(isProxy(x)); //true\"]},\"656\":{\"h\":\"Vue3 其他改变\"},\"657\":{\"h\":\"全局 API 的转移\",\"t\":[\"Vue2 中有很多全局 API 和配置，例如：全局组件、全局指令等，Vue3 进行了调整：将全局的 API，即 Vue.xxx 调整到应用实例 app 上。\",\"2.x 全局 API\",\"3.x 实例 API (app)\",\"Vue.config\",\"app.config\",\"Vue.config.productionTip\",\"已移除\",\"Vue.config.ignoredElements\",\"app.config.compilerOptions.isCustomElement\",\"Vue.component\",\"app.component\",\"Vue.directive\",\"app.directive\",\"Vue.mixin\",\"app.mixin\",\"Vue.use\",\"app.use\",\"Vue.prototype\",\"app.config.globalProperties\",\"Vue.extend\",\"已移除\"]},\"658\":{\"h\":\"其它改变\",\"t\":[\"过渡 class：\",\"在进入/离开的过渡中，会有 6 个 class 切换：\",\"v-enter-from：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。\",\"v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。\",\"v-enter-to：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡/动画完成之后移除。\",\"v-leave-from：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。\",\"v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。\",\"v-leave-to：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡/动画完成之后移除。\",\"移除 keyCode 作为 v-on 的修饰符，同时也不再支持 config.keyCodes。\",\"移除 v-on.native 修饰符：\",\"父组件中绑定事件：\",\"<A v-on:click=\\\"show\\\" />\",\"子组件中声明自定义事件：\",\"<script> export default { name: 'A', components: { B }, emits: ['click'], //声明自定义事件，不写在这里面会被视作原生事件，这里click不会被触发 }; </script>\",\"移除过滤器。\",\"v-if 与 v-for 的优先级对比：\",\"2.x 版本中在一个元素上同时使用 v-if 和 v-for 时，v-for 会优先作用。\",\"3.x 版本中 v-if 总是优先于 v-for 生效。\",\"v-bind 合并行为：\",\"在 2.x，如果一个元素同时定义了 v-bind=\\\"object\\\" 和一个相同的单独的 property，那么这个单独的 property 总是会覆盖 object 中的绑定。\",\"<!-- template --> <div id=\\\"red\\\" v-bind=\\\"{ id: 'blue' }\\\"></div> <!-- result --> <div id=\\\"red\\\"></div>\",\"在 3.x，如果一个元素同时定义了 v-bind=\\\"object\\\" 和一个相同的单独的 property，那么声明绑定的==顺序==决定了它们如何合并。换句话说，相对于假设开发者总是希望单独的 property 覆盖 object 中定义的内容，现在开发者对自己所希望的合并行为有了更好的控制。\",\"<!-- template --> <div id=\\\"red\\\" v-bind=\\\"{ id: 'blue' }\\\"></div> <!-- result --> <div id=\\\"blue\\\"></div> <!-- template --> <div v-bind=\\\"{ id: 'blue' }\\\" id=\\\"red\\\"></div> <!-- result --> <div id=\\\"red\\\"></div>\"]},\"659\":{\"h\":\"创建 Vue3.0 工程\"},\"660\":{\"h\":\"使用 vue-CLI\",\"t\":[\"创建 vue3.0 工程需要 Vue-CLI 版本在 4.5.0 以上。\"]},\"661\":{\"h\":\"使用 vite\",\"t\":[\"什么是 vite？——新一代前端构建工具。\",\"优势：\",\"开发环境中，无需打包操作，可快速冷启动。\",\"轻量快速的热重载（HMR）。\",\"真正的按需编译，不再等待整个应用编译完成。\",\"创建项目：\",\"npm init vite-app <项目名>\",\"进入项目文件夹，安装依赖：\",\"npm install\"]},\"662\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"663\":{\"h\":\"Docs\"},\"664\":{\"h\":\"Docs\"},\"665\":{\"h\":\"Docs\"},\"666\":{\"h\":\"Docs\"},\"667\":{\"h\":\"Docs\"},\"668\":{\"h\":\"Docs\"},\"669\":{\"h\":\"Docs\"},\"670\":{\"h\":\"Docs\"},\"671\":{\"h\":\"Docs\"},\"672\":{\"h\":\"Docs\"},\"673\":{\"h\":\"Docs\"},\"674\":{\"h\":\"Docs\"}},\"dirtCount\":0,\"index\":[[\"真正的按需编译\",{\"1\":{\"661\":1}}],[\"轻量快速的热重载\",{\"1\":{\"661\":1}}],[\"延迟和曲线函数\",{\"1\":{\"658\":2}}],[\"动画完成之后移除\",{\"1\":{\"658\":4}}],[\"动态路径传参\",{\"1\":{\"605\":1}}],[\"动态路由\",{\"1\":{\"372\":1}}],[\"动态内容要使用双括号包裹起来\",{\"1\":{\"208\":1}}],[\"个\",{\"1\":{\"658\":1}}],[\"个字符属于保留字符\",{\"1\":{\"190\":1}}],[\"调整到应用实例\",{\"1\":{\"657\":1}}],[\"调用跟踪\",{\"1\":{\"651\":1}}],[\"调用时要传参数\",{\"1\":{\"617\":2}}],[\"调用时要加括号\",{\"1\":{\"503\":1}}],[\"调用时传参\",{\"1\":{\"617\":2}}],[\"调用时不加括号\",{\"1\":{\"503\":1}}],[\"调用时必须穿入一个被扩展对象的实例充当\",{\"1\":{\"92\":1}}],[\"调用其他纯函数等\",{\"1\":{\"403\":1}}],[\"调用这个方法就相当于创建一个\",{\"1\":{\"379\":1}}],[\"调用这个函数可以取消一个订阅\",{\"1\":{\"354\":1}}],[\"调用此方法会得到路由配置\",{\"1\":{\"378\":1}}],[\"调用此函数可以发起\",{\"1\":{\"344\":1}}],[\"调用\",{\"0\":{\"397\":1},\"1\":{\"331\":1,\"337\":1,\"379\":1,\"381\":1,\"397\":1,\"403\":2,\"496\":1,\"517\":1,\"522\":2,\"543\":1,\"544\":1,\"605\":1}}],[\"调用实际发生事件的组件的\",{\"1\":{\"274\":1}}],[\"调用所有的\",{\"1\":{\"274\":2}}],[\"调用父类的方法时\",{\"1\":{\"154\":1}}],[\"调用父类非默认构造函数\",{\"0\":{\"79\":1}}],[\"调用的时机不同\",{\"1\":{\"546\":1}}],[\"调用的方式来获取数据\",{\"1\":{\"338\":1}}],[\"调用的\",{\"1\":{\"154\":1}}],[\"调用对应的\",{\"1\":{\"13\":1}}],[\"调用即可取消请求\",{\"1\":{\"13\":1}}],[\"浅只读\",{\"1\":{\"649\":1}}],[\"浅响应式\",{\"1\":{\"648\":1}}],[\"深只读\",{\"1\":{\"649\":1}}],[\"深度监视\",{\"0\":{\"622\":1},\"1\":{\"622\":1}}],[\"何时使用\",{\"1\":{\"648\":1}}],[\"何地\",{\"1\":{\"328\":1}}],[\"希望点击按钮后弹出到页面中心\",{\"1\":{\"645\":1}}],[\"减小内存占用\",{\"1\":{\"644\":1}}],[\"减少标签层级\",{\"1\":{\"644\":1}}],[\"好处\",{\"1\":{\"644\":1}}],[\"源数据也能被修改\",{\"1\":{\"642\":1}}],[\"源对象\",{\"1\":{\"628\":1}}],[\"什么是\",{\"1\":{\"641\":1,\"661\":1}}],[\"属于\",{\"1\":{\"636\":1}}],[\"属性开启命名空间\",{\"1\":{\"619\":1}}],[\"属性都配置一个\",{\"1\":{\"603\":1}}],[\"属性一致\",{\"1\":{\"591\":1,\"592\":1}}],[\"属性如果为\",{\"1\":{\"586\":1}}],[\"属性如果不指定那么默认是交给当前路径对应的组件的\",{\"1\":{\"379\":1}}],[\"属性并采用对象形式传递一个\",{\"1\":{\"580\":1}}],[\"属性依然是绑定方式\",{\"1\":{\"578\":1}}],[\"属性改为绑定形式\",{\"1\":{\"578\":1}}],[\"属性从根路径开始写到目的子路径\",{\"1\":{\"577\":1}}],[\"属性限定样式只在当前组件中可用\",{\"1\":{\"570\":1}}],[\"属性在编译后会混在一个文件中\",{\"1\":{\"570\":1}}],[\"属性在运行时获取一个对象的类型\",{\"1\":{\"73\":1}}],[\"属性或\",{\"1\":{\"552\":1}}],[\"属性用来区分插槽\",{\"1\":{\"551\":1}}],[\"属性用于定位和格式化内容\",{\"1\":{\"56\":1}}],[\"属性用于在任何定义的边界内的元素周围生成空间\",{\"1\":{\"36\":1}}],[\"属性即可\",{\"1\":{\"546\":1}}],[\"属性进行赋值操作\",{\"1\":{\"517\":1}}],[\"属性增加\",{\"1\":{\"517\":1}}],[\"属性名\",{\"1\":{\"516\":2}}],[\"属性名与标签名都不区分大小写\",{\"1\":{\"191\":1}}],[\"属性赋值成data\",{\"1\":{\"516\":1}}],[\"属性来实现\",{\"1\":{\"402\":1}}],[\"属性来限制大小写\",{\"1\":{\"368\":1}}],[\"属性设置懒加载\",{\"1\":{\"377\":1}}],[\"属性设置进度条最大值\",{\"1\":{\"193\":1}}],[\"属性了\",{\"1\":{\"376\":1}}],[\"属性除了可以像正常的\",{\"1\":{\"368\":1}}],[\"属性动态为\",{\"1\":{\"368\":1}}],[\"属性需要使用\",{\"1\":{\"305\":1}}],[\"属性需要是\",{\"1\":{\"293\":1}}],[\"属性为\",{\"1\":{\"231\":1,\"381\":1,\"622\":1}}],[\"属性不过滤空位\",{\"1\":{\"226\":1}}],[\"属性不包含\",{\"1\":{\"158\":1}}],[\"属性可以判断调用时带几个参数\",{\"1\":{\"225\":1}}],[\"属性可以输入以逗号分隔的多个电子邮箱\",{\"1\":{\"193\":1}}],[\"属性是一个\",{\"1\":{\"377\":1}}],[\"属性是否存在\",{\"1\":{\"224\":1}}],[\"属性是进度条的当前值\",{\"1\":{\"193\":1}}],[\"属性实现鼠标悬停提示\",{\"1\":{\"204\":1}}],[\"属性默认打开折叠\",{\"1\":{\"201\":1}}],[\"属性让对话框显示\",{\"1\":{\"201\":1}}],[\"属性共用可以指定一项元数据\",{\"1\":{\"199\":1}}],[\"属性产生倒序的数字列表\",{\"1\":{\"198\":1}}],[\"属性表示删改发生的时间\",{\"1\":{\"204\":2}}],[\"属性表示某个\",{\"1\":{\"204\":2}}],[\"属性表示外部资源与当前文档之间的关系\",{\"1\":{\"197\":1}}],[\"属性表示是否默认选中当前项\",{\"1\":{\"193\":1}}],[\"属性搭配\",{\"1\":{\"196\":1}}],[\"属性和\",{\"1\":{\"193\":3,\"216\":1}}],[\"属性和对应控件的\",{\"1\":{\"193\":1}}],[\"属性形成键值对\",{\"1\":{\"193\":1}}],[\"属性关联表单\",{\"1\":{\"193\":1}}],[\"属性对应\",{\"1\":{\"193\":1}}],[\"属性中使用标识符决定是否要进行鉴权\",{\"1\":{\"602\":1}}],[\"属性中的路径后使用\",{\"1\":{\"584\":1}}],[\"属性中的一个\",{\"1\":{\"190\":1}}],[\"属性中\",{\"1\":{\"397\":1}}],[\"属性中包含\",{\"1\":{\"64\":1}}],[\"属性命名\",{\"1\":{\"190\":1}}],[\"属性将返回没有指定默认值的参数个数\",{\"1\":{\"156\":1}}],[\"属性将防止延伸到容器的边缘\",{\"1\":{\"52\":1}}],[\"属性值赋值给\",{\"1\":{\"517\":1}}],[\"属性值要使用引号\",{\"1\":{\"483\":1}}],[\"属性值为一个\",{\"1\":{\"229\":1}}],[\"属性值就是下载下来的文件名\",{\"1\":{\"197\":1}}],[\"属性值都是\",{\"1\":{\"192\":1}}],[\"属性值必须是单个可打印的字符\",{\"1\":{\"192\":1}}],[\"属性值浮动显示\",{\"1\":{\"192\":1}}],[\"属性值等于\",{\"1\":{\"64\":1}}],[\"属性值包含子串\",{\"1\":{\"64\":1}}],[\"属性值\",{\"1\":{\"64\":1,\"203\":1,\"517\":1,\"539\":2}}],[\"属性值以\",{\"1\":{\"64\":1}}],[\"属性的删除等\",{\"1\":{\"631\":1}}],[\"属性的添加\",{\"1\":{\"631\":1}}],[\"属性的变量\",{\"1\":{\"428\":1}}],[\"属性的指向\",{\"1\":{\"239\":1}}],[\"属性的遍历\",{\"1\":{\"224\":1}}],[\"属性的可选值\",{\"1\":{\"197\":1}}],[\"属性的元素\",{\"1\":{\"64\":1}}],[\"属性的值为\",{\"1\":{\"51\":1}}],[\"属性选择器配合\",{\"1\":{\"478\":1}}],[\"属性选择器\",{\"1\":{\"64\":1}}],[\"属性这些属性将不起作用\",{\"1\":{\"54\":1}}],[\"属性定位的\",{\"1\":{\"54\":1}}],[\"属性规定应用于元素的定位方法的类型\",{\"1\":{\"54\":1}}],[\"属性允许我们在元素的总宽度和高度中包括内边距和边框\",{\"1\":{\"53\":1}}],[\"属性指定要缓存的组件\",{\"1\":{\"596\":1}}],[\"属性指定要跳转的目的地\",{\"1\":{\"576\":1}}],[\"属性指定仅缓存其中的某几个组件\",{\"1\":{\"596\":1}}],[\"属性指定子路由\",{\"1\":{\"577\":1}}],[\"属性指定了当这个路径被触发时\",{\"1\":{\"576\":1}}],[\"属性指定插槽\",{\"1\":{\"551\":1}}],[\"属性指定自定义的报错页面\",{\"1\":{\"371\":1}}],[\"属性指定具体方向\",{\"1\":{\"204\":1}}],[\"属性指定缩写的完整形式\",{\"1\":{\"204\":1}}],[\"属性指定内容的具体日期\",{\"1\":{\"204\":1}}],[\"属性指定当前列表项的编号\",{\"1\":{\"198\":1}}],[\"属性指定数字编号的样式\",{\"1\":{\"198\":1}}],[\"属性指定数字列表的起始编号\",{\"1\":{\"198\":1}}],[\"属性指定指定图片加载的行为\",{\"1\":{\"195\":1}}],[\"属性指定步长\",{\"1\":{\"193\":1}}],[\"属性指定每次递增\",{\"1\":{\"193\":1}}],[\"属性指定用户选中该项提交到服务器的值\",{\"1\":{\"193\":1}}],[\"属性指定为\",{\"1\":{\"193\":1}}],[\"属性指定文本中字符之间的距离\",{\"1\":{\"65\":1}}],[\"属性指定文本中的大写和小写字母\",{\"1\":{\"65\":1}}],[\"属性指定文本第一行的缩进\",{\"1\":{\"65\":1}}],[\"属性指定哪些元素可以浮动于被清除元素的旁边及哪一侧\",{\"1\":{\"57\":1}}],[\"属性指定在元素内容太大而无法放入指定区域时是裁剪内容还是添加滚动条\",{\"1\":{\"55\":1}}],[\"属性指定元素的前后顺序\",{\"1\":{\"54\":1}}],[\"属性指定元素内容区域的宽度\",{\"1\":{\"36\":1}}],[\"属性指定背景图像是滚动的还是固定的\",{\"1\":{\"32\":1}}],[\"属性\",{\"0\":{\"54\":1,\"562\":1,\"563\":1,\"589\":1},\"1\":{\"32\":1,\"36\":1,\"45\":5,\"46\":7,\"59\":1,\"192\":1,\"193\":14,\"196\":2,\"197\":1,\"199\":4,\"200\":4,\"203\":4,\"216\":1,\"225\":2,\"226\":2,\"227\":6,\"237\":2,\"239\":1,\"243\":1,\"275\":1,\"320\":2,\"360\":1,\"368\":1,\"370\":1,\"372\":2,\"373\":1,\"376\":1,\"392\":1,\"396\":1,\"399\":1,\"478\":1,\"496\":1,\"502\":1,\"512\":3,\"517\":1,\"534\":1,\"539\":2,\"551\":1,\"552\":2,\"560\":1,\"562\":1,\"631\":2}}],[\"情况五\",{\"1\":{\"636\":1}}],[\"情况四\",{\"1\":{\"636\":1}}],[\"情况三\",{\"1\":{\"636\":1}}],[\"情况二\",{\"1\":{\"636\":1}}],[\"情况一\",{\"1\":{\"636\":1}}],[\"嘿嘿嘿\",{\"1\":{\"633\":1}}],[\"收到参数\",{\"1\":{\"633\":1}}],[\"收到的插槽内容\",{\"1\":{\"633\":1}}],[\"收集表单数据总结\",{\"0\":{\"512\":1}}],[\"反射\",{\"1\":{\"631\":1}}],[\"反向代理设置\",{\"0\":{\"339\":1}}],[\"界面不会自动更新\",{\"1\":{\"630\":1}}],[\"界面不会更新\",{\"1\":{\"630\":1}}],[\"省去了\",{\"1\":{\"628\":1}}],[\"既要指明监视的属性\",{\"1\":{\"637\":1}}],[\"既要将\",{\"1\":{\"408\":1}}],[\"既可以用\",{\"1\":{\"628\":1}}],[\"锁管理的函数\",{\"1\":{\"624\":1}}],[\"平时不加是因为简写\",{\"1\":{\"622\":1}}],[\"平滑滚动\",{\"1\":{\"609\":1}}],[\"旧值\",{\"1\":{\"621\":2,\"622\":2,\"623\":2}}],[\"旧虚拟dom中未找到与新虚拟dom相同的key\",{\"1\":{\"535\":1}}],[\"旧虚拟\",{\"1\":{\"535\":1}}],[\"寒冷\",{\"1\":{\"621\":1}}],[\"炎热\",{\"1\":{\"621\":1}}],[\"根节点状态会作为第三个参数暴露出来\",{\"1\":{\"619\":1}}],[\"根节点状态则为\",{\"1\":{\"619\":1}}],[\"根据之前的内容\",{\"1\":{\"379\":1}}],[\"根据上面的步骤\",{\"1\":{\"344\":1}}],[\"根据上下文的不同\",{\"1\":{\"208\":1}}],[\"根据发生的事情进行更新\",{\"1\":{\"329\":1}}],[\"根据用户输入在应用程序中发生的事件\",{\"1\":{\"329\":1}}],[\"根据用户的滚动位置进行定位\",{\"1\":{\"54\":1}}],[\"暴露出来\",{\"1\":{\"619\":1}}],[\"暴露的功能\",{\"1\":{\"362\":1}}],[\"辅助函数中第一个参数传入在\",{\"1\":{\"619\":1}}],[\"拆分\",{\"1\":{\"619\":1}}],[\"甚至是嵌套子模块\",{\"1\":{\"619\":1}}],[\"陈坤\",{\"1\":{\"618\":1,\"619\":1}}],[\"求和子模块\",{\"1\":{\"614\":1}}],[\"求和案例\",{\"0\":{\"614\":1}}],[\"井号\",{\"1\":{\"608\":1}}],[\"井号后接插槽名\",{\"1\":{\"551\":1}}],[\"完整形式\",{\"1\":{\"635\":1}}],[\"完整的导航解析流程\",{\"0\":{\"607\":1}}],[\"完成的\",{\"1\":{\"627\":1}}],[\"完成人员列表组件能看到计数器当前值\",{\"1\":{\"618\":1}}],[\"完全一致\",{\"1\":{\"193\":1}}],[\"完全不透明\",{\"1\":{\"41\":1}}],[\"完全透明\",{\"1\":{\"41\":1}}],[\"区别\",{\"1\":{\"624\":1}}],[\"区别是在导航被确认之前\",{\"1\":{\"606\":1}}],[\"区块内定义的方法只能在区块内调用\",{\"1\":{\"160\":1}}],[\"独享路由守卫只有前置路由守卫\",{\"1\":{\"604\":1}}],[\"独享路由守卫\",{\"0\":{\"604\":1}}],[\"采用对象写法可以像编程式路由中的\",{\"1\":{\"602\":1}}],[\"达到目的地\",{\"1\":{\"602\":1}}],[\"离开过渡的结束状态\",{\"1\":{\"658\":1}}],[\"离开的过渡中\",{\"1\":{\"658\":1}}],[\"离开的导航守卫\",{\"1\":{\"601\":1}}],[\"离开组件对应路由\",{\"1\":{\"530\":1}}],[\"意味着\",{\"1\":{\"582\":1}}],[\"意为\",{\"1\":{\"330\":2}}],[\"别名\",{\"0\":{\"579\":1,\"582\":1}}],[\"维护频率低\",{\"1\":{\"573\":1}}],[\"另外两个参数为\",{\"1\":{\"569\":1}}],[\"打开\",{\"1\":{\"559\":1}}],[\"环境\",{\"0\":{\"613\":1},\"1\":{\"559\":1}}],[\"得到的\",{\"1\":{\"557\":1}}],[\"得到的毫秒数\",{\"1\":{\"243\":1}}],[\"举例\",{\"1\":{\"554\":1}}],[\"举例来说\",{\"1\":{\"381\":1,\"605\":1}}],[\"功能致\",{\"1\":{\"642\":1}}],[\"功能\",{\"1\":{\"554\":2,\"563\":1,\"566\":1,\"569\":1}}],[\"混合\",{\"1\":{\"641\":1}}],[\"混入\",{\"0\":{\"566\":1}}],[\"混入了\",{\"1\":{\"553\":1}}],[\"混用\",{\"1\":{\"460\":1,\"626\":1}}],[\"想要页面滚到顶部\",{\"1\":{\"609\":1}}],[\"想让\",{\"1\":{\"553\":1}}],[\"想给\",{\"1\":{\"502\":1}}],[\"存在问题\",{\"1\":{\"630\":1}}],[\"存在入参\",{\"1\":{\"351\":1}}],[\"存储内容大小一般为\",{\"1\":{\"557\":1}}],[\"存储数据供el绑定的容器使用\",{\"1\":{\"553\":1}}],[\"具名插槽\",{\"0\":{\"551\":1}}],[\"具有可以被读取和修改的\",{\"1\":{\"360\":1}}],[\"建议通过元素的\",{\"1\":{\"547\":1}}],[\"建议使用前一种\",{\"1\":{\"451\":1}}],[\"建议使用\",{\"1\":{\"405\":1}}],[\"钩子中可用\",{\"1\":{\"547\":2}}],[\"钩子函数的参数\",{\"1\":{\"547\":1}}],[\"及其子\",{\"1\":{\"547\":1}}],[\"及后续其他生命周期函数将不会再被触发\",{\"1\":{\"313\":1}}],[\"频道\",{\"1\":{\"543\":1}}],[\"张三\",{\"1\":{\"539\":1}}],[\"男\",{\"1\":{\"539\":2}}],[\"特殊情况\",{\"1\":{\"636\":1}}],[\"特别注意\",{\"1\":{\"539\":1}}],[\"特点\",{\"1\":{\"507\":2}}],[\"监视多级结构中某个属性的变化\",{\"1\":{\"622\":1}}],[\"监视\",{\"0\":{\"636\":1},\"1\":{\"621\":1,\"636\":6}}],[\"监视的回调中用到哪个属性\",{\"1\":{\"637\":1}}],[\"监视的简写形式\",{\"0\":{\"623\":1}}],[\"监视的两种写法\",{\"1\":{\"621\":1}}],[\"监视的属性必须存在\",{\"1\":{\"621\":1}}],[\"监视属性会监视被监视对象的所有内容\",{\"1\":{\"624\":1}}],[\"监视属性能完成的\",{\"1\":{\"624\":1}}],[\"监视属性一定也能完成\",{\"1\":{\"624\":1}}],[\"监视属性的第二种写法\",{\"1\":{\"621\":1}}],[\"监视属性\",{\"0\":{\"620\":1},\"1\":{\"621\":1}}],[\"监视属性实现\",{\"1\":{\"536\":1}}],[\"监听\",{\"1\":{\"474\":1}}],[\"监听函数\",{\"1\":{\"229\":1}}],[\"身份证号等\",{\"1\":{\"535\":1}}],[\"身上只会带有返回对象上的内容\",{\"1\":{\"362\":1}}],[\"手机号\",{\"1\":{\"535\":1}}],[\"手动赋值的枚举项可以不是数字\",{\"1\":{\"413\":1}}],[\"手动中断程序执行\",{\"1\":{\"234\":1}}],[\"效率低\",{\"1\":{\"535\":1}}],[\"效果\",{\"1\":{\"368\":1,\"372\":1}}],[\"逆序删除等破坏顺序的操作\",{\"1\":{\"535\":2}}],[\"虚拟元素中\",{\"1\":{\"644\":1}}],[\"虚拟\",{\"1\":{\"535\":1}}],[\"剩下的同理\",{\"1\":{\"534\":1}}],[\"剩余参数只能是最后一个参数\",{\"1\":{\"449\":1}}],[\"剩余参数\",{\"0\":{\"449\":1}}],[\"认为输入框没有改变\",{\"1\":{\"534\":1}}],[\"认为人物信息发生了变化\",{\"1\":{\"534\":1}}],[\"找到\",{\"1\":{\"534\":1}}],[\"去寻找此前的虚拟\",{\"1\":{\"534\":1}}],[\"去除字符串两端的空格\",{\"1\":{\"216\":1}}],[\"于是当\",{\"1\":{\"608\":1}}],[\"于是使用之前的输入框\",{\"1\":{\"534\":1}}],[\"于是\",{\"1\":{\"534\":1}}],[\"却没有发生改变\",{\"1\":{\"534\":1}}],[\"经过比较\",{\"1\":{\"534\":1}}],[\"经过重新渲染\",{\"1\":{\"534\":1}}],[\"经过多个不使用它的组件向下传递\",{\"1\":{\"281\":1}}],[\"若返回一个渲染函数\",{\"1\":{\"626\":1}}],[\"若返回一个对象\",{\"1\":{\"626\":1}}],[\"若虚拟\",{\"1\":{\"535\":2}}],[\"若使用遍历\",{\"1\":{\"534\":1}}],[\"若常数枚举表达式求值后为\",{\"1\":{\"414\":1}}],[\"现有如下子模板\",{\"1\":{\"552\":1}}],[\"现有如下界面\",{\"1\":{\"534\":1}}],[\"现有如下数据\",{\"1\":{\"532\":1}}],[\"现在开发者对自己所希望的合并行为有了更好的控制\",{\"1\":{\"658\":1}}],[\"现在开始引入\",{\"1\":{\"379\":1}}],[\"现在开始改造之前的文章管理中的内容\",{\"1\":{\"344\":1}}],[\"现在假设有以下场景\",{\"1\":{\"407\":1}}],[\"现在假设我们要在外层\",{\"1\":{\"378\":1}}],[\"现在要将结果渲染到页面上\",{\"1\":{\"397\":1}}],[\"现在要在\",{\"1\":{\"372\":1}}],[\"现在在初次加载此页面时会有\",{\"1\":{\"390\":1}}],[\"现在再访问\",{\"1\":{\"376\":1}}],[\"现在再点击三个按钮\",{\"1\":{\"372\":1}}],[\"现在再发生\",{\"1\":{\"355\":1}}],[\"现在为\",{\"1\":{\"372\":1,\"380\":1}}],[\"现在点击添加或者删除组件同样会重新渲染而不再依赖\",{\"1\":{\"379\":1}}],[\"现在点击提交后会调用\",{\"1\":{\"379\":1}}],[\"现在点击三个按钮内容所展示的内容完全一致\",{\"1\":{\"372\":1}}],[\"现在点击按钮可以成功聚焦了\",{\"1\":{\"362\":1}}],[\"现在点击此按钮会抛出一个错误\",{\"1\":{\"345\":1}}],[\"现在使用\",{\"1\":{\"356\":1}}],[\"现在改变\",{\"1\":{\"354\":1}}],[\"现在来注册一个监听器\",{\"1\":{\"354\":1}}],[\"现在来为文章列表中的每个元素增加一个收藏按钮\",{\"1\":{\"351\":1}}],[\"现在我们使用了\",{\"1\":{\"347\":1}}],[\"现在我们来编写一个\",{\"1\":{\"338\":1}}],[\"现在将之前的\",{\"1\":{\"343\":1}}],[\"现在将国际化文件中的双大括号替换为双尖括号即可\",{\"1\":{\"208\":1}}],[\"现在只要重新渲染使用到这个\",{\"1\":{\"342\":1}}],[\"现在\",{\"1\":{\"338\":1,\"340\":1,\"347\":1,\"351\":1,\"353\":1,\"358\":1,\"379\":2,\"397\":1}}],[\"现在有如下\",{\"1\":{\"622\":1}}],[\"现在有下面这样一个数组\",{\"1\":{\"306\":1}}],[\"现在有这样一个组件\",{\"1\":{\"301\":1}}],[\"现在有两个组件\",{\"1\":{\"297\":1}}],[\"现在希望通过点击按钮来控制\",{\"1\":{\"286\":1}}],[\"现在回到\",{\"1\":{\"283\":1}}],[\"现在以一个传递\",{\"1\":{\"277\":1}}],[\"现在就可以根据不同的命名空间来访问国际化文件了\",{\"1\":{\"207\":1}}],[\"激活组件对应路由时触发\",{\"1\":{\"530\":1}}],[\"销毁后自定义事件会失效\",{\"1\":{\"530\":1}}],[\"订阅消息等初始化操作\",{\"1\":{\"530\":1}}],[\"订阅发布的实现需要基于同一个\",{\"1\":{\"408\":1}}],[\"订阅发布\",{\"0\":{\"408\":1}}],[\"过渡\",{\"1\":{\"658\":1}}],[\"过于繁琐\",{\"1\":{\"616\":1}}],[\"过于精简\",{\"1\":{\"332\":1}}],[\"过滤器实现\",{\"1\":{\"529\":1}}],[\"过滤器并没有修改源数据\",{\"1\":{\"529\":1}}],[\"过滤器\",{\"0\":{\"529\":1}}],[\"滑轮按键\",{\"1\":{\"523\":1}}],[\"鼠标按钮修饰符\",{\"0\":{\"523\":1},\"1\":{\"523\":1}}],[\"鼠标悬浮在元素上面会将\",{\"1\":{\"192\":1}}],[\"逐渐失去浏览器支持\",{\"1\":{\"522\":1}}],[\"逐个导出\",{\"1\":{\"164\":1}}],[\"随后替换掉页面中之前的真实\",{\"1\":{\"535\":1}}],[\"随后\",{\"1\":{\"535\":1}}],[\"随后释放其他按键事件才会被触发\",{\"1\":{\"522\":1}}],[\"随着状态的增多\",{\"1\":{\"331\":1}}],[\"随着\",{\"1\":{\"266\":1}}],[\"配合\",{\"1\":{\"522\":2}}],[\"配置全局混入\",{\"1\":{\"569\":1}}],[\"配置了\",{\"1\":{\"512\":1}}],[\"配置中声明的属性\",{\"1\":{\"633\":1}}],[\"配置中给某个路由设置名称\",{\"1\":{\"580\":1}}],[\"配置中\",{\"1\":{\"492\":1}}],[\"配置中可以通过\",{\"1\":{\"377\":1}}],[\"配置略繁琐\",{\"1\":{\"486\":1}}],[\"配置简单\",{\"1\":{\"485\":1}}],[\"配置文件\",{\"1\":{\"437\":1}}],[\"配置到\",{\"1\":{\"344\":2}}],[\"配置对象中添加\",{\"1\":{\"546\":1}}],[\"配置对象中\",{\"1\":{\"344\":1}}],[\"配置代理\",{\"0\":{\"270\":1}}],[\"配置与普通用法完全一致\",{\"1\":{\"210\":1}}],[\"配置\",{\"0\":{\"267\":1,\"585\":1,\"613\":1},\"1\":{\"209\":1,\"269\":1,\"608\":1,\"621\":1,\"622\":1,\"626\":2}}],[\"配置项形式使用生命周期钩子\",{\"0\":{\"639\":1}}],[\"配置项指定组件在开发者工具中呈现的名字\",{\"1\":{\"490\":1}}],[\"配置项\",{\"0\":{\"370\":1},\"1\":{\"18\":2}}],[\"配置项中添加canceltoken\",{\"1\":{\"13\":1}}],[\"系统修饰键\",{\"1\":{\"522\":1}}],[\"退出\",{\"1\":{\"522\":1}}],[\"回车确认\",{\"1\":{\"618\":1}}],[\"回车\",{\"1\":{\"522\":1}}],[\"回调函数的函数体\",{\"1\":{\"637\":1}}],[\"回调函数的返回值\",{\"1\":{\"637\":1}}],[\"回调函数自动调用\",{\"1\":{\"621\":1}}],[\"回调函数\",{\"1\":{\"502\":1,\"624\":1}}],[\"回调中可以执行\",{\"1\":{\"354\":1}}],[\"期望滚动到哪个的位置\",{\"1\":{\"609\":1}}],[\"期望所有的状态更新都使用不可变的方式\",{\"1\":{\"330\":1}}],[\"期间可能穿过了其他拥有点击事件的上层模块\",{\"1\":{\"521\":1}}],[\"象\",{\"1\":{\"517\":1}}],[\"换句话说\",{\"1\":{\"658\":1}}],[\"换插值语法后\",{\"1\":{\"517\":1}}],[\"换行\",{\"1\":{\"45\":2,\"522\":1}}],[\"代理\",{\"1\":{\"631\":1}}],[\"代理对象=reactive\",{\"1\":{\"628\":1}}],[\"代理数据\",{\"1\":{\"517\":1}}],[\"代码块\",{\"1\":{\"553\":1}}],[\"代码块中\",{\"1\":{\"152\":1}}],[\"代码编译成\",{\"1\":{\"460\":1}}],[\"代码\",{\"1\":{\"192\":1,\"197\":1,\"267\":2,\"537\":1,\"622\":1}}],[\"代码库中有大量返回\",{\"1\":{\"66\":1}}],[\"递归监听内部属性\",{\"1\":{\"517\":1}}],[\"递归终止条件为参数已经不是对象\",{\"1\":{\"517\":1}}],[\"递减的步长\",{\"1\":{\"193\":1}}],[\"读\",{\"1\":{\"515\":1}}],[\"读取数据时模板中直接读取不需要\",{\"1\":{\"632\":1}}],[\"读取\",{\"1\":{\"385\":1}}],[\"双大括号中要写\",{\"1\":{\"553\":1}}],[\"双向数据绑定\",{\"1\":{\"509\":1,\"510\":1}}],[\"双向绑定一般应用在表单类元素上\",{\"1\":{\"508\":1}}],[\"双向绑定\",{\"0\":{\"510\":1},\"1\":{\"508\":1}}],[\"双重断言\",{\"0\":{\"452\":1}}],[\"流向页面\",{\"1\":{\"508\":2}}],[\"流程控制\",{\"0\":{\"133\":1}}],[\"借助\",{\"1\":{\"505\":1}}],[\"初识\",{\"1\":{\"553\":1}}],[\"初次读取时会执行一次\",{\"1\":{\"505\":1}}],[\"初次读取\",{\"1\":{\"504\":1}}],[\"初始值置为一个包含\",{\"1\":{\"334\":1}}],[\"初始化时就调用\",{\"1\":{\"621\":1}}],[\"初始化时被调用\",{\"1\":{\"602\":1,\"603\":1}}],[\"初始化\",{\"1\":{\"460\":1}}],[\"初始化只有第一次才会执行\",{\"1\":{\"379\":1}}],[\"初始化配置设置\",{\"1\":{\"208\":1}}],[\"初始化列表右边的语句同样不能使用\",{\"1\":{\"80\":1}}],[\"初始化列表\",{\"0\":{\"80\":1},\"1\":{\"79\":1}}],[\"名字完全一致\",{\"1\":{\"555\":1}}],[\"名字也确定\",{\"1\":{\"482\":1}}],[\"名字也不确定\",{\"1\":{\"482\":1}}],[\"名\",{\"1\":{\"504\":1}}],[\"姓名\",{\"1\":{\"537\":1,\"538\":1}}],[\"姓\",{\"1\":{\"504\":1}}],[\"单向数据绑定\",{\"1\":{\"509\":1}}],[\"单向绑定\",{\"0\":{\"509\":1},\"1\":{\"508\":1}}],[\"单文件组件后缀名是\",{\"1\":{\"494\":1}}],[\"单文件组件\",{\"0\":{\"494\":1}}],[\"单选框\",{\"1\":{\"193\":1}}],[\"均是\",{\"1\":{\"492\":1}}],[\"驼峰命名\",{\"1\":{\"490\":1}}],[\"全部更新后调用\",{\"1\":{\"547\":1}}],[\"全小写\",{\"1\":{\"490\":1}}],[\"全局指令等\",{\"1\":{\"657\":1}}],[\"全局组件\",{\"1\":{\"657\":1}}],[\"全局解析守卫\",{\"0\":{\"606\":1}}],[\"全局后置守卫\",{\"0\":{\"603\":1}}],[\"全局前置守卫\",{\"0\":{\"602\":1}}],[\"全局方法\",{\"1\":{\"569\":1}}],[\"全局引入\",{\"1\":{\"568\":1}}],[\"全局事件总线\",{\"0\":{\"524\":1},\"1\":{\"524\":1}}],[\"全局注册\",{\"1\":{\"489\":2}}],[\"全局对象\",{\"1\":{\"459\":1}}],[\"全局变量主要包含以下语法\",{\"1\":{\"459\":1}}],[\"全局变量\",{\"0\":{\"459\":1},\"1\":{\"461\":1}}],[\"全局环境\",{\"1\":{\"238\":1}}],[\"全局属性\",{\"0\":{\"192\":1}}],[\"全局\",{\"0\":{\"657\":1},\"1\":{\"145\":1,\"657\":1}}],[\"几个注意点\",{\"0\":{\"490\":1}}],[\"局部状态通过\",{\"1\":{\"619\":1}}],[\"局部引入\",{\"1\":{\"568\":1}}],[\"局部指令\",{\"1\":{\"546\":1}}],[\"局部过滤器\",{\"1\":{\"529\":1}}],[\"局部注册\",{\"1\":{\"489\":1}}],[\"局部变量无法在多次渲染中持久保存\",{\"1\":{\"403\":1}}],[\"局部变量类型\",{\"1\":{\"116\":1}}],[\"夹\",{\"1\":{\"485\":1}}],[\"缺点\",{\"1\":{\"485\":1,\"486\":1}}],[\"优势\",{\"1\":{\"661\":1}}],[\"优先\",{\"1\":{\"626\":1}}],[\"优先级较高\",{\"1\":{\"197\":1,\"565\":1}}],[\"优点\",{\"1\":{\"485\":1,\"486\":1}}],[\"适用于任意组件通信\",{\"1\":{\"524\":1}}],[\"适用于切换频率较高的场景\",{\"1\":{\"507\":1}}],[\"适用于切换频率较低的场景\",{\"1\":{\"507\":1}}],[\"适用于要绑定的样式个数确定\",{\"1\":{\"482\":1}}],[\"适用于要绑定的样式个数不确定\",{\"1\":{\"482\":1}}],[\"适用于样式的类名不确定\",{\"1\":{\"482\":1}}],[\"适应不同像素密度的屏幕\",{\"1\":{\"196\":1}}],[\"跳过响应式转换可以提高性能\",{\"1\":{\"650\":1}}],[\"跳过其所在节点的编译过程\",{\"1\":{\"480\":1}}],[\"跳转到一个不同的地址\",{\"1\":{\"602\":1}}],[\"跳转前处理数据等需要使用编程式路由\",{\"1\":{\"590\":1}}],[\"跳转至下面的文章详情页面\",{\"1\":{\"337\":1}}],[\"本质是一个函数\",{\"1\":{\"641\":1}}],[\"本质是一个特殊属性\",{\"1\":{\"478\":1}}],[\"本质\",{\"1\":{\"569\":1}}],[\"本地存储分为\",{\"1\":{\"555\":1}}],[\"本身也提供了\",{\"1\":{\"344\":1}}],[\"本身不支持路由\",{\"1\":{\"259\":1}}],[\"永远不要用在用户提交的内容上\",{\"1\":{\"477\":1}}],[\"攻击\",{\"1\":{\"477\":1}}],[\"容器中对应的位置也会改变\",{\"1\":{\"553\":1}}],[\"容器\",{\"1\":{\"517\":1,\"553\":1}}],[\"容器的属性\",{\"0\":{\"45\":1}}],[\"容易导致\",{\"1\":{\"477\":1}}],[\"核心库的定义文件中定义了所有浏览器环境需要用到的类型\",{\"1\":{\"467\":1}}],[\"没找到的话再去找\",{\"1\":{\"466\":1}}],[\"没有组合式\",{\"1\":{\"640\":1}}],[\"没有设置名字\",{\"1\":{\"583\":1}}],[\"没有显式指定\",{\"1\":{\"551\":1}}],[\"没有显式返回语句的函数最后一行默认执行\",{\"1\":{\"107\":1}}],[\"没有配置\",{\"1\":{\"512\":1}}],[\"没有副作用\",{\"1\":{\"403\":1}}],[\"没有生效\",{\"1\":{\"380\":1}}],[\"没有内容\",{\"1\":{\"353\":1}}],[\"没有使用插值语法的节点\",{\"1\":{\"480\":1}}],[\"没有使用\",{\"1\":{\"353\":1}}],[\"没有\",{\"1\":{\"345\":1,\"387\":1,\"552\":1}}],[\"没有重复\",{\"1\":{\"343\":1}}],[\"没有就返回\",{\"1\":{\"215\":1}}],[\"没有结束标志\",{\"1\":{\"203\":1}}],[\"没有指定默认值的情况下默认值为\",{\"1\":{\"101\":1}}],[\"故当我们在书写一个全局变量的声明文件时\",{\"1\":{\"465\":1}}],[\"书写一个全局变量的声明文件\",{\"1\":{\"465\":1}}],[\"书写声明文件\",{\"0\":{\"458\":1}}],[\"库的声明文件\",{\"1\":{\"463\":1}}],[\"库后\",{\"1\":{\"463\":1}}],[\"库中扩展全局变量\",{\"0\":{\"463\":1}}],[\"库\",{\"0\":{\"461\":1},\"1\":{\"463\":1,\"465\":1,\"540\":1}}],[\"库时才有意义\",{\"1\":{\"460\":1}}],[\"库提供了一个\",{\"1\":{\"342\":1}}],[\"尝试安装即可\",{\"1\":{\"460\":1}}],[\"符合\",{\"1\":{\"460\":1}}],[\"拥有子属性\",{\"1\":{\"459\":1}}],[\"又是一个对象\",{\"1\":{\"459\":1}}],[\"又要传递回调给子组件调用\",{\"1\":{\"408\":1}}],[\"含有子属性的\",{\"1\":{\"459\":1}}],[\"统一暴露\",{\"1\":{\"494\":1}}],[\"统一管理第三方库的声明文件\",{\"1\":{\"457\":1}}],[\"统一资源定位符\",{\"1\":{\"190\":1}}],[\"兼容可以理解为结构相同\",{\"1\":{\"451\":1}}],[\"兼容\",{\"1\":{\"451\":2}}],[\"联合类型可以被断言为其中一个类型\",{\"1\":{\"451\":1}}],[\"联合类型的变量在被赋值的时候\",{\"1\":{\"440\":1}}],[\"联合类型表示取值可以是多种类型中的一种\",{\"1\":{\"440\":1}}],[\"联合类型\",{\"0\":{\"440\":1}}],[\"虽然重复了\",{\"1\":{\"434\":1}}],[\"虽然这个对象看起来很像数组\",{\"1\":{\"225\":1}}],[\"二者\",{\"1\":{\"555\":1}}],[\"二者的\",{\"1\":{\"347\":1}}],[\"二元运算符\",{\"1\":{\"414\":1}}],[\"带括号的常数枚举表达式\",{\"1\":{\"414\":1}}],[\"带有\",{\"1\":{\"335\":1}}],[\"进入项目文件夹\",{\"1\":{\"661\":1}}],[\"进入不同路由显示不同标题\",{\"1\":{\"603\":1}}],[\"进入到这个文件夹中\",{\"1\":{\"559\":1}}],[\"进入到想要创建项目的文件夹\",{\"1\":{\"559\":1}}],[\"进阶\",{\"0\":{\"409\":1}}],[\"进行了调整\",{\"1\":{\"657\":1}}],[\"进行修改\",{\"1\":{\"627\":1}}],[\"进行修改并重新渲染模板\",{\"1\":{\"516\":1}}],[\"进行响应式修改\",{\"1\":{\"627\":1}}],[\"进行下一个钩子\",{\"1\":{\"602\":1}}],[\"进行初始化设置\",{\"1\":{\"547\":1}}],[\"进行新虚拟\",{\"1\":{\"535\":1}}],[\"进行占位\",{\"1\":{\"520\":1}}],[\"进行挂载指定\",{\"1\":{\"518\":1}}],[\"进行统一管理\",{\"1\":{\"494\":1}}],[\"进行请求\",{\"0\":{\"487\":1}}],[\"进行数据绑定和\",{\"1\":{\"474\":1}}],[\"进行\",{\"1\":{\"403\":1}}],[\"进行处理\",{\"1\":{\"379\":1}}],[\"进行操作\",{\"1\":{\"362\":1}}],[\"进行自定义\",{\"1\":{\"356\":1}}],[\"进行不可变式更新\",{\"1\":{\"334\":1}}],[\"进行签名\",{\"1\":{\"243\":1}}],[\"进行解码\",{\"1\":{\"223\":1}}],[\"进行编码\",{\"1\":{\"223\":1}}],[\"限制订阅动作只在组件挂载时执行\",{\"1\":{\"408\":1}}],[\"限制参数化类型\",{\"0\":{\"115\":1}}],[\"搜索关键字设置回调\",{\"1\":{\"407\":1}}],[\"搜索关键字\",{\"1\":{\"407\":1}}],[\"批量更新\",{\"1\":{\"406\":1}}],[\"拷贝出的数组中的元素指向的还是同一个对象\",{\"1\":{\"405\":1}}],[\"排序\",{\"1\":{\"405\":1}}],[\"排序后原数组会被改变\",{\"1\":{\"215\":1}}],[\"纯函数是函数式编程的概念\",{\"1\":{\"403\":1}}],[\"纯函数\",{\"1\":{\"403\":1,\"406\":1}}],[\"记住当前\",{\"1\":{\"403\":1}}],[\"记住\",{\"1\":{\"403\":1}}],[\"验证成功返回\",{\"1\":{\"399\":1}}],[\"决定到底保存在哪个字段里\",{\"1\":{\"397\":1}}],[\"决定主轴的方向\",{\"1\":{\"45\":1}}],[\"触发页面更新\",{\"1\":{\"651\":1}}],[\"触发重新渲染的逻辑\",{\"1\":{\"403\":1}}],[\"触发\",{\"1\":{\"397\":1}}],[\"触发状态更新\",{\"1\":{\"329\":1}}],[\"报错了应该显示什么内容\",{\"1\":{\"391\":1}}],[\"目的地的路由对象\",{\"1\":{\"602\":1}}],[\"目的组件用法依然不变\",{\"1\":{\"588\":1}}],[\"目的组件中用法与布尔模式相同\",{\"1\":{\"587\":1}}],[\"目的组件修改为\",{\"1\":{\"586\":1}}],[\"目标路由\",{\"1\":{\"581\":1}}],[\"目录下创建\",{\"1\":{\"576\":1,\"641\":1}}],[\"目录下的\",{\"1\":{\"269\":1}}],[\"目录\",{\"1\":{\"460\":1}}],[\"目前通过\",{\"1\":{\"390\":1}}],[\"似乎\",{\"1\":{\"380\":1}}],[\"新一代前端构建工具\",{\"1\":{\"661\":1}}],[\"新的组件\",{\"0\":{\"643\":1}}],[\"新值\",{\"1\":{\"621\":2,\"622\":2,\"623\":2}}],[\"新增属性\",{\"1\":{\"630\":1}}],[\"新增\",{\"1\":{\"605\":1}}],[\"新旧虚拟\",{\"1\":{\"535\":1}}],[\"新人出现在了头部\",{\"1\":{\"534\":1}}],[\"新建\",{\"1\":{\"460\":1}}],[\"新数据之前调用\",{\"1\":{\"380\":1}}],[\"新窗口打开\",{\"1\":{\"197\":1}}],[\"方式三\",{\"1\":{\"565\":1}}],[\"方式二\",{\"0\":{\"486\":1},\"1\":{\"565\":1}}],[\"方式一\",{\"0\":{\"485\":1},\"1\":{\"565\":1}}],[\"方式提交的表单\",{\"1\":{\"379\":1}}],[\"方式提交的\",{\"1\":{\"379\":1}}],[\"方式的提交\",{\"1\":{\"379\":1}}],[\"方式也不会创建\",{\"1\":{\"379\":1}}],[\"方法创建的代理\",{\"1\":{\"655\":1}}],[\"方法创建一个\",{\"1\":{\"334\":1}}],[\"方法在模板中可以直接使用\",{\"1\":{\"626\":1}}],[\"方法等均要配置在\",{\"1\":{\"626\":1}}],[\"方法名\",{\"1\":{\"619\":1}}],[\"方法触发\",{\"1\":{\"614\":1}}],[\"方法触发一个\",{\"1\":{\"397\":1}}],[\"方法发布消息\",{\"1\":{\"544\":1}}],[\"方法订阅消息\",{\"1\":{\"543\":1}}],[\"方法也就无效了\",{\"1\":{\"517\":1}}],[\"方法添加订阅者\",{\"1\":{\"517\":1}}],[\"方法添加回调函数\",{\"1\":{\"151\":1}}],[\"方法实现更新页面\",{\"1\":{\"517\":1}}],[\"方法调用其他组件创建的自定义事件并传递数据\",{\"1\":{\"528\":1}}],[\"方法调用前增加一个\",{\"1\":{\"517\":1}}],[\"方法调用时机\",{\"0\":{\"505\":1}}],[\"方法或其他修饰符或方法\",{\"1\":{\"502\":1}}],[\"方法仅更新下一次渲染的状态变量\",{\"1\":{\"403\":2}}],[\"方法仅在顶级组件\",{\"1\":{\"283\":1}}],[\"方法接收\",{\"1\":{\"581\":1}}],[\"方法接收一个\",{\"1\":{\"403\":1}}],[\"方法接收一个值并作为返回变量的初始值\",{\"1\":{\"403\":1}}],[\"方法接受两个回调函数作为参数\",{\"1\":{\"176\":1}}],[\"方法将父组件传来的\",{\"1\":{\"362\":1}}],[\"方法只接收一个\",{\"1\":{\"355\":1}}],[\"方法只要一个成员的返回值是\",{\"1\":{\"215\":2}}],[\"方法获取到属性链最后一个元素之前的属性\",{\"1\":{\"517\":1}}],[\"方法获取深层属性值\",{\"1\":{\"517\":1}}],[\"方法获取\",{\"1\":{\"335\":1}}],[\"方法了\",{\"1\":{\"334\":1}}],[\"方法来转换返回的数据\",{\"1\":{\"350\":1}}],[\"方法来强制重新获取数据\",{\"1\":{\"345\":1}}],[\"方法来创建范式化\",{\"1\":{\"343\":1}}],[\"方法来创建\",{\"1\":{\"338\":1,\"344\":1}}],[\"方法来完成\",{\"1\":{\"334\":1}}],[\"方法来获取一个字符串\",{\"1\":{\"120\":1}}],[\"方法中第一个参数是新值\",{\"1\":{\"621\":1}}],[\"方法中调用\",{\"1\":{\"517\":1}}],[\"方法中有一个\",{\"1\":{\"334\":1}}],[\"方法中传入\",{\"1\":{\"300\":1}}],[\"方法前调用\",{\"1\":{\"310\":1}}],[\"方法从数组生成组件\",{\"1\":{\"306\":1}}],[\"方法并传入在\",{\"1\":{\"335\":1}}],[\"方法并不会有效\",{\"1\":{\"301\":1}}],[\"方法并将返回值传入\",{\"1\":{\"162\":1}}],[\"方法可以通过调用每个订阅者的\",{\"1\":{\"517\":1}}],[\"方法可以将指定的订阅者添加到数组中\",{\"1\":{\"517\":1}}],[\"方法可以将多个\",{\"1\":{\"356\":1}}],[\"方法可以调用\",{\"1\":{\"459\":1}}],[\"方法可以添加一个变化监听器\",{\"1\":{\"354\":1}}],[\"方法可以获取内置的\",{\"1\":{\"343\":1}}],[\"方法可以创建虚拟\",{\"1\":{\"294\":1}}],[\"方法可以接受多个参数\",{\"1\":{\"238\":1}}],[\"方法可以接受第二个参数绑定参数函数的\",{\"1\":{\"215\":1}}],[\"方法进行比较的\",{\"1\":{\"287\":1}}],[\"方法阻止默认行为\",{\"1\":{\"274\":1}}],[\"方法阻止事件的传播\",{\"1\":{\"230\":1}}],[\"方法相关\",{\"0\":{\"250\":1}}],[\"方法相当于\",{\"1\":{\"178\":1}}],[\"方法使用\",{\"1\":{\"224\":1}}],[\"方法与\",{\"1\":{\"216\":1}}],[\"方法会在\",{\"1\":{\"380\":1}}],[\"方法会返回一个退订函数\",{\"1\":{\"354\":1}}],[\"方法会返回一个\",{\"1\":{\"351\":1}}],[\"方法会默认开启此中间件\",{\"1\":{\"338\":1}}],[\"方法会根据\",{\"1\":{\"334\":1}}],[\"方法会跳过数组的空位\",{\"1\":{\"215\":1}}],[\"方法会被默认添加\",{\"1\":{\"153\":1}}],[\"方法无法终端执行\",{\"1\":{\"215\":1}}],[\"方法用于替换匹配的子字符串\",{\"1\":{\"216\":1}}],[\"方法用于在数组的第一个位置添加元素并返回添加后的数组长度\",{\"1\":{\"215\":1}}],[\"方法用于在数组的末端添加一个或多个元素\",{\"1\":{\"215\":1}}],[\"方法用于删除数组的第一个元素并返回该元素\",{\"1\":{\"215\":1}}],[\"方法用于删除数组的最后一个元素并返回这个元素\",{\"1\":{\"215\":1}}],[\"方法用于将多个\",{\"1\":{\"180\":1}}],[\"方法用于指定一定会执行的操作\",{\"1\":{\"179\":1}}],[\"方法用于找出第一个符合条件的数组成员\",{\"1\":{\"148\":1}}],[\"方法指定错误处理的回调函数\",{\"1\":{\"178\":1}}],[\"方法指定的回调函数会在当前脚本所有同步任务执行完才会执行\",{\"1\":{\"176\":1}}],[\"方法指定的回调函数\",{\"1\":{\"152\":1}}],[\"方法返回一个空的范式化\",{\"1\":{\"343\":1}}],[\"方法返回给定元素在数组中最后一次出现的位置\",{\"1\":{\"215\":1}}],[\"方法返回给定元素在数组中第一次出现的位置\",{\"1\":{\"215\":1}}],[\"方法返回\",{\"1\":{\"215\":2}}],[\"方法返回当前数组的一个浅拷贝\",{\"1\":{\"215\":1}}],[\"方法返回的是一个新的\",{\"1\":{\"177\":1}}],[\"方法返回第一个符合条件的数组成员的位置\",{\"1\":{\"148\":1}}],[\"方法分别制定\",{\"1\":{\"176\":1}}],[\"方法内部的\",{\"1\":{\"154\":1}}],[\"方法是类的默认方法\",{\"1\":{\"153\":1}}],[\"方法的一个对象\",{\"1\":{\"569\":1}}],[\"方法的调用顺序\",{\"1\":{\"246\":1}}],[\"方法的参数可以不是数组\",{\"1\":{\"180\":1}}],[\"方法的第一个参数为\",{\"1\":{\"178\":1}}],[\"方法的回调函数接收到\",{\"1\":{\"152\":1}}],[\"方法的两个参数都是函数\",{\"1\":{\"26\":1}}],[\"方法回调函数收到\",{\"1\":{\"152\":1}}],[\"方法回调函数的参数\",{\"1\":{\"152\":1}}],[\"方法不必声明会抛出哪些异常\",{\"1\":{\"96\":1}}],[\"方法且具体的实现与\",{\"1\":{\"91\":1}}],[\"方法\",{\"0\":{\"84\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1},\"1\":{\"70\":1,\"74\":2,\"87\":1,\"91\":1,\"153\":1,\"154\":1,\"206\":1,\"216\":3,\"220\":1,\"224\":1,\"229\":1,\"230\":1,\"237\":1,\"238\":4,\"262\":1,\"269\":1,\"274\":1,\"286\":1,\"290\":1,\"301\":1,\"314\":1,\"342\":1,\"343\":1,\"348\":1,\"349\":1,\"351\":1,\"353\":1,\"355\":1,\"360\":1,\"378\":1,\"379\":1,\"380\":1,\"384\":1,\"390\":1,\"393\":1,\"496\":1,\"517\":1,\"609\":1,\"626\":1}}],[\"准备就绪后定义\",{\"1\":{\"378\":1}}],[\"需求是点击不同的按钮后跳转到\",{\"1\":{\"378\":1}}],[\"需要尝试解析一个异步组件时发生错误\",{\"1\":{\"610\":1}}],[\"需要传递一个参数对象\",{\"1\":{\"591\":1}}],[\"需要安装\",{\"1\":{\"570\":1}}],[\"需要将其中的插值表达式渲染进数据\",{\"1\":{\"517\":1}}],[\"需要将其渲染到\",{\"1\":{\"306\":1}}],[\"需要修改\",{\"1\":{\"466\":1}}],[\"需要先配置一下\",{\"1\":{\"460\":1}}],[\"需要先创建一个\",{\"1\":{\"366\":1}}],[\"需要引用它的声明文件以获得对应的代码补全\",{\"1\":{\"455\":1}}],[\"需要写在其后面\",{\"1\":{\"420\":1}}],[\"需要创建一个新数组并将其设置为新的\",{\"1\":{\"405\":1}}],[\"需要满足一下两个主要条件\",{\"1\":{\"403\":1}}],[\"需要两步操作\",{\"1\":{\"403\":1}}],[\"需要显示时间\",{\"1\":{\"360\":1}}],[\"需要变为\",{\"1\":{\"356\":1}}],[\"需要\",{\"1\":{\"348\":1}}],[\"需要一并添加\",{\"1\":{\"344\":1}}],[\"需要我们自行处理\",{\"1\":{\"344\":1}}],[\"需要自定义参数\",{\"1\":{\"337\":1}}],[\"需要自定义类型声明\",{\"1\":{\"209\":1}}],[\"需要很多的配置\",{\"1\":{\"332\":1}}],[\"需要通过\",{\"1\":{\"293\":1}}],[\"需要通过功能键一起按下\",{\"1\":{\"192\":1}}],[\"需要在项目中有一个\",{\"1\":{\"437\":1}}],[\"需要在创建\",{\"1\":{\"334\":1}}],[\"需要在组件挂载时连接服务器并在卸载时断开连接\",{\"1\":{\"288\":1}}],[\"需要在使用前初始化\",{\"1\":{\"144\":1}}],[\"需要指定如何停止\",{\"1\":{\"285\":1}}],[\"需要指定默认值或者在类型后面加问号\",{\"1\":{\"99\":1}}],[\"需要给应用配置一个反向代理\",{\"1\":{\"270\":1}}],[\"需要手动开启对\",{\"1\":{\"269\":1}}],[\"需要使用递归调用\",{\"1\":{\"517\":1}}],[\"需要使用一个根标签将多个\",{\"1\":{\"306\":1}}],[\"需要使用\",{\"1\":{\"223\":1,\"305\":1,\"353\":1,\"355\":1,\"490\":1}}],[\"需要注意\",{\"1\":{\"209\":1}}],[\"需要注意的是\",{\"1\":{\"134\":1}}],[\"需要动态指定\",{\"1\":{\"482\":1}}],[\"需要动态\",{\"1\":{\"159\":1}}],[\"参考npm\",{\"1\":{\"416\":1}}],[\"参考下面的代码\",{\"1\":{\"403\":1}}],[\"参考\",{\"1\":{\"378\":1}}],[\"参数指定工作模式\",{\"1\":{\"608\":1}}],[\"参数指定要跳转到的路由\",{\"1\":{\"580\":1}}],[\"参数或查询的改变并不会触发进入\",{\"1\":{\"601\":1}}],[\"参数对象与\",{\"1\":{\"591\":1,\"592\":1}}],[\"参数后必须使用\",{\"1\":{\"584\":1}}],[\"参数为\",{\"1\":{\"547\":1,\"616\":1}}],[\"参数默认值\",{\"0\":{\"448\":1}}],[\"参数属性\",{\"0\":{\"419\":1}}],[\"参数改为可选项\",{\"1\":{\"379\":1}}],[\"参数调用接口获取数据并展示\",{\"1\":{\"378\":1}}],[\"参数路由中的参数值\",{\"1\":{\"401\":1}}],[\"参数路由\",{\"0\":{\"372\":1},\"1\":{\"372\":1}}],[\"参数相关\",{\"0\":{\"252\":1}}],[\"参数就是所要绑定\",{\"1\":{\"238\":1}}],[\"参数是一个\",{\"1\":{\"229\":1}}],[\"参数是介于\",{\"1\":{\"41\":1}}],[\"参数的\",{\"1\":{\"384\":1}}],[\"参数的传递\",{\"1\":{\"225\":1}}],[\"参数的作用域\",{\"0\":{\"157\":1}}],[\"参数必须在参数列表最后\",{\"1\":{\"158\":1}}],[\"参数列表中的\",{\"1\":{\"157\":1}}],[\"参数会形成一个单独的作用域直到初始化结束\",{\"1\":{\"157\":1}}],[\"参数类型\",{\"1\":{\"116\":1}}],[\"参数类型必须与被覆盖的方法的类型相同或者是其父类\",{\"1\":{\"91\":1}}],[\"参数\",{\"0\":{\"98\":1,\"158\":1,\"262\":1,\"383\":1,\"384\":1,\"578\":1,\"584\":1},\"1\":{\"138\":1,\"158\":2,\"252\":2,\"372\":1,\"378\":1,\"379\":1,\"384\":2,\"608\":1,\"633\":1}}],[\"规范\",{\"1\":{\"553\":1}}],[\"规则中设置了\",{\"1\":{\"376\":1}}],[\"规定字体\",{\"1\":{\"47\":1}}],[\"截止到现在\",{\"1\":{\"376\":1}}],[\"捕获后立即执行\",{\"1\":{\"521\":1}}],[\"捕获\",{\"1\":{\"374\":1}}],[\"捕获异常\",{\"1\":{\"96\":2}}],[\"改成了$\",{\"1\":{\"631\":1}}],[\"改动\",{\"1\":{\"406\":1}}],[\"改变时\",{\"1\":{\"608\":1}}],[\"改变时会基于这个改变去创建一个新的不可变的\",{\"1\":{\"334\":1}}],[\"改变\",{\"1\":{\"602\":1}}],[\"改变另一个模块的结构\",{\"1\":{\"464\":1}}],[\"改变一个全局变量的结构\",{\"1\":{\"462\":1,\"463\":1}}],[\"改变一个不会影响另一个\",{\"1\":{\"404\":1}}],[\"改为\",{\"1\":{\"373\":1,\"459\":1,\"460\":2}}],[\"样式类似\",{\"1\":{\"483\":1}}],[\"样式\",{\"0\":{\"482\":1,\"483\":1,\"570\":1},\"1\":{\"570\":1}}],[\"样式的类名可能就不是\",{\"1\":{\"368\":1}}],[\"样式模块化通过\",{\"1\":{\"268\":1}}],[\"样式模块化\",{\"0\":{\"268\":1}}],[\"启动定时器\",{\"1\":{\"530\":1}}],[\"启动项目\",{\"1\":{\"366\":1}}],[\"启用\",{\"0\":{\"269\":1}}],[\"启用懒加载\",{\"1\":{\"195\":1}}],[\"问题\",{\"1\":{\"366\":1,\"608\":1}}],[\"防止在网速过慢短时间内无法加载\",{\"1\":{\"478\":1}}],[\"防止\",{\"1\":{\"366\":1,\"608\":1}}],[\"防止再触发定义在别的节点上的监听函数\",{\"1\":{\"231\":1}}],[\"作用域插槽\",{\"0\":{\"552\":1}}],[\"作用\",{\"1\":{\"476\":1,\"477\":1,\"627\":1,\"628\":1,\"642\":1,\"650\":2,\"651\":1,\"652\":1}}],[\"作非受控组件使用\",{\"1\":{\"363\":1}}],[\"作受控组件使用\",{\"1\":{\"363\":1}}],[\"作为唯一的参数\",{\"1\":{\"403\":1}}],[\"作为入参调用我们的\",{\"1\":{\"335\":1}}],[\"作为参数\",{\"1\":{\"334\":1,\"581\":1}}],[\"作为子组件传递\",{\"0\":{\"320\":1}}],[\"作为类关键字\",{\"1\":{\"305\":1}}],[\"作为\",{\"1\":{\"281\":1,\"408\":1,\"658\":1}}],[\"作为要返回的对象实例\",{\"1\":{\"237\":1}}],[\"推荐使用\",{\"1\":{\"573\":1}}],[\"推荐使用受控组件\",{\"1\":{\"363\":1}}],[\"推荐的命名空间\",{\"1\":{\"243\":1}}],[\"受控组件总是显示\",{\"1\":{\"363\":1}}],[\"受控组件\",{\"1\":{\"363\":1}}],[\"受控组件和非受控组件\",{\"0\":{\"363\":1}}],[\"停止按钮\",{\"1\":{\"360\":1}}],[\"保持状态的不变性可以简化复杂的\",{\"1\":{\"406\":1}}],[\"保持纯粹\",{\"1\":{\"298\":1}}],[\"保留渲染之间的数据\",{\"1\":{\"403\":1}}],[\"保存文件等\",{\"1\":{\"358\":1}}],[\"他们的用法类似\",{\"1\":{\"352\":1}}],[\"像更改收藏状态这样的小更新其实不需要重新获取整个帖子列表\",{\"1\":{\"351\":1}}],[\"尽管两个类型并不兼容\",{\"1\":{\"452\":1}}],[\"尽管它们是同一个对象\",{\"1\":{\"349\":1}}],[\"尽管标识符的名称会改变\",{\"1\":{\"126\":1}}],[\"仍然符合\",{\"1\":{\"553\":1}}],[\"仍然看到\",{\"1\":{\"403\":1}}],[\"仍然能拿到最新的\",{\"1\":{\"380\":1}}],[\"仍然使用缓存即可\",{\"1\":{\"347\":1}}],[\"仍然是\",{\"1\":{\"222\":1}}],[\"失活\",{\"1\":{\"530\":1}}],[\"失去焦点\",{\"1\":{\"511\":1}}],[\"失效特定的项目\",{\"0\":{\"347\":1}}],[\"失败\",{\"1\":{\"176\":1}}],[\"秒后才拉取数据\",{\"1\":{\"352\":1}}],[\"秒后再次进入则会有接口调用\",{\"1\":{\"346\":1}}],[\"秒\",{\"1\":{\"346\":2}}],[\"控制属性是否能被删除\",{\"1\":{\"514\":1}}],[\"控制属性是否能被修改\",{\"1\":{\"514\":1}}],[\"控制属性可枚举\",{\"1\":{\"514\":1}}],[\"控制\",{\"1\":{\"363\":1}}],[\"控制台可以看到一次接口调用\",{\"1\":{\"346\":1}}],[\"控件组的标题\",{\"1\":{\"193\":1}}],[\"页面不会重新加载\",{\"1\":{\"608\":1}}],[\"页面有两个组件\",{\"1\":{\"407\":1}}],[\"页面正常更新是因为\",{\"1\":{\"380\":1}}],[\"页面的内容仍然是编辑之前的\",{\"1\":{\"347\":1}}],[\"页面会被及时更新\",{\"1\":{\"345\":1}}],[\"页面直接使用\",{\"1\":{\"337\":1}}],[\"刷新数据\",{\"1\":{\"345\":1}}],[\"刷新缓存\",{\"0\":{\"345\":1}}],[\"了\",{\"1\":{\"344\":1,\"345\":1,\"368\":1,\"376\":1,\"381\":1,\"456\":1}}],[\"切换\",{\"1\":{\"658\":1}}],[\"切换模式\",{\"1\":{\"608\":1}}],[\"切换时销毁前一个组件\",{\"1\":{\"576\":1}}],[\"切勿进行修改\",{\"1\":{\"547\":1}}],[\"切片中除了普通的\",{\"1\":{\"352\":1}}],[\"切片中有一个\",{\"1\":{\"348\":1}}],[\"切片并返回新的切片\",{\"1\":{\"349\":1}}],[\"切片上的\",{\"1\":{\"349\":1}}],[\"切片在\",{\"1\":{\"344\":1}}],[\"切片\",{\"1\":{\"344\":3}}],[\"切分为多个部分\",{\"1\":{\"334\":1}}],[\"部分异步\",{\"0\":{\"394\":1}}],[\"部分更新\",{\"1\":{\"343\":1}}],[\"部分情况下\",{\"1\":{\"274\":1}}],[\"工程需要\",{\"1\":{\"660\":1}}],[\"工程\",{\"0\":{\"659\":1}}],[\"工作原理\",{\"0\":{\"612\":1}}],[\"工作\",{\"1\":{\"553\":1}}],[\"工作方式\",{\"1\":{\"485\":1}}],[\"工作方式与\",{\"1\":{\"343\":1}}],[\"工厂构造函数可能会从缓存中返回一个实例\",{\"1\":{\"83\":1}}],[\"工厂构造函数\",{\"0\":{\"83\":1}}],[\"已移除\",{\"1\":{\"657\":2}}],[\"已过时\",{\"1\":{\"552\":1}}],[\"已被废弃\",{\"1\":{\"551\":1}}],[\"已范式化的数据保存在查找表中\",{\"1\":{\"343\":1}}],[\"已经配置好了\",{\"1\":{\"353\":1}}],[\"已经内置\",{\"1\":{\"268\":1}}],[\"已经被包含在\",{\"1\":{\"266\":1}}],[\"已经是\",{\"1\":{\"178\":1}}],[\"范式化\",{\"1\":{\"343\":2}}],[\"范式化数据\",{\"0\":{\"343\":1}}],[\"范围的上限\",{\"1\":{\"193\":1}}],[\"耗时\",{\"1\":{\"342\":1}}],[\"性能更好\",{\"1\":{\"624\":1}}],[\"性能与数据范式化\",{\"0\":{\"341\":1}}],[\"性质\",{\"1\":{\"178\":1}}],[\"^\",{\"1\":{\"339\":2,\"414\":1,\"486\":1}}],[\"服务\",{\"1\":{\"338\":1}}],[\"服务器接受的字符编码列表\",{\"1\":{\"193\":1}}],[\"总是会覆盖\",{\"1\":{\"658\":1}}],[\"总是优先于\",{\"1\":{\"658\":1}}],[\"总结\",{\"0\":{\"502\":1,\"535\":1},\"1\":{\"337\":1}}],[\"总之\",{\"1\":{\"290\":1}}],[\"发生报错\",{\"1\":{\"613\":1}}],[\"发生变化时打印日志\",{\"1\":{\"354\":1}}],[\"发布成功\",{\"1\":{\"544\":1}}],[\"发布到\",{\"1\":{\"460\":1}}],[\"发起请求\",{\"1\":{\"344\":1,\"573\":1}}],[\"发出\",{\"1\":{\"337\":1}}],[\"发送网络请求\",{\"1\":{\"530\":1}}],[\"发送数据\",{\"0\":{\"528\":1,\"544\":1}}],[\"发送请求要通过\",{\"1\":{\"573\":1}}],[\"发送请求并刷新页面\",{\"1\":{\"379\":1}}],[\"发送请求的步骤\",{\"1\":{\"344\":1}}],[\"发送\",{\"1\":{\"243\":2,\"379\":1}}],[\"我们只需要对应的标签\",{\"1\":{\"492\":1}}],[\"我们只能访问此联合类型的所有类型的共有属性或方法\",{\"1\":{\"440\":1}}],[\"我们才需要使用三斜线指令替代\",{\"1\":{\"465\":1}}],[\"我们可以为泛型中的类型参数指定默认类型\",{\"1\":{\"431\":1}}],[\"我们可以对泛型进行约束\",{\"1\":{\"428\":1}}],[\"我们返回一个\",{\"1\":{\"379\":1}}],[\"我们又希望能够继续使用\",{\"1\":{\"355\":1}}],[\"我们需要遍历\",{\"1\":{\"600\":1}}],[\"我们需要额外声明一个全局变量\",{\"1\":{\"461\":1}}],[\"我们需要一个全局路由守卫\",{\"1\":{\"399\":1}}],[\"我们需要将\",{\"1\":{\"353\":1}}],[\"我们需要使用\",{\"1\":{\"334\":1}}],[\"我们同样从不使用异步接口的情况开始\",{\"1\":{\"353\":1}}],[\"我们甚至可以只更新\",{\"1\":{\"351\":1}}],[\"我们来制作一个小型文章管理应用\",{\"1\":{\"337\":1}}],[\"展示用的\",{\"1\":{\"335\":1}}],[\"展开语法传递\",{\"0\":{\"319\":1}}],[\"组合式\",{\"1\":{\"640\":2}}],[\"组合使用\",{\"1\":{\"507\":1}}],[\"组合起来\",{\"1\":{\"353\":1,\"355\":1}}],[\"组建中输入内容按下回车后\",{\"1\":{\"407\":1}}],[\"组装为\",{\"1\":{\"334\":1}}],[\"组件可以没有根标签\",{\"1\":{\"644\":1}}],[\"组件可以定义子组件的展示位置\",{\"1\":{\"366\":1}}],[\"组件必须有一个根标签\",{\"1\":{\"644\":1}}],[\"组件内路由守卫\",{\"0\":{\"605\":1}}],[\"组件对应的路由失活时触发\",{\"1\":{\"599\":1}}],[\"组件对应的路由被激活时触发\",{\"1\":{\"598\":1}}],[\"组件要发送数据\",{\"1\":{\"528\":1}}],[\"组件要接收数据\",{\"1\":{\"527\":1}}],[\"组件绑定原生\",{\"1\":{\"502\":1}}],[\"组件自定义事件\",{\"0\":{\"495\":1},\"1\":{\"502\":1}}],[\"组件配置中\",{\"1\":{\"492\":1}}],[\"组件配置参数路由\",{\"1\":{\"372\":1}}],[\"组件本质是一个名为\",{\"1\":{\"492\":1}}],[\"组件嵌套\",{\"0\":{\"491\":1}}],[\"组件名尽可能回避\",{\"1\":{\"490\":1}}],[\"组件名\",{\"1\":{\"489\":1}}],[\"组件只接收搜索关键字并展示\",{\"1\":{\"407\":1}}],[\"组件请求相关数据并展示\",{\"1\":{\"407\":1}}],[\"组件进行下一次渲染\",{\"1\":{\"403\":1}}],[\"组件进行第一次渲染\",{\"1\":{\"403\":1}}],[\"组件传递\",{\"1\":{\"402\":1}}],[\"组件传入的内容始终相同\",{\"1\":{\"301\":1}}],[\"组件将路由重定向到根路径\",{\"1\":{\"399\":1}}],[\"组件将父组件传递来的\",{\"1\":{\"362\":1}}],[\"组件使用\",{\"1\":{\"390\":1}}],[\"组件和\",{\"1\":{\"390\":1,\"407\":1}}],[\"组件点击添加或者删除后是通过\",{\"1\":{\"388\":1}}],[\"组件定义一个\",{\"1\":{\"380\":1}}],[\"组件加一个\",{\"1\":{\"379\":1}}],[\"组件完成\",{\"1\":{\"379\":1}}],[\"组件是会随着动态路由不断重新渲染\",{\"1\":{\"379\":1}}],[\"组件路由配置\",{\"1\":{\"378\":1}}],[\"组件懒加载\",{\"0\":{\"377\":1}}],[\"组件导致空白\",{\"1\":{\"376\":1}}],[\"组件或者\",{\"1\":{\"376\":1}}],[\"组件设置的路由会先被匹配到\",{\"1\":{\"373\":1}}],[\"组件也会重新渲染\",{\"1\":{\"379\":1}}],[\"组件也指定了错误页面\",{\"1\":{\"371\":1}}],[\"组件也可以限制\",{\"1\":{\"368\":1}}],[\"组件还有子组件\",{\"1\":{\"368\":1}}],[\"组件替换\",{\"0\":{\"368\":1},\"1\":{\"368\":1}}],[\"组件的路由配置\",{\"1\":{\"380\":1}}],[\"组件的路由中的\",{\"1\":{\"379\":1}}],[\"组件的是否激活是通过\",{\"1\":{\"368\":1}}],[\"组件的\",{\"1\":{\"368\":2,\"379\":1,\"397\":1}}],[\"组件的内容\",{\"1\":{\"366\":1,\"393\":1}}],[\"组件的重新渲染\",{\"1\":{\"301\":2}}],[\"组件中所用到的数据\",{\"1\":{\"626\":1}}],[\"组件中添加超链接\",{\"1\":{\"576\":1}}],[\"组件中调用\",{\"1\":{\"528\":1}}],[\"组件中在总线上创建自定义事件\",{\"1\":{\"527\":1}}],[\"组件中订阅事件的地方需要在\",{\"1\":{\"408\":1}}],[\"组件中管理的\",{\"1\":{\"408\":1}}],[\"组件中设置\",{\"1\":{\"392\":1}}],[\"组件中演示\",{\"1\":{\"379\":1}}],[\"组件中访问当前\",{\"1\":{\"378\":1}}],[\"组件中获取参数路由中\",{\"1\":{\"372\":1}}],[\"组件中没有定义子组件的展示位置\",{\"1\":{\"366\":1}}],[\"组件中\",{\"1\":{\"366\":1}}],[\"组件中控制挂载\",{\"1\":{\"352\":1}}],[\"组件中可以调用那么必须要通过\",{\"1\":{\"283\":1}}],[\"组件复杂一些\",{\"1\":{\"337\":1}}],[\"组件开始\",{\"1\":{\"329\":1}}],[\"组件里\",{\"1\":{\"323\":1}}],[\"组件之间发生嵌套时\",{\"1\":{\"320\":1}}],[\"组件从装载至卸载的全过程\",{\"1\":{\"308\":1}}],[\"组件不能使用\",{\"1\":{\"306\":1}}],[\"组件渲染时\",{\"1\":{\"301\":1}}],[\"组件被卸载时也会调用清理函数\",{\"1\":{\"288\":1}}],[\"组件\",{\"0\":{\"271\":1,\"488\":1},\"1\":{\"335\":1,\"337\":1,\"345\":1,\"372\":2,\"373\":1,\"379\":4,\"385\":2,\"390\":1,\"391\":1,\"398\":2,\"399\":2,\"407\":2,\"489\":1,\"596\":1}}],[\"检测到\",{\"1\":{\"334\":1}}],[\"检查一个对象是否是由\",{\"1\":{\"655\":3}}],[\"检查一个值是否为一个\",{\"1\":{\"655\":1}}],[\"检查当前\",{\"1\":{\"331\":1}}],[\"检查右边构造函数的原型对象是否在左边对象的原型链上\",{\"1\":{\"220\":1}}],[\"逻辑和提高组件的性能\",{\"1\":{\"406\":1}}],[\"逻辑和\",{\"1\":{\"334\":1}}],[\"逻辑赋值运算符先进行逻辑运算\",{\"1\":{\"174\":1}}],[\"逻辑赋值运算符\",{\"0\":{\"174\":1}}],[\"计时器\",{\"1\":{\"360\":1}}],[\"计时实际上就是每隔一段时间刷新页面上的计数\",{\"1\":{\"360\":1}}],[\"计数器组件能看到人员列表长度\",{\"1\":{\"618\":1}}],[\"计数器\",{\"0\":{\"333\":1}}],[\"计算属性与监视\",{\"0\":{\"634\":1}}],[\"计算属性与监视属性的区别与联系\",{\"0\":{\"624\":1}}],[\"计算属性只有影响结果的数据发生变化才会重新计算\",{\"1\":{\"624\":1}}],[\"计算属性只能组件内复用\",{\"1\":{\"615\":1}}],[\"计算属性不一定能完成\",{\"1\":{\"624\":1}}],[\"计算属性能完成的\",{\"1\":{\"624\":1}}],[\"计算属性实现\",{\"1\":{\"529\":1,\"536\":1}}],[\"计算属性简写\",{\"0\":{\"506\":1}}],[\"计算属性最终会出现在\",{\"1\":{\"505\":1}}],[\"计算属性原理\",{\"1\":{\"505\":1}}],[\"计算属性示例\",{\"0\":{\"504\":1}}],[\"计算属性相当于缓存\",{\"1\":{\"503\":1}}],[\"计算属性\",{\"0\":{\"503\":1,\"635\":1}}],[\"计算所得项示例\",{\"1\":{\"414\":1}}],[\"计算新的状态值\",{\"1\":{\"331\":1}}],[\"计算机程序输出内容的一个例子\",{\"1\":{\"204\":1}}],[\"立即更新缓存数据将使得页面更快速的更新\",{\"1\":{\"351\":1}}],[\"立即创建整个状态的切片\",{\"1\":{\"332\":1}}],[\"立即加载\",{\"1\":{\"195\":1}}],[\"封装了这个过程\",{\"1\":{\"334\":1}}],[\"封装了这一步\",{\"1\":{\"302\":1}}],[\"封装了配置\",{\"1\":{\"332\":1}}],[\"封装这个过程\",{\"1\":{\"331\":1}}],[\"唯一的方法是调用\",{\"1\":{\"331\":1}}],[\"更加方便的操作\",{\"1\":{\"516\":1}}],[\"更加严格\",{\"1\":{\"233\":1}}],[\"更改局部变量不会触发渲染\",{\"1\":{\"403\":1}}],[\"更新可能修复\",{\"1\":{\"636\":1}}],[\"更新之前\",{\"1\":{\"547\":1}}],[\"更新时调用\",{\"1\":{\"547\":1}}],[\"更新时需要使用\",{\"1\":{\"343\":1}}],[\"更新数组时可以不必构造新数组\",{\"1\":{\"406\":1}}],[\"更新数组内部的对象\",{\"1\":{\"405\":1}}],[\"更新数组\",{\"0\":{\"405\":1}}],[\"更新对象\",{\"0\":{\"404\":1}}],[\"更新了\",{\"1\":{\"403\":1}}],[\"更新或者删除文章时只会使得特定的数据失效\",{\"1\":{\"347\":1}}],[\"更新某个文章的内容后会导致所有的查询丢弃缓存\",{\"1\":{\"347\":1}}],[\"更新文章之后能够及时更新\",{\"1\":{\"338\":1}}],[\"更新\",{\"1\":{\"331\":1,\"337\":1,\"406\":1,\"535\":2}}],[\"禁止一个组件通过\",{\"1\":{\"362\":1}}],[\"禁止任何的异步逻辑\",{\"1\":{\"331\":1}}],[\"禁止直接修改\",{\"1\":{\"331\":1}}],[\"视图也发生变化\",{\"1\":{\"510\":1}}],[\"视图模型\",{\"1\":{\"474\":1}}],[\"视图\",{\"1\":{\"473\":1}}],[\"视为一个事件监听器\",{\"1\":{\"331\":1}}],[\"视频\",{\"1\":{\"200\":1}}],[\"给组件绑定原生事件\",{\"0\":{\"501\":1}}],[\"给这个\",{\"1\":{\"331\":1}}],[\"给出脚本哈希值\",{\"1\":{\"197\":1}}],[\"术语\",{\"0\":{\"331\":1}}],[\"穿梭过去的状态\",{\"1\":{\"330\":1}}],[\"撤销\",{\"1\":{\"330\":1}}],[\"撤销或者清除它的效果\",{\"1\":{\"285\":1}}],[\"尤其是当这些组件位于应用中的不同部分时\",{\"1\":{\"329\":1}}],[\"事情会变的很复杂\",{\"1\":{\"329\":1}}],[\"事件依然有效\",{\"1\":{\"530\":1}}],[\"事件将会被立即执行\",{\"1\":{\"521\":1}}],[\"事件触发时\",{\"1\":{\"521\":1}}],[\"事件触发后将输入框的值与数据进行同步\",{\"1\":{\"511\":1}}],[\"事件只触发一次\",{\"1\":{\"521\":1}}],[\"事件修饰符\",{\"0\":{\"521\":1}}],[\"事件监听器\",{\"1\":{\"517\":1}}],[\"事件回调在\",{\"1\":{\"502\":1}}],[\"事件来管理和更新应用状态的工具\",{\"1\":{\"328\":1}}],[\"事件会触发表单的提交事件导致重新加载整个页面\",{\"1\":{\"274\":1}}],[\"事件处理\",{\"0\":{\"520\":1}}],[\"事件处理函数应当传入一个函数\",{\"1\":{\"275\":1}}],[\"事件处理函数会捕获子组件的事件\",{\"1\":{\"274\":1}}],[\"事件处理同样如此\",{\"1\":{\"274\":1}}],[\"事件处理属性\",{\"1\":{\"192\":1}}],[\"事件的毁掉需要配置在\",{\"1\":{\"520\":1}}],[\"事件的处理顺序\",{\"1\":{\"274\":1}}],[\"事件的代理\",{\"1\":{\"230\":1}}],[\"事件的传播\",{\"1\":{\"230\":1}}],[\"事件模型\",{\"0\":{\"230\":1}}],[\"事件发生时会被调用\",{\"1\":{\"229\":1}}],[\"事件名称\",{\"1\":{\"229\":1}}],[\"事件\",{\"0\":{\"228\":1,\"519\":1},\"1\":{\"289\":1,\"502\":1,\"511\":1,\"522\":2}}],[\"渲染一个路由的过程中\",{\"1\":{\"610\":1}}],[\"渲染到页面\",{\"1\":{\"535\":1}}],[\"渲染时是从虚拟\",{\"1\":{\"534\":1}}],[\"渲染界面结束后调用\",{\"1\":{\"530\":1}}],[\"渲染组件或者触发\",{\"1\":{\"380\":1}}],[\"渲染报错后\",{\"1\":{\"371\":1}}],[\"渲染\",{\"1\":{\"329\":1}}],[\"渲染引起的副作用\",{\"1\":{\"284\":1}}],[\"驱动组件的真实数据\",{\"1\":{\"329\":1}}],[\"管理着自己的子组件\",{\"1\":{\"492\":1}}],[\"管理着所有的\",{\"1\":{\"492\":1}}],[\"管理项目\",{\"1\":{\"339\":1}}],[\"管理的函数\",{\"1\":{\"624\":1}}],[\"管理的\",{\"1\":{\"337\":1}}],[\"管理\",{\"0\":{\"329\":1},\"1\":{\"363\":1}}],[\"管道\",{\"1\":{\"257\":1}}],[\"简称\",{\"1\":{\"492\":1}}],[\"简单例子\",{\"1\":{\"426\":1}}],[\"简介\",{\"0\":{\"328\":1}}],[\"简写形式\",{\"1\":{\"635\":1}}],[\"简写时\",{\"1\":{\"623\":1}}],[\"简写\",{\"1\":{\"61\":1}}],[\"简写属性\",{\"1\":{\"33\":1}}],[\"简写背景属性\",{\"1\":{\"32\":1}}],[\"出现问题时\",{\"1\":{\"325\":1}}],[\"出错后再处理\",{\"1\":{\"27\":1}}],[\"替换元素\",{\"1\":{\"405\":1}}],[\"替换为使用范式化\",{\"1\":{\"343\":1}}],[\"替换用到\",{\"1\":{\"342\":1}}],[\"替换掉之前的\",{\"1\":{\"324\":1}}],[\"替换\",{\"0\":{\"324\":1},\"1\":{\"344\":1}}],[\"做为\",{\"1\":{\"535\":1}}],[\"做入口页面\",{\"1\":{\"494\":1}}],[\"做后缀\",{\"1\":{\"457\":1}}],[\"做\",{\"1\":{\"340\":1,\"534\":4,\"535\":1}}],[\"做限制\",{\"0\":{\"322\":1}}],[\"做了必填限制\",{\"1\":{\"99\":1}}],[\"父类可以被断言为子类\",{\"1\":{\"451\":1}}],[\"父类的无参数构造函数\",{\"1\":{\"79\":1}}],[\"父组件有一个\",{\"1\":{\"652\":1}}],[\"父组件都可以作为其所有子组件的依赖提供者\",{\"1\":{\"652\":1}}],[\"父组件中绑定事件\",{\"1\":{\"658\":1}}],[\"父组件中可以在任意标签上使用\",{\"1\":{\"551\":1}}],[\"父组件中可能需要管理很多的状态\",{\"1\":{\"408\":1}}],[\"父组件中写在子组件标签中的所有内容都会丢失\",{\"1\":{\"549\":1}}],[\"父组件传到子组件\",{\"1\":{\"549\":1}}],[\"父组件可以在子组件指定位置插入\",{\"1\":{\"549\":1}}],[\"父组件\",{\"1\":{\"496\":1,\"633\":1}}],[\"父组件为子组件绑定事件\",{\"1\":{\"496\":1}}],[\"父组件定义一个方法\",{\"1\":{\"496\":1}}],[\"父组件的\",{\"1\":{\"320\":1}}],[\"节点\",{\"1\":{\"517\":2}}],[\"节点时\",{\"1\":{\"361\":1}}],[\"节点之前\",{\"1\":{\"314\":1}}],[\"节点而不是一个\",{\"1\":{\"306\":1}}],[\"警告\",{\"1\":{\"313\":1,\"344\":1,\"380\":1,\"490\":1,\"506\":1}}],[\"条件渲染\",{\"0\":{\"307\":1,\"507\":1}}],[\"条件表达式\",{\"0\":{\"130\":1}}],[\"外部枚举\",{\"0\":{\"416\":1}}],[\"外部创建者函数\",{\"1\":{\"334\":1}}],[\"外层表示要使用\",{\"1\":{\"305\":1}}],[\"外边距是透明的\",{\"1\":{\"38\":1}}],[\"外边距以及边框内的区域的高度或宽度\",{\"1\":{\"37\":1}}],[\"外边距合并\",{\"1\":{\"35\":1}}],[\"外边距\",{\"0\":{\"35\":1},\"1\":{\"36\":1,\"37\":1,\"38\":1}}],[\"嵌入表达式\",{\"1\":{\"305\":2}}],[\"嵌套时先销毁外层组件\",{\"1\":{\"576\":1}}],[\"嵌套函数式组件\",{\"1\":{\"272\":1}}],[\"嵌套路由\",{\"0\":{\"260\":1}}],[\"嵌套\",{\"0\":{\"208\":1},\"1\":{\"208\":2}}],[\"缓存路由组件\",{\"0\":{\"596\":1}}],[\"缓存\",{\"0\":{\"342\":1}}],[\"缓存函数\",{\"1\":{\"302\":1}}],[\"缓存这个过程\",{\"1\":{\"301\":1}}],[\"比较\",{\"1\":{\"534\":1}}],[\"比较算法\",{\"1\":{\"534\":1}}],[\"比较流行的有\",{\"1\":{\"461\":1}}],[\"比较判断的\",{\"1\":{\"368\":1}}],[\"比较数组和对象时比较的是引用地址\",{\"1\":{\"301\":1}}],[\"比如\",{\"1\":{\"66\":1,\"459\":1}}],[\"共享的只是状态逻辑而不是状态本身\",{\"1\":{\"297\":1}}],[\"抽取自定义\",{\"0\":{\"297\":1}}],[\"抽象组件并将\",{\"1\":{\"281\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"421\":1}}],[\"抽象类\",{\"0\":{\"89\":1,\"421\":1}}],[\"抽象方法必须由子类实现\",{\"1\":{\"421\":1}}],[\"抽象方法只能存在于抽象类中\",{\"1\":{\"88\":1}}],[\"抽象方法\",{\"0\":{\"88\":1}}],[\"能够解析\",{\"1\":{\"570\":1}}],[\"能够被断言为\",{\"1\":{\"451\":1}}],[\"能够更好地支持\",{\"1\":{\"366\":1}}],[\"能够提取重复逻辑降低耦合度\",{\"1\":{\"296\":1}}],[\"能够读取其他函数内部变量的函数\",{\"1\":{\"225\":1}}],[\"自身可以监测对象内部值的改变\",{\"1\":{\"622\":1}}],[\"自建的\",{\"1\":{\"344\":1}}],[\"自行构造\",{\"1\":{\"344\":1}}],[\"自定义ref\",{\"1\":{\"651\":1}}],[\"自定义指令\",{\"0\":{\"545\":1}}],[\"自定义键名=按键编码\",{\"1\":{\"522\":1}}],[\"自定义事件名=\",{\"1\":{\"502\":1}}],[\"自定义事件解绑了\",{\"1\":{\"498\":1,\"499\":1,\"500\":1}}],[\"自定义事件也可以使用修饰符\",{\"1\":{\"496\":1}}],[\"自定义错误页面\",{\"1\":{\"371\":1}}],[\"自定义异步\",{\"0\":{\"358\":1}}],[\"自定义\",{\"0\":{\"296\":1,\"298\":1,\"641\":1},\"1\":{\"298\":1,\"641\":1}}],[\"自动生成声明文件\",{\"0\":{\"466\":1}}],[\"自动添加半角双引号\",{\"1\":{\"204\":1}}],[\"自动\",{\"1\":{\"192\":1}}],[\"自动推断\",{\"1\":{\"117\":1}}],[\"翻译\",{\"1\":{\"293\":1}}],[\"忽略结果可以定义一个局部变量\",{\"1\":{\"290\":1}}],[\"终止操作可以通过第三方库\",{\"1\":{\"290\":1}}],[\"处理响应\",{\"0\":{\"350\":1}}],[\"处理开发环境两次调用\",{\"0\":{\"290\":1}}],[\"处理是不被支持的\",{\"1\":{\"243\":1}}],[\"假设要增加两个按钮\",{\"1\":{\"379\":1}}],[\"假设有下面这样一个场景\",{\"1\":{\"323\":1}}],[\"假设\",{\"1\":{\"289\":1}}],[\"被删除\",{\"1\":{\"658\":1}}],[\"被移除\",{\"1\":{\"658\":1}}],[\"被绑定的\",{\"1\":{\"553\":1}}],[\"被绑定元素插入父节点时调用\",{\"1\":{\"547\":1}}],[\"被淘汰了\",{\"1\":{\"459\":1}}],[\"被触发\",{\"1\":{\"387\":1}}],[\"被激活时\",{\"1\":{\"368\":1}}],[\"被调用之前\",{\"1\":{\"338\":1}}],[\"被多次调用了\",{\"1\":{\"323\":1}}],[\"被执行了多次\",{\"1\":{\"342\":1}}],[\"被执行\",{\"1\":{\"287\":1,\"338\":1,\"387\":1}}],[\"被点击时的链接\",{\"1\":{\"60\":1}}],[\"增加属性\",{\"1\":{\"631\":1}}],[\"增加一个内部对象\",{\"1\":{\"460\":1}}],[\"增加一个\",{\"1\":{\"287\":1}}],[\"增加了一层\",{\"1\":{\"18\":1}}],[\"确保状态以可预测的方式更新\",{\"1\":{\"328\":1}}],[\"确保元素出现在了\",{\"1\":{\"286\":1}}],[\"确定一个值是什么类型\",{\"1\":{\"220\":1}}],[\"确定原字符串是否匹配某个子字符串\",{\"1\":{\"216\":1}}],[\"先执行\",{\"1\":{\"640\":1}}],[\"先执行点击事件函数\",{\"1\":{\"521\":1}}],[\"先从dom根开始向下找到点击的元素\",{\"1\":{\"521\":1}}],[\"先创建\",{\"1\":{\"518\":1}}],[\"先复制一份数组\",{\"1\":{\"405\":1}}],[\"先修改数组\",{\"1\":{\"539\":1}}],[\"先修改\",{\"1\":{\"379\":1}}],[\"先渲染好界面再调用\",{\"1\":{\"286\":1}}],[\"先解析代码\",{\"1\":{\"213\":1}}],[\"依赖一个全局变量的声明文件\",{\"1\":{\"465\":1}}],[\"依赖随机值或者会导致副作用的代码\",{\"1\":{\"331\":1}}],[\"依赖\",{\"0\":{\"287\":1},\"1\":{\"285\":1}}],[\"依次处理数组的每个成员最终累计为一个值\",{\"1\":{\"215\":1}}],[\"编译生成的虚拟节点\",{\"1\":{\"547\":1}}],[\"编译选项\",{\"1\":{\"460\":1}}],[\"编译器不知道\",{\"1\":{\"456\":1}}],[\"编译时的类型\",{\"1\":{\"453\":1}}],[\"编译后\",{\"1\":{\"415\":1}}],[\"编程式路由传递\",{\"1\":{\"385\":1}}],[\"编程式路由\",{\"0\":{\"381\":1,\"590\":1},\"1\":{\"385\":1}}],[\"编辑完成后点击提交\",{\"1\":{\"347\":1}}],[\"编辑和查看的状态通过\",{\"1\":{\"337\":1}}],[\"编写钩子\",{\"0\":{\"640\":1}}],[\"编写如下内容\",{\"1\":{\"613\":1}}],[\"编写声明文件\",{\"1\":{\"460\":1,\"462\":1,\"463\":1,\"464\":1}}],[\"编写计数器组件\",{\"0\":{\"335\":1}}],[\"编写一个\",{\"1\":{\"323\":1}}],[\"编写下面的\",{\"1\":{\"293\":1}}],[\"编写\",{\"0\":{\"285\":1,\"334\":1},\"1\":{\"285\":1,\"460\":1}}],[\"编码转为字符串\",{\"1\":{\"223\":1}}],[\"编码转为原来的值\",{\"1\":{\"223\":1}}],[\"编码中间必须插入一个转码环节\",{\"1\":{\"223\":1}}],[\"编码\",{\"1\":{\"223\":2}}],[\"编码的字符序列\",{\"1\":{\"120\":1}}],[\"很多时候需要修改一个变量的值来实现响应式\",{\"1\":{\"403\":1}}],[\"很多网站都有权限管理功能\",{\"1\":{\"399\":1}}],[\"很多事件处理器和状态\",{\"1\":{\"283\":1}}],[\"很难发现具体的原因\",{\"1\":{\"325\":1}}],[\"很有用\",{\"1\":{\"126\":1}}],[\"老版本\",{\"1\":{\"279\":1}}],[\"老版本使用冒号\",{\"1\":{\"101\":1}}],[\"显式传递状态和事件处理器\",{\"1\":{\"283\":1}}],[\"显式传递\",{\"1\":{\"276\":1}}],[\"显示的时间要用\",{\"1\":{\"360\":1}}],[\"显示\",{\"1\":{\"197\":1,\"390\":1}}],[\"显示不同大小的图像\",{\"1\":{\"196\":1}}],[\"显示一致范围内的一个值\",{\"1\":{\"193\":1}}],[\"显示文本和图像\",{\"1\":{\"38\":1}}],[\"柯里化后\",{\"1\":{\"275\":1}}],[\"柯里化是将一个接收多个参数的函数转为一个接收单一参数但是返回值是一个函数\",{\"1\":{\"275\":1}}],[\"普通函数\",{\"1\":{\"275\":1}}],[\"普通函数内部的\",{\"1\":{\"159\":1}}],[\"向下的这个过程称为捕获\",{\"1\":{\"521\":1}}],[\"向下传递\",{\"1\":{\"281\":1}}],[\"向下传播\",{\"1\":{\"274\":1}}],[\"向代理目标发送请求\",{\"1\":{\"485\":1}}],[\"向指定节点渲染包含\",{\"1\":{\"477\":1}}],[\"向其所在节点渲染文本内容\",{\"1\":{\"476\":1}}],[\"向数组中添加\",{\"1\":{\"405\":1}}],[\"向上跳转会跳转到\",{\"1\":{\"381\":1}}],[\"向上传播\",{\"1\":{\"274\":1}}],[\"向组件传递\",{\"0\":{\"318\":1}}],[\"向\",{\"1\":{\"301\":1,\"546\":1}}],[\"哪些保持全局化\",{\"1\":{\"269\":1}}],[\"哪些是自己的\",{\"1\":{\"224\":1}}],[\"引用\",{\"0\":{\"568\":1},\"1\":{\"460\":1,\"463\":1}}],[\"引用之前定义的常数枚举成员\",{\"1\":{\"414\":1}}],[\"引用比较的简便性\",{\"1\":{\"330\":1}}],[\"引用后实际的类名将会有一个随机后缀\",{\"1\":{\"269\":1}}],[\"引入不加后缀名会404\",{\"1\":{\"633\":1}}],[\"引入后\",{\"1\":{\"460\":1,\"462\":1}}],[\"引入后就可以使用全局变量\",{\"1\":{\"456\":1}}],[\"引入本地的\",{\"1\":{\"460\":1}}],[\"引入此中间件后\",{\"1\":{\"359\":1}}],[\"引入\",{\"0\":{\"542\":1},\"1\":{\"306\":1,\"460\":1,\"613\":1}}],[\"引入相关依赖\",{\"0\":{\"292\":1}}],[\"引入一个中间件\",{\"1\":{\"252\":1}}],[\"见上文\",{\"1\":{\"383\":1}}],[\"见\",{\"1\":{\"269\":1}}],[\"解绑所有自定义事件\",{\"1\":{\"502\":1}}],[\"解绑所有事件\",{\"0\":{\"500\":1}}],[\"解绑一个事件\",{\"1\":{\"502\":1}}],[\"解绑的是所有自定义事件\",{\"1\":{\"500\":1}}],[\"解绑多个事件\",{\"0\":{\"499\":1},\"1\":{\"502\":1}}],[\"解绑单个事件\",{\"0\":{\"498\":1}}],[\"解绑自定义事件\",{\"0\":{\"497\":1},\"1\":{\"502\":1,\"530\":1}}],[\"解析守卫就被调用\",{\"1\":{\"606\":1}}],[\"解析时会创建响应组件的实例对象\",{\"1\":{\"492\":1}}],[\"解析配置之后增加下面的配置\",{\"1\":{\"269\":1}}],[\"解决\",{\"1\":{\"405\":1}}],[\"解释一下上面的主要内容\",{\"1\":{\"344\":1}}],[\"解构\",{\"1\":{\"185\":1}}],[\"解构赋值时\",{\"1\":{\"188\":1}}],[\"解构赋值在左边括号中可以指定默认值\",{\"1\":{\"185\":1}}],[\"解构赋值的拷贝同样是浅拷贝\",{\"1\":{\"167\":1}}],[\"解构赋值\",{\"1\":{\"167\":1}}],[\"交给组件内的其他组件或者标签\",{\"1\":{\"362\":1}}],[\"交给开发者维护\",{\"1\":{\"269\":1}}],[\"交叉轴的终点对齐\",{\"1\":{\"45\":1}}],[\"交叉轴的起点对齐\",{\"1\":{\"45\":1}}],[\"写成\",{\"1\":{\"587\":1}}],[\"写成对象形式\",{\"1\":{\"578\":1}}],[\"写法\",{\"1\":{\"507\":2,\"554\":1}}],[\"写法二虽然复杂\",{\"1\":{\"496\":1}}],[\"写法二\",{\"1\":{\"496\":1,\"578\":1}}],[\"写法一\",{\"1\":{\"496\":1,\"578\":1}}],[\"写在\",{\"1\":{\"483\":1}}],[\"写在前面则后面的代码为不可达\",{\"1\":{\"267\":1}}],[\"写\",{\"1\":{\"467\":1,\"515\":1}}],[\"写起来很长\",{\"1\":{\"319\":1}}],[\"写的\",{\"1\":{\"267\":1}}],[\"写入\",{\"1\":{\"257\":2}}],[\"首选右侧的方法\",{\"1\":{\"405\":1}}],[\"首字母要大写以表示这是一个组件\",{\"1\":{\"272\":1}}],[\"首字母大写\",{\"1\":{\"65\":1,\"490\":1}}],[\"首先在组件中引入\",{\"1\":{\"616\":1,\"617\":1}}],[\"首先需要安装\",{\"1\":{\"559\":1}}],[\"首先需要指定一个\",{\"1\":{\"334\":1}}],[\"首先将对应的属性值渲染到表单中\",{\"1\":{\"517\":1}}],[\"首先获取标签的属性\",{\"1\":{\"517\":1}}],[\"首先对形如\",{\"1\":{\"517\":1}}],[\"首先我们需要一个\",{\"1\":{\"517\":1}}],[\"首先我们来编写一个\",{\"1\":{\"337\":1}}],[\"首先编写一个简单的\",{\"1\":{\"517\":1}}],[\"首先编写搜索组件\",{\"1\":{\"407\":1}}],[\"首先修改之前的\",{\"1\":{\"461\":1}}],[\"首先修改一下\",{\"1\":{\"460\":1}}],[\"首先新建一个本地\",{\"1\":{\"460\":1}}],[\"首先通过\",{\"1\":{\"395\":1}}],[\"首先\",{\"1\":{\"378\":1,\"399\":1}}],[\"首先定义\",{\"1\":{\"380\":1}}],[\"首先定义对\",{\"1\":{\"379\":1}}],[\"首先定义路由规则\",{\"1\":{\"366\":1}}],[\"首先定义一个\",{\"1\":{\"356\":1,\"372\":1}}],[\"首先来修改一下之前\",{\"1\":{\"358\":1}}],[\"首先来创建一个\",{\"1\":{\"344\":1}}],[\"首先构造一个导航组件\",{\"1\":{\"381\":1}}],[\"首先构造一个\",{\"1\":{\"353\":1,\"365\":1}}],[\"首先创建一个表单\",{\"1\":{\"379\":1}}],[\"首先创建一个文章\",{\"1\":{\"345\":1}}],[\"首先创建范式化\",{\"1\":{\"343\":1}}],[\"首先是不使用\",{\"1\":{\"333\":1,\"403\":1}}],[\"首先要定义\",{\"1\":{\"269\":1}}],[\"首先要安装\",{\"1\":{\"267\":1}}],[\"首先执行下面的命令\",{\"1\":{\"269\":1}}],[\"首先安装依赖\",{\"1\":{\"333\":1}}],[\"首先安装\",{\"1\":{\"269\":1,\"465\":1}}],[\"脚手架配置代理\",{\"0\":{\"484\":1}}],[\"脚手架\",{\"0\":{\"558\":1},\"1\":{\"266\":1,\"490\":1,\"613\":1}}],[\"路由守卫\",{\"0\":{\"601\":1}}],[\"路由元信息\",{\"0\":{\"600\":1}}],[\"路由配置中使用配置项\",{\"1\":{\"583\":1}}],[\"路由的路径\",{\"1\":{\"401\":1}}],[\"路由的\",{\"1\":{\"401\":1}}],[\"路由规则还有很多配置项\",{\"1\":{\"370\":1}}],[\"路由\",{\"0\":{\"259\":1},\"1\":{\"282\":1}}],[\"路径定义为\",{\"1\":{\"605\":1}}],[\"路径对象\",{\"1\":{\"581\":1}}],[\"路径要变为请求代理服务器地址而不是被代理服务器\",{\"1\":{\"487\":1}}],[\"路径\",{\"1\":{\"190\":1}}],[\"消息订阅与发布是一种解决通信问题的思想\",{\"1\":{\"540\":1}}],[\"消息订阅与发布\",{\"0\":{\"540\":1}}],[\"消息头中过滤掉\",{\"1\":{\"243\":1}}],[\"消除字符串头部和尾部的空格\",{\"1\":{\"183\":1}}],[\"映射为\",{\"1\":{\"243\":1}}],[\"绕过\",{\"1\":{\"243\":1}}],[\"逗号运算符\",{\"1\":{\"241\":1}}],[\"让一个响应式数据变为只读\",{\"1\":{\"649\":2}}],[\"让应用有更好体验\",{\"1\":{\"646\":1}}],[\"让组件接收外部传来的数据\",{\"1\":{\"563\":1}}],[\"让\",{\"1\":{\"286\":1}}],[\"让子类的原型指向父类的原型\",{\"1\":{\"239\":1}}],[\"让其值等于\",{\"1\":{\"59\":1}}],[\"继承\",{\"1\":{\"428\":1}}],[\"继承的步骤\",{\"1\":{\"239\":1}}],[\"继续进行组件的渲染\",{\"1\":{\"313\":1}}],[\"继续执行\",{\"1\":{\"138\":1}}],[\"原理角度\",{\"1\":{\"632\":1}}],[\"原理示例\",{\"1\":{\"631\":1}}],[\"原理\",{\"1\":{\"630\":1,\"631\":1}}],[\"原因分析\",{\"1\":{\"534\":1}}],[\"原因就是每次传入的数组都是不一样的\",{\"1\":{\"301\":1}}],[\"原有的鼠标点击事件等不会解绑\",{\"1\":{\"500\":1}}],[\"原型上的属性\",{\"1\":{\"493\":1}}],[\"原型对象添加属性实现创建总线\",{\"1\":{\"525\":1}}],[\"原型对象的作用就是定义所有实例对象共享的属性和方法\",{\"1\":{\"239\":1}}],[\"原型对象\",{\"1\":{\"239\":1}}],[\"原始数据类型\",{\"0\":{\"437\":1}}],[\"原函数接收两个参数\",{\"1\":{\"275\":1}}],[\"原数组\",{\"1\":{\"215\":1}}],[\"原数组不变\",{\"1\":{\"215\":2}}],[\"绑定事件\",{\"1\":{\"554\":1,\"641\":1}}],[\"绑定值为\",{\"1\":{\"547\":1}}],[\"绑定的数据类型不是数组\",{\"1\":{\"512\":1}}],[\"绑定的是\",{\"1\":{\"512\":1}}],[\"绑定的就是\",{\"1\":{\"512\":2}}],[\"绑定的原生事件解绑自定义事件后仍然有效\",{\"1\":{\"501\":1}}],[\"绑定多个多选框\",{\"1\":{\"510\":1}}],[\"绑定单选框\",{\"1\":{\"510\":1}}],[\"绑定自定义事件时\",{\"1\":{\"502\":1}}],[\"绑定自定义事件\",{\"0\":{\"496\":1},\"1\":{\"502\":2,\"530\":1}}],[\"绑定到某个对象然后返回一个新函数\",{\"1\":{\"238\":1}}],[\"绑定\",{\"0\":{\"481\":1,\"482\":1,\"483\":1},\"1\":{\"238\":1,\"510\":2}}],[\"避免使用\",{\"1\":{\"405\":1}}],[\"避免使用左侧的方法\",{\"1\":{\"405\":1}}],[\"避免重复逻辑\",{\"1\":{\"331\":1}}],[\"避免全局安装\",{\"1\":{\"266\":1}}],[\"避免回调函数中的\",{\"1\":{\"238\":1}}],[\"避免数组处理方法中的\",{\"1\":{\"238\":1}}],[\"避免多层\",{\"1\":{\"238\":1}}],[\"开启深度监视\",{\"1\":{\"622\":1}}],[\"开启\",{\"1\":{\"589\":2}}],[\"开启大小写敏感\",{\"1\":{\"375\":1}}],[\"开发环境中\",{\"1\":{\"661\":1}}],[\"开发环境中控制台会输出报错\",{\"1\":{\"322\":1}}],[\"开发工具集\",{\"1\":{\"332\":1}}],[\"开发者插件可以查看\",{\"1\":{\"330\":1}}],[\"开头\",{\"1\":{\"296\":1}}],[\"开头的路径都会被\",{\"1\":{\"374\":1}}],[\"开头的方法都是\",{\"1\":{\"296\":1}}],[\"开头的元素\",{\"1\":{\"64\":1}}],[\"开始按钮\",{\"1\":{\"360\":1}}],[\"开始\",{\"1\":{\"281\":1}}],[\"开始执行构造函数内部的代码\",{\"1\":{\"237\":1}}],[\"面向对象编程\",{\"0\":{\"236\":1}}],[\"阻止事件冒泡\",{\"1\":{\"521\":1}}],[\"阻止事件继续传播\",{\"1\":{\"231\":1}}],[\"阻止默认事件\",{\"1\":{\"521\":1}}],[\"阻止同一个事件的其他监听函数被调用\",{\"1\":{\"231\":1}}],[\"由两个函数编写\",{\"1\":{\"334\":1}}],[\"由父节点的监听函数同一处理多个子元素的事件称为事件的代理\",{\"1\":{\"230\":1}}],[\"由于使用单一状态树\",{\"1\":{\"619\":1}}],[\"由于使用不可变的方式更新状态\",{\"1\":{\"330\":1}}],[\"由于渲染同样的组件\",{\"1\":{\"605\":1}}],[\"由于渲染会触发\",{\"1\":{\"286\":1}}],[\"由于请求时要加前缀而服务器真实路径没有前缀\",{\"1\":{\"486\":1}}],[\"由于全局变量不支持通过\",{\"1\":{\"465\":1}}],[\"由于事先不知道它是哪种类型\",{\"1\":{\"428\":1}}],[\"由于箭头函数中\",{\"1\":{\"406\":1}}],[\"由于子路由会被渲染到父组件中使用\",{\"1\":{\"399\":1}}],[\"由于直接使用原生\",{\"1\":{\"353\":1}}],[\"由于在\",{\"1\":{\"340\":1}}],[\"由于这里我们使用了\",{\"1\":{\"334\":1}}],[\"由于默认命名空间是\",{\"1\":{\"207\":1}}],[\"由于数组是特殊的对象\",{\"1\":{\"167\":1}}],[\"由于大括号被解释为代码块\",{\"1\":{\"159\":1}}],[\"由于大多数情况下\",{\"1\":{\"75\":1}}],[\"由于都是对象\",{\"1\":{\"118\":1}}],[\"由于\",{\"1\":{\"118\":1,\"188\":1,\"225\":1,\"275\":1,\"355\":1,\"379\":2,\"403\":1,\"522\":1,\"565\":1}}],[\"称为插槽\",{\"1\":{\"552\":1}}],[\"称为冒泡阶段\",{\"1\":{\"230\":1}}],[\"称为目标阶段\",{\"1\":{\"230\":1}}],[\"称为捕获阶段\",{\"1\":{\"230\":1}}],[\"移除过滤器\",{\"1\":{\"658\":1}}],[\"移除\",{\"1\":{\"658\":2}}],[\"移除事件处理函数和\",{\"1\":{\"379\":1}}],[\"移除添加的事件监听函数\",{\"1\":{\"229\":1}}],[\"移除监听函数\",{\"1\":{\"229\":1}}],[\"添加一个人员数组\",{\"1\":{\"618\":1}}],[\"添加一个事件监听器\",{\"1\":{\"229\":1}}],[\"添加方法\",{\"1\":{\"618\":1}}],[\"添加人员列表组件\",{\"1\":{\"618\":1}}],[\"添加全局指令\",{\"1\":{\"569\":1}}],[\"添加全局过滤器\",{\"1\":{\"569\":1}}],[\"添加属性\",{\"1\":{\"539\":1}}],[\"添加新人后进行\",{\"1\":{\"534\":1}}],[\"添加后\",{\"1\":{\"534\":1}}],[\"添加前\",{\"1\":{\"534\":1}}],[\"添加函数是将新人添加到原数组的头部\",{\"1\":{\"534\":1}}],[\"添加元素\",{\"1\":{\"405\":1}}],[\"添加\",{\"1\":{\"379\":1,\"511\":2,\"522\":1}}],[\"添加三个按钮\",{\"1\":{\"372\":1}}],[\"添加样式\",{\"1\":{\"368\":1}}],[\"添加到路由定义里\",{\"1\":{\"378\":1}}],[\"添加到\",{\"1\":{\"353\":1}}],[\"添加文章\",{\"1\":{\"337\":1}}],[\"添加清理函数\",{\"0\":{\"288\":1}}],[\"添加与获取元素\",{\"1\":{\"124\":1}}],[\"那就监视哪个属性\",{\"1\":{\"637\":1}}],[\"那就是\",{\"1\":{\"463\":1}}],[\"那样设置初始值\",{\"1\":{\"384\":1}}],[\"那样\",{\"1\":{\"366\":1}}],[\"那样通过事件处理器直接设置\",{\"1\":{\"323\":1}}],[\"那样引用\",{\"1\":{\"269\":1}}],[\"那个先下载结束就先执行\",{\"1\":{\"227\":1}}],[\"那么声明绑定的==顺序==决定了它们如何合并\",{\"1\":{\"658\":1}}],[\"那么默认为\",{\"1\":{\"583\":1}}],[\"那么默认情况下会包含\",{\"1\":{\"267\":1}}],[\"那么内部和混合中定义的都会保留\",{\"1\":{\"568\":1}}],[\"那么收集的就是每个\",{\"1\":{\"512\":1}}],[\"那么收集的是\",{\"1\":{\"512\":1}}],[\"那么他就会被视为一个\",{\"1\":{\"465\":1}}],[\"那么我们就应该使用\",{\"1\":{\"459\":1}}],[\"那么我们定义的\",{\"1\":{\"368\":1}}],[\"那么它的初始值为\",{\"1\":{\"414\":1}}],[\"那么它就会因为无法获得初始值而报错\",{\"1\":{\"414\":1}}],[\"那么它们将按照定义的顺序运行\",{\"1\":{\"338\":1}}],[\"那么它们都是这个对象的引用\",{\"1\":{\"224\":1}}],[\"那么应该使用对象展开\",{\"1\":{\"404\":1}}],[\"那么不能写成\",{\"1\":{\"404\":1}}],[\"那么调用多少次\",{\"1\":{\"403\":1}}],[\"那么进行验证\",{\"1\":{\"399\":1}}],[\"那么必须要导航到此\",{\"1\":{\"395\":1}}],[\"那么组件的渲染会在接口响应结束后进行\",{\"1\":{\"390\":1}}],[\"那么传递的数据保存在\",{\"1\":{\"388\":1}}],[\"那么传递所有的状态和事件处理器会非常麻烦\",{\"1\":{\"283\":1}}],[\"那么数据会保存在\",{\"1\":{\"388\":1}}],[\"那么相对跳转就是相对于\",{\"1\":{\"381\":1}}],[\"那么此规则就不能设置\",{\"1\":{\"376\":1}}],[\"那么此链接不会有\",{\"1\":{\"368\":1}}],[\"那么上面\",{\"1\":{\"374\":1}}],[\"那么显示的应该是\",{\"1\":{\"371\":1}}],[\"那么访问子组件的\",{\"1\":{\"368\":1}}],[\"那么在浏览器还未渲染完成页面时\",{\"1\":{\"367\":1}}],[\"那么在定义\",{\"1\":{\"337\":1}}],[\"那么取消\",{\"1\":{\"351\":1}}],[\"那么通过指定第二个参数可以更新指定的缓存数据\",{\"1\":{\"351\":1}}],[\"那么根据\",{\"1\":{\"343\":1}}],[\"那么这种情况下\",{\"1\":{\"381\":1}}],[\"那么这样无意义的重复调用会影响性能\",{\"1\":{\"342\":1}}],[\"那么这个单独的\",{\"1\":{\"658\":1}}],[\"那么这个函数必须是纯函数\",{\"1\":{\"403\":1}}],[\"那么这个字段会是\",{\"1\":{\"401\":1}}],[\"那么这个\",{\"1\":{\"338\":1}}],[\"那么这个变量直到被使用时才会被赋值\",{\"1\":{\"144\":1}}],[\"那么需要自行编写\",{\"1\":{\"460\":1}}],[\"那么需要配置将对应的路由发送给\",{\"1\":{\"366\":1}}],[\"那么需要修改\",{\"1\":{\"339\":1}}],[\"那么需要通过\",{\"1\":{\"334\":1}}],[\"那么需要安装\",{\"1\":{\"268\":1}}],[\"那么就需要为\",{\"1\":{\"641\":1}}],[\"那么就必须用三斜线指令了\",{\"1\":{\"465\":1}}],[\"那么就必须先复制原来的对象或者数组\",{\"1\":{\"330\":1}}],[\"那么就会立即跳转到对应路由\",{\"1\":{\"399\":1}}],[\"那么就返回全部\",{\"1\":{\"379\":1}}],[\"那么就可以简单的通过比较对象和数组的引用来判断状态是否已经改变了\",{\"1\":{\"330\":1}}],[\"那么各种事件的处理函数可能会不断增加\",{\"1\":{\"323\":1}}],[\"那么嵌套在其中的内容将不会被渲染\",{\"1\":{\"320\":1}}],[\"那么如果父组件不在自己返回的\",{\"1\":{\"320\":1}}],[\"那么每次重新渲染得到的变量必然和上一次的不同\",{\"1\":{\"301\":1}}],[\"那么每次修改这个\",{\"1\":{\"287\":1}}],[\"那么清理函数要么终止上次的获取操作\",{\"1\":{\"290\":1}}],[\"那么清理函数中应该退订事件\",{\"1\":{\"290\":1}}],[\"那么所有的子组件都能获取到状态和\",{\"1\":{\"283\":1}}],[\"那么文件后缀名应该是\",{\"1\":{\"267\":1}}],[\"那么可以自动生成声明文件\",{\"1\":{\"466\":1}}],[\"那么可以组合多个声明语句\",{\"1\":{\"459\":1}}],[\"那么可以修改数组内的元素\",{\"1\":{\"330\":1}}],[\"那么可以修改对象的属性\",{\"1\":{\"330\":1}}],[\"那么可以在指定\",{\"1\":{\"379\":1}}],[\"那么可以在\",{\"1\":{\"300\":1}}],[\"那么可以在这些中间组件中接收\",{\"1\":{\"281\":1}}],[\"那么可以将从\",{\"1\":{\"297\":1}}],[\"那么可以使用只读属性\",{\"1\":{\"441\":1}}],[\"那么可以使用可选属性\",{\"1\":{\"441\":1}}],[\"那么可以使用\",{\"1\":{\"276\":1,\"368\":3,\"378\":1}}],[\"那么可以使用函数柯里化\",{\"1\":{\"275\":1}}],[\"那么可以通过在事件名称末尾加入\",{\"1\":{\"274\":1}}],[\"那么可以先使用\",{\"1\":{\"266\":1}}],[\"那么可以不指定默认值\",{\"1\":{\"99\":1}}],[\"那么将会报错\",{\"1\":{\"561\":1}}],[\"那么将会进行替换\",{\"1\":{\"169\":1}}],[\"那么将调用\",{\"1\":{\"313\":1}}],[\"那么将不会执行\",{\"1\":{\"287\":1}}],[\"那么将使用\",{\"1\":{\"245\":1}}],[\"那么新出来的位置上都是空的\",{\"1\":{\"226\":1}}],[\"那么返回变量名\",{\"1\":{\"225\":1}}],[\"那么赋值将依然在原位置运行\",{\"1\":{\"213\":1}}],[\"那么目标对象拷贝得到的是这个对象的引用\",{\"1\":{\"169\":1}}],[\"那么值相同的对象可能会被看作不同的键\",{\"1\":{\"161\":1}}],[\"那么\",{\"1\":{\"157\":1,\"301\":1,\"302\":1,\"305\":1,\"338\":1,\"343\":1,\"380\":1,\"385\":1,\"391\":1,\"512\":1}}],[\"那么整个\",{\"1\":{\"152\":1}}],[\"那么会依照类型推论的规则推断出是什么类型\",{\"1\":{\"439\":1}}],[\"那么会跳转到一个错误页面\",{\"1\":{\"371\":1}}],[\"那么会先执行这个函数再复制而不是复制这个函数\",{\"1\":{\"169\":1}}],[\"那么会执行\",{\"1\":{\"94\":1}}],[\"那么会相对于\",{\"1\":{\"54\":1}}],[\"那么子类必须调用父类的一个构造函数\",{\"1\":{\"79\":1}}],[\"那么只会有一个默认无参数的构造函数\",{\"1\":{\"77\":1}}],[\"那么只会选择同时有这两个类的元素\",{\"1\":{\"64\":1}}],[\"闭包还可以封装对象的私有属性和私有方法\",{\"1\":{\"225\":1}}],[\"闭包使得内部变量记住上一次调用时的运算结果\",{\"1\":{\"225\":1}}],[\"闭包将函数内部和函数外部连接起来一座桥梁\",{\"1\":{\"225\":1}}],[\"闭包\",{\"1\":{\"225\":1}}],[\"`删除了$\",{\"1\":{\"631\":1}}],[\"`修改了$\",{\"1\":{\"631\":1}}],[\"`读取了$\",{\"1\":{\"631\":1}}],[\"`i\",{\"1\":{\"470\":1}}],[\"`item$\",{\"1\":{\"314\":1}}],[\"`number`\",{\"1\":{\"434\":1}}],[\"`message\",{\"1\":{\"379\":2}}],[\"`showing\",{\"1\":{\"372\":1,\"374\":1}}],[\"`state\",{\"1\":{\"354\":1}}],[\"`view\",{\"1\":{\"337\":1,\"344\":1,\"345\":1,\"351\":1}}],[\"`$\",{\"1\":{\"323\":1,\"324\":1,\"337\":1,\"338\":1,\"350\":2,\"379\":2,\"446\":1}}],[\"`exception\",{\"1\":{\"245\":1}}],[\"`值\",{\"1\":{\"224\":1}}],[\"`\",{\"1\":{\"224\":2,\"245\":1,\"314\":1,\"323\":1,\"324\":1,\"337\":2,\"338\":1,\"344\":7,\"345\":1,\"349\":2,\"351\":3,\"354\":1,\"358\":5,\"359\":5,\"372\":1,\"374\":1,\"379\":4,\"446\":1,\"470\":1,\"489\":4,\"491\":8,\"578\":2,\"631\":3}}],[\"`键\",{\"1\":{\"224\":1}}],[\"查看按键编码\",{\"1\":{\"522\":1}}],[\"查看按键名\",{\"1\":{\"522\":1}}],[\"查看一个对象本身的所有属性\",{\"1\":{\"224\":1}}],[\"查找的速度可能会受到影响\",{\"1\":{\"343\":1}}],[\"查询\",{\"0\":{\"344\":1},\"1\":{\"197\":1}}],[\"查询参数\",{\"1\":{\"190\":1}}],[\"修改属性等操作\",{\"1\":{\"631\":1}}],[\"修改进行拦截\",{\"1\":{\"630\":1}}],[\"修改数组内容可以直接通过下标修改\",{\"1\":{\"628\":1}}],[\"修改路由配置\",{\"1\":{\"586\":1}}],[\"修改默认配置\",{\"0\":{\"561\":1}}],[\"修改对象属性时调用\",{\"1\":{\"516\":1}}],[\"修改obj的x属性值了\",{\"1\":{\"515\":1}}],[\"修改一下\",{\"1\":{\"460\":1}}],[\"修改一个变量\",{\"1\":{\"224\":1}}],[\"修改原数组\",{\"1\":{\"405\":1}}],[\"修改原型对象时一般要同时修改\",{\"1\":{\"239\":1}}],[\"修改上面\",{\"1\":{\"373\":1}}],[\"修改之前的\",{\"1\":{\"342\":1}}],[\"修改之前的事件处理函数\",{\"1\":{\"324\":1}}],[\"修改创建文章的组件\",{\"1\":{\"340\":1}}],[\"修改\",{\"1\":{\"225\":1,\"269\":1,\"270\":1,\"323\":1,\"330\":1,\"337\":1,\"338\":2,\"345\":1,\"360\":1,\"366\":1,\"372\":1,\"393\":1,\"403\":1,\"460\":1,\"462\":1,\"463\":1,\"464\":1,\"465\":1,\"466\":2,\"522\":1,\"627\":1,\"645\":1}}],[\"修饰符对象为\",{\"1\":{\"547\":1}}],[\"修饰符或\",{\"1\":{\"502\":1}}],[\"修饰符和readonly还可以使用在构造函数参数中\",{\"1\":{\"419\":1}}],[\"修饰符\",{\"0\":{\"418\":1,\"511\":1},\"1\":{\"501\":1,\"502\":1,\"511\":3,\"522\":1,\"658\":1}}],[\"修饰的属性或方法是受保护的\",{\"1\":{\"418\":1}}],[\"修饰的属性或方法是私有的\",{\"1\":{\"418\":1}}],[\"修饰的属性或方法是公有的\",{\"1\":{\"418\":1}}],[\"修饰的情况下对象属性仍然可变\",{\"1\":{\"145\":1}}],[\"修饰的是对象\",{\"1\":{\"145\":1}}],[\"修饰且在声明时就进行了初始化\",{\"1\":{\"144\":1}}],[\"码字符转为\",{\"1\":{\"223\":1}}],[\"任意类型可以断言为\",{\"1\":{\"452\":1}}],[\"任意值\",{\"0\":{\"438\":1}}],[\"任意值转为\",{\"1\":{\"223\":1}}],[\"任何修改age属性值的尝试都会走向set\",{\"1\":{\"514\":1}}],[\"任何获取age属性值的尝试都会走向get方法\",{\"1\":{\"514\":1}}],[\"任何类型都可以被断言为\",{\"1\":{\"451\":1}}],[\"任何具有\",{\"1\":{\"161\":1}}],[\"任何定义了遍历器接口的对象都可以使用扩展运算符转为真正的数组\",{\"1\":{\"147\":1}}],[\"导航故障\",{\"0\":{\"610\":1}}],[\"导航离开该组件的对应路由时调用\",{\"1\":{\"605\":1}}],[\"导航守卫是应用在目标上的\",{\"1\":{\"601\":1}}],[\"导航到组件时获取数据\",{\"0\":{\"378\":1}}],[\"导入另一个声明文件中的类型之外\",{\"1\":{\"465\":1}}],[\"导入后\",{\"1\":{\"460\":1,\"464\":1}}],[\"导入\",{\"1\":{\"460\":1,\"461\":3,\"465\":1}}],[\"导致导入\",{\"1\":{\"613\":1}}],[\"导致页面有问题\",{\"1\":{\"535\":1}}],[\"导致页面效果正常\",{\"1\":{\"535\":1}}],[\"导致状态的更新不会立即渲染\",{\"1\":{\"406\":1}}],[\"导致结果为\",{\"1\":{\"222\":1}}],[\"导出的类型声明才能被导入\",{\"1\":{\"463\":1}}],[\"导出\",{\"1\":{\"27\":1,\"460\":2}}],[\"位浮点数形式储存\",{\"1\":{\"222\":1}}],[\"位非\",{\"1\":{\"130\":1}}],[\"概述\",{\"0\":{\"220\":1}}],[\"四舍五入\",{\"1\":{\"217\":1}}],[\"四种链接状态\",{\"1\":{\"60\":1}}],[\"累积变量\",{\"1\":{\"215\":1}}],[\"满足条件的成员组成一个新数组返回\",{\"1\":{\"215\":1}}],[\"传参\",{\"1\":{\"406\":1}}],[\"传输的数据保存在这里\",{\"1\":{\"388\":1}}],[\"传输的数据\",{\"1\":{\"388\":1}}],[\"传给指令的参数\",{\"1\":{\"547\":1}}],[\"传给\",{\"1\":{\"334\":1,\"348\":1}}],[\"传入函数的情况下仍然有\",{\"1\":{\"359\":1}}],[\"传入\",{\"1\":{\"344\":1,\"602\":1}}],[\"传入一个对象做参数\",{\"1\":{\"238\":1}}],[\"传入一个函数做参数\",{\"1\":{\"215\":1}}],[\"传入一个函数自定义排序方式\",{\"1\":{\"215\":1}}],[\"传入两个参数时\",{\"1\":{\"225\":1}}],[\"传入的是原始值地址\",{\"1\":{\"225\":1}}],[\"传递的数据\",{\"1\":{\"388\":1}}],[\"传递的那个\",{\"1\":{\"387\":1}}],[\"传递的参数都将变成\",{\"1\":{\"586\":1}}],[\"传递的参数既可以是\",{\"1\":{\"15\":1}}],[\"传递的参数只能是\",{\"1\":{\"15\":1}}],[\"传递数据\",{\"1\":{\"502\":1}}],[\"传递数据时\",{\"1\":{\"385\":1}}],[\"传递数据那么必须手动设置\",{\"1\":{\"379\":1}}],[\"传递参数\",{\"0\":{\"382\":1,\"564\":1},\"1\":{\"584\":1}}],[\"传递一个整数做参数\",{\"1\":{\"595\":1}}],[\"传递一个参数对象\",{\"1\":{\"592\":1}}],[\"传递一个\",{\"1\":{\"367\":1}}],[\"传递给子组件\",{\"1\":{\"408\":1}}],[\"传递给两个组件\",{\"1\":{\"407\":1}}],[\"传递给\",{\"1\":{\"397\":1}}],[\"传递给了\",{\"1\":{\"362\":1,\"403\":1}}],[\"传递给父类构造函数的参数不能使用\",{\"1\":{\"79\":1}}],[\"传递到另一个\",{\"1\":{\"298\":1}}],[\"传递当前登录的用户的信息\",{\"1\":{\"282\":1}}],[\"传递\",{\"0\":{\"383\":1,\"384\":1,\"385\":1},\"1\":{\"281\":1,\"283\":1,\"385\":4}}],[\"传递方式是传址传递\",{\"1\":{\"225\":1}}],[\"传递方式是值传递\",{\"1\":{\"225\":1}}],[\"删除的内容为\",{\"1\":{\"631\":1}}],[\"删除的功能\",{\"1\":{\"323\":1}}],[\"删除属性\",{\"1\":{\"630\":1}}],[\"删除\",{\"1\":{\"522\":1,\"631\":1}}],[\"删除元素\",{\"1\":{\"405\":2}}],[\"删除文章时就会触发对应\",{\"1\":{\"345\":1}}],[\"删除和更新方法\",{\"1\":{\"343\":1}}],[\"删除任务的\",{\"1\":{\"323\":1}}],[\"删除或者重新排序时发生问题\",{\"1\":{\"306\":1}}],[\"删除成功返回\",{\"1\":{\"224\":1}}],[\"删除对象的属性\",{\"1\":{\"224\":1}}],[\"删除原数组的一部分成员\",{\"1\":{\"215\":1}}],[\"删除线\",{\"1\":{\"204\":1}}],[\"包或者\",{\"1\":{\"463\":2}}],[\"包或\",{\"0\":{\"463\":1},\"1\":{\"463\":1,\"465\":1}}],[\"包的声明文件\",{\"1\":{\"461\":1}}],[\"包的声明文件中\",{\"1\":{\"460\":1}}],[\"包的声明文件与全局变量的声明文件有很大区别\",{\"1\":{\"460\":1}}],[\"包的声明文件有多种写法\",{\"1\":{\"460\":1}}],[\"包的声明文件可能存在于两个地方\",{\"1\":{\"460\":1}}],[\"包绑定在一起\",{\"1\":{\"460\":1}}],[\"包\",{\"0\":{\"460\":1},\"1\":{\"460\":2}}],[\"包声明文件\",{\"1\":{\"416\":1}}],[\"包中的\",{\"1\":{\"344\":1,\"460\":1}}],[\"包裹的组件中\",{\"1\":{\"646\":1}}],[\"包裹起来\",{\"1\":{\"306\":1}}],[\"包裹\",{\"1\":{\"305\":1}}],[\"包括生命周期钩子进行封装\",{\"1\":{\"641\":1}}],[\"包括属性值的读写\",{\"1\":{\"631\":1}}],[\"包括不会影响结果的值的内容\",{\"1\":{\"624\":1}}],[\"包括调用和赋值\",{\"1\":{\"506\":1}}],[\"包括修改样式\",{\"1\":{\"362\":1}}],[\"包括数组\",{\"1\":{\"317\":1}}],[\"包括由于溢出导致在视线外的部分\",{\"1\":{\"314\":1}}],[\"包括\",{\"1\":{\"233\":1,\"344\":1,\"356\":1}}],[\"包括自己\",{\"1\":{\"222\":1}}],[\"包括在返回值中\",{\"1\":{\"215\":1}}],[\"包含组件外部传递过来\",{\"1\":{\"633\":2}}],[\"包含组件标签上传递的全部属性\",{\"1\":{\"318\":1}}],[\"包含删除和退格\",{\"1\":{\"522\":1}}],[\"包含很多子属性\",{\"1\":{\"459\":1}}],[\"包含多个内容\",{\"1\":{\"351\":1}}],[\"包含多个字体名称作为备选\",{\"1\":{\"47\":1}}],[\"包含\",{\"1\":{\"344\":1,\"389\":1,\"547\":1,\"569\":1}}],[\"包含就返回\",{\"1\":{\"224\":1}}],[\"包含一组列的定义\",{\"1\":{\"203\":1}}],[\"包含大小写\",{\"1\":{\"190\":1}}],[\"包含内边距\",{\"1\":{\"36\":1}}],[\"颠倒排列数组元素\",{\"1\":{\"215\":1}}],[\"直接通过下标修改数组\",{\"1\":{\"630\":1}}],[\"直接修改\",{\"1\":{\"627\":1,\"628\":2}}],[\"直接写成函数\",{\"1\":{\"502\":1}}],[\"直接上代码\",{\"1\":{\"491\":1}}],[\"直接扩展全局变量\",{\"0\":{\"462\":1}}],[\"直接查找单个元素的方法而不需要检查所有其他项\",{\"1\":{\"343\":1}}],[\"直接访问\",{\"1\":{\"306\":1}}],[\"直接运行包\",{\"1\":{\"266\":1}}],[\"直接使用之前已经渲染过的真实\",{\"1\":{\"535\":1}}],[\"直接使用\",{\"1\":{\"210\":1}}],[\"直到被捕获为止\",{\"1\":{\"178\":1}}],[\"直到找出第一个返回值为\",{\"1\":{\"148\":1}}],[\"直到视口中遇到给定的偏移位置为止\",{\"1\":{\"54\":1}}],[\"某些版本对\",{\"1\":{\"209\":1}}],[\"某个组织的联系方式\",{\"1\":{\"204\":1}}],[\"某个方法前添加星号就表示这个方法是一个\",{\"1\":{\"153\":1}}],[\"有些值不应被设置为响应式的\",{\"1\":{\"650\":1}}],[\"有点像\",{\"1\":{\"637\":1}}],[\"有两种方式\",{\"1\":{\"627\":1}}],[\"有两种写法\",{\"1\":{\"518\":2,\"616\":1,\"617\":2}}],[\"有四种写法\",{\"1\":{\"616\":1}}],[\"有如下页面\",{\"1\":{\"536\":1}}],[\"有\",{\"1\":{\"387\":2}}],[\"有很多方法可以传递\",{\"1\":{\"385\":1}}],[\"有以下两种方法\",{\"1\":{\"340\":1}}],[\"有以下取值\",{\"1\":{\"269\":1}}],[\"有时候希望两个组件的状态始终同步更改\",{\"1\":{\"407\":1}}],[\"有时候需要在组件中获取当前路由的一些信息\",{\"1\":{\"386\":1}}],[\"有时父组件希望向子组件传递\",{\"1\":{\"402\":1}}],[\"有时\",{\"1\":{\"285\":1}}],[\"有时需要将动态内容嵌入国际化文本中\",{\"1\":{\"208\":1}}],[\"有一个按钮列表\",{\"1\":{\"275\":1}}],[\"有的数据可能必须要在页面渲染前处理\",{\"1\":{\"394\":1}}],[\"有的事件具有默认的行为\",{\"1\":{\"274\":1}}],[\"有的库可能是\",{\"1\":{\"267\":1}}],[\"有五个不同的位置值\",{\"1\":{\"54\":1}}],[\"偶数\",{\"1\":{\"208\":1}}],[\"奇数\",{\"1\":{\"208\":1}}],[\"国际化文件中也可以嵌套其他国际化文本\",{\"1\":{\"208\":1}}],[\"国际化文本会有一些差异\",{\"1\":{\"208\":1}}],[\"国际化框架中的一个功能\",{\"1\":{\"207\":1}}],[\"账户\",{\"1\":{\"207\":1}}],[\"客户端信息相关\",{\"0\":{\"253\":1}}],[\"客户\",{\"1\":{\"207\":1}}],[\"点击添加按钮后\",{\"1\":{\"534\":1}}],[\"点击后在刷新前不能再次点击\",{\"1\":{\"521\":1}}],[\"点击删除正常更新页面\",{\"1\":{\"380\":1}}],[\"点击这个表单的按钮\",{\"1\":{\"379\":1}}],[\"点击这个链接会打开一个虚拟网页\",{\"1\":{\"197\":1}}],[\"点击第二个按钮删除最后一个\",{\"1\":{\"379\":1}}],[\"点击第一个按钮创建一个\",{\"1\":{\"379\":1}}],[\"点击每个按钮跳转到\",{\"1\":{\"372\":1}}],[\"点击每个按钮要输出不同的内容\",{\"1\":{\"275\":1}}],[\"点击任意一个文章的收藏按钮都会改变对应文章的状态\",{\"1\":{\"351\":1}}],[\"点击按钮后添加一个人\",{\"1\":{\"534\":1}}],[\"点击按钮只会执行按钮的点击事件\",{\"1\":{\"521\":1}}],[\"点击按钮会发现操作同时影响了\",{\"1\":{\"405\":1}}],[\"点击按钮会发现页面没有渲染出对应的组件\",{\"1\":{\"366\":1}}],[\"点击按钮会创建一个\",{\"1\":{\"379\":1}}],[\"点击按钮聚焦到封装的\",{\"1\":{\"362\":1}}],[\"点击按钮聚焦到输入框中\",{\"1\":{\"361\":1}}],[\"点击按钮刷新数据\",{\"1\":{\"345\":1}}],[\"点击按钮来回切换这个值\",{\"1\":{\"337\":1}}],[\"点击按钮递增\",{\"1\":{\"313\":1}}],[\"点击\",{\"1\":{\"206\":1,\"208\":4,\"301\":1,\"368\":1}}],[\"划分文字单位\",{\"1\":{\"204\":1}}],[\"突出显示内容\",{\"1\":{\"204\":1}}],[\"各种输入\",{\"1\":{\"204\":1}}],[\"跨行\",{\"1\":{\"203\":1}}],[\"跨列\",{\"1\":{\"203\":1}}],[\"跨域方式加载外部脚本\",{\"1\":{\"197\":1}}],[\"往往放置在\",{\"1\":{\"202\":1}}],[\"放到\",{\"1\":{\"459\":1}}],[\"放置语音注释\",{\"1\":{\"204\":1}}],[\"放置页面或文档的导航信息\",{\"1\":{\"202\":1}}],[\"放置与网页\",{\"1\":{\"202\":1}}],[\"放在尾部\",{\"1\":{\"202\":1}}],[\"放在头部\",{\"1\":{\"202\":1}}],[\"放在\",{\"1\":{\"152\":1}}],[\"里增加一个枚举\",{\"1\":{\"460\":1}}],[\"里\",{\"1\":{\"460\":1}}],[\"里只传了一个入参\",{\"1\":{\"275\":1}}],[\"里不能包含另一个\",{\"1\":{\"202\":1}}],[\"里面\",{\"1\":{\"190\":1,\"199\":1,\"202\":1}}],[\"定制按键别名\",{\"1\":{\"522\":1}}],[\"定制折叠内容的标题\",{\"1\":{\"201\":1}}],[\"定时失效缓存\",{\"0\":{\"346\":1}}],[\"定时器回调函数\",{\"1\":{\"624\":1}}],[\"定时器或者任何副作用\",{\"1\":{\"326\":1}}],[\"定时器\",{\"0\":{\"212\":1}}],[\"定义离开过渡生效时的状态\",{\"1\":{\"658\":1}}],[\"定义离开过渡的开始状态\",{\"1\":{\"658\":1}}],[\"定义进入过渡的结束状态\",{\"1\":{\"658\":1}}],[\"定义进入过渡的开始状态\",{\"1\":{\"658\":1}}],[\"定义进入过渡生效时的状态\",{\"1\":{\"658\":1}}],[\"定义数据角度\",{\"1\":{\"632\":1}}],[\"定义如下\",{\"1\":{\"618\":1}}],[\"定义与计算属性类似\",{\"1\":{\"615\":1}}],[\"定义路由的时候可以配置\",{\"1\":{\"600\":1}}],[\"定义路由时设置的参数\",{\"1\":{\"401\":1}}],[\"定义插件\",{\"1\":{\"569\":1}}],[\"定义指令\",{\"0\":{\"546\":1}}],[\"定义两个组件\",{\"1\":{\"494\":1}}],[\"定义组件时就起名字\",{\"1\":{\"490\":1}}],[\"定义组件\",{\"1\":{\"489\":1}}],[\"定义和\",{\"1\":{\"461\":1}}],[\"定义时\",{\"1\":{\"459\":1}}],[\"定义的一个响应式数据的某个对象属性\",{\"1\":{\"636\":1}}],[\"定义的一个响应式数据中的某个属性\",{\"1\":{\"636\":1}}],[\"定义的数据\",{\"1\":{\"632\":2}}],[\"定义的响应式数据是深层次的\",{\"1\":{\"628\":1}}],[\"定义的变量必须和接口里的一样\",{\"1\":{\"441\":1}}],[\"定义的枚举类型\",{\"1\":{\"415\":1}}],[\"定义这个\",{\"1\":{\"345\":1}}],[\"定义需要重新刷新这个\",{\"1\":{\"345\":1}}],[\"定义服务端点\",{\"1\":{\"344\":1}}],[\"定义一个对象类型的响应式数据\",{\"1\":{\"628\":1}}],[\"定义一个响应式数据\",{\"1\":{\"627\":1}}],[\"定义一个方法\",{\"1\":{\"502\":1}}],[\"定义一个静态属性\",{\"1\":{\"417\":1}}],[\"定义一个\",{\"1\":{\"338\":3,\"397\":1}}],[\"定义一个描述性的名字\",{\"1\":{\"331\":1}}],[\"定义\",{\"0\":{\"567\":1},\"1\":{\"324\":1,\"332\":1,\"378\":1,\"379\":1}}],[\"定义重复导致样式混乱\",{\"1\":{\"268\":1}}],[\"定义对象时\",{\"1\":{\"224\":1}}],[\"定义对象的方法\",{\"1\":{\"159\":1}}],[\"定义术语解释\",{\"1\":{\"198\":1}}],[\"定义术语名\",{\"1\":{\"198\":1}}],[\"定义默认值\",{\"1\":{\"101\":1,\"322\":1}}],[\"定义了与服务器交互的一组操作\",{\"1\":{\"344\":1}}],[\"定义了很多限制\",{\"1\":{\"322\":1}}],[\"定义了两个组件\",{\"1\":{\"286\":1}}],[\"定义了为实现的方法\",{\"1\":{\"91\":1}}],[\"定义了分配多余空间之前\",{\"1\":{\"46\":1}}],[\"定义了项目的缩小比例\",{\"1\":{\"46\":1}}],[\"定义项目的放大比例\",{\"1\":{\"46\":1}}],[\"定义项目的排列顺序\",{\"1\":{\"46\":1}}],[\"定义项目在交叉轴上如何对齐\",{\"1\":{\"45\":1}}],[\"定义项目在主轴上的对齐方式\",{\"1\":{\"45\":1}}],[\"定义多根轴线的对齐方式\",{\"1\":{\"45\":1}}],[\"折叠内容\",{\"1\":{\"201\":1}}],[\"插槽\",{\"0\":{\"549\":1},\"1\":{\"646\":1}}],[\"插值表达式的正则表达式\",{\"1\":{\"517\":1}}],[\"插值语法\",{\"1\":{\"554\":1}}],[\"插值语法表达式就不存在了\",{\"1\":{\"517\":1}}],[\"插值语法则不会\",{\"1\":{\"477\":1}}],[\"插值语法不会\",{\"1\":{\"476\":1}}],[\"插件\",{\"0\":{\"569\":1},\"1\":{\"332\":1}}],[\"插件即可\",{\"1\":{\"140\":1}}],[\"插入外部资源\",{\"1\":{\"200\":1}}],[\"播放器显示的字幕名称\",{\"1\":{\"200\":1}}],[\"音频\",{\"1\":{\"200\":1}}],[\"网页可以有多个\",{\"1\":{\"199\":1}}],[\"网络错误\",{\"1\":{\"27\":1}}],[\"元组\",{\"0\":{\"412\":1},\"1\":{\"412\":1}}],[\"元数据标签的五个属性\",{\"1\":{\"199\":1}}],[\"元数据\",{\"0\":{\"199\":1},\"1\":{\"199\":1}}],[\"元素上\",{\"1\":{\"552\":1}}],[\"元素没有\",{\"1\":{\"534\":1}}],[\"元素没有被移除\",{\"1\":{\"507\":1}}],[\"元素将被渲染为未选中状态\",{\"1\":{\"510\":1}}],[\"元素可能无法获取到\",{\"1\":{\"507\":1}}],[\"元素直接被移除\",{\"1\":{\"507\":1}}],[\"元素加入\",{\"1\":{\"227\":2}}],[\"元素有共同的父元素\",{\"1\":{\"64\":1}}],[\"元素后出现的段落\",{\"1\":{\"64\":1}}],[\"元素后代的\",{\"1\":{\"64\":1}}],[\"元素之间还有其他元素则不会被选中\",{\"1\":{\"64\":1}}],[\"元素和\",{\"1\":{\"64\":1}}],[\"元素子元素的\",{\"1\":{\"64\":1}}],[\"元素选择器\",{\"1\":{\"64\":1}}],[\"元素定义引号\",{\"1\":{\"63\":1}}],[\"元素定位\",{\"1\":{\"54\":1}}],[\"元素中的第一个\",{\"1\":{\"63\":1}}],[\"元素\",{\"1\":{\"63\":3,\"64\":3,\"562\":1}}],[\"元素的值或者状态直接由\",{\"1\":{\"363\":1}}],[\"元素的值或者状态由\",{\"1\":{\"363\":1}}],[\"元素的设置\",{\"1\":{\"193\":1}}],[\"元素的属性\",{\"0\":{\"191\":1}}],[\"元素的内容前插入一副图像\",{\"1\":{\"62\":1}}],[\"元素的总宽度和高度不受轮廓宽度影响\",{\"1\":{\"61\":1}}],[\"元素的总宽度应该这样计算\",{\"1\":{\"38\":1}}],[\"元素的总高度应该这样计算\",{\"1\":{\"38\":1}}],[\"元素继承父级的\",{\"1\":{\"56\":1,\"57\":1}}],[\"元素不会浮动\",{\"1\":{\"56\":1}}],[\"元素不会被特殊的定位\",{\"1\":{\"54\":1}}],[\"元素浮动在容器的右侧\",{\"1\":{\"56\":1}}],[\"元素浮动到容器的左侧\",{\"1\":{\"56\":1}}],[\"元素是使用\",{\"1\":{\"54\":1}}],[\"元素相对于视口定位\",{\"1\":{\"54\":1}}],[\"元素看起来通常比设置的更大\",{\"1\":{\"53\":1}}],[\"元素总高度\",{\"1\":{\"38\":1}}],[\"元素总宽度\",{\"1\":{\"38\":1}}],[\"元素都可以视为方框\",{\"1\":{\"38\":1}}],[\"元素会在其容器中水平居中\",{\"1\":{\"35\":1}}],[\"列表排序\",{\"0\":{\"537\":1}}],[\"列表过滤\",{\"0\":{\"536\":1},\"1\":{\"536\":1,\"537\":1,\"538\":1}}],[\"列表中的每个\",{\"1\":{\"323\":1}}],[\"列表渲染\",{\"0\":{\"306\":1,\"531\":1}}],[\"列表项\",{\"1\":{\"198\":1}}],[\"列表标签\",{\"0\":{\"198\":1}}],[\"加载数据时\",{\"1\":{\"390\":1}}],[\"加载生成后再执行脚本\",{\"1\":{\"227\":1}}],[\"加载一张样式表\",{\"1\":{\"197\":1}}],[\"加粗\",{\"1\":{\"204\":1}}],[\"加入一句日志输出\",{\"1\":{\"342\":1}}],[\"加入\",{\"1\":{\"123\":1}}],[\"图中有三个钩子没有体现\",{\"1\":{\"530\":1}}],[\"图标\",{\"1\":{\"197\":1}}],[\"图像区块\",{\"1\":{\"195\":1}}],[\"图像标签\",{\"0\":{\"194\":1}}],[\"图像会在水平和垂直方向上都重复\",{\"1\":{\"32\":1}}],[\"顶层标签\",{\"1\":{\"202\":1}}],[\"顶层窗口打开\",{\"1\":{\"197\":1}}],[\"顶级函数作为程序的入口\",{\"1\":{\"102\":1}}],[\"990px\",{\"1\":{\"196\":1}}],[\"900px\",{\"1\":{\"196\":1,\"286\":1,\"287\":1,\"290\":1}}],[\"90\",{\"1\":{\"112\":1,\"137\":2,\"485\":1,\"486\":1,\"487\":1,\"537\":1,\"538\":1,\"573\":1}}],[\"浏览器端通过\",{\"1\":{\"557\":1}}],[\"浏览器本地存储\",{\"0\":{\"555\":1},\"1\":{\"557\":1}}],[\"浏览器的历史记录分为两种模式\",{\"1\":{\"589\":1}}],[\"浏览器的地址栏\",{\"1\":{\"372\":1}}],[\"浏览器的默认行为\",{\"1\":{\"195\":1}}],[\"浏览器模型\",{\"0\":{\"227\":1}}],[\"浏览器是否可以自动填充某个控件的值\",{\"1\":{\"193\":1}}],[\"基本相同\",{\"1\":{\"638\":1}}],[\"基本类型数据\",{\"1\":{\"632\":1}}],[\"基本列表\",{\"0\":{\"532\":1}}],[\"基本原理\",{\"1\":{\"516\":1}}],[\"基本使用\",{\"0\":{\"489\":1}}],[\"基本用法\",{\"0\":{\"151\":1,\"176\":1,\"621\":1}}],[\"基于此可以实现路由守卫功能\",{\"1\":{\"399\":1}}],[\"基于上面的\",{\"1\":{\"378\":1}}],[\"基于新的\",{\"1\":{\"329\":1}}],[\"基于\",{\"1\":{\"329\":1}}],[\"基于当前状态的视图描述\",{\"1\":{\"329\":1}}],[\"基础上\",{\"1\":{\"586\":1}}],[\"基础表示法\",{\"1\":{\"442\":1}}],[\"基础\",{\"0\":{\"213\":1,\"436\":1}}],[\"基础图像标签\",{\"0\":{\"195\":1}}],[\"高级缓存更新\",{\"0\":{\"351\":1}}],[\"高级定制的\",{\"1\":{\"298\":1}}],[\"高端\",{\"1\":{\"193\":1}}],[\"高度\",{\"1\":{\"38\":1}}],[\"高度和宽度\",{\"0\":{\"37\":1}}],[\"小于\",{\"1\":{\"193\":1,\"217\":1}}],[\"小写罗马数字\",{\"1\":{\"198\":1}}],[\"小写字母\",{\"1\":{\"198\":1}}],[\"小写\",{\"1\":{\"65\":1}}],[\"低端\",{\"1\":{\"193\":1}}],[\"输入姓名\",{\"1\":{\"618\":1}}],[\"输入名字查询\",{\"1\":{\"536\":1,\"537\":1}}],[\"输入字符\",{\"1\":{\"536\":1}}],[\"输入框由于都没有\",{\"1\":{\"534\":1}}],[\"输入选择器返回的数据将作为参数传递给转换函数\",{\"1\":{\"342\":1}}],[\"输入标题和内容后点击提交\",{\"1\":{\"337\":1}}],[\"输入年月日和时分\",{\"1\":{\"193\":1}}],[\"输入一年之中第几周的输入框\",{\"1\":{\"193\":1}}],[\"输出\",{\"1\":{\"157\":1}}],[\"复选框\",{\"1\":{\"193\":1}}],[\"复制数组\",{\"1\":{\"147\":1}}],[\"块级容器标签\",{\"1\":{\"193\":1}}],[\"块级元素总是从新行开始\",{\"1\":{\"49\":1}}],[\"块级元素\",{\"0\":{\"49\":1},\"1\":{\"51\":1}}],[\"按下回车提示输入\",{\"1\":{\"522\":1}}],[\"按下任意其他按键\",{\"1\":{\"522\":1}}],[\"按下修饰键的同时\",{\"1\":{\"522\":1}}],[\"按钮的\",{\"1\":{\"373\":1}}],[\"按照惯例此信息放在\",{\"1\":{\"331\":1}}],[\"按照之前的内容\",{\"1\":{\"276\":1}}],[\"按照一定模式\",{\"1\":{\"185\":1}}],[\"按源码中出现的顺序\",{\"1\":{\"192\":1}}],[\"按大小参与\",{\"1\":{\"192\":1}}],[\"正在调用\",{\"1\":{\"387\":1}}],[\"正整数\",{\"1\":{\"192\":1}}],[\"正常触发\",{\"1\":{\"522\":1}}],[\"正常的\",{\"1\":{\"359\":1}}],[\"正常\",{\"1\":{\"47\":1}}],[\"正常情况下直接返回响应\",{\"1\":{\"27\":1}}],[\"遍历指定次数\",{\"1\":{\"532\":2}}],[\"遍历字符串\",{\"1\":{\"532\":2}}],[\"遍历对象\",{\"1\":{\"532\":2}}],[\"遍历数组\",{\"1\":{\"532\":2,\"534\":1}}],[\"遍历属性\",{\"1\":{\"517\":1}}],[\"遍历\",{\"1\":{\"192\":2}}],[\"焦点的转移顺序\",{\"1\":{\"192\":1}}],[\"键为要定义的方法名\",{\"1\":{\"617\":2}}],[\"键为需要的计算属性\",{\"1\":{\"616\":1}}],[\"键为需要的计算属性名\",{\"1\":{\"616\":1}}],[\"键为需要计算的属性名\",{\"1\":{\"616\":1}}],[\"键盘事件\",{\"0\":{\"522\":1}}],[\"键的\",{\"1\":{\"243\":1}}],[\"键加不加引号都可以\",{\"1\":{\"224\":1}}],[\"键对网页元素的遍历\",{\"1\":{\"192\":1}}],[\"键\",{\"1\":{\"192\":1,\"522\":1}}],[\"且组件内部声明接收了的属性\",{\"1\":{\"633\":1}}],[\"且使用了\",{\"1\":{\"613\":1}}],[\"且可以获取\",{\"1\":{\"554\":1}}],[\"且可以灵活的控制请求是否走代理\",{\"1\":{\"486\":1}}],[\"且要传入一个配置对象\",{\"1\":{\"553\":1}}],[\"且要在创建\",{\"1\":{\"539\":1}}],[\"且如果一个钩子同时使用两种写法\",{\"1\":{\"640\":1}}],[\"且如果\",{\"1\":{\"552\":1}}],[\"且\",{\"1\":{\"551\":1}}],[\"且已经在每行的输入框中输入了内容\",{\"1\":{\"534\":1}}],[\"且该总线能够访问所有的\",{\"1\":{\"525\":1}}],[\"且全为小写\",{\"1\":{\"522\":1}}],[\"且只接受当前\",{\"1\":{\"403\":1}}],[\"且这个返回的函数接收下一个参数并再次返回函数\",{\"1\":{\"275\":1}}],[\"且这个标签必须至少具有\",{\"1\":{\"190\":1}}],[\"且不提供给客户端\",{\"1\":{\"243\":1}}],[\"且必须是\",{\"1\":{\"213\":1}}],[\"且返回的每个成员都是\",{\"1\":{\"180\":1}}],[\"整个数组\",{\"1\":{\"215\":2}}],[\"整数\",{\"1\":{\"198\":1}}],[\"整张网页只能有一个\",{\"1\":{\"190\":1}}],[\"整体就返回\",{\"1\":{\"215\":2}}],[\"整体替换整体\",{\"1\":{\"169\":1}}],[\"整体靠主轴终点\",{\"1\":{\"45\":1}}],[\"整体靠主轴起点\",{\"1\":{\"45\":1}}],[\"整体居中\",{\"1\":{\"45\":1}}],[\"还会创建一个名为\",{\"1\":{\"425\":1}}],[\"还会生成需要添加到\",{\"1\":{\"344\":1}}],[\"还是比较常用的\",{\"1\":{\"459\":1}}],[\"还是\",{\"1\":{\"406\":1}}],[\"还是使用\",{\"1\":{\"374\":1}}],[\"还需要在用到\",{\"1\":{\"336\":1}}],[\"还自带了一些常用的\",{\"1\":{\"332\":1}}],[\"还遍历继承的属性\",{\"1\":{\"224\":1}}],[\"还有在导航守卫中的路由对象\",{\"1\":{\"600\":1}}],[\"还有两种用法\",{\"1\":{\"406\":1}}],[\"还有一个\",{\"1\":{\"343\":1}}],[\"还有\",{\"1\":{\"190\":1}}],[\"还可以传递一个\",{\"1\":{\"608\":1}}],[\"还可以传入更多参数\",{\"1\":{\"212\":1}}],[\"还可以对对象的形状进行描述\",{\"1\":{\"441\":1}}],[\"还可以使用三斜线指令\",{\"1\":{\"465\":1}}],[\"还可以使用\",{\"1\":{\"384\":1}}],[\"还可以使用内联事件处理器\",{\"1\":{\"274\":1}}],[\"还可以是一个纯函数\",{\"1\":{\"368\":1}}],[\"还可以直接使用\",{\"1\":{\"359\":1}}],[\"还可以通过\",{\"1\":{\"137\":1}}],[\"还可以在函数体执行之前初始化实例变量\",{\"1\":{\"80\":1}}],[\"还可以设为\",{\"1\":{\"35\":1}}],[\"句点\",{\"1\":{\"190\":1}}],[\"连接为一个\",{\"1\":{\"356\":1}}],[\"连接字符串\",{\"1\":{\"120\":1}}],[\"连词号\",{\"1\":{\"190\":1}}],[\"阿拉伯数字\",{\"1\":{\"190\":1}}],[\"锚点名称通过网页元素的\",{\"1\":{\"190\":1}}],[\"锚点\",{\"1\":{\"190\":1}}],[\"端口\",{\"1\":{\"190\":1}}],[\"主要原因\",{\"1\":{\"406\":1}}],[\"主要包含以下几个步骤\",{\"1\":{\"344\":1}}],[\"主要逻辑如下\",{\"1\":{\"338\":1}}],[\"主题\",{\"1\":{\"282\":1}}],[\"主机\",{\"1\":{\"190\":1}}],[\"主轴为垂直方向\",{\"1\":{\"45\":2}}],[\"主轴为水平方向\",{\"1\":{\"45\":2}}],[\"协议\",{\"1\":{\"190\":1}}],[\"无需打包操作\",{\"1\":{\"661\":1}}],[\"无视类型检查\",{\"1\":{\"413\":1}}],[\"无法满足需求\",{\"1\":{\"296\":1}}],[\"无法转为对象\",{\"1\":{\"188\":1}}],[\"无内容响应\",{\"1\":{\"257\":1}}],[\"无默认值\",{\"1\":{\"243\":1}}],[\"无限次定时运行\",{\"1\":{\"212\":1}}],[\"无序列表容器\",{\"1\":{\"198\":1}}],[\"无论组件层次结构有多深\",{\"1\":{\"652\":1}}],[\"无论哪种写法\",{\"1\":{\"578\":1}}],[\"无论值是否改变都可用\",{\"1\":{\"547\":1}}],[\"无论是否设置\",{\"1\":{\"636\":1}}],[\"无论是\",{\"1\":{\"406\":1}}],[\"无论路径或域\",{\"1\":{\"243\":1}}],[\"无论它在页面那个位置\",{\"1\":{\"195\":1}}],[\"无论使用哪种传参配置项\",{\"1\":{\"18\":1}}],[\"尾部补全\",{\"1\":{\"183\":1}}],[\"负数则后退相应步数\",{\"1\":{\"595\":1}}],[\"负数会报错\",{\"1\":{\"183\":1}}],[\"负责将数据填充到插值表达式中\",{\"1\":{\"517\":1}}],[\"负责通知所有对应的节点更新视图\",{\"1\":{\"517\":1}}],[\"负责类型转换\",{\"1\":{\"128\":1}}],[\"负整数\",{\"1\":{\"192\":1}}],[\"三种守卫都接收\",{\"1\":{\"605\":1}}],[\"三种写法总结\",{\"1\":{\"482\":1}}],[\"三种状态\",{\"1\":{\"387\":1}}],[\"三斜线指令的前面只允许出现单行或多行注释\",{\"1\":{\"465\":1}}],[\"三斜线指令必须放在文件的最顶端\",{\"1\":{\"465\":1}}],[\"三个参数\",{\"1\":{\"605\":1}}],[\"三个可选值\",{\"1\":{\"193\":1}}],[\"三个方法都支持通过第二个参数指定开始搜索的位置\",{\"1\":{\"183\":1}}],[\"三目运算符\",{\"1\":{\"130\":1}}],[\"大型项目中接口的管理可能是分布在多个文件中的\",{\"1\":{\"349\":1}}],[\"大多数情况下\",{\"1\":{\"363\":1}}],[\"大多数\",{\"1\":{\"285\":1}}],[\"大小写敏感设置\",{\"0\":{\"375\":1}}],[\"大小写敏感\",{\"1\":{\"229\":1}}],[\"大于\",{\"1\":{\"193\":2}}],[\"大括号中的内部就是执行\",{\"1\":{\"182\":1}}],[\"大写罗马数字\",{\"1\":{\"198\":1}}],[\"大写字母\",{\"1\":{\"198\":1}}],[\"大写\",{\"1\":{\"65\":1}}],[\"最好写成箭头函数\",{\"1\":{\"624\":1}}],[\"最好写成普通函数\",{\"1\":{\"624\":1}}],[\"最好使用每条数据的唯一标识做\",{\"1\":{\"535\":1}}],[\"最好在\",{\"1\":{\"528\":1}}],[\"最好把\",{\"1\":{\"152\":1}}],[\"最简单的仍然是表单提交的场景\",{\"1\":{\"379\":1}}],[\"最常用的异步中间件是\",{\"1\":{\"338\":1}}],[\"最后得到的是内部定义的\",{\"1\":{\"568\":1}}],[\"最后执行编译\",{\"1\":{\"460\":1}}],[\"最后在它们的共同父组件中管理\",{\"1\":{\"407\":1}}],[\"最后修改\",{\"1\":{\"379\":1}}],[\"最后修改组件中对\",{\"1\":{\"343\":1}}],[\"最后是路由配置和应用入口的内容\",{\"1\":{\"337\":1}}],[\"最后\",{\"1\":{\"335\":1,\"337\":1,\"359\":1}}],[\"最后从父组件中传入\",{\"1\":{\"283\":1}}],[\"最后将脚手架创建的\",{\"1\":{\"267\":1}}],[\"最后都会被转成字符串\",{\"1\":{\"224\":1}}],[\"最后可以调用\",{\"1\":{\"206\":1}}],[\"最终结果就是\",{\"1\":{\"180\":1}}],[\"错误在一个路由守卫函数中通过调用\",{\"1\":{\"610\":1}}],[\"错误在一个路由守卫函数中被同步抛出\",{\"1\":{\"610\":1}}],[\"错误被传递给\",{\"1\":{\"602\":1}}],[\"错误页面是距离报错组件最近的错误页面\",{\"1\":{\"371\":1}}],[\"错误侦听器接收所有中间件链返回的错误\",{\"1\":{\"245\":1}}],[\"错误事件侦听器可以用\",{\"1\":{\"245\":1}}],[\"错误事件\",{\"0\":{\"245\":1}}],[\"错误总是会被下一个\",{\"1\":{\"178\":1}}],[\"错误处理的组件使用之前的\",{\"1\":{\"392\":1}}],[\"错误处理机制\",{\"0\":{\"234\":1}}],[\"错误处理\",{\"0\":{\"244\":1,\"371\":1},\"1\":{\"26\":1}}],[\"冒泡\",{\"1\":{\"178\":1}}],[\"成绩<\",{\"1\":{\"537\":1,\"538\":1}}],[\"成员变量还在\",{\"1\":{\"360\":1}}],[\"成员是参数对象本身的所有属性的键名\",{\"1\":{\"240\":1}}],[\"成员是参数对象自身的所有可遍历属性的键值对数组\",{\"1\":{\"170\":1}}],[\"成员是参数对象自身的所有可遍历属性的键值\",{\"1\":{\"170\":1}}],[\"成员是参数对象自身的所有可遍历属性的键名\",{\"1\":{\"170\":1}}],[\"成员是事件的最底层节点和依次冒泡所经过的所有上层节点\",{\"1\":{\"231\":1}}],[\"成员为匹配的第一个字符串\",{\"1\":{\"216\":1}}],[\"成功启动了hello\",{\"1\":{\"559\":1}}],[\"成功安装\",{\"1\":{\"559\":1}}],[\"成功\",{\"1\":{\"176\":1}}],[\"变为\",{\"1\":{\"552\":1}}],[\"变下的\",{\"1\":{\"466\":1}}],[\"变化而发生更新时\",{\"1\":{\"313\":1}}],[\"变成\",{\"1\":{\"176\":2}}],[\"变量更新时的一个问题\",{\"0\":{\"538\":1}}],[\"变量上\",{\"1\":{\"451\":1}}],[\"变量如果在声明的时候没有指定类型那么就会被识别为任意类型\",{\"1\":{\"438\":1}}],[\"变量是一个对象时\",{\"1\":{\"404\":1}}],[\"变量提升\",{\"1\":{\"213\":1}}],[\"变量与属性同名就能取到正确的值\",{\"1\":{\"186\":1}}],[\"变量就会被赋值为\",{\"1\":{\"185\":1}}],[\"变量的解构赋值\",{\"0\":{\"184\":1}}],[\"变量的类型就确定下来了\",{\"1\":{\"128\":1}}],[\"变量才会有这个限制\",{\"1\":{\"160\":1}}],[\"变量名\",{\"1\":{\"158\":1,\"186\":1}}],[\"变量不是一个变量\",{\"1\":{\"157\":1}}],[\"变量和方法体内部的\",{\"1\":{\"157\":1}}],[\"变量使用\",{\"1\":{\"157\":1}}],[\"变量在第一次使用时才会初始化\",{\"1\":{\"145\":1}}],[\"变量只可以被赋值一次\",{\"1\":{\"145\":1}}],[\"变量声明\",{\"0\":{\"143\":1}}],[\"变量\",{\"0\":{\"142\":1},\"1\":{\"215\":3,\"379\":1,\"406\":1,\"517\":1}}],[\"未手动赋值的项的递增步长仍为\",{\"1\":{\"413\":1}}],[\"未收到响应之前是\",{\"1\":{\"344\":1}}],[\"未完成\",{\"1\":{\"176\":2}}],[\"未访问过的链接\",{\"1\":{\"60\":1}}],[\"再销毁内层组件\",{\"1\":{\"576\":1}}],[\"再通过\",{\"1\":{\"407\":1}}],[\"再次创建\",{\"1\":{\"345\":1}}],[\"再抛出错误是无效的\",{\"1\":{\"178\":1}}],[\"再根据情况进行赋值运算\",{\"1\":{\"174\":1}}],[\"再赋值\",{\"1\":{\"145\":1}}],[\"时根据数据的具体结构决定是否采用深度监视\",{\"1\":{\"622\":1}}],[\"时除了传递\",{\"1\":{\"608\":1}}],[\"时只更新了一部分导致了问题\",{\"1\":{\"534\":1}}],[\"时触发\",{\"1\":{\"530\":1}}],[\"时的另一个按键\",{\"1\":{\"522\":1}}],[\"时的篡改\",{\"1\":{\"243\":1}}],[\"时更新\",{\"1\":{\"511\":1}}],[\"时而非\",{\"1\":{\"511\":1}}],[\"时出现插值语法模板显示在页面上的情况\",{\"1\":{\"478\":1}}],[\"时传入这些函数作为\",{\"1\":{\"358\":1}}],[\"时要使用函数柯里化\",{\"1\":{\"337\":1}}],[\"时使用\",{\"1\":{\"334\":1}}],[\"时我们说\",{\"1\":{\"334\":1}}],[\"时为当前\",{\"1\":{\"334\":1}}],[\"时应该直接赋值而不是使用\",{\"1\":{\"309\":1}}],[\"时从\",{\"1\":{\"243\":1}}],[\"时表示禁止监听函数调用\",{\"1\":{\"229\":1}}],[\"时\",{\"1\":{\"173\":1,\"193\":1,\"280\":1,\"301\":1,\"325\":3,\"329\":1,\"397\":1,\"406\":1,\"418\":2,\"425\":1,\"507\":1,\"582\":1,\"605\":1,\"658\":1}}],[\"时可以不指定要引入的模块名\",{\"1\":{\"164\":1}}],[\"链判断运算符\",{\"0\":{\"172\":1}}],[\"链接也会有\",{\"1\":{\"368\":1}}],[\"链接标签\",{\"0\":{\"197\":1}}],[\"链接\",{\"0\":{\"60\":1}}],[\"克隆对象\",{\"1\":{\"169\":1}}],[\"转换为真实\",{\"1\":{\"534\":1}}],[\"转换时是一个个字符依次转换\",{\"1\":{\"222\":1}}],[\"转移给其他页面\",{\"1\":{\"398\":1}}],[\"转为代理对象\",{\"1\":{\"632\":1}}],[\"转为\",{\"1\":{\"323\":1}}],[\"转为对象\",{\"1\":{\"162\":1}}],[\"转码\",{\"1\":{\"223\":1}}],[\"转对象然后再转为\",{\"1\":{\"162\":1}}],[\"转\",{\"1\":{\"162\":2}}],[\"转数组\",{\"1\":{\"162\":1}}],[\"暂时性死区\",{\"1\":{\"160\":1}}],[\"关闭保存时语法检查\",{\"1\":{\"561\":1}}],[\"关闭生产模式提醒\",{\"1\":{\"553\":1}}],[\"关联\",{\"1\":{\"256\":1}}],[\"关联表单的id属性\",{\"1\":{\"193\":1}}],[\"关联表单的\",{\"1\":{\"193\":1}}],[\"关于销毁vue实例\",{\"1\":{\"530\":1}}],[\"关于this的指向\",{\"1\":{\"492\":1}}],[\"关于组件标签\",{\"1\":{\"490\":1}}],[\"关于组件名\",{\"1\":{\"490\":1}}],[\"关于如何限制清理函数只在组件卸载时被调用见后文\",{\"1\":{\"288\":1}}],[\"关于上面的几个配置项\",{\"1\":{\"269\":1}}],[\"关于\",{\"0\":{\"492\":1},\"1\":{\"159\":1,\"193\":1,\"222\":1}}],[\"关键字的\",{\"1\":{\"465\":1}}],[\"关键字的异步函数中使用\",{\"1\":{\"67\":1}}],[\"关键字表示内部模块\",{\"1\":{\"459\":1}}],[\"关键字表示该方法不会被实例继承\",{\"1\":{\"153\":1}}],[\"关键字声明的变量才能进行变量提升\",{\"1\":{\"213\":1}}],[\"关键字完成继承\",{\"1\":{\"154\":1}}],[\"关键字对某个属性设置修改函数和取值函数\",{\"1\":{\"153\":1}}],[\"关键字在\",{\"1\":{\"144\":1}}],[\"关键字并将返回值类型设置为\",{\"1\":{\"109\":1}}],[\"关键字限制可以被混入的类\",{\"1\":{\"94\":1}}],[\"关键字代替\",{\"1\":{\"94\":1}}],[\"关键字前\",{\"1\":{\"94\":1}}],[\"关键字必须在\",{\"1\":{\"94\":1}}],[\"关键字使用\",{\"1\":{\"94\":1}}],[\"关键字添加\",{\"1\":{\"87\":1}}],[\"关键字标识类的构造函数将会令该构造函数变为工厂构造函数\",{\"1\":{\"83\":1}}],[\"关键字标记的函数\",{\"1\":{\"68\":1}}],[\"关键字才有意义\",{\"1\":{\"75\":1}}],[\"关键字\",{\"0\":{\"166\":1,\"238\":1},\"1\":{\"72\":1,\"74\":1,\"75\":1,\"79\":1,\"80\":1,\"94\":1,\"153\":2,\"237\":1,\"459\":1}}],[\"关键字可以省略\",{\"1\":{\"72\":1}}],[\"关键字和一个异步循环\",{\"1\":{\"69\":1}}],[\"箭头函数不适用的场合\",{\"1\":{\"159\":1}}],[\"箭头函数可以嵌套\",{\"1\":{\"159\":1}}],[\"箭头函数内部的\",{\"1\":{\"159\":2}}],[\"箭头函数没有自己的\",{\"1\":{\"159\":1}}],[\"箭头函数注意事项\",{\"1\":{\"159\":1}}],[\"箭头函数\",{\"0\":{\"159\":1}}],[\"750px\",{\"1\":{\"196\":1}}],[\"7\",{\"1\":{\"158\":1,\"209\":1,\"439\":2}}],[\"70\",{\"1\":{\"137\":2}}],[\"而应当使用\",{\"1\":{\"522\":1}}],[\"而只会在当前文件中声明一个局部变量\",{\"1\":{\"460\":1}}],[\"而名字不做改动\",{\"1\":{\"404\":1}}],[\"而无论它们在组件树的哪里\",{\"1\":{\"329\":1}}],[\"而无需\",{\"1\":{\"276\":1}}],[\"而不必求助于全局状态或将其拆分为两个组件\",{\"1\":{\"645\":1}}],[\"而不能使用\",{\"1\":{\"584\":1}}],[\"而不需要\",{\"1\":{\"516\":1}}],[\"而不是只有一个单独的出口\",{\"1\":{\"583\":1}}],[\"而不是白屏\",{\"1\":{\"390\":1}}],[\"而不是\",{\"1\":{\"379\":1}}],[\"而不是发给后端服务\",{\"1\":{\"366\":1}}],[\"而不是每次渲染后都被执行\",{\"1\":{\"285\":1}}],[\"而不只是字符串\",{\"1\":{\"161\":1}}],[\"而是生成新的对象来替换\",{\"1\":{\"648\":1}}],[\"而是要赋值给一个成员变量\",{\"1\":{\"406\":1}}],[\"而是直接操作的字段\",{\"1\":{\"334\":1}}],[\"而是\",{\"1\":{\"323\":1,\"626\":1}}],[\"而是使用全局对象\",{\"1\":{\"306\":1}}],[\"而是实际发生事件时才会调用\",{\"1\":{\"275\":1}}],[\"而是指向顶层对象\",{\"1\":{\"238\":1}}],[\"而是页面解析完成后执行\",{\"1\":{\"197\":1}}],[\"而\",{\"1\":{\"157\":1,\"325\":1,\"330\":1,\"379\":1,\"534\":1,\"637\":1}}],[\"而且如果要使配置生效要重新启动\",{\"1\":{\"561\":1}}],[\"而且每次调用返回值是重新计算的\",{\"1\":{\"503\":1}}],[\"而且不是程序员定义的\",{\"1\":{\"492\":1}}],[\"而且\",{\"1\":{\"403\":1}}],[\"而且同时只会有一个按钮有\",{\"1\":{\"372\":1}}],[\"而且对使用者来说也很繁琐\",{\"1\":{\"345\":1}}],[\"而且在第一次渲染时还没有\",{\"1\":{\"286\":1}}],[\"而且返回的是一个对象\",{\"1\":{\"237\":1}}],[\"而且左侧解构赋值必须是最后一个参数\",{\"1\":{\"167\":1}}],[\"而且只能放在\",{\"1\":{\"190\":1}}],[\"而且只有对象方法的简写形式才可以\",{\"1\":{\"166\":1}}],[\"而且只要任何一个\",{\"1\":{\"152\":1}}],[\"而且可以对于使用\",{\"1\":{\"94\":1}}],[\"而且二者有相同的父元素\",{\"1\":{\"64\":1}}],[\"指令可以\",{\"1\":{\"554\":1}}],[\"指令语法\",{\"1\":{\"554\":1}}],[\"指令冒号后跟的是\",{\"1\":{\"552\":1}}],[\"指令冒号后直接跟插槽名即可\",{\"1\":{\"551\":1}}],[\"指令将包含所有插槽\",{\"1\":{\"552\":1}}],[\"指令将数据绑定到\",{\"1\":{\"552\":1}}],[\"指令指定插槽\",{\"1\":{\"551\":1}}],[\"指令定义没有前缀\",{\"1\":{\"547\":1}}],[\"指令定义对象的钩子函数\",{\"0\":{\"547\":1}}],[\"指令绑定的前一个值\",{\"1\":{\"547\":1}}],[\"指令绑定事件\",{\"1\":{\"520\":1}}],[\"指令的绑定值\",{\"1\":{\"547\":1}}],[\"指令名如果是多个单词\",{\"1\":{\"547\":1}}],[\"指令名\",{\"1\":{\"547\":1}}],[\"指令所绑定的元素\",{\"1\":{\"547\":1}}],[\"指令所在组件的\",{\"1\":{\"547\":1}}],[\"指令所在元素被插入页面时调用\",{\"1\":{\"546\":1,\"548\":1}}],[\"指令所在模板被重新解析时调用\",{\"1\":{\"546\":2,\"548\":2}}],[\"指令与元素解绑时调用\",{\"1\":{\"547\":1}}],[\"指令与元素成功绑定时调用\",{\"1\":{\"546\":1,\"548\":1}}],[\"指令第一次绑定到元素时调用\",{\"1\":{\"547\":1}}],[\"指令\",{\"0\":{\"478\":1,\"480\":1},\"1\":{\"476\":1,\"477\":1,\"479\":1,\"480\":1,\"552\":1}}],[\"指示\",{\"1\":{\"243\":1}}],[\"指示器\",{\"1\":{\"193\":1}}],[\"指向是\",{\"1\":{\"520\":1}}],[\"指向是固定的\",{\"1\":{\"159\":1}}],[\"指向的是触发这个自定义事件的组件对象\",{\"1\":{\"502\":1}}],[\"指向\",{\"1\":{\"466\":1}}],[\"指向外层的\",{\"1\":{\"406\":1}}],[\"指向原来的构造函数\",{\"1\":{\"239\":1}}],[\"指向一个对象\",{\"1\":{\"239\":1}}],[\"指向顶层对象\",{\"1\":{\"238\":1}}],[\"指向同一块内存\",{\"1\":{\"224\":1}}],[\"指向当前对象的原型对象\",{\"1\":{\"166\":1}}],[\"指向当前的子类实例\",{\"1\":{\"154\":1}}],[\"指向函数运行时所在的对象\",{\"1\":{\"159\":1}}],[\"指向父类的原型对象\",{\"1\":{\"154\":1}}],[\"指的是当这个\",{\"1\":{\"344\":1}}],[\"指的是方法运行时所在的对象\",{\"1\":{\"238\":1}}],[\"指的是实例对象\",{\"1\":{\"238\":1}}],[\"指的是子类的实例\",{\"1\":{\"154\":1}}],[\"指的是类而不是实例\",{\"1\":{\"153\":1}}],[\"指定路径\",{\"1\":{\"576\":1}}],[\"指定具体按键\",{\"1\":{\"522\":1}}],[\"指定的错误页面\",{\"1\":{\"371\":1}}],[\"指定的名字\",{\"1\":{\"334\":1}}],[\"指定的对象\",{\"1\":{\"237\":1}}],[\"指定什么情况下解析\",{\"1\":{\"252\":1}}],[\"指定参数解析选项\",{\"1\":{\"252\":1}}],[\"指定某个任务每隔一段时间就执行依次\",{\"1\":{\"212\":1}}],[\"指定某个容器为\",{\"1\":{\"44\":1}}],[\"指定视频的字幕\",{\"1\":{\"200\":1}}],[\"指定多张图像\",{\"1\":{\"196\":1}}],[\"指定最佳值\",{\"1\":{\"193\":1}}],[\"指定最大最小值\",{\"1\":{\"193\":1}}],[\"指定最大和最小输入字符数\",{\"1\":{\"193\":1}}],[\"指定控件通过\",{\"1\":{\"193\":1}}],[\"指定控件组所属\",{\"1\":{\"193\":1}}],[\"指定步长\",{\"1\":{\"193\":1}}],[\"指定必须输入与正则表达式匹配的内容\",{\"1\":{\"193\":1}}],[\"指定提交给服务器的\",{\"1\":{\"193\":1}}],[\"指定网页元素使用的语言\",{\"1\":{\"192\":1}}],[\"指定网页元素获取焦点的快捷键\",{\"1\":{\"192\":1}}],[\"指定了默认值以后\",{\"1\":{\"156\":1}}],[\"指定元素内部空白的处理方式\",{\"1\":{\"65\":1}}],[\"指定元素背景色\",{\"1\":{\"32\":1}}],[\"指定\",{\"0\":{\"287\":1},\"1\":{\"61\":1,\"245\":1,\"285\":1,\"522\":1}}],[\"指定轮廓的样式\",{\"1\":{\"61\":1}}],[\"指定如何处理内容的上下边缘\",{\"1\":{\"55\":1}}],[\"指定如何处理内容的左右边缘\",{\"1\":{\"55\":1}}],[\"指定是否以\",{\"1\":{\"47\":1}}],[\"指定颜色\",{\"1\":{\"41\":1}}],[\"指定透明度\",{\"1\":{\"32\":1}}],[\"严格模式\",{\"1\":{\"153\":1}}],[\"拦截对象中任意属性的变化\",{\"1\":{\"631\":1}}],[\"拦截该属性的取值行为\",{\"1\":{\"153\":1}}],[\"拦截器\",{\"0\":{\"25\":1}}],[\"结果是一个数组或者\",{\"1\":{\"517\":1}}],[\"结构比较深\",{\"1\":{\"648\":1}}],[\"结构\",{\"1\":{\"477\":1,\"549\":1}}],[\"结构的内容\",{\"1\":{\"477\":1}}],[\"结构里\",{\"1\":{\"152\":1}}],[\"结尾要加分号\",{\"1\":{\"225\":1}}],[\"结合\",{\"1\":{\"137\":1,\"199\":1}}],[\"命令全局安装\",{\"1\":{\"266\":1}}],[\"命令调用\",{\"1\":{\"237\":1}}],[\"命令会返回\",{\"1\":{\"237\":1}}],[\"命令的工作流程\",{\"1\":{\"237\":1}}],[\"命令的常见写法\",{\"1\":{\"164\":1}}],[\"命令删除数组中的某个元素时\",{\"1\":{\"226\":1}}],[\"命令声明一个不可变的变量\",{\"1\":{\"160\":1}}],[\"命令\",{\"0\":{\"160\":1,\"164\":1,\"237\":1},\"1\":{\"159\":1,\"160\":1,\"225\":1}}],[\"命令生成对象实例时自动调用该方法\",{\"1\":{\"153\":1}}],[\"命令只能用在\",{\"1\":{\"152\":1}}],[\"命令放在\",{\"1\":{\"152\":1}}],[\"命令后面的异步操作如果不存在先后关系最好同时触发\",{\"1\":{\"152\":1}}],[\"命令后面的\",{\"1\":{\"152\":2}}],[\"命名规范\",{\"1\":{\"641\":1}}],[\"命名视图\",{\"0\":{\"579\":1,\"583\":1}}],[\"命名路由\",{\"0\":{\"579\":1,\"580\":1}}],[\"命名方式\",{\"1\":{\"547\":1}}],[\"命名\",{\"1\":{\"490\":1}}],[\"命名空间等均可配置\",{\"1\":{\"208\":1}}],[\"命名空间是\",{\"1\":{\"207\":1}}],[\"命名空间\",{\"0\":{\"207\":1},\"1\":{\"207\":1}}],[\"命名参数默认为可选参数\",{\"1\":{\"99\":1}}],[\"命名参数\",{\"0\":{\"99\":1}}],[\"命名式构造函数\",{\"0\":{\"78\":1}}],[\"状态提升\",{\"0\":{\"407\":1}}],[\"状态下是取不到的\",{\"1\":{\"389\":1}}],[\"状态的\",{\"1\":{\"379\":1}}],[\"状态的回调函数\",{\"1\":{\"176\":1}}],[\"状态树中的\",{\"1\":{\"343\":1}}],[\"状态更新逻辑保存在其他地方\",{\"1\":{\"323\":1}}],[\"状态管理的地方像\",{\"1\":{\"336\":1}}],[\"状态管理\",{\"1\":{\"282\":1}}],[\"状态和\",{\"1\":{\"176\":1}}],[\"状态\",{\"1\":{\"152\":3,\"178\":1,\"340\":1}}],[\"语义结构\",{\"0\":{\"202\":1}}],[\"语法的地方使用\",{\"1\":{\"305\":1}}],[\"语法创建\",{\"1\":{\"294\":1}}],[\"语法\",{\"0\":{\"152\":1,\"232\":1},\"1\":{\"305\":1,\"451\":1,\"552\":1,\"553\":1,\"627\":1,\"628\":1,\"642\":2}}],[\"语句而返回\",{\"1\":{\"237\":1}}],[\"语句块内部进行赋值操作\",{\"1\":{\"224\":1}}],[\"语句\",{\"1\":{\"224\":1,\"234\":1,\"237\":1,\"613\":1}}],[\"语句捕获\",{\"1\":{\"178\":1}}],[\"语句后面的\",{\"1\":{\"152\":1}}],[\"语句或者抛出错误\",{\"1\":{\"152\":1}}],[\"语句返回的值会成为\",{\"1\":{\"152\":1}}],[\"语句为空\",{\"1\":{\"137\":1}}],[\"语句提升执行性能\",{\"1\":{\"109\":1}}],[\"语句来传递值\",{\"1\":{\"109\":1}}],[\"语句中的条件表达式必须是布尔类型\",{\"1\":{\"134\":1}}],[\"语句中\",{\"1\":{\"93\":1}}],[\"就确认导航\",{\"1\":{\"602\":1}}],[\"就去哪个组件的对应的\",{\"1\":{\"596\":1}}],[\"就把这个链接替换掉上一条链接\",{\"1\":{\"589\":1}}],[\"就把这个链接入栈\",{\"1\":{\"589\":1}}],[\"就进行绑定\",{\"1\":{\"517\":1}}],[\"就视为静态内容了\",{\"1\":{\"479\":1}}],[\"就需要自行编写声明文件\",{\"1\":{\"458\":1}}],[\"就要在\",{\"1\":{\"502\":1}}],[\"就要使用支持\",{\"1\":{\"366\":1}}],[\"就要遵循\",{\"1\":{\"296\":1}}],[\"就可以对\",{\"1\":{\"362\":1}}],[\"就是将原来的钩子前加了\",{\"1\":{\"640\":1}}],[\"就是插值表达式的内容\",{\"1\":{\"517\":1}}],[\"就是创建的\",{\"1\":{\"517\":1}}],[\"就是\",{\"1\":{\"378\":1}}],[\"就是存放这些副作用逻辑的地方\",{\"1\":{\"358\":1}}],[\"就是在等待调用接口成功\",{\"1\":{\"351\":1}}],[\"就是之前提到的\",{\"1\":{\"334\":1}}],[\"就是属性或方法\",{\"1\":{\"238\":1}}],[\"就像重新加载页面那样\",{\"1\":{\"609\":1}}],[\"就像用户访问\",{\"1\":{\"582\":1}}],[\"就像使用\",{\"1\":{\"366\":1}}],[\"就像下面这样\",{\"1\":{\"343\":1}}],[\"就像\",{\"1\":{\"296\":1}}],[\"就使用\",{\"1\":{\"227\":1}}],[\"就不是\",{\"1\":{\"520\":1}}],[\"就不再是全局变量的声明文件了\",{\"1\":{\"465\":1}}],[\"就不再往下运算而是返回\",{\"1\":{\"172\":1}}],[\"就不在进行下去\",{\"1\":{\"222\":1}}],[\"就等于该项的文本内容\",{\"1\":{\"193\":1}}],[\"就能够解构成功\",{\"1\":{\"185\":1}}],[\"就会生效多少次\",{\"1\":{\"403\":1}}],[\"就会默认展示\",{\"1\":{\"376\":1}}],[\"就会返回\",{\"1\":{\"233\":1}}],[\"就会报错\",{\"1\":{\"167\":1}}],[\"就会先返回\",{\"1\":{\"151\":1}}],[\"就指向了全局对象\",{\"1\":{\"159\":1}}],[\"就执行谁的方法\",{\"1\":{\"94\":1}}],[\"接着就可以导出自动生成的\",{\"1\":{\"344\":1}}],[\"接着来替换初始\",{\"1\":{\"343\":1}}],[\"接着\",{\"1\":{\"337\":1}}],[\"接下来通过\",{\"1\":{\"552\":1}}],[\"接下来编写\",{\"1\":{\"517\":1}}],[\"接下来点击\",{\"1\":{\"380\":1}}],[\"接下来配置路由\",{\"1\":{\"379\":1}}],[\"接下来制作一个秒表\",{\"1\":{\"360\":1}}],[\"接下来就需要定义发起异步请求的相关方法\",{\"1\":{\"358\":1}}],[\"接下来开始改造上面的内容\",{\"1\":{\"358\":1}}],[\"接下来构造\",{\"1\":{\"353\":1}}],[\"接下来\",{\"1\":{\"335\":1,\"337\":1,\"359\":1}}],[\"接下来修改\",{\"1\":{\"335\":1}}],[\"接下来将这个\",{\"1\":{\"334\":1}}],[\"接下来将这个例子改造成使用\",{\"1\":{\"333\":1}}],[\"接收三个参数\",{\"1\":{\"604\":1}}],[\"接收\",{\"1\":{\"588\":2}}],[\"接收参数\",{\"0\":{\"565\":1}}],[\"接收数据\",{\"0\":{\"527\":1,\"543\":1}}],[\"接收这个表单传递的参数并创建\",{\"1\":{\"379\":1}}],[\"接收一个对象或数组\",{\"1\":{\"628\":1}}],[\"接收一个配置项\",{\"1\":{\"343\":1}}],[\"接收一个整数数组并渲染出来\",{\"1\":{\"301\":1}}],[\"接收当前的\",{\"1\":{\"331\":1}}],[\"接收两个参数\",{\"1\":{\"301\":1,\"343\":1,\"603\":1}}],[\"接收第二个参数\",{\"1\":{\"287\":1}}],[\"接收方具有动态类型\",{\"1\":{\"91\":1}}],[\"接收方是静态的\",{\"1\":{\"91\":1}}],[\"接受的参数和\",{\"1\":{\"229\":1}}],[\"接受一个函数做参数\",{\"1\":{\"215\":1}}],[\"接受两个参数\",{\"1\":{\"183\":1,\"212\":1,\"240\":1}}],[\"接口提示等功能\",{\"1\":{\"455\":1}}],[\"接口中方法的合并\",{\"1\":{\"434\":1}}],[\"接口中的属性在合并时会简单的合并到一个接口中\",{\"1\":{\"434\":1}}],[\"接口的合并\",{\"0\":{\"434\":1}}],[\"接口的对象\",{\"1\":{\"147\":1}}],[\"接口继承类\",{\"0\":{\"425\":1}}],[\"接口继承接口\",{\"0\":{\"424\":1}}],[\"接口也要支持对收藏的更新\",{\"1\":{\"351\":1}}],[\"接口\",{\"0\":{\"229\":1,\"441\":1},\"1\":{\"180\":1}}],[\"接口且每个成员都是一个双元素的数组的数据结构都可以当做\",{\"1\":{\"161\":1}}],[\"合并行为\",{\"1\":{\"658\":1}}],[\"合并的属性的类型必须是唯一的\",{\"1\":{\"434\":1}}],[\"合并了不同类型的对象\",{\"1\":{\"412\":1}}],[\"合并多个对象\",{\"1\":{\"169\":1}}],[\"合并导出\",{\"1\":{\"164\":1}}],[\"合并数组\",{\"1\":{\"147\":1}}],[\"合并后的外边距的高度为两个外边距中的较大者\",{\"1\":{\"35\":1}}],[\"懒加载只能用于非路由匹配部分\",{\"1\":{\"377\":1}}],[\"懒加载\",{\"1\":{\"144\":1}}],[\"运行之后\",{\"1\":{\"269\":1}}],[\"运行时报错\",{\"1\":{\"144\":1}}],[\"运算符检查某个键名是否存在\",{\"1\":{\"226\":1}}],[\"运算符左边是实例对象\",{\"1\":{\"220\":1}}],[\"运算符返回一个布尔值\",{\"1\":{\"220\":1}}],[\"运算符的扩展\",{\"0\":{\"171\":1}}],[\"运算符如果变量不是指定的类型或者为\",{\"1\":{\"128\":1}}],[\"运算符重载\",{\"0\":{\"86\":1}}],[\"运算符\",{\"0\":{\"127\":1,\"241\":1},\"1\":{\"73\":1,\"128\":2,\"131\":1,\"220\":2,\"241\":1}}],[\"版本在\",{\"1\":{\"660\":1}}],[\"版本中\",{\"1\":{\"658\":1}}],[\"版本中在一个元素上同时使用\",{\"1\":{\"658\":1}}],[\"版本之后引入了\",{\"1\":{\"366\":1}}],[\"版本之后\",{\"1\":{\"266\":1}}],[\"版本后引入\",{\"1\":{\"144\":1}}],[\"版本被引入\",{\"1\":{\"117\":1}}],[\"创建项目\",{\"1\":{\"661\":1}}],[\"创建的只读代理\",{\"1\":{\"655\":1}}],[\"创建的响应式代理\",{\"1\":{\"655\":1}}],[\"创建的应用不支持\",{\"1\":{\"269\":1}}],[\"创建的应用\",{\"1\":{\"268\":1}}],[\"创建人员列表组件\",{\"1\":{\"618\":1}}],[\"创建结束后得到一个以项目名命名的文件夹\",{\"1\":{\"559\":1}}],[\"创建新的真实\",{\"1\":{\"535\":1}}],[\"创建订阅者\",{\"1\":{\"517\":1}}],[\"创建一个自定义的\",{\"1\":{\"651\":1}}],[\"创建一个\",{\"1\":{\"642\":1}}],[\"创建一个新的空白的文档片段\",{\"1\":{\"517\":1}}],[\"创建一个空对象\",{\"1\":{\"237\":1}}],[\"创建并返回\",{\"1\":{\"334\":1}}],[\"创建后会立即执行\",{\"1\":{\"176\":1}}],[\"创建\",{\"0\":{\"278\":1,\"366\":1,\"659\":1},\"1\":{\"141\":1,\"279\":1,\"344\":1,\"489\":2,\"494\":2,\"518\":1,\"621\":1,\"660\":1}}],[\"创建不转义的字符串\",{\"1\":{\"120\":1}}],[\"程序\",{\"0\":{\"141\":1,\"553\":1}}],[\"程序都必须有一个\",{\"1\":{\"102\":1}}],[\"|myslice\",{\"1\":{\"529\":1}}],[\"||=\",{\"1\":{\"174\":1}}],[\"||\",{\"1\":{\"172\":2,\"257\":1,\"343\":1,\"344\":2,\"353\":4,\"517\":1,\"603\":1}}],[\"|\",{\"1\":{\"140\":1,\"283\":2,\"324\":2,\"335\":1,\"353\":3,\"358\":1,\"379\":2,\"380\":1,\"410\":1,\"411\":1,\"414\":1,\"440\":4,\"441\":1,\"450\":3,\"451\":3,\"529\":1}}],[\"生效\",{\"1\":{\"658\":1}}],[\"生命周期管理等\",{\"1\":{\"344\":1}}],[\"生命周期在线图示\",{\"1\":{\"308\":1}}],[\"生命周期是\",{\"1\":{\"308\":1}}],[\"生命周期\",{\"0\":{\"308\":1,\"530\":1,\"638\":1}}],[\"生成的响应式对象转为普通对象\",{\"1\":{\"650\":1}}],[\"生成的\",{\"1\":{\"492\":1}}],[\"生成新的\",{\"1\":{\"329\":1}}],[\"生成实例的时候\",{\"1\":{\"239\":1}}],[\"生成器函数与同步类似\",{\"1\":{\"109\":1}}],[\"生成器函数\",{\"1\":{\"109\":2}}],[\"生成器\",{\"0\":{\"109\":1}}],[\"生产环境中\",{\"1\":{\"138\":1}}],[\"抛出错误\",{\"1\":{\"371\":1}}],[\"抛出错误的对象会被\",{\"1\":{\"152\":1}}],[\"抛出一个错误\",{\"1\":{\"234\":1}}],[\"抛出\",{\"1\":{\"138\":1}}],[\"断言与类型声明\",{\"0\":{\"454\":1}}],[\"断言与类型转换\",{\"0\":{\"453\":1}}],[\"断言为一个具体的类型\",{\"1\":{\"451\":1}}],[\"断言会被忽略\",{\"1\":{\"138\":1}}],[\"断言是否生效取决于开发工具和所使用的框架\",{\"1\":{\"138\":1}}],[\"断言\",{\"0\":{\"138\":1}}],[\"都无效\",{\"1\":{\"636\":1}}],[\"都必须在调用时传入参数\",{\"1\":{\"617\":1}}],[\"都必须要包含一个\",{\"1\":{\"137\":1}}],[\"都建议创建一个新的副本而不是直接修改原始状态\",{\"1\":{\"406\":1}}],[\"都要指定插槽名\",{\"1\":{\"552\":1}}],[\"都要操作同一个\",{\"1\":{\"379\":1}}],[\"都要将实例传入此组件的\",{\"1\":{\"367\":1}}],[\"都要设置为\",{\"1\":{\"209\":1}}],[\"都会导致调用\",{\"1\":{\"380\":1}}],[\"都会被触发\",{\"1\":{\"379\":1}}],[\"都会打印日志\",{\"1\":{\"354\":1}}],[\"都会调用清理函数\",{\"1\":{\"288\":1}}],[\"都有一个对应的\",{\"1\":{\"352\":1}}],[\"都应该是返回\",{\"1\":{\"344\":1}}],[\"都匹配\",{\"1\":{\"338\":1}}],[\"都描述了一个单一的用户交互\",{\"1\":{\"326\":1}}],[\"都具有编辑\",{\"1\":{\"323\":1}}],[\"都通过返回值获取属性值\",{\"1\":{\"615\":1}}],[\"都通过\",{\"1\":{\"283\":1}}],[\"都可以接受第二个参数绑定函数内部的\",{\"1\":{\"215\":1}}],[\"都接受一个函数作为参数\",{\"1\":{\"215\":1}}],[\"都是一个键\",{\"1\":{\"161\":1}}],[\"都是对象\",{\"1\":{\"117\":1}}],[\"都是\",{\"1\":{\"94\":1,\"119\":1,\"492\":1,\"555\":1}}],[\"都是可以抽象的\",{\"1\":{\"88\":1}}],[\"都是body传参\",{\"1\":{\"18\":1}}],[\"索引值\",{\"1\":{\"135\":1}}],[\"循环中的闭包会自动捕获循环的\",{\"1\":{\"135\":1}}],[\"循环\",{\"1\":{\"135\":1}}],[\"标记一个对象\",{\"1\":{\"650\":1}}],[\"标题\",{\"1\":{\"337\":1,\"344\":1}}],[\"标题单元格\",{\"1\":{\"203\":1}}],[\"标签包裹组件\",{\"1\":{\"646\":1}}],[\"标签包裹\",{\"1\":{\"596\":1}}],[\"标签写法与\",{\"1\":{\"586\":1}}],[\"标签使用路由\",{\"1\":{\"576\":1}}],[\"标签添加\",{\"1\":{\"570\":1}}],[\"标签添加一个\",{\"1\":{\"368\":1}}],[\"标签体内容\",{\"1\":{\"554\":1}}],[\"标签上获取的是真实\",{\"1\":{\"562\":1}}],[\"标签上\",{\"1\":{\"551\":1}}],[\"标签引入又可以通过\",{\"1\":{\"461\":1}}],[\"标签引入第三方库\",{\"1\":{\"459\":1}}],[\"标签会触发浏览器刷新\",{\"1\":{\"368\":1}}],[\"标签防止浏览器刷新界面\",{\"0\":{\"368\":1}}],[\"标签无法接收\",{\"1\":{\"306\":1}}],[\"标签指定链接到的组件的显示位置\",{\"1\":{\"576\":1}}],[\"标签指定\",{\"1\":{\"306\":1}}],[\"标签指定网页内部的所有相对\",{\"1\":{\"190\":1}}],[\"标签传递的值传给子组件\",{\"1\":{\"280\":1}}],[\"标签将希望透传\",{\"1\":{\"280\":1}}],[\"标签将要使用\",{\"1\":{\"279\":1}}],[\"标签用在语句前面\",{\"1\":{\"213\":1}}],[\"标签中的\",{\"1\":{\"203\":1}}],[\"标签中的所有\",{\"1\":{\"63\":1}}],[\"标签中\",{\"1\":{\"203\":1,\"306\":1}}],[\"标签就是一个元数据\",{\"1\":{\"199\":1}}],[\"标签可以不闭合\",{\"1\":{\"193\":1}}],[\"标签的信息\",{\"1\":{\"317\":1}}],[\"标签的一些属性\",{\"1\":{\"197\":1}}],[\"标签的\",{\"1\":{\"197\":1,\"286\":1,\"290\":1,\"293\":1,\"361\":1,\"534\":1,\"551\":1}}],[\"标签的类型\",{\"1\":{\"193\":1}}],[\"标签的属性\",{\"1\":{\"193\":1}}],[\"标签属性\",{\"1\":{\"193\":2,\"554\":1}}],[\"标签之中\",{\"1\":{\"193\":1}}],[\"标签\",{\"1\":{\"190\":1,\"193\":3,\"196\":2,\"199\":1,\"202\":1,\"213\":1,\"279\":1,\"305\":1,\"306\":3,\"362\":1,\"366\":1,\"367\":1,\"368\":1,\"550\":1,\"591\":1,\"592\":1,\"596\":1}}],[\"标准\",{\"1\":{\"135\":1}}],[\"访问传递的参数\",{\"1\":{\"578\":1}}],[\"访问任何属性都是允许的\",{\"1\":{\"451\":1}}],[\"访问其他组件\",{\"1\":{\"362\":1}}],[\"访问其他组件的\",{\"0\":{\"362\":1}}],[\"访问\",{\"1\":{\"132\":1}}],[\"访问过的链接\",{\"1\":{\"60\":1}}],[\"其它改变\",{\"0\":{\"658\":1}}],[\"其它\",{\"0\":{\"647\":1}}],[\"其它参数都应该是只读的\",{\"1\":{\"547\":1}}],[\"其\",{\"1\":{\"642\":1}}],[\"其实是先将\",{\"1\":{\"516\":1}}],[\"其实就是一个函数\",{\"1\":{\"459\":1}}],[\"其实已经生效了\",{\"1\":{\"380\":1}}],[\"其实只需要触发\",{\"1\":{\"379\":1}}],[\"其中\",{\"1\":{\"351\":1,\"517\":1,\"618\":1}}],[\"其中包含我们定义的查询\",{\"1\":{\"348\":1}}],[\"其中包含有关发生的事情的附加信息\",{\"1\":{\"331\":1}}],[\"其中有的事件属性是\",{\"1\":{\"289\":1}}],[\"其中几个主要设置\",{\"1\":{\"267\":1}}],[\"其中的\",{\"1\":{\"159\":1}}],[\"其他改变\",{\"0\":{\"656\":1}}],[\"其他方法\",{\"1\":{\"461\":1}}],[\"其他变量需要先定义出来再默认导出\",{\"1\":{\"460\":1}}],[\"其他地方要修改\",{\"1\":{\"309\":1}}],[\"其他选项参考\",{\"1\":{\"267\":1}}],[\"其他模块放置在自己的命名空间中\",{\"1\":{\"207\":1}}],[\"其他\",{\"0\":{\"201\":1,\"400\":1}}],[\"其他运算符\",{\"0\":{\"132\":1}}],[\"其余内容将不可见\",{\"1\":{\"55\":1}}],[\"级联运算符\",{\"0\":{\"131\":1},\"1\":{\"131\":1}}],[\"病返回表达式\",{\"1\":{\"130\":1}}],[\"赋值给其他类型变量\",{\"1\":{\"437\":1}}],[\"赋值给\",{\"1\":{\"334\":1}}],[\"赋值给一个\",{\"1\":{\"123\":1}}],[\"赋值为\",{\"1\":{\"185\":1}}],[\"赋值运算符\",{\"0\":{\"129\":1},\"1\":{\"129\":1,\"174\":1}}],[\"判断一个对象是否是参数对象的原型\",{\"1\":{\"240\":1}}],[\"判断是否是自身的属性\",{\"1\":{\"224\":1}}],[\"判断运算符\",{\"0\":{\"173\":1}}],[\"判断后\",{\"1\":{\"128\":1}}],[\"判断对象是否是指定的类型\",{\"1\":{\"128\":1}}],[\"才触发\",{\"1\":{\"522\":1}}],[\"才会应用到这些类型声明\",{\"1\":{\"460\":1}}],[\"才会有对应\",{\"1\":{\"344\":1}}],[\"才会返回右侧的值\",{\"1\":{\"173\":1}}],[\"才是当前组件对象\",{\"1\":{\"502\":1}}],[\"才是\",{\"1\":{\"128\":1}}],[\"才能\",{\"1\":{\"94\":1}}],[\"🇩🇰\",{\"1\":{\"125\":1}}],[\"操作数据与读取数据均不需要\",{\"1\":{\"632\":1}}],[\"操作数据需要\",{\"1\":{\"632\":1}}],[\"操作源对象内部的数据\",{\"1\":{\"632\":1}}],[\"操作一个对象的多个属性时提供方便\",{\"1\":{\"224\":1}}],[\"操作\",{\"0\":{\"361\":1},\"1\":{\"122\":1,\"286\":1,\"363\":1,\"403\":1}}],[\"操作符\",{\"1\":{\"91\":1}}],[\"集合中的\",{\"1\":{\"122\":1}}],[\"布尔模式\",{\"0\":{\"586\":1}}],[\"布尔值转换规则\",{\"1\":{\"221\":1}}],[\"布尔值\",{\"0\":{\"221\":1},\"1\":{\"229\":3,\"231\":2,\"344\":4,\"631\":1}}],[\"布尔类型\",{\"0\":{\"121\":1}}],[\"布局以后\",{\"1\":{\"44\":1}}],[\"布局\",{\"0\":{\"44\":1,\"48\":1},\"1\":{\"44\":2}}],[\"多组件共享数据\",{\"0\":{\"618\":1}}],[\"多级路由\",{\"0\":{\"577\":1}}],[\"多级传递\",{\"1\":{\"277\":1}}],[\"多余的或者少于的参数输入是不被允许的\",{\"1\":{\"444\":1}}],[\"多媒体标签\",{\"0\":{\"200\":1}}],[\"多个视图需要多个组件\",{\"1\":{\"583\":1}}],[\"多个过滤器可以串联\",{\"1\":{\"529\":1}}],[\"多个单词\",{\"1\":{\"490\":1}}],[\"多个中间件结合\",{\"0\":{\"247\":1}}],[\"多个模块之间有不同的\",{\"1\":{\"207\":1}}],[\"多个\",{\"1\":{\"152\":1}}],[\"多个类型参数之间也可以互相约束\",{\"1\":{\"428\":1}}],[\"多个类型参数\",{\"0\":{\"427\":1}}],[\"多个类\",{\"1\":{\"94\":1}}],[\"多行字符串\",{\"1\":{\"120\":1}}],[\"之间跳转时\",{\"1\":{\"605\":1}}],[\"之间的十六进制值\",{\"1\":{\"42\":1}}],[\"之间的数字\",{\"1\":{\"41\":1}}],[\"之间的颜色强度\",{\"1\":{\"40\":1}}],[\"之外\",{\"1\":{\"279\":1,\"352\":1,\"359\":1,\"547\":1}}],[\"之后进行同步\",{\"1\":{\"511\":1}}],[\"之后对应的\",{\"1\":{\"344\":1}}],[\"之后的逻辑也会执行\",{\"1\":{\"340\":1}}],[\"之后都再次\",{\"1\":{\"338\":1}}],[\"之后\",{\"1\":{\"279\":1}}],[\"之前执行\",{\"1\":{\"633\":1}}],[\"之前发起异步逻辑\",{\"1\":{\"338\":1}}],[\"之前在介绍\",{\"1\":{\"334\":1}}],[\"之前的路径是\",{\"1\":{\"381\":1}}],[\"之前的\",{\"1\":{\"296\":1}}],[\"之前先考虑下面几种替代方案\",{\"1\":{\"281\":1}}],[\"之前要应用于\",{\"1\":{\"269\":1}}],[\"之前不能使用\",{\"1\":{\"154\":1}}],[\"之前\",{\"1\":{\"119\":1,\"288\":1,\"605\":1}}],[\"此对象所有的键值对都会以\",{\"1\":{\"587\":1}}],[\"此处要返回\",{\"1\":{\"641\":1}}],[\"此处强制开启了深度监视\",{\"1\":{\"636\":1}}],[\"此处可能无法正确获取\",{\"1\":{\"636\":1}}],[\"此处回调函数如果写成普通函数\",{\"1\":{\"543\":1}}],[\"此处this是vm\",{\"1\":{\"504\":1}}],[\"此数组包含从根路径一直到当前组件路径的路由\",{\"1\":{\"401\":1}}],[\"此组件接收三个属性\",{\"1\":{\"407\":1}}],[\"此组件可以指定\",{\"1\":{\"399\":1}}],[\"此组件支持调用其他\",{\"1\":{\"398\":1}}],[\"此组件有三个属性\",{\"1\":{\"391\":1}}],[\"此属性取值与\",{\"1\":{\"396\":1}}],[\"此属性用来指定如果\",{\"1\":{\"391\":1}}],[\"此属性接收一个\",{\"1\":{\"391\":1}}],[\"此字段类似\",{\"1\":{\"344\":1}}],[\"此参数是一个函数\",{\"1\":{\"343\":1}}],[\"此函数中取消订阅\",{\"1\":{\"408\":1}}],[\"此函数中不应该再调用\",{\"1\":{\"313\":1}}],[\"此函数第一个参数是\",{\"1\":{\"379\":1}}],[\"此函数的入参就是这个标签\",{\"1\":{\"361\":1}}],[\"此函数入参是\",{\"1\":{\"356\":1}}],[\"此函数接收一个对象\",{\"1\":{\"368\":1,\"378\":1,\"379\":1}}],[\"此函数接收一个\",{\"1\":{\"355\":1}}],[\"此函数通常接受一组输入选择器和一个转换函数作为参数\",{\"1\":{\"342\":1}}],[\"此函数如果返回\",{\"1\":{\"313\":1}}],[\"此函数应该是一个纯函数\",{\"1\":{\"311\":1}}],[\"此选项决定如何应用\",{\"1\":{\"269\":1}}],[\"此选项表示在处理\",{\"1\":{\"269\":1}}],[\"此选项允许编译时包含\",{\"1\":{\"267\":1}}],[\"此操作不可逆\",{\"1\":{\"269\":1}}],[\"此命令将所有的配置暴露出来\",{\"1\":{\"269\":1}}],[\"此签名密钥用于检测下次接收\",{\"1\":{\"243\":1}}],[\"此标签用于设置或说明网页的元数据\",{\"1\":{\"199\":1}}],[\"此时新人的\",{\"1\":{\"534\":1}}],[\"此时虚拟\",{\"1\":{\"534\":1}}],[\"此时数组中所有元素的下标都发生了改变\",{\"1\":{\"534\":1}}],[\"此时会得到一个\",{\"1\":{\"470\":1}}],[\"此时推断\",{\"1\":{\"440\":1}}],[\"此时需要使用类型断言来让\",{\"1\":{\"413\":1}}],[\"此时可以使用\",{\"1\":{\"395\":1}}],[\"此时\",{\"1\":{\"345\":1}}],[\"此时字符串被转换成了一个类似数组的对象\",{\"1\":{\"187\":1}}],[\"此时这个变量已经变成函数\",{\"1\":{\"13\":1}}],[\"此方法用法和\",{\"1\":{\"397\":1}}],[\"此方法用于对象的合并\",{\"1\":{\"169\":1}}],[\"此方法包裹的内容会异步执行\",{\"1\":{\"390\":1}}],[\"此方法类似\",{\"1\":{\"384\":1}}],[\"此方法支持相对路径\",{\"1\":{\"381\":1}}],[\"此方法如果返回\",{\"1\":{\"380\":1}}],[\"此方法返回一个数组\",{\"1\":{\"403\":1}}],[\"此方法返回一个函数\",{\"1\":{\"379\":1}}],[\"此方法返回一个布尔值\",{\"1\":{\"149\":1}}],[\"此方法应该返回一个对象\",{\"1\":{\"378\":1}}],[\"此方法可以直接更新缓存中的查询数据\",{\"1\":{\"351\":1}}],[\"此方法可以缓存\",{\"1\":{\"342\":1}}],[\"此方法可以用来发起远程请求初始化数据等\",{\"1\":{\"312\":1}}],[\"此方法中不应该再调用\",{\"1\":{\"316\":1}}],[\"此方法中再次获取到的\",{\"1\":{\"314\":1}}],[\"此方法将会在每次重新渲染后触发\",{\"1\":{\"315\":1}}],[\"此方法的任何返回值将作为参数传递给\",{\"1\":{\"314\":1}}],[\"此方法在最近一次渲染输出前调用\",{\"1\":{\"314\":1}}],[\"此方法会在组件卸载及销毁之前直接调用\",{\"1\":{\"316\":1}}],[\"此方法会在组件挂载后立即调用\",{\"1\":{\"312\":1}}],[\"此方法会在调用\",{\"1\":{\"310\":1}}],[\"此方法是类组件中唯一必须要实现的方法\",{\"1\":{\"311\":1}}],[\"此方法是浅拷贝\",{\"1\":{\"169\":1}}],[\"此方法接收一个对象参数\",{\"1\":{\"380\":1}}],[\"此方法接收\",{\"1\":{\"304\":1}}],[\"此方法接收两个参数\",{\"1\":{\"301\":1}}],[\"此方法能够延迟加载组件\",{\"1\":{\"304\":1}}],[\"此方法知识取消事件对当前元素的默认影响\",{\"1\":{\"231\":1}}],[\"此方法只对数值有效\",{\"1\":{\"222\":1}}],[\"此外\",{\"1\":{\"118\":1,\"190\":1,\"305\":1,\"368\":1,\"381\":1,\"406\":1}}],[\"构造的响应\",{\"1\":{\"335\":1}}],[\"构造器中初始化\",{\"1\":{\"309\":1}}],[\"构造器通常用于初始化\",{\"1\":{\"309\":1}}],[\"构造器可以返回其他实例对象\",{\"1\":{\"153\":1}}],[\"构造器\",{\"0\":{\"309\":1},\"1\":{\"118\":1}}],[\"构造函数接受一个参数表示错误提示\",{\"1\":{\"234\":1}}],[\"构造函数接受一个函数作为参数\",{\"1\":{\"176\":1}}],[\"构造函数接受两个参数\",{\"1\":{\"231\":1}}],[\"构造函数的参数\",{\"1\":{\"161\":1}}],[\"构造函数的实例变量赋值过程都是一样的\",{\"1\":{\"75\":1}}],[\"构造函数相关的执行顺序\",{\"1\":{\"79\":1}}],[\"构造函数不被继承\",{\"0\":{\"77\":1}}],[\"构造函数\",{\"0\":{\"75\":1},\"1\":{\"162\":2,\"225\":1,\"238\":1}}],[\"构造函数前的\",{\"1\":{\"72\":1}}],[\"支持函数重载\",{\"1\":{\"459\":1}}],[\"支持异步并从服务器获取数据\",{\"1\":{\"358\":1}}],[\"支持\",{\"1\":{\"209\":1,\"210\":1,\"366\":1}}],[\"支持的集合由集合的字面量和\",{\"1\":{\"123\":1}}],[\"支持顶级变量\",{\"1\":{\"117\":1}}],[\"支持顶级函数\",{\"1\":{\"117\":1}}],[\"支持泛型\",{\"1\":{\"117\":1}}],[\"空格\",{\"1\":{\"522\":1}}],[\"空格会被自动去除\",{\"1\":{\"222\":1}}],[\"空格分隔\",{\"1\":{\"193\":1}}],[\"空对象都会转为\",{\"1\":{\"221\":1}}],[\"空数组\",{\"1\":{\"221\":1}}],[\"空感知扩展操作符\",{\"1\":{\"122\":1}}],[\"空安全在\",{\"1\":{\"117\":1}}],[\"空白\",{\"1\":{\"65\":1}}],[\"数量应该相同\",{\"1\":{\"345\":1}}],[\"数据时使用\",{\"1\":{\"615\":1}}],[\"数据劫持\",{\"1\":{\"516\":2,\"630\":1}}],[\"数据代理的作用\",{\"1\":{\"516\":1}}],[\"数据代理基本原理\",{\"0\":{\"514\":1}}],[\"数据代理\",{\"0\":{\"513\":1,\"515\":1},\"1\":{\"515\":1}}],[\"数据也会跟着变化\",{\"1\":{\"510\":1}}],[\"数据既能从\",{\"1\":{\"508\":1}}],[\"数据只能从\",{\"1\":{\"508\":1}}],[\"数据绑定\",{\"0\":{\"508\":1}}],[\"数据被保存在了浏览器历史记录\",{\"1\":{\"385\":1}}],[\"数据\",{\"1\":{\"378\":1}}],[\"数据的流转就像下面这样\",{\"1\":{\"338\":1}}],[\"数据仍然是只在这个应用中流转\",{\"1\":{\"338\":1}}],[\"数据类型的转换\",{\"0\":{\"233\":1}}],[\"数据类型\",{\"0\":{\"219\":1}}],[\"数据单元格\",{\"1\":{\"203\":1}}],[\"数据提交到服务器的编码方式\",{\"1\":{\"193\":1}}],[\"数值\",{\"0\":{\"222\":1}}],[\"数值和布尔值的解构赋值\",{\"0\":{\"188\":1}}],[\"数值越小排列越靠前\",{\"1\":{\"46\":1}}],[\"数组类型\",{\"1\":{\"630\":1}}],[\"数组写法\",{\"1\":{\"482\":1,\"616\":3,\"617\":2}}],[\"数组泛型\",{\"1\":{\"442\":1}}],[\"数组合并了相同类型的对象\",{\"1\":{\"412\":1}}],[\"数组第一个元素为创建的变量\",{\"1\":{\"403\":1}}],[\"数组内元素\",{\"1\":{\"401\":1}}],[\"数组\",{\"0\":{\"226\":1},\"1\":{\"343\":1,\"442\":1,\"539\":1,\"600\":1}}],[\"数组专有的方法不能在这个对象上使用\",{\"1\":{\"225\":1}}],[\"数组是整体替换那将不会影响原来的对象\",{\"1\":{\"225\":1}}],[\"数组本身\",{\"1\":{\"215\":1}}],[\"数组的第二个元素是捕获到的插值表达式内容\",{\"1\":{\"517\":1}}],[\"数组的类型\",{\"0\":{\"442\":1}}],[\"数组的解构赋值\",{\"0\":{\"185\":1}}],[\"数组的扩展\",{\"0\":{\"146\":1}}],[\"数组转\",{\"1\":{\"162\":1}}],[\"数组实例的\",{\"0\":{\"148\":1,\"149\":1}}],[\"数字字面量\",{\"1\":{\"414\":1}}],[\"数字1\",{\"1\":{\"198\":1}}],[\"数字\",{\"1\":{\"117\":1,\"208\":1}}],[\"但变化时只是外层属性变化\",{\"1\":{\"648\":1}}],[\"但可以批量创建多个\",{\"1\":{\"642\":1}}],[\"但没有在\",{\"1\":{\"633\":1}}],[\"但\",{\"1\":{\"622\":1,\"637\":1}}],[\"但这个路由激活钩子会反复调用\",{\"1\":{\"598\":1}}],[\"但原生\",{\"1\":{\"530\":1}}],[\"但使用\",{\"1\":{\"507\":1}}],[\"但要动态决定用不用\",{\"1\":{\"482\":1}}],[\"但第一个枚举元素是个例外\",{\"1\":{\"414\":1}}],[\"但它是一个对象\",{\"1\":{\"225\":1}}],[\"但不会跳过\",{\"1\":{\"215\":1}}],[\"但不能判断一个对象是不是\",{\"1\":{\"114\":1}}],[\"但必须具有\",{\"1\":{\"180\":1}}],[\"但是多层次不连续的属性名不能简写\",{\"1\":{\"622\":1}}],[\"但是能做到全局复用\",{\"1\":{\"615\":1}}],[\"但是路由匹配则为\",{\"1\":{\"582\":1}}],[\"但是这个指令只能使用在\",{\"1\":{\"551\":1}}],[\"但是这个运算符不会区分哪些属性是继承的\",{\"1\":{\"224\":1}}],[\"但是可能发生在其子\",{\"1\":{\"547\":1}}],[\"但是可以在类型后面加上问号将类型声明为可以是原类型也可以是\",{\"1\":{\"117\":1}}],[\"但是可以通过\",{\"1\":{\"117\":1}}],[\"但是信息已被修改\",{\"1\":{\"538\":1}}],[\"但是添加的时候加在数组尾部就不会出现这个问题\",{\"1\":{\"534\":1}}],[\"但是原先的\",{\"1\":{\"534\":1}}],[\"但是其中结构不能被打断\",{\"1\":{\"507\":1}}],[\"但是更加灵活\",{\"1\":{\"496\":1}}],[\"但是要注意如果原数据排序因为新数据发生了修改就会出现上面的问题\",{\"1\":{\"534\":1}}],[\"但是要注意如果是将前端页面放在\",{\"1\":{\"366\":1}}],[\"但是要注意\",{\"1\":{\"483\":1}}],[\"但是还是能断言成功\",{\"1\":{\"452\":1}}],[\"但是对于\",{\"1\":{\"438\":1}}],[\"但是对于上面的例子来说\",{\"1\":{\"301\":1}}],[\"但是类型都是\",{\"1\":{\"434\":1}}],[\"但是因为第二步\",{\"1\":{\"403\":1}}],[\"但是因为有异步操作\",{\"1\":{\"379\":1}}],[\"但是有些时候出于代码复用的考虑\",{\"1\":{\"395\":1}}],[\"但是只访问\",{\"1\":{\"373\":1}}],[\"但是只是将变量的声明提前了\",{\"1\":{\"213\":1}}],[\"但是允许一个组件选择接收父组件的\",{\"1\":{\"362\":1}}],[\"但是此形式已过时\",{\"1\":{\"361\":1}}],[\"但是此时请求还没结束\",{\"1\":{\"345\":1}}],[\"但是设置\",{\"1\":{\"360\":1}}],[\"但是修改\",{\"1\":{\"360\":1}}],[\"但是程序中总是要有处理异步的地方\",{\"1\":{\"358\":1}}],[\"但是建议使用返回的新切片而不是旧切片\",{\"1\":{\"349\":1}}],[\"但是没有被更新到的文章实际上不需要重新请求\",{\"1\":{\"347\":1}}],[\"但是现在仍然存在一个问题\",{\"1\":{\"347\":1}}],[\"但是里面的内容变化了\",{\"1\":{\"330\":1}}],[\"但是父组件需要维护大量的状态\",{\"1\":{\"329\":1}}],[\"但是一旦逻辑变得复杂可读性将会下降\",{\"1\":{\"325\":1}}],[\"但是由于\",{\"1\":{\"301\":1}}],[\"但是很慢\",{\"1\":{\"301\":1}}],[\"但是很多时候我们只需要定制\",{\"1\":{\"356\":1}}],[\"但是很多时候并不需要执行\",{\"1\":{\"287\":1}}],[\"但是很多情况下\",{\"1\":{\"296\":1}}],[\"但是事件是否上报可能只取决于其中一个字段\",{\"1\":{\"289\":1}}],[\"但是生命周期的效果可以通过\",{\"1\":{\"284\":1}}],[\"但是新版本建议使用\",{\"1\":{\"279\":1}}],[\"但是默认情况下这个回调函数只会收到一个\",{\"1\":{\"275\":1}}],[\"但是仅局部化纯类名\",{\"1\":{\"269\":1}}],[\"但是又允许像\",{\"1\":{\"269\":1}}],[\"但是仍想运行这个包可以使用\",{\"1\":{\"266\":1}}],[\"但是不更新页面\",{\"1\":{\"380\":1}}],[\"但是不需要全局唯一\",{\"1\":{\"306\":1}}],[\"但是不响应\",{\"0\":{\"289\":1}}],[\"但是不能直接在函数中通过\",{\"1\":{\"286\":1}}],[\"但是不能取消匿名函数的监听\",{\"1\":{\"229\":1}}],[\"但是不想继承\",{\"1\":{\"90\":1}}],[\"但是无法控制脚本的执行顺序\",{\"1\":{\"227\":1}}],[\"但是无论如何嵌套\",{\"1\":{\"159\":1}}],[\"但是普通的解构赋值可以\",{\"1\":{\"167\":1}}],[\"但是\",{\"1\":{\"145\":1,\"284\":1,\"306\":1,\"329\":1,\"348\":1,\"353\":1,\"573\":1}}],[\"但是它们的\",{\"1\":{\"126\":1}}],[\"但是它们对于那些通过名称引用标识符的\",{\"1\":{\"126\":1}}],[\"但是它不是相对视窗而是相对于最近的\",{\"1\":{\"54\":1}}],[\"但是注意\",{\"1\":{\"122\":1}}],[\"但是编译器不这么认为\",{\"1\":{\"117\":1}}],[\"但是如果使用的状态更新函数\",{\"1\":{\"403\":1}}],[\"但是如果使用了\",{\"1\":{\"368\":1}}],[\"但是如果要连续多级传递数据那么就要连续传递\",{\"1\":{\"276\":1}}],[\"但是如果是空数组或者是只有一个数值成员的数组会返回\",{\"1\":{\"222\":1}}],[\"但是如果是使用了\",{\"1\":{\"99\":1}}],[\"但是如果实际上没有初始化则会在运行期报错\",{\"1\":{\"144\":1}}],[\"但是如果不先设置\",{\"1\":{\"54\":1}}],[\"但是在声明文件中\",{\"1\":{\"459\":1}}],[\"但是在\",{\"1\":{\"96\":1,\"338\":1,\"456\":1}}],[\"但是实例方法可以访问静态成员\",{\"1\":{\"95\":1}}],[\"泛型参数的默认类型\",{\"0\":{\"431\":1}}],[\"泛型类\",{\"0\":{\"430\":1}}],[\"泛型接口\",{\"0\":{\"429\":1}}],[\"泛型约束也可以放到接口上\",{\"1\":{\"429\":1}}],[\"泛型约束\",{\"0\":{\"428\":1}}],[\"泛型方法中的泛型标志\",{\"1\":{\"116\":1}}],[\"泛型方法不能覆盖非泛型方法\",{\"1\":{\"91\":1}}],[\"泛型集合\",{\"0\":{\"114\":1}}],[\"泛型\",{\"0\":{\"110\":1,\"426\":1}}],[\">sum++<\",{\"1\":{\"653\":1,\"654\":1}}],[\">关闭<\",{\"1\":{\"645\":1}}],[\">弹窗<\",{\"1\":{\"645\":1}}],[\">测试按钮<\",{\"1\":{\"633\":1}}],[\">测试<\",{\"1\":{\"626\":1}}],[\">切换天气<\",{\"1\":{\"621\":1,\"622\":1}}],[\">延迟两秒加<\",{\"1\":{\"614\":1}}],[\">当前求和为奇数才加<\",{\"1\":{\"614\":1}}],[\">3<\",{\"1\":{\"614\":1}}],[\">2<\",{\"1\":{\"614\":1}}],[\">1<\",{\"1\":{\"614\":1}}],[\">123<\",{\"1\":{\"268\":1}}],[\">message<\",{\"1\":{\"589\":1}}],[\">news<\",{\"1\":{\"589\":1}}],[\">name++<\",{\"1\":{\"642\":2}}],[\">name\",{\"1\":{\"569\":1}}],[\">n++<\",{\"1\":{\"548\":1}}],[\">hello\",{\"1\":{\"562\":1}}],[\">home<\",{\"1\":{\"365\":1,\"366\":1,\"368\":1,\"576\":1}}],[\">性别\",{\"1\":{\"539\":1}}],[\">更新cty的信息<\",{\"1\":{\"538\":1}}],[\">默认顺序<\",{\"1\":{\"537\":1}}],[\">成绩降序<\",{\"1\":{\"537\":1}}],[\">成绩升序<\",{\"1\":{\"537\":1}}],[\">添加一个人<\",{\"1\":{\"534\":1}}],[\">what\",{\"1\":{\"521\":1}}],[\">div2<\",{\"1\":{\"521\":1}}],[\">d\",{\"1\":{\"510\":1}}],[\">delete<\",{\"1\":{\"379\":1}}],[\">b<\",{\"1\":{\"510\":1}}],[\">b\",{\"1\":{\"510\":2}}],[\">back<\",{\"1\":{\"337\":1,\"344\":1}}],[\">欢迎\",{\"1\":{\"507\":2}}],[\">点击前往主页<\",{\"1\":{\"553\":1}}],[\">点击提示信息<\",{\"1\":{\"520\":2}}],[\">点击<\",{\"1\":{\"197\":1}}],[\">点我加一<\",{\"1\":{\"622\":2}}],[\">点我控制台输出<\",{\"1\":{\"569\":1}}],[\">点我输出上方dom<\",{\"1\":{\"562\":1}}],[\">点我<\",{\"1\":{\"507\":1,\"521\":3}}],[\">点我n+1<\",{\"1\":{\"479\":1,\"480\":1}}],[\">$\",{\"1\":{\"451\":1}}],[\">change\",{\"1\":{\"539\":2}}],[\">c\",{\"1\":{\"510\":1}}],[\">c++<\",{\"1\":{\"507\":1,\"642\":2}}],[\">c<\",{\"1\":{\"507\":1,\"510\":1}}],[\">create<\",{\"1\":{\"379\":3,\"384\":1,\"385\":1,\"398\":1}}],[\">click<\",{\"1\":{\"274\":1,\"406\":1}}],[\">addfriend<\",{\"1\":{\"539\":1}}],[\">add\",{\"1\":{\"539\":2}}],[\">add<\",{\"1\":{\"379\":1}}],[\">age++<\",{\"1\":{\"642\":2}}],[\">age\",{\"1\":{\"539\":1}}],[\">a<\",{\"1\":{\"510\":1}}],[\">a\",{\"1\":{\"510\":2}}],[\">about<\",{\"1\":{\"365\":1,\"576\":1}}],[\">link3<\",{\"1\":{\"372\":1}}],[\">link2<\",{\"1\":{\"372\":1}}],[\">link1<\",{\"1\":{\"372\":1}}],[\">oop\",{\"1\":{\"371\":1,\"392\":1}}],[\">unsubscribe<\",{\"1\":{\"354\":1}}],[\">+<\",{\"1\":{\"333\":1,\"614\":1}}],[\">incr<\",{\"1\":{\"329\":1}}],[\">print<\",{\"1\":{\"318\":2,\"319\":1}}],[\">=\",{\"1\":{\"275\":1,\"351\":1,\"378\":1}}],[\"><input\",{\"1\":{\"510\":1}}],[\"><span>hello\",{\"1\":{\"294\":1}}],[\"><\",{\"1\":{\"272\":4,\"274\":2,\"293\":4,\"294\":4,\"305\":4,\"306\":4,\"365\":1,\"368\":1,\"476\":2,\"477\":2,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":2,\"494\":2,\"496\":1,\"502\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":2,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":2,\"553\":1,\"564\":1,\"583\":3,\"617\":2,\"621\":1,\"622\":1,\"645\":1,\"658\":6}}],[\">>>\",{\"1\":{\"414\":1}}],[\">>\",{\"1\":{\"208\":1,\"414\":1}}],[\">\",{\"1\":{\"109\":1,\"119\":4,\"134\":1,\"140\":1,\"190\":1,\"196\":5,\"197\":1,\"210\":1,\"272\":7,\"273\":3,\"274\":14,\"275\":2,\"279\":4,\"280\":4,\"283\":7,\"286\":7,\"287\":7,\"290\":2,\"293\":3,\"294\":3,\"300\":1,\"301\":13,\"304\":1,\"305\":7,\"306\":9,\"307\":2,\"313\":1,\"314\":2,\"316\":1,\"318\":6,\"319\":3,\"320\":1,\"321\":3,\"322\":2,\"323\":6,\"329\":1,\"333\":5,\"334\":3,\"335\":7,\"336\":2,\"337\":28,\"338\":2,\"343\":2,\"344\":24,\"345\":14,\"351\":5,\"352\":3,\"359\":2,\"360\":9,\"361\":8,\"362\":7,\"363\":4,\"365\":2,\"366\":7,\"368\":5,\"369\":6,\"371\":3,\"372\":13,\"373\":4,\"374\":3,\"376\":2,\"377\":2,\"378\":2,\"379\":12,\"381\":2,\"384\":2,\"385\":3,\"387\":5,\"390\":10,\"392\":3,\"393\":4,\"394\":1,\"397\":5,\"398\":3,\"399\":9,\"402\":2,\"403\":23,\"404\":12,\"405\":13,\"406\":8,\"407\":4,\"408\":1,\"465\":2,\"476\":4,\"477\":4,\"478\":4,\"479\":4,\"480\":4,\"482\":9,\"483\":2,\"489\":5,\"490\":1,\"491\":3,\"494\":7,\"496\":2,\"501\":1,\"502\":1,\"504\":9,\"507\":6,\"509\":7,\"510\":14,\"511\":4,\"514\":3,\"515\":3,\"517\":7,\"518\":4,\"520\":4,\"521\":10,\"522\":5,\"523\":1,\"529\":7,\"532\":8,\"534\":8,\"536\":8,\"537\":9,\"538\":7,\"539\":8,\"548\":8,\"550\":7,\"551\":9,\"552\":7,\"553\":5,\"561\":1,\"562\":1,\"569\":2,\"578\":2,\"584\":1,\"596\":2,\"614\":2,\"618\":2,\"621\":5,\"622\":7,\"633\":2,\"645\":3,\"646\":2,\"651\":1,\"653\":1,\"658\":7}}],[\"实际开发中只会有一个\",{\"1\":{\"553\":1}}],[\"实际上已经帮你做了很多类型判断的工作\",{\"1\":{\"467\":1}}],[\"实现组件隔代通信\",{\"1\":{\"652\":1}}],[\"实现本地存储\",{\"1\":{\"557\":1}}],[\"实现监视\",{\"1\":{\"539\":1}}],[\"实现修改数据时\",{\"1\":{\"517\":1}}],[\"实现一个简单的数据双向绑定\",{\"0\":{\"517\":1}}],[\"实现多个接口\",{\"1\":{\"423\":1}}],[\"实现路由守卫功能\",{\"0\":{\"399\":1}}],[\"实现对\",{\"1\":{\"251\":1}}],[\"实现了订阅发布模型的库有很多\",{\"1\":{\"408\":1}}],[\"实现了\",{\"1\":{\"128\":1,\"147\":1}}],[\"实现\",{\"1\":{\"109\":1,\"268\":1,\"284\":1,\"290\":1,\"344\":1,\"360\":1,\"505\":1,\"628\":1}}],[\"实例具有相同方法和属性\",{\"1\":{\"614\":1}}],[\"实例和容器只能是一对一的\",{\"1\":{\"553\":1}}],[\"实例根数据对象\",{\"1\":{\"539\":1}}],[\"实例或者组件实例对象\",{\"1\":{\"624\":1}}],[\"实例或组件的实例对象\",{\"1\":{\"624\":1}}],[\"实例或组件实例对象\",{\"1\":{\"520\":1}}],[\"实例或\",{\"1\":{\"539\":1}}],[\"实例时传入\",{\"1\":{\"621\":1}}],[\"实例时就传入要监测的数据\",{\"1\":{\"539\":1}}],[\"实例时指定\",{\"1\":{\"518\":1}}],[\"实例了\",{\"1\":{\"520\":1}}],[\"实例的时候\",{\"1\":{\"580\":1}}],[\"实例的属性创建\",{\"1\":{\"516\":1}}],[\"实例的\",{\"1\":{\"516\":1}}],[\"实例的操作完成时\",{\"1\":{\"67\":1}}],[\"实例代理\",{\"1\":{\"516\":1}}],[\"实例上\",{\"1\":{\"505\":1,\"516\":1}}],[\"实例创建完毕并接管容器后\",{\"1\":{\"478\":1}}],[\"实例属性\",{\"1\":{\"417\":1}}],[\"实例对象简称\",{\"1\":{\"492\":1}}],[\"实例对象时传入\",{\"1\":{\"489\":1}}],[\"实例对象时传入的几乎一致\",{\"1\":{\"489\":1}}],[\"实例对象可以看作从原型对象衍生出来的子对象\",{\"1\":{\"239\":1}}],[\"实例对象与\",{\"0\":{\"237\":1}}],[\"实例对象\",{\"1\":{\"234\":1,\"474\":1,\"492\":2}}],[\"实例对象不能调用静态方法\",{\"1\":{\"95\":1}}],[\"实例包装成一个新的\",{\"1\":{\"180\":1}}],[\"实例生成以后可以用\",{\"1\":{\"176\":1}}],[\"实例方法\",{\"0\":{\"85\":1},\"1\":{\"88\":1,\"117\":1,\"231\":1}}],[\"实例变量\",{\"0\":{\"74\":1},\"1\":{\"117\":1}}],[\"实例\",{\"0\":{\"366\":1,\"548\":1},\"1\":{\"67\":1,\"176\":1,\"177\":2,\"180\":2,\"300\":1,\"366\":1,\"395\":1,\"408\":1,\"494\":1,\"517\":1,\"518\":1,\"553\":2,\"602\":1,\"609\":1,\"657\":1}}],[\"实例可以是已完成或者是未完成状态\",{\"1\":{\"67\":1}}],[\"实例没有可用的返回值\",{\"1\":{\"67\":1}}],[\"实例会返回一个类型为\",{\"1\":{\"67\":1}}],[\"keep\",{\"1\":{\"596\":6}}],[\"keepunuseddatafor\",{\"1\":{\"346\":2}}],[\"kebab\",{\"1\":{\"490\":1,\"547\":1}}],[\"keyword\",{\"1\":{\"536\":5,\"537\":3,\"651\":4}}],[\"keycode\",{\"1\":{\"522\":2,\"658\":1}}],[\"keycodes\",{\"1\":{\"522\":3,\"658\":1}}],[\"keydown\",{\"1\":{\"522\":2,\"618\":1}}],[\"keyup\",{\"1\":{\"522\":4}}],[\"keyboardevent\",{\"1\":{\"283\":1,\"323\":2,\"324\":1}}],[\"key=\",{\"1\":{\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"306\":1,\"314\":1,\"323\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":3,\"406\":1,\"532\":3,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":2,\"618\":1}}],[\"keygrip\",{\"1\":{\"243\":1}}],[\"keys\",{\"0\":{\"170\":1},\"1\":{\"170\":2,\"224\":1,\"517\":2}}],[\"key\",{\"0\":{\"533\":1},\"1\":{\"111\":4,\"124\":2,\"140\":2,\"170\":4,\"224\":4,\"283\":1,\"306\":10,\"323\":1,\"324\":1,\"407\":1,\"408\":1,\"430\":1,\"517\":9,\"522\":2,\"532\":2,\"534\":7,\"535\":7,\"557\":1}}],[\"kbd\",{\"1\":{\"204\":1}}],[\"kind\",{\"1\":{\"200\":1}}],[\"k++\",{\"1\":{\"109\":2}}],[\"k\",{\"1\":{\"109\":4}}],[\"koa\",{\"0\":{\"8\":1},\"1\":{\"242\":1,\"243\":15,\"246\":3,\"247\":7,\"249\":3,\"250\":3,\"252\":9,\"259\":4,\"260\":4,\"264\":2,\"265\":3,\"338\":6}}],[\"8888\",{\"1\":{\"270\":1}}],[\"8080\",{\"1\":{\"243\":3,\"246\":1,\"249\":1,\"250\":1,\"252\":1,\"260\":1,\"265\":1,\"338\":1,\"339\":1}}],[\"80\",{\"1\":{\"137\":2,\"537\":1,\"538\":1}}],[\"8\",{\"1\":{\"106\":2,\"158\":1,\"252\":1,\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":8,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"词法闭包\",{\"0\":{\"106\":1}}],[\"词法作用域\",{\"0\":{\"105\":1}}],[\"匿名函数\",{\"0\":{\"104\":1}}],[\"除了\",{\"1\":{\"547\":1}}],[\"除了输入法组织文字时\",{\"1\":{\"511\":1}}],[\"除了使用\",{\"1\":{\"465\":1}}],[\"除了使用函数定义组件\",{\"1\":{\"273\":1}}],[\"除了用于对类的一部分进行抽象\",{\"1\":{\"441\":1}}],[\"除了会创建一个名为\",{\"1\":{\"425\":1}}],[\"除了在\",{\"1\":{\"384\":1}}],[\"除了上面用到的\",{\"1\":{\"370\":1}}],[\"除了自定义异步\",{\"1\":{\"359\":1}}],[\"除了通过\",{\"1\":{\"279\":1}}],[\"除了动态参数标志字符可以配置外\",{\"1\":{\"208\":1}}],[\"除了调用父类构造函数之外\",{\"1\":{\"80\":1}}],[\"除非必须要使用监视属性\",{\"1\":{\"624\":1}}],[\"除非它所依赖的内容发生改变\",{\"1\":{\"503\":1}}],[\"除非\",{\"1\":{\"245\":1}}],[\"除非遇到\",{\"1\":{\"152\":1}}],[\"除非被标记为\",{\"1\":{\"99\":1}}],[\"除去\",{\"1\":{\"117\":1}}],[\"必要时决定如何更新状态并返回新状态\",{\"1\":{\"331\":1}}],[\"必要时添加清理函数\",{\"1\":{\"285\":1}}],[\"必要参数定义在参数列表前面\",{\"1\":{\"98\":1}}],[\"必要参数和可选参数\",{\"1\":{\"98\":1}}],[\"必须要写在创建\",{\"1\":{\"613\":1}}],[\"必须要包含\",{\"1\":{\"267\":1}}],[\"必须创建一个\",{\"1\":{\"553\":1}}],[\"必须指明数组下标或者对象的某个键\",{\"1\":{\"538\":1}}],[\"必须使用驼峰命名\",{\"1\":{\"483\":2}}],[\"必须兼容\",{\"1\":{\"454\":1}}],[\"必须通过不可变方式更新\",{\"1\":{\"331\":1}}],[\"必须符合以下规则\",{\"1\":{\"331\":1}}],[\"必须提前编写\",{\"1\":{\"325\":1}}],[\"必须是纯粹的\",{\"1\":{\"326\":1}}],[\"必须是一个有效值\",{\"1\":{\"267\":1}}],[\"必须是对象已有的属性\",{\"1\":{\"224\":1}}],[\"必须加引号\",{\"1\":{\"224\":1}}],[\"必须放在\",{\"1\":{\"199\":1}}],[\"必须与\",{\"1\":{\"196\":1}}],[\"必须小于\",{\"1\":{\"193\":1}}],[\"必须大于\",{\"1\":{\"193\":2}}],[\"必须在min属性和max属性之间\",{\"1\":{\"193\":1}}],[\"必须在对象外面加上大括号\",{\"1\":{\"159\":1}}],[\"必须在带有\",{\"1\":{\"67\":1}}],[\"必须声明时就赋值\",{\"1\":{\"145\":1}}],[\"必须继承\",{\"1\":{\"94\":1}}],[\"必须制定初始值或者使用\",{\"1\":{\"74\":1}}],[\"函数参数为\",{\"1\":{\"616\":1}}],[\"函数参数的解构赋值\",{\"0\":{\"189\":1}}],[\"函数参数的默认值\",{\"0\":{\"156\":1}}],[\"函数模式\",{\"0\":{\"588\":1}}],[\"函数式\",{\"1\":{\"518\":1}}],[\"函数式组件的参数是一个\",{\"1\":{\"318\":1}}],[\"函数式组件不能使用类组件中的生命周期\",{\"1\":{\"284\":1}}],[\"函数式组件可以通过第二个入参接收\",{\"1\":{\"279\":1}}],[\"函数式组件是一个返回\",{\"1\":{\"272\":1}}],[\"函数式组件\",{\"0\":{\"272\":1}}],[\"函数中的全局变量\",{\"1\":{\"517\":1}}],[\"函数中通过日志等形式可以快速排查问题\",{\"1\":{\"325\":1}}],[\"函数会将数组中的每个元素分多次传入\",{\"1\":{\"517\":1}}],[\"函数会导致在将上面\",{\"1\":{\"517\":1}}],[\"函数会返回一个数组\",{\"1\":{\"324\":1}}],[\"函数遍历这个对象的所有第一层属性\",{\"1\":{\"517\":1}}],[\"函数将数据渲染到页面上\",{\"1\":{\"517\":1}}],[\"函数对数据进行监听\",{\"1\":{\"517\":1}}],[\"函数声明\",{\"0\":{\"444\":1}}],[\"函数后更新页面\",{\"1\":{\"403\":1}}],[\"函数后读取状态变量\",{\"1\":{\"403\":1}}],[\"函数并计算出更新后的\",{\"1\":{\"331\":1}}],[\"函数和需要调度的\",{\"1\":{\"325\":1}}],[\"函数内的所有内容都会被执行\",{\"1\":{\"301\":1}}],[\"函数内部可以使用\",{\"1\":{\"237\":1}}],[\"函数内部的异步操作执行完才会执行\",{\"1\":{\"152\":1}}],[\"函数内部抛出错误会导致返回的\",{\"1\":{\"152\":1}}],[\"函数内部\",{\"1\":{\"152\":1}}],[\"函数柯里化\",{\"0\":{\"275\":1}}],[\"函数实例的\",{\"1\":{\"238\":1}}],[\"函数实例\",{\"1\":{\"238\":2}}],[\"函数体内修改参数值不会影响到函数外部\",{\"1\":{\"225\":1}}],[\"函数表达式\",{\"0\":{\"445\":1},\"1\":{\"225\":1}}],[\"函数有一个当前元素值的参数\",{\"1\":{\"215\":1}}],[\"函数有两种形式的参数\",{\"1\":{\"98\":1}}],[\"函数进行声明初始化时\",{\"1\":{\"157\":1}}],[\"函数的两种返回值\",{\"1\":{\"626\":1}}],[\"函数的类型\",{\"0\":{\"443\":1}}],[\"函数的合并\",{\"0\":{\"433\":1}}],[\"函数的第一个入参的类型\",{\"1\":{\"344\":1}}],[\"函数的属性和方法\",{\"1\":{\"225\":1}}],[\"函数的声明\",{\"1\":{\"225\":1}}],[\"函数的作用是将\",{\"1\":{\"176\":2}}],[\"函数的\",{\"1\":{\"156\":1,\"158\":1}}],[\"函数的扩展\",{\"0\":{\"155\":1}}],[\"函数都会中断执行\",{\"1\":{\"152\":1}}],[\"函数返回的\",{\"1\":{\"152\":2}}],[\"函数返回一个\",{\"1\":{\"151\":1,\"152\":1}}],[\"函数返回值为\",{\"1\":{\"102\":1}}],[\"函数以及\",{\"1\":{\"117\":1}}],[\"函数相等\",{\"0\":{\"108\":1}}],[\"函数可以是\",{\"1\":{\"646\":1}}],[\"函数可以作为参数传递给另一个参数\",{\"1\":{\"103\":1}}],[\"函数可以不指定返回值\",{\"1\":{\"97\":1}}],[\"函数是一级对象\",{\"0\":{\"103\":1}}],[\"函数\",{\"0\":{\"97\":1,\"102\":1,\"150\":1,\"225\":1,\"560\":1,\"628\":1,\"637\":1,\"641\":1},\"1\":{\"152\":1,\"153\":1,\"159\":1,\"169\":1,\"233\":3,\"274\":3,\"283\":1,\"323\":1,\"324\":1,\"334\":3,\"344\":1,\"377\":1,\"492\":5,\"517\":1,\"602\":1,\"603\":1,\"627\":1}}],[\"函数即可取消请求\",{\"1\":{\"13\":1}}],[\"你可以用\",{\"1\":{\"606\":1}}],[\"你可以在界面中拥有多个单独命名的视图\",{\"1\":{\"583\":1}}],[\"你可以添加\",{\"1\":{\"511\":1}}],[\"你可能会想到\",{\"1\":{\"301\":1}}],[\"你几乎不会需要\",{\"1\":{\"126\":1}}],[\"你也可以定义自己的异常类型\",{\"1\":{\"96\":1}}],[\"你执行了一个不存在的方法或实例变量\",{\"1\":{\"91\":1}}],[\"异常\",{\"0\":{\"96\":1},\"1\":{\"138\":1}}],[\"异步引入组件\",{\"1\":{\"646\":1}}],[\"异步加载的错误处理\",{\"0\":{\"392\":1}}],[\"异步加载数据\",{\"0\":{\"390\":1}}],[\"异步更新\",{\"1\":{\"344\":1}}],[\"异步逻辑与数据请求\",{\"0\":{\"338\":1}}],[\"异步操作\",{\"0\":{\"211\":1}}],[\"异步执行\",{\"1\":{\"197\":1,\"338\":1}}],[\"异步生成器\",{\"1\":{\"109\":1}}],[\"异步函数是函数体被\",{\"1\":{\"68\":1}}],[\"异步函数的返回值类型应当是\",{\"1\":{\"67\":1}}],[\"异步\",{\"0\":{\"66\":1,\"357\":1},\"1\":{\"109\":1}}],[\"静态属性和静态方法\",{\"1\":{\"425\":1}}],[\"静态属性定义校验规则\",{\"1\":{\"322\":1}}],[\"静态属性\",{\"1\":{\"153\":1,\"417\":1}}],[\"静态变量即可\",{\"1\":{\"322\":1}}],[\"静态变量\",{\"1\":{\"117\":1}}],[\"静态变量和静态方法\",{\"0\":{\"95\":1}}],[\"静态方法可以被继承\",{\"1\":{\"153\":1}}],[\"静态方法\",{\"1\":{\"117\":1,\"153\":1}}],[\"静态方法不能访问实例成员\",{\"1\":{\"95\":1}}],[\"入参就是缓存中的数据\",{\"1\":{\"351\":1}}],[\"入参的字段名的依据\",{\"1\":{\"334\":1}}],[\"入参\",{\"1\":{\"334\":1}}],[\"入\",{\"1\":{\"94\":1}}],[\"应当写成箭头函数\",{\"1\":{\"543\":1}}],[\"应当在所有语句之前调用\",{\"1\":{\"309\":1}}],[\"应当遵循下面的规范\",{\"1\":{\"290\":1}}],[\"应当使用作用域插槽\",{\"1\":{\"552\":1}}],[\"应当使用\",{\"1\":{\"73\":1,\"551\":1}}],[\"应该用\",{\"1\":{\"379\":1}}],[\"应该是\",{\"1\":{\"368\":1}}],[\"应该是具体的\",{\"1\":{\"298\":1}}],[\"应该能够看到\",{\"1\":{\"366\":1}}],[\"应该一次性\",{\"1\":{\"326\":1}}],[\"应该以不可变值的方式去更新对象和数组\",{\"1\":{\"326\":1}}],[\"应该调用\",{\"1\":{\"309\":1}}],[\"应该按需执行\",{\"1\":{\"285\":1}}],[\"应该使用\",{\"1\":{\"94\":1,\"379\":1,\"392\":1}}],[\"应用场景\",{\"1\":{\"649\":1}}],[\"应用举例\",{\"1\":{\"569\":1}}],[\"应用在组件上是组件实例对象\",{\"1\":{\"562\":1}}],[\"应用在\",{\"1\":{\"562\":1}}],[\"应用可以正常使用\",{\"1\":{\"353\":1}}],[\"应用中使用\",{\"0\":{\"348\":1},\"1\":{\"348\":1}}],[\"应用内的任意组件都能访问\",{\"1\":{\"337\":1}}],[\"应用的所有状态会集中到一个比较大的对象\",{\"1\":{\"619\":1}}],[\"应用的\",{\"1\":{\"300\":1}}],[\"应用\",{\"0\":{\"266\":1},\"1\":{\"266\":1,\"293\":1,\"294\":1,\"642\":1}}],[\"应用程序的实例引用\",{\"1\":{\"243\":1}}],[\"应用程序和\",{\"1\":{\"242\":1}}],[\"应避免使用以下\",{\"1\":{\"243\":1}}],[\"用户操作的是真实\",{\"1\":{\"534\":1}}],[\"用接口定义函数\",{\"0\":{\"446\":1}}],[\"用接口表示数组\",{\"1\":{\"442\":1}}],[\"用了\",{\"1\":{\"401\":1}}],[\"用法如下\",{\"1\":{\"591\":1}}],[\"用法二\",{\"1\":{\"381\":1}}],[\"用法一\",{\"1\":{\"381\":1}}],[\"用法与\",{\"1\":{\"366\":1}}],[\"用法同函数式组件\",{\"1\":{\"318\":1}}],[\"用\",{\"1\":{\"329\":1,\"535\":1}}],[\"用来给元素或子组件注册引用信息\",{\"1\":{\"562\":1}}],[\"用来定义\",{\"1\":{\"632\":2}}],[\"用来定义全局函数的类型\",{\"1\":{\"459\":1}}],[\"用来定义表格的一列\",{\"1\":{\"203\":1}}],[\"用来传递数据\",{\"1\":{\"379\":1}}],[\"用来提醒用户正在加载\",{\"1\":{\"367\":1}}],[\"用来获取数据\",{\"1\":{\"353\":1}}],[\"用来获取数据并缓存\",{\"1\":{\"344\":1}}],[\"用来更新服务器数据\",{\"1\":{\"344\":1}}],[\"用来排序\",{\"1\":{\"343\":1}}],[\"用来完成计数器的功能\",{\"1\":{\"334\":1}}],[\"用来将根\",{\"1\":{\"334\":1}}],[\"用来在需要时发出信号\",{\"1\":{\"229\":1}}],[\"用来判断一个值是否为\",{\"1\":{\"222\":1}}],[\"用来指定某个函数或某段代码\",{\"1\":{\"212\":1}}],[\"用来指定网页的编码方式\",{\"1\":{\"199\":1}}],[\"用来放置多级标题\",{\"1\":{\"202\":1}}],[\"用来覆盖\",{\"1\":{\"199\":1}}],[\"用来设置\",{\"1\":{\"193\":1}}],[\"用来为元素添加附加说明\",{\"1\":{\"192\":1}}],[\"用来生成\",{\"1\":{\"176\":1}}],[\"用来绑定回调函数的\",{\"1\":{\"148\":1}}],[\"用在其他地方都会报错\",{\"1\":{\"166\":1}}],[\"用于读取响应式对象对应的普通对象\",{\"1\":{\"650\":1}}],[\"用于修改界面标题\",{\"1\":{\"603\":1}}],[\"用于增强\",{\"1\":{\"569\":1}}],[\"用于解析标签\",{\"1\":{\"554\":1}}],[\"用于解析标签体内容\",{\"1\":{\"554\":1}}],[\"用于直接在浏览器中使用\",{\"1\":{\"461\":1}}],[\"用于浏览器\",{\"1\":{\"461\":1}}],[\"用于控制\",{\"1\":{\"368\":1}}],[\"用于通过中间件传递信息\",{\"1\":{\"243\":1}}],[\"用于对两个表达式求值\",{\"1\":{\"241\":1}}],[\"用于判断某个属性定义在对象自身还是定义在原型链上\",{\"1\":{\"240\":1}}],[\"用于当前节点或对象上\",{\"1\":{\"229\":1}}],[\"用于连接两个字符串\",{\"1\":{\"216\":1}}],[\"用于过滤数组成员\",{\"1\":{\"215\":1}}],[\"用于提取目标数组的一部分\",{\"1\":{\"215\":1}}],[\"用于提供\",{\"1\":{\"210\":1}}],[\"用于多个数组的合并\",{\"1\":{\"215\":1}}],[\"用于不确定文字方向的情况\",{\"1\":{\"204\":1}}],[\"用于非时间场合\",{\"1\":{\"204\":1}}],[\"用于嵌入外部内容\",{\"1\":{\"200\":1}}],[\"用于指定一项外部资源\",{\"1\":{\"200\":1}}],[\"用于指定发生错误时的回调函数\",{\"1\":{\"178\":1}}],[\"用于\",{\"1\":{\"200\":1,\"461\":1,\"534\":1}}],[\"用于文件上传\",{\"1\":{\"193\":1}}],[\"用于存放自定义的数据\",{\"1\":{\"192\":1}}],[\"用于可迭代对象\",{\"1\":{\"135\":1}}],[\"用于设置元素的高度和宽度\",{\"1\":{\"37\":1}}],[\"用逗号分隔\",{\"1\":{\"94\":1}}],[\"模糊搜索\",{\"1\":{\"536\":1}}],[\"模糊效果\",{\"1\":{\"65\":1}}],[\"模板有两大类语法\",{\"1\":{\"554\":1}}],[\"模板指令\",{\"0\":{\"554\":1}}],[\"模板\",{\"1\":{\"473\":1}}],[\"模板字符串\",{\"0\":{\"182\":1}}],[\"模型\",{\"1\":{\"472\":1}}],[\"模拟网络请求\",{\"1\":{\"378\":1}}],[\"模块化\",{\"0\":{\"619\":1}}],[\"模块化的样式应该遵循\",{\"1\":{\"268\":1}}],[\"模块插件\",{\"0\":{\"464\":1}}],[\"模块规范\",{\"1\":{\"460\":1}}],[\"模块需要明确指定命名空间\",{\"1\":{\"207\":1}}],[\"模块为例\",{\"1\":{\"207\":1}}],[\"模式由于会将路径发送给服务器\",{\"1\":{\"608\":1}}],[\"模式后\",{\"1\":{\"589\":1}}],[\"模式是每访问一个链接\",{\"1\":{\"589\":2}}],[\"模式和\",{\"1\":{\"589\":1}}],[\"模式\",{\"0\":{\"608\":1},\"1\":{\"94\":1,\"589\":2,\"608\":1}}],[\"枚举成员使用常数枚举表达式初始化\",{\"1\":{\"414\":1}}],[\"枚举成员被当作是常数\",{\"1\":{\"414\":1}}],[\"枚举项有两种类型\",{\"1\":{\"414\":1}}],[\"枚举\",{\"0\":{\"413\":1}}],[\"枚举不能成为子类\",{\"1\":{\"93\":1}}],[\"枚举具有以下限制\",{\"1\":{\"93\":1}}],[\"枚举类型\",{\"0\":{\"93\":1}}],[\"获取参数\",{\"1\":{\"584\":1}}],[\"获取不存在的\",{\"1\":{\"557\":1}}],[\"获取需要绑定的\",{\"1\":{\"517\":1}}],[\"获取属性值\",{\"1\":{\"514\":1}}],[\"获取即将提交的数据\",{\"1\":{\"397\":1}}],[\"获取当前组件的路由信息\",{\"0\":{\"386\":1}}],[\"获取一个\",{\"1\":{\"381\":1,\"395\":1}}],[\"获取到的结果就是\",{\"1\":{\"372\":1}}],[\"获取数据\",{\"1\":{\"343\":1}}],[\"获取文章改为使用\",{\"1\":{\"338\":1}}],[\"获取\",{\"1\":{\"252\":2,\"337\":1,\"343\":1,\"379\":2,\"381\":1,\"562\":1}}],[\"获取所有被声明的变量\",{\"1\":{\"213\":1}}],[\"获取枚举值列表\",{\"1\":{\"93\":1}}],[\"获取枚举值的索引\",{\"1\":{\"93\":1}}],[\"获取对象的类型\",{\"0\":{\"73\":1}}],[\"注重的是过程\",{\"1\":{\"637\":1}}],[\"注重的计算出来的值\",{\"1\":{\"637\":1}}],[\"注册一个回调\",{\"1\":{\"610\":1}}],[\"注册一个全局守卫\",{\"1\":{\"606\":1}}],[\"注册过的回调\",{\"1\":{\"602\":1}}],[\"注册插件\",{\"1\":{\"573\":1}}],[\"注册组件\",{\"1\":{\"489\":1}}],[\"注入全局变量\",{\"1\":{\"459\":1}}],[\"注入\",{\"0\":{\"349\":1}}],[\"注释\",{\"1\":{\"305\":1}}],[\"注解表示重写了一个成员\",{\"1\":{\"91\":1}}],[\"注意被调用的错误必须是下列情形中的一种\",{\"1\":{\"610\":1}}],[\"注意上面的\",{\"1\":{\"408\":1}}],[\"注意渲染逻辑中\",{\"1\":{\"293\":1}}],[\"注意事项\",{\"0\":{\"326\":1},\"1\":{\"169\":1,\"403\":1}}],[\"注意点\",{\"1\":{\"153\":1,\"238\":1}}],[\"注意\",{\"1\":{\"15\":1,\"18\":1,\"27\":1,\"67\":1,\"73\":1,\"79\":1,\"80\":1,\"83\":1,\"92\":1,\"93\":1,\"94\":1,\"120\":1,\"221\":1,\"246\":2,\"267\":1,\"286\":1,\"287\":1,\"306\":1,\"309\":1,\"318\":1,\"320\":1,\"349\":1,\"376\":1,\"377\":1,\"379\":2,\"389\":1,\"397\":1,\"403\":1,\"414\":1,\"420\":1,\"434\":1,\"444\":1,\"447\":1,\"449\":1,\"459\":1,\"460\":1,\"465\":2,\"489\":1,\"490\":1,\"502\":1,\"503\":1,\"507\":1,\"510\":2,\"517\":1,\"520\":1,\"534\":1,\"538\":1,\"547\":1,\"565\":1,\"613\":1,\"621\":1,\"626\":1,\"627\":1,\"636\":2,\"640\":1}}],[\"扩展运算符的解构赋值不能复制从原型对象继承的属性\",{\"1\":{\"167\":1}}],[\"扩展运算符的应用\",{\"1\":{\"147\":1}}],[\"扩展运算符可以将字符串转为真正的数组\",{\"1\":{\"147\":1}}],[\"扩展运算符是三个点\",{\"1\":{\"147\":1}}],[\"扩展运算符\",{\"0\":{\"147\":1},\"1\":{\"162\":1,\"167\":1}}],[\"扩展操作符\",{\"1\":{\"122\":1}}],[\"扩展\",{\"1\":{\"92\":1,\"642\":1}}],[\"扩展方法可以向现有库中添加方法\",{\"1\":{\"92\":1}}],[\"扩展方法\",{\"0\":{\"92\":1}}],[\"扩展一个类\",{\"0\":{\"91\":1}}],[\"扩展了\",{\"1\":{\"41\":1}}],[\"<项目名>\",{\"1\":{\"661\":1}}],[\"<keep\",{\"1\":{\"596\":3}}],[\"<ol>\",{\"1\":{\"552\":1}}],[\"<option\",{\"1\":{\"510\":4,\"614\":3}}],[\"<outlet\",{\"1\":{\"337\":1,\"366\":1,\"372\":1,\"399\":2,\"402\":1}}],[\"<number>b\",{\"1\":{\"451\":1}}],[\"<number>a\",{\"1\":{\"451\":1}}],[\"<navigate\",{\"1\":{\"399\":2}}],[\"<navlink\",{\"1\":{\"368\":4,\"372\":4,\"385\":1}}],[\"<nativerouter>\",{\"1\":{\"366\":1}}],[\"<$\",{\"1\":{\"451\":1}}],[\"<router\",{\"1\":{\"576\":3,\"578\":2,\"583\":3,\"584\":1,\"589\":2,\"596\":4}}],[\"<routerprovider\",{\"1\":{\"337\":1,\"366\":1}}],[\"<route\",{\"1\":{\"369\":3}}],[\"<routes>\",{\"1\":{\"369\":1}}],[\"<rate\",{\"1\":{\"351\":1}}],[\"<reference\",{\"1\":{\"465\":2}}],[\"<refdemo\",{\"1\":{\"360\":2}}],[\"<result\",{\"1\":{\"344\":1}}],[\"<react\",{\"1\":{\"300\":1,\"306\":1,\"337\":1,\"366\":1,\"369\":1}}],[\"<errorpage\",{\"1\":{\"371\":1,\"377\":1,\"390\":1,\"392\":1}}],[\"<extra\",{\"1\":{\"337\":1}}],[\"<empty\",{\"1\":{\"337\":1,\"344\":1,\"345\":2,\"352\":1}}],[\"<view\",{\"1\":{\"337\":1}}],[\"<video\",{\"1\":{\"286\":2,\"287\":1,\"290\":1}}],[\"<video>\",{\"1\":{\"200\":1}}],[\"<category>\",{\"1\":{\"552\":2}}],[\"<category\",{\"1\":{\"550\":3,\"551\":1}}],[\"<card\",{\"1\":{\"337\":2,\"344\":1,\"345\":2}}],[\"<create\",{\"1\":{\"337\":1}}],[\"<component\",{\"1\":{\"502\":1}}],[\"<components\",{\"1\":{\"399\":2}}],[\"<count\",{\"1\":{\"301\":3,\"336\":1}}],[\"<consumer>\",{\"1\":{\"279\":2}}],[\"<ul\",{\"1\":{\"314\":1,\"521\":1}}],[\"<ul>\",{\"1\":{\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"306\":2,\"307\":1,\"323\":1,\"379\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":3,\"406\":1,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":1,\"618\":1}}],[\"<grandson\",{\"1\":{\"279\":2}}],[\"<fetcher\",{\"1\":{\"398\":1}}],[\"<foo\",{\"1\":{\"304\":1,\"320\":1}}],[\"<form\",{\"1\":{\"274\":1,\"337\":4,\"344\":4,\"379\":3,\"384\":1,\"385\":1}}],[\"<fragment><\",{\"1\":{\"306\":1}}],[\"<fragment>\",{\"1\":{\"210\":1,\"279\":1,\"283\":1,\"323\":2,\"407\":3,\"408\":2}}],[\"<><\",{\"1\":{\"305\":1,\"306\":2}}],[\"<>\",{\"1\":{\"274\":3,\"279\":2,\"280\":1,\"286\":2,\"287\":1,\"290\":1,\"301\":3,\"305\":1,\"306\":2,\"307\":1,\"329\":1,\"337\":1,\"344\":1,\"374\":1,\"378\":1,\"379\":1,\"390\":1,\"399\":2}}],[\"<mycomponent\",{\"1\":{\"403\":7,\"404\":3,\"405\":2,\"406\":2}}],[\"<myinput\",{\"1\":{\"362\":2}}],[\"<myvideo\",{\"1\":{\"286\":1,\"287\":1}}],[\"<mybutton\",{\"1\":{\"274\":2}}],[\"<memoryrouter>\",{\"1\":{\"366\":1}}],[\"<memberidcontext\",{\"1\":{\"279\":1,\"280\":1}}],[\"<meta\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":2,\"477\":2,\"478\":2,\"479\":2,\"480\":2,\"482\":2,\"489\":2,\"491\":2,\"494\":2,\"504\":2,\"507\":2,\"509\":2,\"510\":4,\"514\":2,\"515\":2,\"517\":3,\"518\":2,\"520\":2,\"521\":2,\"522\":2,\"529\":2,\"534\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"548\":2,\"553\":2,\"621\":2,\"622\":2}}],[\"<meta>\",{\"1\":{\"199\":1}}],[\"<list\",{\"1\":{\"337\":1,\"407\":1}}],[\"<listcomponent\",{\"1\":{\"273\":1}}],[\"<links\",{\"1\":{\"393\":1}}],[\"<link\",{\"1\":{\"337\":3,\"344\":3,\"345\":1,\"351\":1,\"368\":1}}],[\"<li>id\",{\"1\":{\"537\":1,\"538\":1}}],[\"<li>4<\",{\"1\":{\"521\":1}}],[\"<li>3<\",{\"1\":{\"521\":1}}],[\"<li>2<\",{\"1\":{\"521\":1}}],[\"<li>1<\",{\"1\":{\"521\":1}}],[\"<li>\",{\"1\":{\"306\":3,\"307\":1,\"379\":1}}],[\"<li\",{\"1\":{\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"314\":1,\"323\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":3,\"406\":1,\"510\":1,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":2,\"618\":1}}],[\"<display\",{\"1\":{\"321\":1}}],[\"<div>计数器组件的当前值为\",{\"1\":{\"618\":1}}],[\"<div>foo<\",{\"1\":{\"310\":1,\"320\":1}}],[\"<div>\",{\"1\":{\"286\":1,\"287\":1,\"304\":1,\"306\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":2,\"319\":1,\"320\":1,\"321\":2,\"333\":1,\"335\":1,\"360\":1,\"361\":4,\"362\":2,\"363\":2,\"379\":1,\"390\":1,\"397\":2,\"398\":1,\"403\":7,\"404\":3,\"405\":2,\"406\":2,\"489\":2,\"491\":4,\"494\":2,\"562\":1,\"564\":1,\"576\":2,\"586\":1,\"614\":1,\"618\":2,\"633\":1,\"641\":1,\"645\":1,\"654\":1}}],[\"<div\",{\"1\":{\"272\":1,\"274\":4,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"365\":3,\"366\":1,\"371\":1,\"372\":2,\"379\":1,\"381\":1,\"390\":1,\"392\":1,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"480\":1,\"482\":4,\"483\":2,\"489\":1,\"491\":1,\"494\":2,\"496\":1,\"504\":1,\"507\":4,\"509\":1,\"510\":4,\"517\":1,\"518\":1,\"520\":1,\"521\":5,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"550\":2,\"551\":1,\"552\":2,\"553\":1,\"569\":1,\"621\":1,\"622\":1,\"645\":2,\"646\":1,\"658\":6}}],[\"<demo\",{\"1\":{\"272\":2,\"322\":1,\"633\":1,\"653\":1}}],[\"<teleport\",{\"1\":{\"645\":1}}],[\"<template\",{\"1\":{\"507\":1,\"551\":1,\"552\":2,\"646\":2}}],[\"<template>\",{\"1\":{\"494\":3,\"496\":1,\"550\":2,\"551\":1,\"552\":2,\"562\":1,\"564\":1,\"569\":1,\"576\":1,\"586\":1,\"614\":1,\"618\":1,\"626\":1,\"633\":2,\"641\":1,\"642\":2,\"645\":1,\"646\":1,\"651\":1,\"653\":1,\"654\":1}}],[\"<t>\",{\"1\":{\"429\":2}}],[\"<t>source\",{\"1\":{\"428\":1}}],[\"<title>test<\",{\"1\":{\"517\":1}}],[\"<title>demo<\",{\"1\":{\"510\":4}}],[\"<title>document<\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"<title>hello<\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1}}],[\"<time\",{\"1\":{\"321\":1}}],[\"<todolist\",{\"1\":{\"283\":1,\"323\":1}}],[\"<todoscontext\",{\"1\":{\"283\":1}}],[\"<tag\",{\"1\":{\"268\":1}}],[\"<h4>something<\",{\"1\":{\"645\":3}}],[\"<h4>当前人员列表中人数为\",{\"1\":{\"618\":1}}],[\"<h5>\",{\"1\":{\"586\":2}}],[\"<hello><\",{\"1\":{\"491\":1}}],[\"<head>\",{\"1\":{\"190\":1,\"199\":1,\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"<hr\",{\"1\":{\"482\":2,\"489\":1,\"494\":1,\"504\":3,\"509\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"548\":3,\"553\":1,\"621\":1,\"622\":3}}],[\"<homelink\",{\"1\":{\"372\":2,\"373\":2,\"374\":1}}],[\"<home\",{\"1\":{\"366\":1,\"369\":1,\"372\":2,\"373\":2,\"374\":1}}],[\"<hashrouter>\",{\"1\":{\"366\":1}}],[\"<h2\",{\"1\":{\"321\":1,\"476\":1,\"478\":1,\"479\":2,\"480\":1,\"507\":2,\"539\":1,\"562\":1,\"569\":1}}],[\"<h2>y\",{\"1\":{\"641\":1}}],[\"<h2>x\",{\"1\":{\"641\":1}}],[\"<h2>b\",{\"1\":{\"622\":1}}],[\"<h2>b<\",{\"1\":{\"507\":1}}],[\"<h2>今天天气很\",{\"1\":{\"621\":1,\"622\":1}}],[\"<h2>当前n的算术平方根为\",{\"1\":{\"615\":1}}],[\"<h2>当前n的值为\",{\"1\":{\"507\":1}}],[\"<h2>当前n为\",{\"1\":{\"614\":1}}],[\"<h2>年龄\",{\"1\":{\"539\":1}}],[\"<h2>姓名\",{\"1\":{\"539\":1}}],[\"<h2>遍历指定次数<\",{\"1\":{\"532\":1}}],[\"<h2>遍历字符串<\",{\"1\":{\"532\":1}}],[\"<h2>遍历对象<\",{\"1\":{\"532\":1}}],[\"<h2>人员列表<\",{\"1\":{\"532\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1}}],[\"<h2>time<\",{\"1\":{\"529\":1}}],[\"<h2>hello\",{\"1\":{\"520\":1,\"521\":1,\"522\":1}}],[\"<h2>c<\",{\"1\":{\"507\":1}}],[\"<h2>component<\",{\"1\":{\"272\":1}}],[\"<h2>a\",{\"1\":{\"622\":1}}],[\"<h2>a<\",{\"1\":{\"507\":1}}],[\"<h2>age\",{\"1\":{\"489\":1,\"491\":1,\"494\":1}}],[\"<h2>address\",{\"1\":{\"489\":1,\"491\":1,\"494\":1,\"569\":1}}],[\"<h2>name\",{\"1\":{\"489\":2,\"491\":2,\"494\":2}}],[\"<h2>n\",{\"1\":{\"480\":1,\"548\":2}}],[\"<h2>searching\",{\"1\":{\"407\":1,\"408\":1}}],[\"<h2>languages<\",{\"1\":{\"306\":2,\"307\":1}}],[\"<h2>\",{\"1\":{\"279\":2,\"476\":1,\"491\":1,\"529\":4,\"642\":6}}],[\"<h1>demo\",{\"1\":{\"633\":1}}],[\"<h1>\",{\"1\":{\"626\":2,\"653\":1}}],[\"<h1>b<\",{\"1\":{\"405\":1}}],[\"<h1>a<\",{\"1\":{\"405\":1}}],[\"<h1>about<\",{\"1\":{\"371\":1}}],[\"<h1>title<\",{\"1\":{\"316\":1}}],[\"<h1>hello\",{\"1\":{\"293\":1,\"518\":1}}],[\"<h1\",{\"1\":{\"294\":1,\"305\":2}}],[\"<h3>loading<\",{\"1\":{\"646\":1}}],[\"<h3>link<\",{\"1\":{\"372\":1}}],[\"<h3>app<\",{\"1\":{\"646\":1}}],[\"<h3>弹窗<\",{\"1\":{\"645\":1}}],[\"<h3>detail<\",{\"1\":{\"586\":1}}],[\"<h3>friends<\",{\"1\":{\"539\":1}}],[\"<h3>hobbies\",{\"1\":{\"539\":1}}],[\"<h3>get\",{\"1\":{\"374\":1}}],[\"<h3>\",{\"1\":{\"279\":1,\"372\":1,\"374\":1,\"378\":1,\"550\":1,\"551\":1,\"552\":1,\"651\":1,\"654\":1}}],[\"<html>\",{\"1\":{\"510\":4}}],[\"<html\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"<bar>\",{\"1\":{\"320\":1}}],[\"<base\",{\"1\":{\"190\":1}}],[\"<base>\",{\"1\":{\"190\":2}}],[\"<browserrouter>\",{\"1\":{\"366\":1,\"369\":1}}],[\"<br\",{\"1\":{\"286\":1,\"287\":2,\"301\":1,\"318\":4,\"319\":2,\"333\":1,\"335\":2,\"360\":2,\"363\":2,\"403\":2,\"404\":5,\"405\":1,\"406\":2,\"494\":1,\"569\":1,\"633\":1}}],[\"<body>\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"<button>按钮<\",{\"1\":{\"477\":1}}],[\"<button>back<\",{\"1\":{\"344\":1}}],[\"<button>submit<\",{\"1\":{\"274\":1}}],[\"<button\",{\"1\":{\"210\":1,\"274\":2,\"275\":1,\"280\":1,\"283\":2,\"286\":1,\"287\":1,\"301\":5,\"313\":1,\"316\":1,\"318\":2,\"319\":1,\"322\":1,\"323\":2,\"329\":1,\"333\":4,\"335\":4,\"337\":3,\"344\":4,\"345\":3,\"351\":1,\"354\":1,\"359\":1,\"360\":3,\"361\":4,\"362\":3,\"365\":2,\"366\":1,\"368\":2,\"372\":3,\"379\":7,\"381\":1,\"384\":1,\"385\":1,\"390\":2,\"397\":3,\"398\":1,\"403\":7,\"404\":2,\"405\":4,\"406\":2,\"479\":1,\"480\":1,\"507\":1,\"520\":2,\"521\":3,\"534\":1,\"537\":3,\"538\":1,\"539\":6,\"548\":1,\"562\":1,\"569\":1,\"614\":4,\"617\":2,\"621\":1,\"622\":3,\"626\":1,\"633\":1,\"642\":6,\"645\":2,\"653\":1,\"654\":1}}],[\"<<author\",{\"1\":{\"208\":2}}],[\"<<\",{\"1\":{\"208\":1,\"414\":1}}],[\"<personinfo\",{\"1\":{\"318\":1,\"319\":1}}],[\"<p>你选择了\",{\"1\":{\"510\":2}}],[\"<p>loading\",{\"1\":{\"390\":1,\"397\":1,\"398\":1}}],[\"<p>\",{\"1\":{\"297\":1,\"329\":1,\"378\":1,\"553\":1}}],[\"<provider\",{\"1\":{\"336\":1,\"337\":1}}],[\"<provider><\",{\"1\":{\"280\":2}}],[\"<pre>\",{\"1\":{\"204\":1}}],[\"<picture>\",{\"1\":{\"196\":1,\"200\":1}}],[\"<any>\",{\"1\":{\"413\":1}}],[\"<asyncerrorpage\",{\"1\":{\"393\":1}}],[\"<await\",{\"1\":{\"390\":1,\"392\":1,\"393\":1}}],[\"<about\",{\"1\":{\"366\":1,\"369\":1,\"371\":1,\"372\":1,\"377\":1}}],[\"<a>\",{\"1\":{\"365\":2}}],[\"<alist\",{\"1\":{\"337\":3,\"343\":1,\"344\":3,\"345\":4,\"351\":2,\"352\":1}}],[\"<app><\",{\"1\":{\"491\":1,\"494\":1}}],[\"<app\",{\"1\":{\"300\":1,\"337\":1,\"366\":1,\"369\":1,\"372\":1,\"376\":1}}],[\"<audio>\",{\"1\":{\"200\":1}}],[\"<a\",{\"1\":{\"197\":1,\"366\":1,\"521\":1,\"553\":1,\"646\":1,\"658\":1}}],[\"<slot\",{\"1\":{\"551\":2,\"552\":1}}],[\"<slot>\",{\"1\":{\"550\":1,\"552\":1}}],[\"<slot><\",{\"1\":{\"550\":1,\"633\":1}}],[\"<select\",{\"1\":{\"510\":1,\"614\":1}}],[\"<search\",{\"1\":{\"407\":1}}],[\"<school\",{\"1\":{\"490\":1}}],[\"<school><\",{\"1\":{\"489\":1,\"490\":1,\"491\":1,\"494\":1,\"562\":1}}],[\"<script>\",{\"1\":{\"459\":1,\"461\":1,\"462\":1,\"464\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"489\":1,\"491\":1,\"494\":3,\"496\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"538\":1,\"539\":1,\"548\":1,\"552\":1,\"553\":1,\"562\":1,\"568\":1,\"569\":1,\"586\":1,\"614\":1,\"615\":1,\"618\":1,\"619\":2,\"621\":1,\"626\":1,\"633\":2,\"641\":1,\"642\":2,\"645\":1,\"651\":1,\"653\":1,\"654\":1,\"658\":1}}],[\"<script\",{\"1\":{\"272\":5,\"273\":1,\"274\":5,\"293\":4,\"294\":4,\"305\":4,\"306\":5,\"307\":1,\"318\":1,\"360\":2,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":2,\"504\":1,\"507\":1,\"509\":1,\"510\":8,\"514\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":2,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"<suspense>\",{\"1\":{\"646\":1}}],[\"<suspense\",{\"1\":{\"390\":1}}],[\"<spin\",{\"1\":{\"344\":3,\"345\":2,\"352\":1}}],[\"<span\",{\"1\":{\"371\":1,\"392\":1}}],[\"<span>这是一个插入内容<\",{\"1\":{\"633\":1}}],[\"<span>更多\",{\"1\":{\"517\":1}}],[\"<span>姓名\",{\"1\":{\"504\":1,\"517\":1}}],[\"<span>123<\",{\"1\":{\"321\":1}}],[\"<span>value\",{\"1\":{\"312\":1}}],[\"<span>\",{\"1\":{\"297\":1,\"301\":3,\"305\":2,\"312\":1,\"313\":1,\"318\":4,\"319\":2,\"333\":1,\"335\":1,\"360\":1,\"363\":2,\"387\":1,\"390\":1,\"403\":8,\"404\":4,\"406\":2}}],[\"<space>\",{\"1\":{\"337\":2,\"344\":1}}],[\"<style\",{\"1\":{\"570\":1,\"633\":1,\"645\":1,\"654\":1}}],[\"<style><\",{\"1\":{\"494\":1,\"562\":1}}],[\"<style>\",{\"1\":{\"305\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"494\":1,\"521\":1,\"539\":1}}],[\"<student\",{\"1\":{\"564\":1}}],[\"<student><\",{\"1\":{\"489\":1,\"491\":1,\"494\":1,\"562\":1}}],[\"<start\",{\"1\":{\"496\":2,\"501\":1,\"502\":1}}],[\"<staticrouter>\",{\"1\":{\"366\":1}}],[\"<string\",{\"1\":{\"112\":1}}],[\"<string>\",{\"1\":{\"112\":1,\"123\":1}}],[\"<son\",{\"1\":{\"280\":1}}],[\"<source\",{\"1\":{\"196\":2}}],[\"<indexpage\",{\"1\":{\"376\":1}}],[\"<input\",{\"1\":{\"283\":2,\"287\":1,\"323\":2,\"333\":1,\"335\":1,\"337\":4,\"344\":4,\"361\":4,\"362\":2,\"363\":2,\"379\":3,\"384\":1,\"385\":1,\"398\":1,\"405\":1,\"407\":1,\"408\":1,\"504\":2,\"509\":2,\"510\":6,\"511\":3,\"517\":2,\"522\":1,\"523\":1,\"534\":1,\"536\":1,\"537\":1,\"548\":1,\"618\":1,\"651\":1}}],[\"<int>\",{\"1\":{\"112\":1}}],[\"<img\",{\"1\":{\"196\":3,\"550\":1,\"551\":4}}],[\"<\",{\"1\":{\"90\":1,\"109\":2,\"123\":2,\"134\":2,\"135\":2,\"147\":1,\"196\":1,\"197\":1,\"210\":2,\"272\":8,\"273\":3,\"274\":12,\"275\":3,\"279\":7,\"280\":3,\"283\":6,\"286\":4,\"287\":3,\"290\":1,\"293\":5,\"294\":5,\"297\":2,\"300\":1,\"301\":12,\"304\":1,\"305\":11,\"306\":14,\"307\":4,\"312\":3,\"313\":3,\"314\":3,\"316\":2,\"318\":7,\"319\":3,\"320\":2,\"321\":4,\"322\":1,\"323\":6,\"329\":2,\"333\":5,\"335\":6,\"336\":1,\"337\":17,\"344\":17,\"345\":9,\"351\":3,\"352\":1,\"359\":1,\"360\":7,\"361\":8,\"362\":5,\"363\":4,\"365\":4,\"366\":3,\"368\":3,\"369\":4,\"371\":2,\"372\":6,\"374\":3,\"378\":3,\"379\":10,\"381\":2,\"384\":1,\"385\":1,\"387\":1,\"390\":11,\"392\":2,\"393\":1,\"397\":8,\"398\":5,\"399\":3,\"403\":29,\"404\":11,\"405\":14,\"406\":9,\"407\":4,\"408\":3,\"476\":7,\"477\":7,\"478\":8,\"479\":9,\"480\":8,\"482\":10,\"483\":3,\"489\":12,\"491\":14,\"494\":19,\"496\":2,\"504\":7,\"507\":11,\"509\":6,\"510\":28,\"511\":1,\"514\":5,\"515\":5,\"517\":8,\"518\":7,\"520\":7,\"521\":15,\"522\":7,\"529\":13,\"532\":12,\"534\":9,\"536\":8,\"537\":8,\"538\":9,\"539\":15,\"548\":7,\"550\":10,\"551\":8,\"552\":15,\"553\":7,\"562\":5,\"564\":2,\"568\":1,\"569\":5,\"570\":1,\"576\":3,\"578\":2,\"584\":1,\"586\":5,\"596\":3,\"614\":6,\"615\":2,\"618\":8,\"619\":2,\"621\":7,\"622\":8,\"626\":4,\"633\":7,\"641\":5,\"642\":10,\"645\":7,\"646\":5,\"651\":3,\"653\":3,\"654\":4,\"658\":7}}],[\"隐式接口\",{\"0\":{\"90\":1}}],[\"隐藏的元素仍然占有原来的空间\",{\"1\":{\"51\":1}}],[\"隐藏元素\",{\"1\":{\"51\":1}}],[\"5mb\",{\"1\":{\"557\":1}}],[\"5px\",{\"1\":{\"521\":2}}],[\"5173\",{\"1\":{\"376\":2}}],[\"50\",{\"1\":{\"645\":4}}],[\"50px\",{\"1\":{\"314\":1,\"482\":2}}],[\"500px\",{\"1\":{\"286\":1,\"287\":1,\"290\":1,\"482\":1}}],[\"5000\",{\"1\":{\"151\":1,\"499\":1,\"500\":1}}],[\"5x\",{\"1\":{\"196\":1}}],[\"555\",{\"1\":{\"161\":1,\"162\":2}}],[\"5\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"91\":1,\"106\":1,\"135\":1,\"147\":1,\"158\":1,\"187\":1,\"256\":1,\"595\":1,\"606\":1,\"645\":1,\"660\":1}}],[\"常数枚举与普通枚举的区别是\",{\"1\":{\"415\":1}}],[\"常数枚举是使用\",{\"1\":{\"415\":1}}],[\"常数枚举\",{\"0\":{\"415\":1}}],[\"常数枚举表达式做为其一个操作对象\",{\"1\":{\"414\":1}}],[\"常数枚举表达式是\",{\"1\":{\"414\":1}}],[\"常数项\",{\"1\":{\"414\":1}}],[\"常数项和计算所得项\",{\"0\":{\"414\":1}}],[\"常见的全局属性\",{\"1\":{\"192\":1}}],[\"常见用途\",{\"1\":{\"169\":1}}],[\"常量构造函数\",{\"0\":{\"82\":1}}],[\"常用生命周期钩子\",{\"1\":{\"530\":1}}],[\"常用标签\",{\"1\":{\"202\":1}}],[\"常用可选值\",{\"1\":{\"197\":1}}],[\"常用可取值如下\",{\"1\":{\"193\":1}}],[\"常用\",{\"0\":{\"14\":1,\"625\":1}}],[\"重载\",{\"0\":{\"450\":1}}],[\"重新渲染\",{\"1\":{\"379\":1}}],[\"重新发起请求之后此字段仍然是\",{\"1\":{\"345\":1}}],[\"重做或者状态的时间旅行\",{\"1\":{\"330\":1}}],[\"重做更容易实现\",{\"1\":{\"330\":1}}],[\"重复进入同一个详情页面时会因为数据缓存不再去调用接口\",{\"1\":{\"346\":1}}],[\"重复挂载组件会调用两次\",{\"1\":{\"290\":1}}],[\"重复上面两个过程直到\",{\"1\":{\"69\":1}}],[\"重定向的\",{\"1\":{\"581\":1}}],[\"重定向到函数\",{\"1\":{\"581\":1}}],[\"重定向到命名路由\",{\"1\":{\"581\":1}}],[\"重定向到\",{\"1\":{\"258\":1,\"581\":1}}],[\"重定向\",{\"0\":{\"258\":1,\"579\":1,\"581\":1},\"1\":{\"385\":1}}],[\"重定向构造函数\",{\"0\":{\"81\":1}}],[\"重置控件\",{\"1\":{\"193\":1}}],[\"重命名导出\",{\"1\":{\"164\":1}}],[\"重要概念\",{\"0\":{\"117\":1}}],[\"重写方法声明必须满足下面的条件\",{\"1\":{\"91\":1}}],[\"子路由\",{\"1\":{\"577\":1}}],[\"子模板默认显示的是\",{\"1\":{\"552\":1}}],[\"子组件有一个\",{\"1\":{\"652\":1}}],[\"子组件触发自定义事件\",{\"1\":{\"502\":1}}],[\"子组件传递数据到父组件\",{\"1\":{\"502\":1}}],[\"子组件中声明自定义事件\",{\"1\":{\"658\":1}}],[\"子组件中使用了对话框组件\",{\"1\":{\"645\":1}}],[\"子组件中的插槽是默认插槽\",{\"1\":{\"552\":1}}],[\"子组件中直接使用\",{\"1\":{\"550\":1}}],[\"子组件中\",{\"1\":{\"498\":1,\"499\":1,\"500\":1,\"502\":1}}],[\"子组件\",{\"1\":{\"496\":1,\"633\":1}}],[\"子类中也允许访问\",{\"1\":{\"418\":1}}],[\"子类必须在构造器中调用\",{\"1\":{\"154\":1}}],[\"子类可以重写父类的实例方法\",{\"1\":{\"91\":1}}],[\"子类实例对象未初始化\",{\"1\":{\"79\":1}}],[\"子类构造函数尚未执行\",{\"1\":{\"79\":1}}],[\"子类不会继承父类的构造函数\",{\"1\":{\"77\":1}}],[\"子元素选择器\",{\"1\":{\"64\":1}}],[\"子元素的浮动\",{\"1\":{\"44\":1}}],[\"提案中\",{\"1\":{\"417\":1}}],[\"提案中可以直接在类里面定义\",{\"1\":{\"417\":1}}],[\"提交\",{\"1\":{\"523\":1}}],[\"提交表单\",{\"0\":{\"398\":1}}],[\"提交到服务器的值\",{\"1\":{\"193\":1}}],[\"提供一个\",{\"1\":{\"609\":1}}],[\"提供的两个\",{\"1\":{\"539\":1}}],[\"提供的内置方法\",{\"1\":{\"338\":1}}],[\"提供的\",{\"1\":{\"301\":1,\"622\":1}}],[\"提供\",{\"0\":{\"280\":1}}],[\"提供控件文字说明\",{\"1\":{\"193\":1}}],[\"提供了一种干净的方法\",{\"1\":{\"645\":1}}],[\"提供了一个\",{\"1\":{\"345\":1,\"459\":1}}],[\"提供了封装的\",{\"1\":{\"398\":1}}],[\"提供了基于标签的自动刷新机制\",{\"1\":{\"345\":1}}],[\"提供了许多有用的方法\",{\"1\":{\"242\":1}}],[\"提供了\",{\"1\":{\"96\":1,\"124\":1,\"334\":1,\"338\":1,\"343\":1,\"351\":1,\"379\":2,\"390\":1,\"391\":1}}],[\"提供了语法糖\",{\"1\":{\"75\":1}}],[\"提示\",{\"1\":{\"13\":1,\"26\":1,\"67\":1,\"72\":2,\"75\":1,\"94\":1,\"95\":1,\"96\":1,\"119\":1,\"123\":1,\"128\":2,\"138\":2,\"209\":1,\"251\":1,\"279\":1,\"287\":1,\"290\":1,\"293\":1,\"297\":1,\"301\":1,\"306\":1,\"338\":1,\"360\":1,\"371\":1,\"379\":1,\"385\":1,\"406\":1,\"418\":1,\"425\":1,\"437\":1,\"439\":1,\"445\":1,\"451\":1,\"459\":1,\"460\":1,\"492\":1,\"503\":1,\"505\":1,\"507\":1,\"508\":1,\"510\":1,\"511\":3,\"522\":1,\"528\":1,\"540\":1,\"551\":1,\"552\":1,\"568\":1,\"576\":1,\"577\":1,\"578\":1,\"598\":1,\"599\":1,\"601\":1,\"604\":1,\"617\":1,\"624\":1,\"631\":1,\"636\":2,\"642\":1,\"646\":1}}],[\"所定义的多个响应式数据\",{\"1\":{\"636\":1}}],[\"所定义的一个响应式数据的某些属性\",{\"1\":{\"636\":1}}],[\"所定义的一个响应式数据的全部属性\",{\"1\":{\"636\":1}}],[\"所定义的一个响应式数据\",{\"1\":{\"636\":1}}],[\"所管理的函数\",{\"1\":{\"520\":1}}],[\"所依赖的数据发生变化\",{\"1\":{\"504\":1}}],[\"所在组件的\",{\"1\":{\"547\":1}}],[\"所在结构的更新\",{\"1\":{\"479\":1}}],[\"所在节点在初次动态渲染后\",{\"1\":{\"479\":1}}],[\"所在的对象\",{\"1\":{\"238\":1}}],[\"所指向的函数中操作的变量和参数列表中的\",{\"1\":{\"157\":1}}],[\"所要执行的内容\",{\"1\":{\"137\":1}}],[\"所以必须要写返回值\",{\"1\":{\"637\":1}}],[\"所以在部署时需要后端具有全路径资源匹配能力\",{\"1\":{\"608\":1}}],[\"所以能够一直返回直到最开始的链接\",{\"1\":{\"589\":1}}],[\"所以人物信息使用了新的人\",{\"1\":{\"534\":1}}],[\"所以组件实例对象也可以使用\",{\"1\":{\"493\":1}}],[\"所以也可以用\",{\"1\":{\"459\":1}}],[\"所以任意类型可以断言为\",{\"1\":{\"452\":1}}],[\"所以不用写返回值\",{\"1\":{\"637\":1}}],[\"所以不会出现字段未定义的错误\",{\"1\":{\"565\":1}}],[\"所以不会报错\",{\"1\":{\"434\":1}}],[\"所以不能随意的操作它的属性\",{\"1\":{\"428\":1}}],[\"所以接口继承类就相当于接口继承接口\",{\"1\":{\"425\":1}}],[\"所以直接找到对象并修改会导致这个问题\",{\"1\":{\"405\":1}}],[\"所以实际上点击一次按钮页面只会加一\",{\"1\":{\"403\":1}}],[\"所以下面传入\",{\"1\":{\"403\":1}}],[\"所以返回的\",{\"1\":{\"403\":1}}],[\"所以还是用\",{\"1\":{\"379\":1}}],[\"所以这些属性不能在\",{\"1\":{\"377\":1}}],[\"所以需要通过\",{\"1\":{\"360\":1}}],[\"所以现在来修改之前发出请求的异步函数\",{\"1\":{\"359\":1}}],[\"所以会调用\",{\"1\":{\"345\":1}}],[\"所以会渲染\",{\"1\":{\"345\":1}}],[\"所以可以定义对应的\",{\"1\":{\"358\":1}}],[\"所以可以轻松实现撤销\",{\"1\":{\"330\":1}}],[\"所以可以对它单独进行测试\",{\"1\":{\"325\":1}}],[\"所以上面的例子中如果只希望每次点击年龄加\",{\"1\":{\"404\":1}}],[\"所以上面的场景不需要\",{\"1\":{\"360\":1}}],[\"所以上面的代码里\",{\"1\":{\"379\":1}}],[\"所以上面的代码会报错\",{\"1\":{\"345\":1}}],[\"所以上面的代码中即使\",{\"1\":{\"340\":1}}],[\"所以上面的\",{\"1\":{\"306\":1,\"334\":1}}],[\"所以要写在\",{\"1\":{\"613\":1}}],[\"所以要去掉前缀\",{\"1\":{\"486\":1}}],[\"所以要么使用\",{\"1\":{\"306\":1}}],[\"所以要为一个标签指定\",{\"1\":{\"305\":1}}],[\"所以要下载\",{\"1\":{\"292\":1}}],[\"所以函数不会发生调用\",{\"1\":{\"275\":1}}],[\"所以对于\",{\"1\":{\"463\":1}}],[\"所以对它们进行解构赋值都会报错\",{\"1\":{\"188\":1}}],[\"所以对象的扩展运算符也可以用于数组\",{\"1\":{\"167\":1}}],[\"所以如果箭头函数直接返回一个对象\",{\"1\":{\"159\":1}}],[\"所以最后输出\",{\"1\":{\"157\":1}}],[\"所以定义在父类实例上的方法或属性是无法通过\",{\"1\":{\"154\":1}}],[\"所以变量也有方法\",{\"1\":{\"118\":1}}],[\"所以\",{\"1\":{\"75\":1,\"286\":1,\"334\":1,\"344\":1,\"345\":1,\"560\":1}}],[\"所有层次属性只读\",{\"1\":{\"649\":1}}],[\"所有不被\",{\"1\":{\"624\":1}}],[\"所有被\",{\"1\":{\"624\":1}}],[\"所有父组件中\",{\"1\":{\"552\":1}}],[\"所有其它情况的枚举成员被当作是需要计算得出的值\",{\"1\":{\"414\":1}}],[\"所有支持\",{\"1\":{\"367\":1}}],[\"所有对\",{\"1\":{\"335\":1}}],[\"所有对象的转换结果都是\",{\"1\":{\"233\":1}}],[\"所有标签必须闭合\",{\"1\":{\"305\":1}}],[\"所有类名都不会被局部化\",{\"1\":{\"269\":1}}],[\"所有选项\",{\"1\":{\"243\":1}}],[\"所有抛出的错误都是这个构造函数的实例\",{\"1\":{\"234\":1}}],[\"所有数组成员依次执行该函数\",{\"1\":{\"215\":1}}],[\"所有数组成员依次执行该回调函数\",{\"1\":{\"148\":1}}],[\"所有允许为空的类型的默认值都是\",{\"1\":{\"144\":1}}],[\"所有变量引用的都是对象\",{\"1\":{\"117\":1}}],[\"所有的组件通过一个\",{\"1\":{\"494\":1}}],[\"所有的数据都从服务端来\",{\"1\":{\"344\":1}}],[\"所有的表格内容都要放在\",{\"1\":{\"203\":1}}],[\"所有的\",{\"1\":{\"161\":1,\"298\":1}}],[\"所有的类都继承于\",{\"1\":{\"117\":1}}],[\"所有的函数都有返回值\",{\"1\":{\"107\":1}}],[\"所有的实例变量都会隐式的声明一个\",{\"1\":{\"74\":1}}],[\"所有未初始化的实例变量都是\",{\"1\":{\"74\":1}}],[\"所有\",{\"1\":{\"38\":1,\"62\":1,\"63\":1}}],[\"否则不会响应式\",{\"1\":{\"651\":1}}],[\"否则能够使用计算属性完成的就不要使用监视属性\",{\"1\":{\"624\":1}}],[\"否则默认参数是\",{\"1\":{\"617\":1}}],[\"否则通过渲染\",{\"1\":{\"399\":1}}],[\"否则停止渲染\",{\"1\":{\"313\":1}}],[\"否则就失去了使用\",{\"1\":{\"306\":1}}],[\"否则就会不管\",{\"1\":{\"237\":1}}],[\"否则会因为重新触发渲染而导致死循环\",{\"1\":{\"313\":1}}],[\"否则会再次调用这个函数并缓存\",{\"1\":{\"301\":1}}],[\"否则会创造一个当前作用域的全局变量\",{\"1\":{\"224\":1}}],[\"否则在浏览器中会因为\",{\"1\":{\"292\":1}}],[\"否则在指定位置断行\",{\"1\":{\"204\":1}}],[\"否则只简单记录错误\",{\"1\":{\"245\":1}}],[\"否则返回之前的\",{\"1\":{\"331\":1}}],[\"否则返回\",{\"1\":{\"132\":1,\"237\":1}}],[\"否则执行表达式\",{\"1\":{\"130\":1}}],[\"否则\",{\"1\":{\"75\":1,\"385\":1,\"520\":1}}],[\"非受控组件\",{\"1\":{\"363\":1}}],[\"非常繁琐\",{\"1\":{\"617\":1}}],[\"非常强大\",{\"1\":{\"356\":1}}],[\"非常类似\",{\"1\":{\"68\":1}}],[\"非正式特性\",{\"1\":{\"289\":1}}],[\"非\",{\"1\":{\"223\":1}}],[\"非泛型方法不能覆盖泛型方法\",{\"1\":{\"91\":1}}],[\"非终值实例变量和\",{\"1\":{\"74\":1}}],[\"因此组件实例会被复用\",{\"1\":{\"605\":1}}],[\"因此应当绑定\",{\"1\":{\"522\":1}}],[\"因此应该在任意位置可用\",{\"1\":{\"348\":1}}],[\"因此对于嵌套的对象\",{\"1\":{\"517\":1}}],[\"因此对于不能为\",{\"1\":{\"74\":1}}],[\"因此我们可以包装一层\",{\"1\":{\"399\":1}}],[\"因此我们需要将多个\",{\"1\":{\"355\":1}}],[\"因此需要我们自行实现\",{\"1\":{\"399\":1}}],[\"因此需要定义一个新的\",{\"1\":{\"359\":1}}],[\"因此修改\",{\"1\":{\"380\":1}}],[\"因此在这种场景中需要拦截浏览器对表单的默认处理\",{\"1\":{\"379\":1}}],[\"因此不可变更新需要自行完成\",{\"1\":{\"353\":1}}],[\"因此不应该缓存这个变量本身而是缓存这个变量的计算逻辑\",{\"1\":{\"301\":1}}],[\"因此可以在\",{\"1\":{\"394\":1}}],[\"因此可以直接修改\",{\"1\":{\"351\":1}}],[\"因此可以采用链式写法\",{\"1\":{\"177\":1}}],[\"因此最好有一种根据\",{\"1\":{\"343\":1}}],[\"因此每次相当于传入一个新数组\",{\"1\":{\"301\":1}}],[\"因此要访问\",{\"1\":{\"207\":1}}],[\"因此箭头函数不能用作\",{\"1\":{\"159\":1}}],[\"因此\",{\"1\":{\"94\":1,\"289\":1,\"353\":1,\"360\":2,\"600\":1}}],[\"因此所有实例成员都不能被访问\",{\"1\":{\"79\":1}}],[\"因为返回值不再是\",{\"1\":{\"626\":1}}],[\"因为此时组件还没有被创建\",{\"1\":{\"605\":1}}],[\"因为此组件将永远不会再渲染\",{\"1\":{\"316\":1}}],[\"因为其他元素没有受到影响\",{\"1\":{\"534\":1}}],[\"因为如果其中包含插值语法表达式的话后面更新时还要使用正则进行匹配\",{\"1\":{\"517\":1}}],[\"因为我们给这个属性添加了\",{\"1\":{\"517\":1}}],[\"因为我们需要将\",{\"1\":{\"460\":1}}],[\"因为声明文件只有在引用\",{\"1\":{\"460\":1}}],[\"因为将\",{\"1\":{\"403\":1}}],[\"因为类组件中修改\",{\"1\":{\"360\":1}}],[\"因为它可以覆盖或者替换\",{\"1\":{\"356\":1}}],[\"因为它们无法转成对象\",{\"1\":{\"167\":1}}],[\"因为它们在内存中的地址不一样\",{\"1\":{\"161\":1}}],[\"因为现在的目标是更新收藏状态不重新拉取文章列表\",{\"1\":{\"351\":1}}],[\"因为没有为\",{\"1\":{\"306\":1}}],[\"因为\",{\"1\":{\"305\":1,\"334\":1,\"373\":1,\"379\":1,\"508\":1}}],[\"因为浏览器不支持\",{\"1\":{\"293\":1,\"306\":1}}],[\"因为是在浏览器环境\",{\"1\":{\"292\":1}}],[\"因为是可选参数所以如果参数类型不能为\",{\"1\":{\"99\":1}}],[\"因为渲染过程中不能操作\",{\"1\":{\"286\":1}}],[\"因为需要使用箭头函数\",{\"1\":{\"406\":1}}],[\"因为需要停止功能\",{\"1\":{\"360\":1}}],[\"因为需要\",{\"1\":{\"269\":1}}],[\"因为只是修改了一个引用\",{\"1\":{\"225\":1}}],[\"因为数组是特殊的对象\",{\"1\":{\"169\":1}}],[\"因为对象不构成单独的作用域\",{\"1\":{\"159\":1}}],[\"因为子类自己的\",{\"1\":{\"154\":1}}],[\"因为所有类都是\",{\"1\":{\"128\":1}}],[\"因为代码压缩后\",{\"1\":{\"126\":1}}],[\"因为这一步时\",{\"1\":{\"79\":1}}],[\"因为还有边框和边距的宽度\",{\"1\":{\"53\":1}}],[\"$attrs\",{\"1\":{\"633\":1}}],[\"$watch\",{\"1\":{\"621\":2,\"623\":1}}],[\"$router\",{\"1\":{\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":2}}],[\"$route\",{\"1\":{\"578\":1,\"584\":1,\"586\":1,\"600\":3}}],[\"$refs\",{\"1\":{\"496\":2,\"502\":2,\"562\":2}}],[\"$result$d\",{\"1\":{\"100\":1}}],[\"$result$c\",{\"1\":{\"100\":1}}],[\"$http\",{\"1\":{\"573\":2}}],[\"$nexttick\",{\"1\":{\"530\":1}}],[\"$name\",{\"1\":{\"141\":1}}],[\"$bus\",{\"1\":{\"525\":1,\"527\":1,\"528\":2}}],[\"$mount\",{\"1\":{\"518\":2,\"525\":1,\"560\":1,\"576\":1,\"613\":1}}],[\"$event\",{\"1\":{\"520\":3}}],[\"$el\",{\"1\":{\"517\":3}}],[\"$emit\",{\"1\":{\"496\":2,\"502\":1,\"528\":2,\"633\":1}}],[\"$data\",{\"1\":{\"517\":8}}],[\"$off\",{\"1\":{\"498\":1,\"499\":1,\"500\":1,\"502\":3,\"528\":1}}],[\"$once\",{\"1\":{\"496\":1,\"502\":1}}],[\"$on\",{\"1\":{\"496\":1,\"502\":2,\"527\":1}}],[\"$t\",{\"1\":{\"208\":1}}],[\"$i\",{\"1\":{\"122\":1}}],[\"$slots\",{\"1\":{\"633\":1}}],[\"$store\",{\"1\":{\"614\":5,\"615\":1,\"616\":1,\"619\":1}}],[\"$set\",{\"1\":{\"539\":2}}],[\"$s\",{\"1\":{\"96\":1}}],[\"$\",{\"1\":{\"73\":1,\"91\":1,\"120\":1,\"124\":2,\"186\":2,\"224\":2,\"245\":1,\"337\":1,\"344\":4,\"345\":1,\"349\":1,\"351\":3,\"354\":2,\"358\":3,\"359\":3,\"446\":1,\"451\":2,\"456\":5,\"470\":1,\"631\":1}}],[\"来模拟一个完整的\",{\"1\":{\"608\":1}}],[\"来检查路由记录中的\",{\"1\":{\"600\":1}}],[\"来定义它的类型\",{\"1\":{\"456\":1,\"459\":1}}],[\"来定义\",{\"1\":{\"417\":1,\"459\":1}}],[\"来限制部分异步\",{\"1\":{\"394\":1}}],[\"来证明这一点\",{\"1\":{\"380\":1}}],[\"来支持\",{\"1\":{\"379\":1}}],[\"来构建应用\",{\"1\":{\"353\":1}}],[\"来设置\",{\"1\":{\"346\":1}}],[\"来设置反向代理\",{\"1\":{\"339\":1}}],[\"来替代\",{\"1\":{\"345\":1}}],[\"来处理错误\",{\"1\":{\"344\":1}}],[\"来匹配需要更新的项目\",{\"1\":{\"343\":1}}],[\"来响应一个\",{\"1\":{\"338\":1}}],[\"来响应各种\",{\"1\":{\"338\":1}}],[\"来编写\",{\"1\":{\"338\":1}}],[\"来编写创建文章的页面\",{\"1\":{\"337\":1}}],[\"来获取\",{\"1\":{\"379\":1}}],[\"来获取提交的内容\",{\"1\":{\"379\":1}}],[\"来获取数据\",{\"1\":{\"337\":1}}],[\"来获取当前\",{\"1\":{\"337\":1}}],[\"来在组件中触发\",{\"1\":{\"337\":1}}],[\"来更新\",{\"1\":{\"337\":1}}],[\"来创建一个文章\",{\"1\":{\"337\":1}}],[\"来创建编译时常量时\",{\"1\":{\"72\":1}}],[\"来保存编辑过程中的文章标题和内容\",{\"1\":{\"337\":1}}],[\"来提供一个\",{\"1\":{\"336\":1}}],[\"来进行\",{\"1\":{\"335\":1,\"547\":1}}],[\"来完成\",{\"1\":{\"334\":1}}],[\"来渲染\",{\"1\":{\"329\":1}}],[\"来描述应用程序的状态\",{\"1\":{\"329\":1}}],[\"来表明用户刚刚做了什么\",{\"1\":{\"323\":1}}],[\"来为这个\",{\"1\":{\"300\":1}}],[\"来声明一个全局接口或类型\",{\"1\":{\"459\":1}}],[\"来声明深层的属性的类型\",{\"1\":{\"459\":1}}],[\"来声明这个拥有多个子属性的全局变量\",{\"1\":{\"459\":1}}],[\"来声明\",{\"1\":{\"289\":1}}],[\"来实现响应式\",{\"1\":{\"632\":2}}],[\"来实现上面的效果\",{\"1\":{\"361\":1}}],[\"来实现对状态的更改\",{\"1\":{\"351\":1}}],[\"来实现\",{\"1\":{\"274\":1,\"344\":1,\"355\":1,\"356\":1,\"360\":1,\"378\":1,\"379\":2,\"395\":1,\"403\":1}}],[\"来实现一个\",{\"1\":{\"109\":1}}],[\"来访问\",{\"1\":{\"208\":1}}],[\"来结束非空\",{\"1\":{\"137\":1}}],[\"来初始化变量\",{\"1\":{\"118\":1}}],[\"来捕获异常对象\",{\"1\":{\"96\":1}}],[\"来指定异常类型\",{\"1\":{\"96\":1}}],[\"来解决这个问题\",{\"1\":{\"57\":1}}],[\"69\",{\"1\":{\"539\":1}}],[\"64\",{\"1\":{\"222\":1}}],[\"640\",{\"1\":{\"196\":1}}],[\"640w\",{\"1\":{\"196\":3}}],[\"600px\",{\"1\":{\"274\":4}}],[\"60\",{\"1\":{\"137\":2,\"346\":2}}],[\"6\",{\"1\":{\"70\":1,\"85\":1,\"86\":1,\"89\":1,\"106\":1,\"135\":1,\"158\":1,\"209\":1,\"366\":1,\"413\":5,\"529\":1,\"551\":1,\"552\":1,\"658\":1}}],[\"42\",{\"1\":{\"417\":2}}],[\"403\",{\"1\":{\"602\":1}}],[\"404\",{\"1\":{\"245\":1,\"366\":1,\"373\":1,\"379\":2,\"608\":1,\"662\":1}}],[\"400px\",{\"1\":{\"314\":1}}],[\"400\",{\"1\":{\"243\":1,\"244\":1,\"252\":1,\"338\":1}}],[\"401\",{\"1\":{\"27\":1}}],[\"440px\",{\"1\":{\"196\":1}}],[\"480w\",{\"1\":{\"196\":1}}],[\"456\",{\"1\":{\"129\":2,\"374\":2,\"520\":1}}],[\"4\",{\"1\":{\"70\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"125\":1,\"135\":1,\"147\":5,\"158\":1,\"167\":2,\"275\":2,\"366\":1,\"428\":1,\"429\":1,\"445\":1,\"449\":1,\"529\":1,\"534\":1,\"536\":1,\"660\":1}}],[\"返回删除结果\",{\"1\":{\"631\":1}}],[\"返回内容\",{\"1\":{\"631\":1}}],[\"返回新数组\",{\"1\":{\"405\":1}}],[\"返回新字符串\",{\"1\":{\"183\":1}}],[\"返回了存储\",{\"1\":{\"380\":1}}],[\"返回另一个函数\",{\"1\":{\"356\":1}}],[\"返回的都是一个全新的\",{\"1\":{\"492\":1}}],[\"返回的第一个元素是\",{\"1\":{\"384\":1}}],[\"返回的内容可以在对应组件中使用\",{\"1\":{\"379\":1}}],[\"返回的切片中才会有新的\",{\"1\":{\"349\":1}}],[\"返回的是一个数组\",{\"1\":{\"344\":1}}],[\"返回的类型一致\",{\"1\":{\"344\":1}}],[\"返回的数据都包含在\",{\"1\":{\"397\":1}}],[\"返回的数据\",{\"1\":{\"378\":1}}],[\"返回的数据执行循环体\",{\"1\":{\"69\":1}}],[\"返回的数组还有\",{\"1\":{\"216\":1}}],[\"返回当前组件在路由中的信息\",{\"1\":{\"401\":1}}],[\"返回当前\",{\"1\":{\"343\":1}}],[\"返回为\",{\"1\":{\"338\":1}}],[\"返回该参数对象\",{\"1\":{\"240\":1}}],[\"返回函数预期传入的参数个数\",{\"1\":{\"225\":1}}],[\"返回函数的名字\",{\"1\":{\"225\":1}}],[\"返回对应的十进制数\",{\"1\":{\"222\":1}}],[\"返回大于等于\",{\"1\":{\"217\":1}}],[\"返回大于或等于参数值的最小整数\",{\"1\":{\"217\":1}}],[\"返回常数\",{\"1\":{\"217\":1}}],[\"返回以\",{\"1\":{\"217\":1}}],[\"返回以第一个参数为底数\",{\"1\":{\"217\":1}}],[\"返回小于等于参数值的最大整数\",{\"1\":{\"217\":1}}],[\"返回参数对象的原型\",{\"1\":{\"240\":1}}],[\"返回参数的平方根\",{\"1\":{\"217\":1}}],[\"返回参数的绝对值\",{\"1\":{\"217\":1}}],[\"返回参数中的最大最小值\",{\"1\":{\"217\":1}}],[\"返回改变后的数组\",{\"1\":{\"215\":1}}],[\"返回布尔值\",{\"1\":{\"183\":3}}],[\"返回一个代理对象\",{\"1\":{\"628\":1}}],[\"返回一个路由配置对象\",{\"1\":{\"377\":1}}],[\"返回一个对象\",{\"1\":{\"362\":1}}],[\"返回一个对象的原型\",{\"1\":{\"240\":1}}],[\"返回一个字符串\",{\"1\":{\"225\":1}}],[\"返回一个字符串在另一个字符串中第一次出现的位置\",{\"1\":{\"216\":1}}],[\"返回一个布尔值\",{\"1\":{\"215\":1,\"222\":1,\"240\":1}}],[\"返回一个新的\",{\"1\":{\"355\":1}}],[\"返回一个新数组\",{\"1\":{\"215\":1}}],[\"返回一个新字符串\",{\"1\":{\"183\":1,\"216\":2}}],[\"返回一个整数\",{\"1\":{\"212\":1}}],[\"返回一个数组\",{\"1\":{\"170\":3,\"216\":1,\"231\":1,\"240\":1}}],[\"返回一个数据\",{\"1\":{\"69\":1}}],[\"返回一个\",{\"1\":{\"109\":2,\"379\":1,\"543\":1}}],[\"返回值就是getters对应函数的结果\",{\"1\":{\"619\":1}}],[\"返回值是promise类型\",{\"1\":{\"614\":1}}],[\"返回值是被删除的元素\",{\"1\":{\"215\":1}}],[\"返回值示例\",{\"1\":{\"609\":1}}],[\"返回值为一个数组\",{\"1\":{\"401\":1}}],[\"返回值为匹配的第一个位置\",{\"1\":{\"216\":1}}],[\"返回值类型\",{\"1\":{\"116\":1}}],[\"返回值\",{\"0\":{\"107\":1}}],[\"返回类型必须与被覆盖的方法的类型相同或者是其子类\",{\"1\":{\"91\":1}}],[\"等方法一样传递参数等\",{\"1\":{\"602\":1}}],[\"等修改原始数组的方法\",{\"1\":{\"405\":1}}],[\"等属性\",{\"1\":{\"379\":1}}],[\"等属性要用来路由匹配\",{\"1\":{\"377\":1}}],[\"等\",{\"1\":{\"377\":1,\"379\":1,\"380\":1,\"385\":1,\"459\":1}}],[\"等状态\",{\"1\":{\"344\":1}}],[\"等情况\",{\"1\":{\"344\":1}}],[\"等以\",{\"1\":{\"296\":1}}],[\"等到\",{\"1\":{\"227\":1}}],[\"等到异步操作完成再接着执行函数体内后面的语句\",{\"1\":{\"151\":1}}],[\"等内部\",{\"1\":{\"202\":1}}],[\"等价于\",{\"1\":{\"197\":1,\"220\":1}}],[\"等价于当前窗口\",{\"1\":{\"197\":1}}],[\"等于该项的文本内容\",{\"1\":{\"193\":1}}],[\"等于没有抛出\",{\"1\":{\"178\":1}}],[\"等其他语言相同\",{\"1\":{\"130\":1}}],[\"等待直到\",{\"1\":{\"69\":1}}],[\"等同于类中定义该属性同时给该属性赋值\",{\"1\":{\"419\":1}}],[\"等同于全局对象\",{\"1\":{\"238\":1}}],[\"等同于\",{\"1\":{\"46\":1}}],[\"执行时机\",{\"1\":{\"633\":1}}],[\"执行时希望断言生效\",{\"1\":{\"138\":1}}],[\"执行效果依赖传入的参数\",{\"1\":{\"602\":1}}],[\"执行了\",{\"1\":{\"492\":1}}],[\"执行这个\",{\"1\":{\"470\":1}}],[\"执行搜索回调\",{\"1\":{\"407\":1}}],[\"执行就可以了\",{\"1\":{\"379\":1}}],[\"执行此方法可以得到一个\",{\"1\":{\"348\":1}}],[\"执行之后\",{\"1\":{\"345\":1}}],[\"执行两次的问题\",{\"1\":{\"290\":1}}],[\"执行\",{\"1\":{\"286\":1,\"387\":1,\"559\":2}}],[\"执行一个表达式\",{\"1\":{\"241\":1}}],[\"执行流程如下\",{\"1\":{\"69\":1}}],[\"执行完成的结果\",{\"1\":{\"67\":1}}],[\"执行完毕前直接返回而不会等待耗时操作执行完毕\",{\"1\":{\"66\":1}}],[\"中浅层属性\",{\"1\":{\"649\":1}}],[\"中哪个父节点下渲染了\",{\"1\":{\"645\":1}}],[\"中生命周期与\",{\"1\":{\"638\":1}}],[\"中任意值的变化\",{\"1\":{\"622\":1}}],[\"中访问\",{\"1\":{\"619\":1}}],[\"中注册的模块名即可\",{\"1\":{\"619\":1}}],[\"中给\",{\"1\":{\"618\":1}}],[\"中应用\",{\"1\":{\"617\":1}}],[\"中函数重名的情况\",{\"1\":{\"616\":1}}],[\"中函数也是对象\",{\"1\":{\"97\":1}}],[\"中属性重名的情况\",{\"1\":{\"616\":1}}],[\"中对应函数的名字\",{\"1\":{\"616\":1}}],[\"中对应数据的名字\",{\"1\":{\"616\":1}}],[\"中对应的属性\",{\"1\":{\"516\":1}}],[\"中对应的文章\",{\"1\":{\"337\":1}}],[\"中然后引用\",{\"1\":{\"613\":1}}],[\"中断当前导航\",{\"1\":{\"602\":1}}],[\"中修改\",{\"1\":{\"584\":1}}],[\"中复制一份\",{\"1\":{\"565\":1}}],[\"中内容发生改变\",{\"1\":{\"553\":1}}],[\"中内容为空\",{\"1\":{\"345\":1}}],[\"中找到了与新虚拟\",{\"1\":{\"535\":1}}],[\"中找不到时\",{\"1\":{\"485\":1}}],[\"中解绑自己创建的事件\",{\"1\":{\"528\":1}}],[\"中未提供别名的按键\",{\"1\":{\"522\":1}}],[\"中传递参数\",{\"1\":{\"578\":1}}],[\"中传入\",{\"1\":{\"543\":1}}],[\"中传入一个更新函数\",{\"1\":{\"517\":1}}],[\"中传来的数据\",{\"1\":{\"401\":1}}],[\"中也是修改这个变量\",{\"1\":{\"517\":1}}],[\"中也有相应的\",{\"1\":{\"516\":1}}],[\"中也有封装好的\",{\"1\":{\"343\":1}}],[\"中间变量\",{\"1\":{\"517\":1}}],[\"中间件之后\",{\"1\":{\"338\":1}}],[\"中间件\",{\"0\":{\"246\":1},\"1\":{\"259\":1,\"334\":1}}],[\"中间件方法意味着可以使用\",{\"1\":{\"244\":1}}],[\"中直接返回就会再次触发\",{\"1\":{\"517\":1}}],[\"中操作数据不会再出发更新流程\",{\"1\":{\"530\":1}}],[\"中操作\",{\"1\":{\"516\":1}}],[\"中方法不要重名\",{\"1\":{\"503\":1}}],[\"中方法的名字来自动生成\",{\"1\":{\"334\":1}}],[\"中定义函数并在\",{\"1\":{\"543\":1}}],[\"中定义回调函数\",{\"1\":{\"502\":1}}],[\"中定义\",{\"1\":{\"502\":1}}],[\"中定义的内容\",{\"1\":{\"658\":1}}],[\"中定义的方法\",{\"1\":{\"617\":1}}],[\"中定义的是属性\",{\"1\":{\"503\":1}}],[\"中定义的是方法\",{\"1\":{\"503\":1}}],[\"中定义的标签的\",{\"1\":{\"345\":1}}],[\"中定义的\",{\"1\":{\"335\":1}}],[\"中为\",{\"1\":{\"502\":1}}],[\"中已定义的方法名\",{\"1\":{\"617\":1}}],[\"中已有名称\",{\"1\":{\"490\":1}}],[\"中已缓存的数据来匹配服务器上的预期改动\",{\"1\":{\"351\":1}}],[\"中添加如下配置\",{\"1\":{\"485\":1,\"486\":1}}],[\"中引用了\",{\"1\":{\"461\":1}}],[\"中引用\",{\"1\":{\"460\":2,\"462\":1,\"463\":1,\"576\":1}}],[\"中有很多全局\",{\"1\":{\"657\":1}}],[\"中有很多指令\",{\"1\":{\"554\":1}}],[\"中有这样一行代码\",{\"1\":{\"560\":1}}],[\"中有两种数据绑定方式\",{\"1\":{\"508\":1}}],[\"中有\",{\"1\":{\"460\":1}}],[\"中有一些关于类的提案\",{\"1\":{\"417\":1}}],[\"中有一个是\",{\"1\":{\"180\":1}}],[\"中实例的属性只能通过构造函数中的\",{\"1\":{\"417\":1}}],[\"中进行引用\",{\"1\":{\"619\":1}}],[\"中进行\",{\"1\":{\"408\":1}}],[\"中包裹的内容过多\",{\"1\":{\"393\":1}}],[\"中包含这个\",{\"1\":{\"345\":1}}],[\"中包含\",{\"1\":{\"292\":1}}],[\"中保存着以\",{\"1\":{\"388\":1}}],[\"中很多值要理解为不可变\",{\"1\":{\"380\":1}}],[\"中打印\",{\"1\":{\"380\":1}}],[\"中通过为\",{\"1\":{\"525\":1}}],[\"中通过\",{\"1\":{\"379\":1,\"394\":1}}],[\"中通过冒号来定义参数路由\",{\"1\":{\"372\":1}}],[\"中初始化\",{\"1\":{\"379\":1}}],[\"中返回\",{\"1\":{\"377\":1}}],[\"中某个部分允许忽略的情况可以使用可选路由\",{\"1\":{\"373\":1}}],[\"中显示的子元素\",{\"1\":{\"368\":1}}],[\"中显式地使用\",{\"1\":{\"320\":1}}],[\"中提供服务\",{\"1\":{\"366\":1}}],[\"中状态树的类型\",{\"1\":{\"359\":1}}],[\"中首先判断\",{\"1\":{\"358\":1}}],[\"中只要判断这一点就可以实现发出异步请求了\",{\"1\":{\"358\":1}}],[\"中只能有一个根节点\",{\"1\":{\"305\":1}}],[\"中只能判断一个对象是不是\",{\"1\":{\"114\":1}}],[\"中才会生效\",{\"1\":{\"356\":1}}],[\"中不能访问\",{\"1\":{\"626\":1}}],[\"中不能直接返回\",{\"1\":{\"517\":1}}],[\"中不存在的字段\",{\"1\":{\"428\":1}}],[\"中不允许条件调用\",{\"1\":{\"345\":1}}],[\"中不同\",{\"1\":{\"91\":1}}],[\"中存在内容\",{\"1\":{\"345\":1}}],[\"中增加一个按钮\",{\"1\":{\"345\":1}}],[\"中将入参定义为\",{\"1\":{\"344\":1}}],[\"中将增加一个\",{\"1\":{\"320\":1}}],[\"中主要是获取全部和根据\",{\"1\":{\"343\":1}}],[\"中逻辑比较复杂\",{\"1\":{\"342\":1}}],[\"中抛出异常\",{\"1\":{\"340\":1}}],[\"中抛出错误时\",{\"1\":{\"340\":1}}],[\"中并没有对\",{\"1\":{\"334\":1}}],[\"中捕获一些信息\",{\"1\":{\"314\":1}}],[\"中所有层次的数据\",{\"1\":{\"539\":1}}],[\"中所有\",{\"1\":{\"344\":1}}],[\"中所有标签的属性都是驼峰命名\",{\"1\":{\"305\":1}}],[\"中所有数字都是以\",{\"1\":{\"222\":1}}],[\"中使用问号可以使某一部分可以忽略\",{\"1\":{\"373\":1}}],[\"中使用了\",{\"1\":{\"344\":1,\"351\":1}}],[\"中使用注释可以用\",{\"1\":{\"305\":1}}],[\"中使用\",{\"1\":{\"305\":1,\"345\":1,\"379\":2,\"384\":1}}],[\"中获取通配得到的内容\",{\"1\":{\"374\":1}}],[\"中获取到的\",{\"1\":{\"314\":1}}],[\"中获取了数据\",{\"1\":{\"290\":1}}],[\"中获取值的方法\",{\"1\":{\"69\":1}}],[\"中订阅了事件\",{\"1\":{\"290\":1}}],[\"中需要上报一个客户事件\",{\"1\":{\"289\":1}}],[\"中读取的逻辑抽取为一个\",{\"1\":{\"297\":1}}],[\"中读取\",{\"0\":{\"289\":1}}],[\"中依赖的变量\",{\"1\":{\"287\":1}}],[\"中再调用\",{\"1\":{\"286\":1}}],[\"中根据收到的\",{\"1\":{\"378\":1}}],[\"中根据\",{\"1\":{\"286\":1}}],[\"中改用\",{\"1\":{\"283\":1}}],[\"中可以访问到\",{\"1\":{\"626\":1}}],[\"中可以直接使用\",{\"1\":{\"459\":1}}],[\"中可以使用封装的\",{\"1\":{\"379\":1}}],[\"中可以将任何非\",{\"1\":{\"96\":1}}],[\"中可能会有不能连续调用两次的\",{\"1\":{\"290\":1}}],[\"中可用\",{\"1\":{\"283\":1}}],[\"中标签属性都使用驼峰命名\",{\"1\":{\"274\":1}}],[\"中标识符可以以字母或者下划线开头\",{\"1\":{\"117\":1}}],[\"中无法使用\",{\"1\":{\"223\":1}}],[\"中每个特定数据只有一个副本\",{\"1\":{\"343\":1}}],[\"中每个\",{\"1\":{\"137\":1}}],[\"中每个变量引用都指向一个对象\",{\"1\":{\"118\":1}}],[\"中一些常见的陷阱\",{\"1\":{\"135\":1}}],[\"中特定位置的元素\",{\"1\":{\"132\":1}}],[\"中比较特别的运算符\",{\"1\":{\"127\":1}}],[\"中声明的操作符或者标识符\",{\"1\":{\"126\":1}}],[\"中\",{\"1\":{\"124\":1,\"134\":1,\"136\":1,\"266\":1,\"275\":1,\"286\":1,\"297\":1,\"334\":1,\"338\":1,\"343\":1,\"344\":2,\"353\":1,\"354\":1,\"356\":1,\"388\":2,\"397\":1,\"456\":1,\"459\":1,\"460\":2,\"517\":1,\"534\":1,\"535\":1,\"547\":4,\"613\":1,\"619\":1,\"622\":1,\"626\":1,\"644\":2}}],[\"中字符串的比较直接使用等号即可\",{\"1\":{\"120\":2}}],[\"中如果一个标识符以下划线开头则表示是库内私有的\",{\"1\":{\"117\":1}}],[\"中具有同名方法\",{\"1\":{\"94\":1}}],[\"中的绑定\",{\"1\":{\"658\":1}}],[\"中的组合式\",{\"1\":{\"641\":1}}],[\"中的组件不会重新渲染\",{\"1\":{\"301\":1}}],[\"中的一个对象\",{\"1\":{\"631\":1}}],[\"中的一个新的配置项\",{\"1\":{\"626\":1}}],[\"中的方法同名的情况\",{\"1\":{\"617\":2}}],[\"中的指定内容在\",{\"1\":{\"565\":1}}],[\"中的所有属性\",{\"1\":{\"554\":1}}],[\"中的第二个元素\",{\"1\":{\"534\":1}}],[\"中的修改属性名规则也是相同的\",{\"1\":{\"522\":1}}],[\"中的属性\",{\"1\":{\"626\":1}}],[\"中的属性修改为对象时\",{\"1\":{\"517\":1}}],[\"中的属性名必须采用驼峰命名\",{\"1\":{\"483\":1}}],[\"中的函数都是被\",{\"1\":{\"520\":1}}],[\"中的函数不要使用箭头函数\",{\"1\":{\"520\":1}}],[\"中的函数\",{\"1\":{\"492\":3}}],[\"中的数据代理\",{\"0\":{\"516\":1},\"1\":{\"516\":1}}],[\"中的数据\",{\"1\":{\"472\":1,\"516\":1,\"539\":2}}],[\"中的数组时\",{\"1\":{\"405\":2}}],[\"中的例子不适合表单实现\",{\"1\":{\"379\":1}}],[\"中的值\",{\"1\":{\"363\":1}}],[\"中的中间件为此提供了支持\",{\"1\":{\"338\":1}}],[\"中的文章列表\",{\"1\":{\"337\":1}}],[\"中的同一个字段\",{\"1\":{\"331\":1}}],[\"中的展开运算符可以实现对象或数组的拷贝\",{\"1\":{\"330\":1}}],[\"中的对象和数组都是可以改变的\",{\"1\":{\"330\":1}}],[\"中的逻辑需要考虑重复调用产生的影响和处理\",{\"1\":{\"290\":1}}],[\"中的待办事项的例子\",{\"1\":{\"283\":1}}],[\"中的配置\",{\"1\":{\"268\":1}}],[\"中的泛型类型是固化的\",{\"1\":{\"114\":1}}],[\"中的异常都是非必检异常\",{\"1\":{\"96\":1}}],[\"中的\",{\"1\":{\"68\":1,\"154\":1,\"193\":1,\"283\":1,\"334\":1,\"338\":1,\"345\":3,\"355\":1,\"379\":1,\"391\":2,\"396\":1,\"467\":1,\"522\":1,\"534\":1}}],[\"中的几个\",{\"1\":{\"61\":1}}],[\"中的内容没变\",{\"1\":{\"535\":1}}],[\"中的内容时就可以直接\",{\"1\":{\"516\":1}}],[\"中的内容再代理到实例上\",{\"1\":{\"516\":1}}],[\"中的内容将被作为参数传递到这个函数里\",{\"1\":{\"391\":1}}],[\"中的内容\",{\"1\":{\"29\":1,\"289\":1,\"294\":1,\"623\":1}}],[\"从上至下进行同样方式的分割\",{\"1\":{\"619\":1}}],[\"从而转为在\",{\"1\":{\"511\":1}}],[\"从而触发监听函数的执行\",{\"1\":{\"229\":1}}],[\"从实际值参数中也无法推测出时\",{\"1\":{\"431\":1}}],[\"从这两个组件上移动到它们的公共父级\",{\"1\":{\"407\":1}}],[\"从这里就能够取到\",{\"1\":{\"388\":1}}],[\"从文章列表中点击任意一个文章进入详情页后\",{\"1\":{\"346\":1}}],[\"从一个小的\",{\"1\":{\"329\":1}}],[\"从传递\",{\"1\":{\"281\":1}}],[\"从外到内\",{\"1\":{\"274\":1}}],[\"从目标节点传导会\",{\"1\":{\"230\":1}}],[\"从尾部开始匹配\",{\"1\":{\"216\":1}}],[\"从原字符串取出子字符串并返回\",{\"1\":{\"216\":2}}],[\"从右往左处理\",{\"1\":{\"215\":1}}],[\"从右到左\",{\"1\":{\"192\":1}}],[\"从左往右处理\",{\"1\":{\"215\":1}}],[\"从左到右\",{\"1\":{\"192\":1}}],[\"从数组和对象中提取值\",{\"1\":{\"185\":1}}],[\"从子类获取父类\",{\"1\":{\"154\":1}}],[\"从\",{\"0\":{\"289\":1},\"1\":{\"69\":1,\"230\":1,\"266\":1,\"401\":1,\"551\":1,\"581\":1}}],[\"3=<span\",{\"1\":{\"548\":1}}],[\"30px\",{\"1\":{\"482\":1}}],[\"302\",{\"1\":{\"379\":1}}],[\"300\",{\"1\":{\"378\":1,\"550\":1}}],[\"3000\",{\"1\":{\"352\":1}}],[\"300px\",{\"1\":{\"274\":4,\"645\":2}}],[\"33vw\",{\"1\":{\"196\":1}}],[\"320\",{\"1\":{\"196\":1}}],[\"320w\",{\"1\":{\"196\":2}}],[\"3\",{\"1\":{\"68\":2,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"112\":1,\"119\":2,\"122\":9,\"135\":1,\"147\":5,\"157\":3,\"158\":1,\"167\":2,\"269\":3,\"275\":2,\"352\":1,\"360\":1,\"378\":1,\"425\":1,\"428\":1,\"429\":1,\"431\":1,\"442\":1,\"449\":1,\"482\":1,\"517\":2,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"546\":1,\"548\":1,\"614\":1,\"628\":1,\"657\":1,\"658\":2}}],[\"360\",{\"1\":{\"43\":1}}],[\"声明自定义事件\",{\"1\":{\"658\":1}}],[\"声明函数而不是\",{\"1\":{\"459\":1}}],[\"声明语句里只能定义类型\",{\"1\":{\"459\":1}}],[\"声明全局枚举类型\",{\"1\":{\"459\":1}}],[\"声明全局类型\",{\"1\":{\"459\":1}}],[\"声明全局类\",{\"1\":{\"459\":1}}],[\"声明全局方法\",{\"1\":{\"459\":1}}],[\"声明全局变量\",{\"1\":{\"459\":1}}],[\"声明文件中的依赖\",{\"0\":{\"465\":1}}],[\"声明文件必须以\",{\"1\":{\"457\":1}}],[\"声明文件\",{\"0\":{\"455\":1,\"457\":1},\"1\":{\"460\":2,\"465\":1}}],[\"声明合并\",{\"0\":{\"432\":1}}],[\"声明类时创建的类型只包含其中的实例属性和实例方法\",{\"1\":{\"425\":1}}],[\"声明同时要初始化\",{\"1\":{\"160\":1}}],[\"声明\",{\"0\":{\"286\":1},\"1\":{\"157\":2,\"285\":1,\"459\":1}}],[\"声明的\",{\"1\":{\"94\":1}}],[\"声明但没有初始化的实例变量还会隐式的声明一个\",{\"1\":{\"74\":1}}],[\"声明异步函数\",{\"0\":{\"68\":1}}],[\"声明变量可以使变量不可变\",{\"1\":{\"145\":1}}],[\"声明变量\",{\"1\":{\"13\":1}}],[\"则对象中的属性\",{\"1\":{\"626\":1}}],[\"则脚手架会先执行所有的\",{\"1\":{\"613\":1}}],[\"则使用\",{\"1\":{\"586\":1}}],[\"则使用默认错误侦听器\",{\"1\":{\"245\":1}}],[\"则每个\",{\"1\":{\"552\":1}}],[\"则父组件中要插入的内容在每个插槽中都会重复出现\",{\"1\":{\"550\":1}}],[\"则子组件中插槽标签中的内容会作为默认值出现\",{\"1\":{\"549\":1}}],[\"则回调函数中的\",{\"1\":{\"543\":1}}],[\"则生成新的真实\",{\"1\":{\"535\":1}}],[\"则需要引入第三方声明文件\",{\"1\":{\"467\":1}}],[\"则需要使用另一种语法在声明文件中扩展全局变量的类型\",{\"1\":{\"463\":1}}],[\"则需要用嵌套的\",{\"1\":{\"459\":1}}],[\"则可以自定义渲染内容\",{\"1\":{\"626\":1}}],[\"则可以在任意属性中使用联合类型\",{\"1\":{\"441\":1}}],[\"则可以实现\",{\"1\":{\"90\":1}}],[\"则仍然会得到之前的值\",{\"1\":{\"403\":1}}],[\"则不会\",{\"1\":{\"360\":1}}],[\"则不更新任何内容\",{\"1\":{\"310\":1}}],[\"则还会发送另一个后缀为\",{\"1\":{\"243\":1}}],[\"则默认\",{\"1\":{\"551\":1}}],[\"则默认传入全局对象\",{\"1\":{\"238\":1}}],[\"则默认值失效\",{\"1\":{\"185\":1}}],[\"则默认值仍然会生效\",{\"1\":{\"185\":1}}],[\"则会重置到\",{\"1\":{\"602\":1}}],[\"则会在编译阶段报错\",{\"1\":{\"414\":1}}],[\"则会变成\",{\"1\":{\"225\":1}}],[\"则会先转为对象\",{\"1\":{\"188\":1}}],[\"则会抛出异常\",{\"1\":{\"128\":1}}],[\"则这两个\",{\"1\":{\"157\":1}}],[\"则这个\",{\"1\":{\"137\":1}}],[\"则这个变量会保持原来的值\",{\"1\":{\"129\":1}}],[\"则这个实例的类型是\",{\"1\":{\"67\":1}}],[\"则断言失败\",{\"1\":{\"138\":1}}],[\"则断言成功\",{\"1\":{\"138\":1}}],[\"则返回\",{\"1\":{\"132\":1}}],[\"则返回表达式\",{\"1\":{\"130\":1}}],[\"则在这个分支作用域内\",{\"1\":{\"128\":1}}],[\"则必定为\",{\"1\":{\"128\":1}}],[\"则必须覆盖每一个枚举值\",{\"1\":{\"93\":1}}],[\"则插值的内容必须都是\",{\"1\":{\"120\":1}}],[\"则\",{\"1\":{\"120\":1,\"145\":1,\"152\":1,\"454\":1,\"512\":2,\"552\":1}}],[\"则异常会在执行完\",{\"1\":{\"96\":1}}],[\"则谁最后被\",{\"1\":{\"94\":1}}],[\"则添加到该元素的内边距会添加到元素的总宽度中\",{\"1\":{\"36\":1}}],[\"这和\",{\"1\":{\"606\":1}}],[\"这一条数据\",{\"1\":{\"534\":1}}],[\"这就是泛型约束\",{\"1\":{\"428\":1}}],[\"这被称为状态提升\",{\"1\":{\"407\":1}}],[\"这意味着不能通过访问数组下表直接修改数组\",{\"1\":{\"405\":1}}],[\"这同样必须是一个纯函数\",{\"1\":{\"403\":1}}],[\"这需要通过\",{\"1\":{\"403\":1}}],[\"这需要使用\",{\"1\":{\"372\":1}}],[\"这可能会导致一些体验上的问题\",{\"1\":{\"390\":1}}],[\"这可以防止在单个事件期间多次重新渲染\",{\"1\":{\"403\":1}}],[\"这可以使数据流更加清晰可预测\",{\"1\":{\"363\":1}}],[\"这可以通过\",{\"1\":{\"360\":1}}],[\"这可以通过状态提升来解决\",{\"1\":{\"329\":1}}],[\"这可以集中管理状态并且可以实现\",{\"1\":{\"344\":1}}],[\"这可以让组件在发生更改前从\",{\"1\":{\"314\":1}}],[\"这可以让数据的流动更加清晰\",{\"1\":{\"281\":1}}],[\"这导致在第一次渲染的时候拿到的就是这个变量\",{\"1\":{\"380\":1}}],[\"这些可以被监测到的被包裹方法包括\",{\"1\":{\"539\":1}}],[\"这些方法的结果必须是全新的数据\",{\"1\":{\"380\":1}}],[\"这些\",{\"1\":{\"352\":1}}],[\"这些查询上有一个\",{\"1\":{\"348\":1}}],[\"这些函数都是异步的\",{\"1\":{\"66\":1}}],[\"这说明这个\",{\"1\":{\"342\":1}}],[\"这也是在\",{\"1\":{\"334\":1}}],[\"这是因为数组展开拷贝是浅拷贝\",{\"1\":{\"405\":1}}],[\"这是因为数据缓存导致的\",{\"1\":{\"347\":1}}],[\"这是因为原生表单提交时浏览器会向\",{\"1\":{\"379\":1}}],[\"这是因为在\",{\"1\":{\"366\":1}}],[\"这是因为默认情况下数据的缓存时间是\",{\"1\":{\"346\":1}}],[\"这是因为\",{\"1\":{\"334\":1,\"345\":1}}],[\"这是单个\",{\"1\":{\"334\":1}}],[\"这是一个\",{\"1\":{\"120\":1}}],[\"这类似\",{\"1\":{\"306\":1}}],[\"这会使得页面整体刷新\",{\"1\":{\"351\":1}}],[\"这会在数组的插入\",{\"1\":{\"306\":1}}],[\"这会导致\",{\"1\":{\"301\":1,\"379\":1}}],[\"这种情况也不能获取\",{\"1\":{\"636\":1}}],[\"这种情况也可以获取\",{\"1\":{\"636\":1}}],[\"这种情况可以获取\",{\"1\":{\"636\":1}}],[\"这种情况下\",{\"1\":{\"209\":1,\"290\":1,\"392\":1}}],[\"这种情况下返回值为\",{\"1\":{\"97\":1}}],[\"这种既是一个函数可以被直接调用\",{\"1\":{\"459\":1}}],[\"这种语法\",{\"1\":{\"305\":1}}],[\"这相当于是缓存\",{\"1\":{\"301\":1}}],[\"这三个文件\",{\"1\":{\"292\":1}}],[\"这样其中的\",{\"1\":{\"624\":1}}],[\"这样的属性链通过\",{\"1\":{\"517\":1}}],[\"这样的话在状态树中的\",{\"1\":{\"334\":1}}],[\"这样回调方法中\",{\"1\":{\"502\":1}}],[\"这样就能获取到对象中深层的属性值\",{\"1\":{\"517\":1}}],[\"这样就保证了\",{\"1\":{\"428\":1}}],[\"这样就可以在页面上添加加载中的效果\",{\"1\":{\"390\":1}}],[\"这样就创建出了一个\",{\"1\":{\"293\":1}}],[\"这样凡是以\",{\"1\":{\"374\":1}}],[\"这样即使跳转路径为\",{\"1\":{\"373\":1}}],[\"这样第一个参数\",{\"1\":{\"362\":1}}],[\"这样在访问\",{\"1\":{\"516\":1}}],[\"这样在组件中就可以像下面这样使用了\",{\"1\":{\"358\":1}}],[\"这样在子组件中使用\",{\"1\":{\"280\":1}}],[\"这样具有以下优势\",{\"1\":{\"330\":1}}],[\"这样任何组件就能访问\",{\"1\":{\"329\":1}}],[\"这样\",{\"1\":{\"296\":1,\"345\":2,\"368\":1,\"515\":1,\"624\":1}}],[\"这样可以考虑箭头函数\",{\"1\":{\"153\":1}}],[\"这回导致代码冗长\",{\"1\":{\"276\":1}}],[\"这时我们需要\",{\"1\":{\"456\":1}}],[\"这时因为链接里没有上面的动态参数所以会导致\",{\"1\":{\"373\":1}}],[\"这时可以使用\",{\"1\":{\"386\":1}}],[\"这时可以使用动态替换\",{\"1\":{\"208\":1}}],[\"这时可以通过\",{\"1\":{\"368\":1}}],[\"这时\",{\"1\":{\"301\":2,\"428\":1}}],[\"这时就需要进行响应数据的转换\",{\"1\":{\"350\":1}}],[\"这时就需要拆分\",{\"1\":{\"207\":1}}],[\"这时就可以自定义\",{\"1\":{\"296\":1}}],[\"这两个\",{\"1\":{\"551\":1}}],[\"这两个方法不能用来搜索\",{\"1\":{\"215\":1}}],[\"这两个方法都可以接受第二个参数\",{\"1\":{\"148\":1}}],[\"这两个关键字可以替代\",{\"1\":{\"145\":1}}],[\"这里click不会被触发\",{\"1\":{\"658\":1}}],[\"这里必须加引号\",{\"1\":{\"622\":1}}],[\"这里是初始化时首先进行一次数据替换\",{\"1\":{\"517\":1}}],[\"这里是一个表示当前组件渲染的状态\",{\"1\":{\"387\":1}}],[\"这里就是一个闭包\",{\"1\":{\"517\":1}}],[\"这里就是上面\",{\"1\":{\"517\":1}}],[\"这里就获取到了\",{\"1\":{\"517\":1}}],[\"这里也不要添加this关键字\",{\"1\":{\"514\":1}}],[\"这里为了简单\",{\"1\":{\"407\":1}}],[\"这里\",{\"1\":{\"407\":1,\"517\":1}}],[\"这里要使用箭头函数赋值\",{\"1\":{\"406\":1}}],[\"这里指的只是临时的数据传输对象\",{\"1\":{\"385\":1}}],[\"这里在\",{\"1\":{\"379\":1,\"517\":1}}],[\"这里都是返回\",{\"1\":{\"359\":1}}],[\"这里只是简单的加了一个后缀\",{\"1\":{\"350\":1}}],[\"这里只配置了\",{\"1\":{\"338\":1}}],[\"这里用\",{\"1\":{\"344\":1}}],[\"这里有两种\",{\"1\":{\"335\":1}}],[\"这里通过\",{\"1\":{\"335\":1}}],[\"这里我们将之前定义的\",{\"1\":{\"334\":1}}],[\"这里将函数或者函数的返回值声明为\",{\"1\":{\"359\":1}}],[\"这里将\",{\"1\":{\"334\":1}}],[\"这里的\",{\"1\":{\"385\":1,\"387\":1}}],[\"这里的代码只会在组件挂载后执行\",{\"1\":{\"287\":1}}],[\"这里的代码会在每次渲染后执行\",{\"1\":{\"287\":1}}],[\"这里的三目运算符与\",{\"1\":{\"130\":1}}],[\"这里设置为\",{\"1\":{\"269\":1,\"359\":1}}],[\"这里使用mitt\",{\"1\":{\"408\":1}}],[\"这里使用了\",{\"1\":{\"337\":1}}],[\"这里使用\",{\"1\":{\"259\":1,\"334\":1,\"338\":1,\"343\":1,\"540\":1}}],[\"这里主要介绍\",{\"1\":{\"129\":1}}],[\"这里主要是\",{\"1\":{\"127\":1}}],[\"这涉及到页面的渲染\",{\"1\":{\"360\":1}}],[\"这涉及到\",{\"1\":{\"122\":1}}],[\"这与下面的写法是不同的\",{\"1\":{\"642\":1}}],[\"这与\",{\"1\":{\"114\":1,\"406\":1,\"522\":1}}],[\"这将意味着使用该构造函数构造类的实例时并非总是会返回新的实例对象\",{\"1\":{\"83\":1}}],[\"这个类可以被用来定义离开过渡的过程时间\",{\"1\":{\"658\":1}}],[\"这个类可以被用来定义进入过渡的过程时间\",{\"1\":{\"658\":1}}],[\"这个类型接收四个泛型\",{\"1\":{\"359\":1}}],[\"这个类型应该和下方\",{\"1\":{\"344\":1}}],[\"这个类型就是\",{\"1\":{\"344\":1}}],[\"这个特性有两个部分\",{\"1\":{\"652\":1}}],[\"这个钩子此时调用\",{\"1\":{\"605\":1}}],[\"这个钩子只有开启缓存后才会生效\",{\"1\":{\"598\":1,\"599\":1}}],[\"这个钩子不会被执行\",{\"1\":{\"598\":1,\"599\":1}}],[\"这个超链接的样式\",{\"1\":{\"576\":1}}],[\"这个文件应该导出一个包含了选项的对象\",{\"1\":{\"561\":1}}],[\"这个文件就是执行编译的结果\",{\"1\":{\"470\":1}}],[\"这个文件就是声明文件\",{\"1\":{\"457\":1}}],[\"这个文章应用包含了以下内容\",{\"1\":{\"337\":1}}],[\"这个默认类型就会起作用\",{\"1\":{\"431\":1}}],[\"这个组件类中有一个\",{\"1\":{\"406\":1}}],[\"这个组件首先获取路由参数中的\",{\"1\":{\"337\":1}}],[\"这个表单具有一个输入框和一个按钮\",{\"1\":{\"379\":1}}],[\"这个属性可以是一个元素标签或者是一个函数\",{\"1\":{\"391\":1}}],[\"这个属性是一个函数\",{\"1\":{\"378\":1}}],[\"这个属性会指向当前函数\",{\"1\":{\"237\":1}}],[\"这个数值可以通过\",{\"1\":{\"346\":1}}],[\"这个泛型类型\",{\"1\":{\"344\":1}}],[\"这个字段是一个函数\",{\"1\":{\"343\":1}}],[\"这个字段的字段名取决于在组装\",{\"1\":{\"334\":1}}],[\"这个过程被称为\",{\"1\":{\"343\":1}}],[\"这个过程中有多个钩子函数\",{\"1\":{\"308\":1}}],[\"这个日志就会被输出\",{\"1\":{\"342\":1}}],[\"这个错误会被内部捕获处理\",{\"1\":{\"340\":1}}],[\"这个布尔值来区分\",{\"1\":{\"337\":1}}],[\"这个应用能够展示\",{\"1\":{\"337\":1}}],[\"这个dispatch\",{\"1\":{\"334\":1}}],[\"这个参数可以在内部函数的入参中访问到\",{\"1\":{\"338\":1}}],[\"这个参数就是根\",{\"1\":{\"334\":1}}],[\"这个参数是一个数组\",{\"1\":{\"287\":1}}],[\"这个库\",{\"1\":{\"334\":1}}],[\"这个清理函数将状态重置回调用前从而允许下次的调用\",{\"1\":{\"290\":1}}],[\"这个事件需要上报一些事件属性\",{\"1\":{\"289\":1}}],[\"这个传播分为三个阶段\",{\"1\":{\"230\":1}}],[\"这个对象中包含触发\",{\"1\":{\"380\":1}}],[\"这个对象包含了很多的属性\",{\"1\":{\"386\":1}}],[\"这个对象包含了函数运行时的所有参数\",{\"1\":{\"225\":1}}],[\"这个对象包含路由动态参数\",{\"1\":{\"379\":1}}],[\"这个对象只能在函数体内部使用\",{\"1\":{\"225\":1}}],[\"这个函数可以是异步的\",{\"1\":{\"379\":1}}],[\"这个函数应该返回类名\",{\"1\":{\"368\":1}}],[\"这个函数应当返回布尔值\",{\"1\":{\"301\":1}}],[\"这个函数入参是\",{\"1\":{\"356\":1}}],[\"这个函数接收一个\",{\"1\":{\"517\":1}}],[\"这个函数接收一个参数\",{\"1\":{\"334\":1,\"343\":1}}],[\"这个函数接收两个参数\",{\"1\":{\"301\":1}}],[\"这个函数接受三个参数\",{\"1\":{\"215\":1,\"229\":1}}],[\"这个函数比\",{\"1\":{\"233\":1}}],[\"这个函数就是一个函数的子函数\",{\"1\":{\"225\":1}}],[\"这个函数有两个参数\",{\"1\":{\"215\":1}}],[\"这个插件对应的语言键参照wiki\",{\"1\":{\"210\":1}}],[\"这个符号可以通过\",{\"1\":{\"208\":1}}],[\"这个方法第一个参数是一个函数\",{\"1\":{\"517\":1}}],[\"这个方法无法为上面的\",{\"1\":{\"517\":1}}],[\"这个方法会返回一个对象\",{\"1\":{\"386\":1}}],[\"这个方法会把任务加入队列然后返回一个未完成状态的\",{\"1\":{\"67\":1}}],[\"这个方法可以在\",{\"1\":{\"379\":1}}],[\"这个方法即可实现更新\",{\"1\":{\"351\":1}}],[\"这个方法是基于\",{\"1\":{\"344\":1}}],[\"这个方法接收一个字符串\",{\"1\":{\"378\":1}}],[\"这个方法接收一个配置对象\",{\"1\":{\"334\":1,\"344\":1}}],[\"这个方法接收三个泛型类型\",{\"1\":{\"338\":1}}],[\"这个方法应当返回一个对象来更新\",{\"1\":{\"310\":1}}],[\"这个方法只能进行值的复制\",{\"1\":{\"169\":1}}],[\"这个区块对这些命令声明的变量从一开始就形成了封闭作用域\",{\"1\":{\"160\":1}}],[\"这个作用域就会消失\",{\"1\":{\"157\":1}}],[\"这个\",{\"1\":{\"153\":1,\"300\":1,\"301\":1,\"345\":1,\"351\":1,\"358\":1,\"371\":1,\"378\":2,\"379\":2,\"384\":1,\"386\":1,\"401\":1}}],[\"这个接口包含所有这个类的实例成员以及这个类所实现的其他接口\",{\"1\":{\"90\":1}}],[\"这个实例会进入完成状态并附带一个值或者是错误\",{\"1\":{\"67\":1}}],[\"这个值可正可负\",{\"1\":{\"54\":1}}],[\"或数组\",{\"1\":{\"632\":2}}],[\"或简写\",{\"1\":{\"554\":1}}],[\"或空位\",{\"1\":{\"215\":1}}],[\"或赋值运算符\",{\"1\":{\"174\":1}}],[\"或\",{\"1\":{\"66\":1,\"96\":1,\"145\":2,\"167\":1,\"173\":1,\"178\":1,\"190\":1,\"193\":1,\"202\":2,\"215\":1,\"221\":1,\"238\":2,\"243\":1,\"245\":2,\"344\":2,\"414\":1,\"459\":1,\"460\":1,\"464\":1,\"539\":1,\"557\":1,\"570\":1,\"602\":1,\"617\":1}}],[\"或者在\",{\"1\":{\"502\":1,\"543\":1}}],[\"或者触发\",{\"1\":{\"329\":1}}],[\"或者为事件处理函数绑定\",{\"1\":{\"309\":1}}],[\"或者说返回\",{\"1\":{\"241\":1}}],[\"或者直接将子类的原型对象指向一个父类实例\",{\"1\":{\"239\":1}}],[\"或者直接将控件放在\",{\"1\":{\"193\":1}}],[\"或者含有空格或运算符而且也不是数字\",{\"1\":{\"224\":1}}],[\"或者类的\",{\"1\":{\"145\":1}}],[\"或者加在一个具体的类型前\",{\"1\":{\"145\":1}}],[\"或者是保持原先的滚动位置\",{\"1\":{\"609\":1}}],[\"或者是\",{\"1\":{\"403\":1,\"456\":1}}],[\"或者是一些其他值\",{\"1\":{\"402\":1}}],[\"或者是使用\",{\"1\":{\"137\":1}}],[\"或者是以\",{\"1\":{\"64\":1}}],[\"或者将\",{\"1\":{\"123\":1}}],[\"或者特殊类型\",{\"1\":{\"117\":1}}],[\"或者返回一个子类型的实例\",{\"1\":{\"83\":1}}],[\"或者使用绑定传入数组\",{\"1\":{\"596\":1}}],[\"或者使用\",{\"1\":{\"36\":1}}],[\"或者\",{\"1\":{\"18\":1,\"172\":1,\"192\":1,\"279\":1,\"289\":1,\"332\":1,\"340\":1,\"344\":1,\"379\":2,\"380\":1,\"385\":1,\"397\":3,\"451\":2,\"623\":1,\"655\":1}}],[\"行高\",{\"1\":{\"65\":1}}],[\"行内元素不从新行开始\",{\"1\":{\"50\":1}}],[\"行内元素\",{\"0\":{\"50\":1}}],[\"行内元素也可以使用\",{\"1\":{\"44\":1}}],[\"字段或者有一个\",{\"1\":{\"460\":1}}],[\"字段上\",{\"1\":{\"385\":1}}],[\"字段上就有了\",{\"1\":{\"334\":1}}],[\"字段可以是一个函数了\",{\"1\":{\"358\":1}}],[\"字段就是之前数组中的字符串\",{\"1\":{\"347\":1}}],[\"字段和\",{\"1\":{\"347\":1}}],[\"字段\",{\"1\":{\"334\":1,\"343\":1,\"347\":1,\"348\":1,\"351\":1,\"460\":1,\"466\":1,\"600\":2}}],[\"字段的\",{\"1\":{\"335\":1}}],[\"字段的对象\",{\"1\":{\"334\":1}}],[\"字段的普通的\",{\"1\":{\"331\":1}}],[\"字段中\",{\"1\":{\"331\":1}}],[\"字段是一个字符串\",{\"1\":{\"331\":1}}],[\"字幕的语言\",{\"1\":{\"200\":1}}],[\"字幕类型\",{\"1\":{\"200\":1}}],[\"字符只能使用以下这些字符\",{\"1\":{\"190\":1}}],[\"字符串路径\",{\"1\":{\"581\":1}}],[\"字符串形式的指令表达式\",{\"1\":{\"547\":1}}],[\"字符串写法\",{\"1\":{\"482\":1}}],[\"字符串字面量类型用来约束取值只能是某几个字符串中的一个\",{\"1\":{\"411\":1}}],[\"字符串字面量类型\",{\"0\":{\"411\":1}}],[\"字符串字段的对象\",{\"1\":{\"334\":1}}],[\"字符串化\",{\"1\":{\"257\":1}}],[\"字符串会被转为\",{\"1\":{\"222\":1}}],[\"字符串转换为对应的值\",{\"1\":{\"218\":1}}],[\"字符串也可以解构赋值\",{\"1\":{\"187\":1}}],[\"字符串的解构赋值\",{\"0\":{\"187\":1}}],[\"字符串的新增方法\",{\"0\":{\"183\":1}}],[\"字符串的扩展\",{\"0\":{\"181\":1}}],[\"字符串\",{\"0\":{\"223\":1},\"1\":{\"120\":1,\"147\":1,\"218\":1}}],[\"字符串前面加\",{\"1\":{\"120\":1}}],[\"字面量以及\",{\"1\":{\"124\":1}}],[\"字面量在\",{\"1\":{\"123\":1}}],[\"字间距\",{\"1\":{\"65\":1}}],[\"字母间距\",{\"1\":{\"65\":1}}],[\"字体大小\",{\"1\":{\"47\":1}}],[\"字体显示\",{\"1\":{\"47\":1}}],[\"字体变体\",{\"1\":{\"47\":1}}],[\"字体粗细\",{\"1\":{\"47\":1}}],[\"字体样式\",{\"1\":{\"47\":1}}],[\"字体\",{\"0\":{\"47\":1}}],[\"文章管理\",{\"0\":{\"337\":1}}],[\"文章主要内容间接相关的部分\",{\"1\":{\"202\":1}}],[\"文件夹中创建\",{\"1\":{\"613\":1}}],[\"文件夹\",{\"1\":{\"576\":1,\"613\":1,\"641\":1}}],[\"文件即可\",{\"1\":{\"470\":1}}],[\"文件的目录中的\",{\"1\":{\"466\":1}}],[\"文件的匹配规则\",{\"1\":{\"269\":1}}],[\"文件改写为\",{\"1\":{\"267\":1}}],[\"文件\",{\"1\":{\"200\":1,\"267\":2,\"269\":1,\"470\":1,\"613\":1}}],[\"文件内容就是\",{\"1\":{\"197\":1}}],[\"文字缩进\",{\"1\":{\"65\":1}}],[\"文字间距\",{\"1\":{\"65\":1}}],[\"文字装饰\",{\"1\":{\"65\":1}}],[\"文本标签\",{\"0\":{\"204\":1}}],[\"文本阴影\",{\"1\":{\"65\":1}}],[\"文本转换\",{\"1\":{\"65\":1}}],[\"文本方向\",{\"1\":{\"65\":1}}],[\"文本颜色\",{\"1\":{\"65\":1}}],[\"文本\",{\"0\":{\"65\":1}}],[\"文档作者的链接\",{\"1\":{\"197\":1}}],[\"文档\",{\"1\":{\"1\":1}}],[\"会优先作用\",{\"1\":{\"658\":1}}],[\"会有\",{\"1\":{\"658\":1}}],[\"会有无效问题\",{\"1\":{\"301\":1}}],[\"会保持为\",{\"1\":{\"582\":1}}],[\"会保持不变\",{\"1\":{\"126\":1}}],[\"会监视\",{\"1\":{\"539\":1}}],[\"会产生错误的\",{\"1\":{\"535\":1}}],[\"会产生没有必要的真实\",{\"1\":{\"535\":1}}],[\"会引发的问题\",{\"1\":{\"535\":1}}],[\"会无限递归出错\",{\"1\":{\"506\":1}}],[\"会加快编译\",{\"1\":{\"480\":1}}],[\"会删掉\",{\"1\":{\"478\":1}}],[\"会替换掉节点中所有的内容\",{\"1\":{\"477\":1}}],[\"会替换掉节点中的内容\",{\"1\":{\"476\":1}}],[\"会根据新数据生成新的虚拟\",{\"1\":{\"535\":1}}],[\"会根据类型推论的规则推断出一个类型\",{\"1\":{\"440\":1}}],[\"会根据系统设置判断使用什么语言\",{\"1\":{\"210\":1}}],[\"会报错\",{\"1\":{\"434\":1,\"560\":1}}],[\"会批量处理多个\",{\"1\":{\"406\":1}}],[\"会批量处理状态的更新\",{\"1\":{\"403\":1}}],[\"会清空\",{\"1\":{\"385\":1}}],[\"会向上跳转一级路由\",{\"1\":{\"381\":1}}],[\"会发现页面仍然在正常更新\",{\"1\":{\"380\":1}}],[\"会发现请求报错\",{\"1\":{\"379\":1}}],[\"会发现右侧实际上没有渲染\",{\"1\":{\"376\":1}}],[\"会改变\",{\"1\":{\"379\":1}}],[\"会改变原来的\",{\"1\":{\"349\":1}}],[\"会各不相同\",{\"1\":{\"372\":1}}],[\"会给渲染出来的\",{\"1\":{\"368\":1}}],[\"会触发一个事件处理函数\",{\"1\":{\"363\":1}}],[\"会触发渲染\",{\"1\":{\"360\":1}}],[\"会触发哪些标签导致的刷新\",{\"1\":{\"345\":1}}],[\"会重新渲染页面\",{\"1\":{\"360\":1}}],[\"会重新运行\",{\"1\":{\"298\":1}}],[\"会因为\",{\"1\":{\"348\":1}}],[\"会返回一个包含多个字段的对象\",{\"1\":{\"344\":1}}],[\"会返回一个唯一的字符串\",{\"1\":{\"300\":1}}],[\"会执行\",{\"1\":{\"338\":1}}],[\"会将\",{\"1\":{\"335\":1}}],[\"会将这个标签解析为组件\",{\"1\":{\"305\":1}}],[\"会将距离子组件最近的\",{\"1\":{\"280\":1}}],[\"会导致\",{\"1\":{\"605\":1}}],[\"会导致代码冗余\",{\"1\":{\"408\":1}}],[\"会导致死循环\",{\"1\":{\"286\":1}}],[\"会导致箭头函数定义时的作用域是全局作用域\",{\"1\":{\"159\":1}}],[\"会首先刷新屏幕\",{\"1\":{\"286\":1}}],[\"会在每次重新渲染之间被保留\",{\"1\":{\"360\":1}}],[\"会在每次渲染后都执行\",{\"1\":{\"285\":1}}],[\"会在首次渲染时调用这个函数\",{\"1\":{\"301\":1}}],[\"会在子元素和父元素之间传播\",{\"1\":{\"230\":1}}],[\"会跳过不可遍历的属性\",{\"1\":{\"224\":1}}],[\"会影响所有变量\",{\"1\":{\"224\":1}}],[\"会转换为\",{\"1\":{\"221\":1}}],[\"会想这个函数传递当前成员\",{\"1\":{\"215\":1}}],[\"会被自动刷新\",{\"1\":{\"345\":1}}],[\"会被转成空字符串\",{\"1\":{\"215\":1}}],[\"会被输出而不是换行\",{\"1\":{\"120\":1}}],[\"会覆盖\",{\"1\":{\"193\":1}}],[\"会一直向后传递\",{\"1\":{\"178\":1}}],[\"会调用该对象的\",{\"1\":{\"120\":1}}],[\"会自动生成一个无参数的构造函数并且该构造函数会调用其父类的无参构造方法\",{\"1\":{\"76\":1}}],[\"会忽略\",{\"1\":{\"75\":1}}],[\"会选中作为\",{\"1\":{\"64\":1}}],[\"会出现滚动条\",{\"1\":{\"52\":1}}],[\"后续功能不会修改该对象中的属性\",{\"1\":{\"648\":1}}],[\"后续\",{\"1\":{\"636\":1}}],[\"后退功能\",{\"1\":{\"593\":1}}],[\"后退跳转到的是最后一个不是\",{\"1\":{\"589\":1}}],[\"后接参数键\",{\"1\":{\"584\":1}}],[\"后引入的组件中的会覆盖之前组件的\",{\"1\":{\"570\":1}}],[\"后在命令行输入\",{\"1\":{\"559\":1}}],[\"后在断言为其他任意类型\",{\"1\":{\"452\":1}}],[\"后者关闭浏览器即清空\",{\"1\":{\"555\":1}}],[\"后者返回基于这些输入的派生数据\",{\"1\":{\"342\":1}}],[\"后使用\",{\"1\":{\"552\":1}}],[\"后来由于\",{\"1\":{\"459\":1}}],[\"后开始执行渲染\",{\"1\":{\"391\":1}}],[\"后会重新调用\",{\"1\":{\"379\":1}}],[\"后控制台会有对应的输出\",{\"1\":{\"355\":1}}],[\"后组件状态的维护流程\",{\"1\":{\"331\":1}}],[\"后添加标签名可以调到指定位置\",{\"1\":{\"213\":1}}],[\"后面参数为要传递给父组件中定义的方法的参数\",{\"1\":{\"496\":1}}],[\"后面即使\",{\"1\":{\"380\":1}}],[\"后面列表项会从这个值开始编号\",{\"1\":{\"198\":1}}],[\"后面的内容就是\",{\"1\":{\"608\":1}}],[\"后面的内容基于此页面进行\",{\"1\":{\"365\":1}}],[\"后面的参数是函数调用时的参数\",{\"1\":{\"238\":1}}],[\"后面的所有参数都是要被插入数组的元素\",{\"1\":{\"215\":1}}],[\"后面的表达式比较时采用的是严格相等运算符\",{\"1\":{\"213\":1}}],[\"后面的属性会覆盖前面的属性\",{\"1\":{\"169\":1}}],[\"后面的异步操作出错等同于\",{\"1\":{\"152\":1}}],[\"后面都是源对象\",{\"1\":{\"169\":1}}],[\"后抛出\",{\"1\":{\"96\":1}}],[\"后可以\",{\"1\":{\"94\":1}}],[\"后代选择器\",{\"1\":{\"64\":1}}],[\"后台收到如下\",{\"1\":{\"18\":1}}],[\"以上\",{\"1\":{\"660\":1}}],[\"以上的各个字段在\",{\"1\":{\"389\":1}}],[\"以下写法的修改不会影响源数据\",{\"1\":{\"642\":1}}],[\"以下代码使得\",{\"1\":{\"649\":2}}],[\"以下代码不会修改页面\",{\"1\":{\"538\":1}}],[\"以下代码可以修改页面\",{\"1\":{\"538\":1}}],[\"以下是实际的情况\",{\"1\":{\"403\":1}}],[\"以下是将\",{\"1\":{\"363\":2}}],[\"以下是一个示例\",{\"1\":{\"267\":1,\"331\":1}}],[\"以创建\",{\"1\":{\"494\":1}}],[\"以及一些其他数据\",{\"1\":{\"380\":1}}],[\"以及扩展操作符\",{\"1\":{\"123\":1}}],[\"以后数据的改变不会引起\",{\"1\":{\"479\":1}}],[\"以后\",{\"1\":{\"431\":1}}],[\"以后每次执行都是下一个成员\",{\"1\":{\"215\":1}}],[\"以后每次执行都是上一轮的返回值\",{\"1\":{\"215\":1}}],[\"以后可以用来取消这个定时器\",{\"1\":{\"212\":1}}],[\"以指定参数作为分隔符\",{\"1\":{\"215\":1}}],[\"以访问\",{\"1\":{\"207\":1}}],[\"以小一号的字号显示\",{\"1\":{\"204\":1}}],[\"以避免\",{\"1\":{\"135\":1}}],[\"以外\",{\"1\":{\"117\":1}}],[\"以\",{\"1\":{\"64\":1,\"120\":1,\"334\":1,\"457\":1}}],[\"以父元素的百分比设置背景图像的宽度和高度\",{\"1\":{\"32\":1}}],[\"描述\",{\"1\":{\"64\":1}}],[\"分发自定义事件的函数\",{\"1\":{\"633\":1}}],[\"分类<\",{\"1\":{\"550\":1,\"551\":1,\"552\":1}}],[\"分割成模块\",{\"1\":{\"619\":1}}],[\"分割\",{\"1\":{\"517\":1}}],[\"分隔参数\",{\"1\":{\"584\":1}}],[\"分隔字符串\",{\"1\":{\"216\":1}}],[\"分隔上下文和国际化键的\",{\"1\":{\"208\":1}}],[\"分别表示匹配字符串开始的位置和原始字符串\",{\"1\":{\"216\":1}}],[\"分别用于头部\",{\"1\":{\"183\":1}}],[\"分别控制元素是行内元素\",{\"1\":{\"51\":1}}],[\"分组选择器\",{\"1\":{\"64\":1}}],[\"通配路由\",{\"0\":{\"374\":1}}],[\"通常把声明语句放到一个单独的文件中\",{\"1\":{\"457\":1}}],[\"通常使用\",{\"1\":{\"267\":1}}],[\"通常情况下\",{\"1\":{\"256\":1,\"325\":1}}],[\"通常用来表示一个章节\",{\"1\":{\"202\":1}}],[\"通常也可以使用\",{\"1\":{\"118\":1}}],[\"通用选择器\",{\"1\":{\"64\":1}}],[\"通过使用\",{\"1\":{\"632\":1}}],[\"通过重写更新数组的一系列方法来实现拦截\",{\"1\":{\"630\":1}}],[\"通过代理对象操作源对象内部数据进行操作\",{\"1\":{\"628\":1}}],[\"通过监视people数组变化清空输入框\",{\"1\":{\"618\":1}}],[\"通过反引号并将\",{\"1\":{\"578\":1}}],[\"通过将参数拼接在\",{\"1\":{\"578\":1}}],[\"通过包裹了一部分数组更新方法\",{\"1\":{\"539\":1}}],[\"通过管道符\",{\"1\":{\"529\":1}}],[\"通过obj2就可以获取\",{\"1\":{\"515\":1}}],[\"通过一个对象代理对另一个对象中属性的操作\",{\"1\":{\"515\":1}}],[\"通过一个现有的实例对象生成另一个实例对象\",{\"1\":{\"240\":1}}],[\"通过不变的数据和基于前一个状态的函数式更新可以确保状态的正确\",{\"1\":{\"406\":1}}],[\"通过更新函数\",{\"1\":{\"406\":1}}],[\"通过这种方式绑定的\",{\"1\":{\"552\":1}}],[\"通过这种方式防止事件回调时\",{\"1\":{\"406\":1}}],[\"通过这样包装实现\",{\"1\":{\"356\":1}}],[\"通过继承\",{\"1\":{\"406\":1}}],[\"通过配置项跳转\",{\"1\":{\"381\":1}}],[\"通过此对象操作路由\",{\"1\":{\"381\":1}}],[\"通过此变量就能操作\",{\"1\":{\"361\":1}}],[\"通过持有\",{\"1\":{\"362\":1}}],[\"通过调用其\",{\"1\":{\"517\":1}}],[\"通过调用\",{\"1\":{\"343\":1,\"403\":1}}],[\"通过上面的内容可知\",{\"1\":{\"338\":1}}],[\"通过之前的内容我们知道\",{\"1\":{\"334\":1}}],[\"通过集中存储的方式对整个应用中的状态进行管理\",{\"1\":{\"328\":1}}],[\"通过事件处理程序\",{\"1\":{\"323\":1}}],[\"通过下面的步骤可以将\",{\"1\":{\"323\":1}}],[\"通过下面的方式可以获得\",{\"1\":{\"67\":1}}],[\"通过改变\",{\"1\":{\"301\":1}}],[\"通过以下命令可以创建一个\",{\"1\":{\"266\":1}}],[\"通过脚手架创建\",{\"0\":{\"266\":1}}],[\"通过变量名只能获取第二个参数\",{\"1\":{\"225\":1}}],[\"通过在函数上加\",{\"1\":{\"109\":1}}],[\"通过实现类的\",{\"1\":{\"70\":1}}],[\"通过中括号选中包含某个属性的元素\",{\"1\":{\"64\":1}}],[\"通过设置\",{\"1\":{\"51\":1,\"54\":1}}],[\"通过\",{\"1\":{\"32\":2,\"36\":1,\"153\":1,\"190\":1,\"193\":8,\"195\":1,\"198\":3,\"201\":1,\"204\":6,\"223\":2,\"225\":1,\"226\":1,\"294\":1,\"322\":1,\"330\":1,\"337\":3,\"338\":1,\"344\":2,\"361\":1,\"363\":1,\"403\":1,\"459\":1,\"460\":1,\"461\":2,\"462\":1,\"464\":1,\"478\":1,\"502\":1,\"516\":2,\"517\":1,\"518\":1,\"539\":1,\"576\":2,\"596\":1,\"614\":1,\"621\":1,\"630\":1,\"631\":2,\"632\":1}}],[\"类构造器接收四个参数\",{\"1\":{\"517\":1}}],[\"类持有一个订阅者数组并在构造函数中初始化这个数组\",{\"1\":{\"517\":1}}],[\"类实现接口\",{\"0\":{\"423\":1}}],[\"类与接口\",{\"0\":{\"422\":1}}],[\"类来定义组件类\",{\"1\":{\"406\":1}}],[\"类中\",{\"1\":{\"380\":1}}],[\"类组件的\",{\"0\":{\"406\":1}}],[\"类组件的构造函数的入参是\",{\"1\":{\"318\":1}}],[\"类组件使用方式类似\",{\"1\":{\"322\":1}}],[\"类组件传递\",{\"0\":{\"321\":1}}],[\"类组件\",{\"0\":{\"273\":1}}],[\"类名会被局部化\",{\"1\":{\"269\":1}}],[\"类和模块的内部默认就是严格模式\",{\"1\":{\"153\":1}}],[\"类内部可以使用\",{\"1\":{\"153\":1}}],[\"类提供\",{\"1\":{\"123\":1}}],[\"类且具有同名方法\",{\"1\":{\"94\":1}}],[\"类不能声明任何构造器\",{\"1\":{\"94\":1}}],[\"类的合并与接口的合并规则一致\",{\"1\":{\"435\":1}}],[\"类的合并\",{\"0\":{\"435\":1}}],[\"类的方法内部如果含有\",{\"1\":{\"153\":1}}],[\"类的静态变量可以是\",{\"1\":{\"145\":1}}],[\"类的实例变量不能是\",{\"1\":{\"145\":1}}],[\"类的接口\",{\"1\":{\"90\":1}}],[\"类的\",{\"1\":{\"90\":1}}],[\"类支持调用\",{\"1\":{\"90\":1}}],[\"类\",{\"0\":{\"71\":1,\"417\":1},\"1\":{\"90\":1,\"94\":5,\"117\":1,\"517\":2}}],[\"类型数据\",{\"1\":{\"632\":2}}],[\"类型推论\",{\"0\":{\"439\":1}}],[\"类型是可以的\",{\"1\":{\"438\":1}}],[\"类型不一致\",{\"1\":{\"434\":1}}],[\"类型别名用于给一个类型起个新名字\",{\"1\":{\"410\":1}}],[\"类型别名\",{\"0\":{\"410\":1}}],[\"类型标注\",{\"1\":{\"359\":1}}],[\"类型要增加相关的定义\",{\"1\":{\"351\":1}}],[\"类型提示\",{\"1\":{\"349\":1}}],[\"类型处理事件\",{\"1\":{\"331\":1}}],[\"类型检查\",{\"1\":{\"267\":1}}],[\"类型声明比断言更加严格\",{\"1\":{\"454\":1}}],[\"类型声明如下\",{\"1\":{\"334\":1,\"381\":1}}],[\"类型声明\",{\"1\":{\"267\":1,\"465\":1}}],[\"类型断言语句在变异结果中会被删除\",{\"1\":{\"453\":1}}],[\"类型断言只会影响\",{\"1\":{\"453\":1}}],[\"类型断言的限制\",{\"1\":{\"451\":1}}],[\"类型断言可以用来手动指定一个值的类型\",{\"1\":{\"451\":1}}],[\"类型断言\",{\"0\":{\"451\":1},\"1\":{\"128\":1}}],[\"类型判断运算符\",{\"0\":{\"128\":1}}],[\"类型两种形式的\",{\"1\":{\"124\":1}}],[\"类型的提交请求时\",{\"1\":{\"379\":1}}],[\"类型的变量赋值一个\",{\"1\":{\"454\":1}}],[\"类型的变量\",{\"1\":{\"123\":1,\"454\":1}}],[\"类型的可选参数\",{\"1\":{\"102\":1}}],[\"类型\",{\"1\":{\"64\":1,\"91\":1,\"96\":1,\"97\":2,\"193\":17,\"338\":1,\"344\":1,\"359\":3,\"378\":1,\"439\":1,\"451\":1}}],[\"类选择器\",{\"1\":{\"64\":1}}],[\"类似的也可以使用\",{\"1\":{\"459\":1}}],[\"类似于计算属性与监视属性\",{\"1\":{\"546\":1}}],[\"类似于\",{\"1\":{\"128\":1}}],[\"类似\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"54\":1,\"125\":1,\"204\":1,\"216\":1,\"269\":1,\"397\":2,\"606\":1,\"641\":1}}],[\"选项来开始使用这些数据\",{\"1\":{\"652\":1}}],[\"选项来提供数据\",{\"1\":{\"652\":1}}],[\"选项添加到\",{\"1\":{\"609\":1}}],[\"选项等于这个\",{\"1\":{\"378\":1}}],[\"选项是一个接收名为\",{\"1\":{\"338\":1}}],[\"选项\",{\"1\":{\"267\":1,\"489\":1}}],[\"选中\",{\"1\":{\"64\":5}}],[\"选中有\",{\"1\":{\"64\":1}}],[\"选中文本添加黄色背景\",{\"1\":{\"62\":1}}],[\"选择颜色\",{\"1\":{\"193\":1}}],[\"选择给定范围之中的一个数值\",{\"1\":{\"193\":1}}],[\"选择紧接在\",{\"1\":{\"64\":1}}],[\"选择紧接在另一个元素后的元素\",{\"1\":{\"64\":1}}],[\"选择页面上所有的\",{\"1\":{\"64\":1}}],[\"选择器\",{\"0\":{\"64\":1},\"1\":{\"64\":1}}],[\"qd\",{\"1\":{\"489\":1,\"491\":1,\"494\":1,\"569\":1}}],[\"qwe\",{\"1\":{\"460\":1}}],[\"qo\",{\"1\":{\"140\":2}}],[\"qq\",{\"1\":{\"124\":2}}],[\"queryfulfilled\",{\"1\":{\"351\":3}}],[\"query<article\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"349\":1,\"350\":1}}],[\"query<array<article>\",{\"1\":{\"344\":1,\"345\":1,\"347\":1}}],[\"queryselector\",{\"1\":{\"293\":1,\"294\":1,\"305\":1,\"306\":2,\"307\":1,\"517\":1}}],[\"querystring\",{\"1\":{\"252\":1}}],[\"query\",{\"0\":{\"348\":1,\"384\":1,\"578\":1},\"1\":{\"252\":3,\"344\":24,\"345\":8,\"348\":2,\"349\":1,\"350\":1,\"351\":6,\"352\":4,\"384\":5,\"578\":2,\"588\":3,\"591\":1,\"592\":1}}],[\"query参数\",{\"1\":{\"16\":1}}],[\"quotes\",{\"1\":{\"63\":1}}],[\"q\",{\"1\":{\"63\":2,\"204\":1}}],[\"匹配大小写不敏感\",{\"1\":{\"375\":1}}],[\"匹配是否匹配后缀\",{\"1\":{\"368\":1}}],[\"匹配后就会失效特定的项目\",{\"1\":{\"347\":1}}],[\"匹配所有第一个\",{\"1\":{\"63\":1}}],[\"匹配所有\",{\"1\":{\"63\":1}}],[\"匹配作为任何元素的第一个子元素的任何\",{\"1\":{\"63\":1}}],[\"该回调会在路由导航过程中出错时被调用\",{\"1\":{\"610\":1}}],[\"该导航被中断\",{\"1\":{\"602\":1}}],[\"该类只允许被继承\",{\"1\":{\"418\":1}}],[\"该类不允许被继承或者实例化\",{\"1\":{\"418\":1}}],[\"该属性会自动成为实例对象的原型\",{\"1\":{\"239\":1}}],[\"该属性不起作用\",{\"1\":{\"45\":1}}],[\"该数组的成员依次传入原函数\",{\"1\":{\"238\":1}}],[\"该对象有以下属性\",{\"1\":{\"229\":1}}],[\"该对象类型是\",{\"1\":{\"73\":1}}],[\"该函数更新\",{\"1\":{\"363\":1}}],[\"该函数接收\",{\"1\":{\"344\":1}}],[\"该函数接受四个参数\",{\"1\":{\"215\":1}}],[\"该函数接受三个参数\",{\"1\":{\"215\":1}}],[\"该函数的两个参数分别是\",{\"1\":{\"176\":1}}],[\"该项的说明\",{\"1\":{\"193\":1}}],[\"该元素参与\",{\"1\":{\"192\":1}}],[\"该元素可以获取焦点但不参与\",{\"1\":{\"192\":1}}],[\"该元素是另一个元素的第一个子元素\",{\"1\":{\"63\":1}}],[\"该方法可以接受第二个参数表示搜索的起始位置\",{\"1\":{\"149\":1}}],[\"伪选择器来明确哪些类名被局部化\",{\"1\":{\"269\":1}}],[\"伪类允许为不同的语言定义特殊的规则\",{\"1\":{\"63\":1}}],[\"伪类与指定的元素匹配\",{\"1\":{\"63\":1}}],[\"伪类用于定义元素的特殊状态\",{\"1\":{\"63\":1}}],[\"伪类\",{\"0\":{\"63\":1},\"1\":{\"63\":1}}],[\"伪元素匹配用户选择的元素部分\",{\"1\":{\"62\":1}}],[\"伪元素用于在元素内容后插入一些内容\",{\"1\":{\"62\":1}}],[\"伪元素用于在元素内容之前插入一些内容\",{\"1\":{\"62\":1}}],[\"伪元素用于向文本的首字母添加特殊样式\",{\"1\":{\"62\":1}}],[\"伪元素用于向文本首行添加特殊样式\",{\"1\":{\"62\":1}}],[\"伪元素用于设置元素指定部分的样式\",{\"1\":{\"62\":1}}],[\"伪元素\",{\"0\":{\"62\":1},\"1\":{\"62\":2}}],[\"只读\",{\"1\":{\"649\":1}}],[\"只读属性关键字\",{\"1\":{\"420\":1}}],[\"只处理基本数据类型的响应式\",{\"1\":{\"648\":1}}],[\"只处理对象最外层属性的响应式\",{\"1\":{\"648\":1}}],[\"只去除最外层\",{\"1\":{\"642\":1}}],[\"只接受一个对象参数\",{\"1\":{\"642\":1}}],[\"只调用一次\",{\"1\":{\"547\":2}}],[\"只做到这一步\",{\"1\":{\"516\":1}}],[\"只需要\",{\"1\":{\"451\":1}}],[\"只允许这个函数传入那些包含\",{\"1\":{\"428\":1}}],[\"只允许出现在属性声明或索引签名或构造函数中\",{\"1\":{\"420\":1}}],[\"只获取并输出提交的内容\",{\"1\":{\"379\":1}}],[\"只会设置传入的字段\",{\"1\":{\"406\":1}}],[\"只会调用\",{\"1\":{\"360\":1}}],[\"只会选择只作为\",{\"1\":{\"64\":1}}],[\"只负责语法翻译\",{\"1\":{\"306\":1}}],[\"只不过这里的\",{\"1\":{\"348\":1}}],[\"只不过缓存的是函数\",{\"1\":{\"302\":1}}],[\"只不过关键字为\",{\"1\":{\"109\":1}}],[\"只返回已转好的部分\",{\"1\":{\"222\":1}}],[\"只是将销毁修改为了卸载\",{\"1\":{\"638\":1}}],[\"只是完成了收集数据\",{\"1\":{\"516\":1}}],[\"只是设置了\",{\"1\":{\"507\":1}}],[\"只是定义了全局变量\",{\"1\":{\"456\":1}}],[\"只是需要使用插件来提供\",{\"1\":{\"210\":1}}],[\"只是外层不同\",{\"1\":{\"18\":1}}],[\"只要出现多个插槽\",{\"1\":{\"552\":1}}],[\"只要定义\",{\"1\":{\"322\":1}}],[\"只要有一个字符无法转换为数值\",{\"1\":{\"233\":1}}],[\"只要等号右边的值不是对象或数组就先把它转为对象\",{\"1\":{\"188\":1}}],[\"只要等号两边模式相同\",{\"1\":{\"185\":1}}],[\"只要一个代码块中存在\",{\"1\":{\"160\":1}}],[\"只有返回的内容才能被模板使用\",{\"1\":{\"626\":1}}],[\"只有event\",{\"1\":{\"521\":1}}],[\"只有函数式才会生效\",{\"1\":{\"518\":1}}],[\"只有在声明文件中使用\",{\"1\":{\"460\":1}}],[\"只有用这个包里的\",{\"1\":{\"344\":1}}],[\"只有是传入\",{\"1\":{\"313\":1}}],[\"只有哈希值相符的外部脚本才会被执行\",{\"1\":{\"197\":1}}],[\"只有运算符左侧的值为\",{\"1\":{\"173\":1}}],[\"只有\",{\"1\":{\"152\":1,\"233\":1,\"397\":1,\"460\":1,\"463\":1,\"623\":1}}],[\"只有下面任意一个条件成立时才能调用未实现的方法\",{\"1\":{\"91\":1}}],[\"只能在对应的组件中使用\",{\"1\":{\"378\":1}}],[\"只能在特定位置出现\",{\"1\":{\"190\":1}}],[\"只能输入年份和月份的输入框\",{\"1\":{\"193\":1}}],[\"只能输入时间的输入框\",{\"1\":{\"193\":1}}],[\"只能输入数字\",{\"1\":{\"193\":1}}],[\"只能用于绑定表单类元素\",{\"1\":{\"510\":1}}],[\"只能用于块级元素\",{\"1\":{\"62\":1}}],[\"只能用在对象的方法之中\",{\"1\":{\"166\":1}}],[\"只能用\",{\"1\":{\"159\":1}}],[\"只能是\",{\"1\":{\"145\":1}}],[\"只能被\",{\"1\":{\"94\":1}}],[\"只能选中作为某元素子元素的元素\",{\"1\":{\"64\":1}}],[\"只能应用于块级元素\",{\"1\":{\"62\":1}}],[\"同级目录下创建\",{\"1\":{\"561\":1}}],[\"同时也不再支持\",{\"1\":{\"658\":1}}],[\"同时在所有组件内守卫和异步路由组件被解析之后\",{\"1\":{\"606\":1}}],[\"同时添加\",{\"1\":{\"460\":1}}],[\"同时添加滚动条以查看其余内容\",{\"1\":{\"55\":1}}],[\"同时要返回一个清理函数\",{\"1\":{\"408\":1}}],[\"同时不能定义成一般函数\",{\"1\":{\"406\":1}}],[\"同时设置了重定向地址的\",{\"1\":{\"379\":1}}],[\"同时定义了两个\",{\"1\":{\"353\":1}}],[\"同时由于原生\",{\"1\":{\"353\":1}}],[\"同时由于在\",{\"1\":{\"344\":1}}],[\"同时\",{\"1\":{\"344\":1,\"351\":3,\"355\":1}}],[\"同时如果希望增加缓存功能也会比较复杂\",{\"1\":{\"344\":1}}],[\"同时这个详情页面允许编辑\",{\"1\":{\"337\":1}}],[\"同时使用\",{\"0\":{\"283\":1}}],[\"同一路由多个中间件\",{\"0\":{\"261\":1}}],[\"同一个资源可能对应多个\",{\"1\":{\"190\":1}}],[\"同步\",{\"1\":{\"109\":1}}],[\"同步生成器\",{\"1\":{\"109\":1}}],[\"同样是\",{\"1\":{\"554\":1}}],[\"同样使用\",{\"1\":{\"517\":1}}],[\"同样可以使用\",{\"1\":{\"348\":1}}],[\"同样\",{\"1\":{\"61\":1}}],[\"轮廓偏移\",{\"1\":{\"61\":1}}],[\"轮廓颜色\",{\"1\":{\"61\":1}}],[\"轮廓宽度\",{\"1\":{\"61\":1}}],[\"轮廓也不是元素尺寸的一部分\",{\"1\":{\"61\":1}}],[\"轮廓是在元素边框之外绘制的\",{\"1\":{\"61\":1}}],[\"轮廓与边框不同\",{\"1\":{\"61\":1}}],[\"轮廓\",{\"0\":{\"61\":1}}],[\"悬停时的链接\",{\"1\":{\"60\":1}}],[\"绝对定位\",{\"1\":{\"59\":1}}],[\"水平阴影\",{\"1\":{\"65\":1}}],[\"水平对齐和垂直对齐\",{\"0\":{\"59\":1}}],[\"水平重复\",{\"1\":{\"32\":1}}],[\"为全局可用\",{\"1\":{\"619\":1}}],[\"为其他控件实现跳转\",{\"1\":{\"590\":1}}],[\"为null\",{\"1\":{\"557\":1}}],[\"为每一个添加到\",{\"1\":{\"516\":1}}],[\"为一个纯\",{\"1\":{\"466\":1}}],[\"为例\",{\"1\":{\"457\":1}}],[\"为什么以及如何被更新\",{\"1\":{\"328\":1}}],[\"为编写\",{\"1\":{\"242\":1}}],[\"为参数对象设置原型\",{\"1\":{\"240\":1}}],[\"为监听器设置了一个信号通道\",{\"1\":{\"229\":1}}],[\"为了防止事件对象丢失\",{\"1\":{\"520\":1}}],[\"为了防止命名重复\",{\"1\":{\"459\":1}}],[\"为了防止相同选择器的\",{\"1\":{\"268\":1}}],[\"为了简化开发\",{\"1\":{\"408\":1}}],[\"为了简化与服务器的交互和状态的维护\",{\"1\":{\"344\":1}}],[\"为了避免重复创建初始状态提高性能\",{\"1\":{\"403\":1}}],[\"为了获取异步得到的数据\",{\"1\":{\"393\":1}}],[\"为了提高可读性\",{\"1\":{\"393\":1}}],[\"为了对异步加载可能导致的报错进行处理\",{\"1\":{\"392\":1}}],[\"为了实现这个功能\",{\"1\":{\"399\":1}}],[\"为了实现数据的异步渲染\",{\"1\":{\"391\":1}}],[\"为了实现对国际化键的\",{\"1\":{\"209\":1}}],[\"为了在子组件中获取传递的值\",{\"1\":{\"402\":1}}],[\"为了在一个组件被导航激活时获取数据\",{\"1\":{\"378\":1}}],[\"为了在错误页面中获取错误信息\",{\"1\":{\"371\":1}}],[\"为了在\",{\"1\":{\"359\":1}}],[\"为了在创建\",{\"1\":{\"338\":1}}],[\"为了将各个\",{\"1\":{\"353\":1}}],[\"为了将多个文件统一到一起\",{\"1\":{\"349\":1}}],[\"为了将这种状态更新逻辑很多的组件的事件处理器集中起来\",{\"1\":{\"323\":1}}],[\"为了能够读取当前\",{\"1\":{\"348\":1}}],[\"为了让\",{\"1\":{\"345\":1}}],[\"为了接收\",{\"1\":{\"338\":1}}],[\"为了解决以上问题\",{\"1\":{\"619\":1}}],[\"为了解决开发环境中\",{\"1\":{\"290\":1}}],[\"为了解决开发时请求接口的跨域问题\",{\"1\":{\"270\":1}}],[\"为了解决这个问题\",{\"1\":{\"287\":1,\"329\":1,\"345\":1,\"347\":1,\"379\":1,\"390\":1}}],[\"为了解决脚本文件下载阻塞网页渲染\",{\"1\":{\"227\":1}}],[\"为底的自然对数值\",{\"1\":{\"217\":1}}],[\"为不支持语音注释的浏览器提供的兼容方案\",{\"1\":{\"204\":1}}],[\"为指定控件提供一组相关数据\",{\"1\":{\"193\":1}}],[\"为对象添加方法\",{\"1\":{\"169\":1}}],[\"为对象添加属性\",{\"1\":{\"169\":1}}],[\"为属性指定默认值\",{\"1\":{\"169\":1}}],[\"为属性\",{\"1\":{\"63\":1}}],[\"为\",{\"1\":{\"57\":1,\"132\":1,\"227\":1,\"245\":3,\"374\":1,\"378\":1,\"379\":1,\"397\":1,\"440\":1,\"460\":1,\"466\":1,\"517\":1,\"551\":1,\"554\":1,\"570\":1,\"618\":1,\"636\":1}}],[\"它内部会自动通过\",{\"1\":{\"632\":1}}],[\"它是一个对象\",{\"1\":{\"459\":1}}],[\"它用来表示全局变量是一个对象\",{\"1\":{\"459\":1}}],[\"它会在编译阶段被删除\",{\"1\":{\"415\":1}}],[\"它会在所有的事件处理函数运行并调用\",{\"1\":{\"403\":1}}],[\"它就是一个常数枚举表达式\",{\"1\":{\"414\":1}}],[\"它可以在编译阶段求值\",{\"1\":{\"414\":1}}],[\"它可以是任意类型的值\",{\"1\":{\"403\":1}}],[\"它的类型会被限制为元组中每个类型的联合类型\",{\"1\":{\"412\":1}}],[\"它的参数是一个回调函数\",{\"1\":{\"148\":1}}],[\"它根据接收到的\",{\"1\":{\"331\":1}}],[\"它不应该包含异步请求\",{\"1\":{\"326\":1}}],[\"它将不会被传递给错误侦听器\",{\"1\":{\"245\":1}}],[\"它将溢出到容器之外\",{\"1\":{\"57\":1}}],[\"它遍历的是对象所有可遍历的属性\",{\"1\":{\"224\":1}}],[\"它们的\",{\"1\":{\"492\":2}}],[\"它们会不冲突地合并起来\",{\"1\":{\"459\":1}}],[\"它们会在耗时操作\",{\"1\":{\"66\":1}}],[\"它们将依次传入推迟执行的函数\",{\"1\":{\"212\":1}}],[\"它允许将多个文件中的翻译分开\",{\"1\":{\"207\":1}}],[\"它应该与low属性和high属性一起使用\",{\"1\":{\"193\":1}}],[\"它设置的是元素内边距\",{\"1\":{\"37\":1}}],[\"允许我们控制在\",{\"1\":{\"645\":1}}],[\"允许我们将\",{\"1\":{\"619\":1}}],[\"允许通过请求的生命周期函数来更新某个\",{\"1\":{\"351\":1}}],[\"允许将状态的更新和事件处理器分离以提高可读性\",{\"1\":{\"325\":1}}],[\"允许父组件向下层的任何深度的任何组件传递信息\",{\"1\":{\"276\":1}}],[\"允许在同一个文件中使用局部化和全局类名\",{\"1\":{\"269\":1}}],[\"允许在元素上设置宽度和高度\",{\"1\":{\"58\":1}}],[\"允许用户修改内容\",{\"1\":{\"192\":1}}],[\"允许使用类似函数调用的方式来使用该类的实例\",{\"1\":{\"70\":1}}],[\"允许两侧都有浮动元素\",{\"1\":{\"57\":1}}],[\"允许单个项目与其他项目对齐方式不同\",{\"1\":{\"46\":1}}],[\"浮动\",{\"0\":{\"56\":1}}],[\"仅适用于要定义的方法名和定义在\",{\"1\":{\"617\":2}}],[\"仅适用于需要的计算属性与\",{\"1\":{\"616\":2}}],[\"仅有\",{\"1\":{\"554\":1}}],[\"仅用于渲染列表用于展示\",{\"1\":{\"535\":1}}],[\"仅仅用作编译时的检查\",{\"1\":{\"456\":1}}],[\"仅在\",{\"1\":{\"547\":2}}],[\"仅在开发环境有此行为\",{\"1\":{\"403\":1}}],[\"仅在必要时添加滚动条\",{\"1\":{\"55\":1}}],[\"仅使用\",{\"1\":{\"331\":1}}],[\"仅依赖\",{\"1\":{\"301\":1}}],[\"仅进行\",{\"1\":{\"267\":1}}],[\"仅当命名冲突时使用\",{\"1\":{\"75\":1}}],[\"仅占用所需的宽度\",{\"1\":{\"50\":1}}],[\"溢出被裁剪\",{\"1\":{\"55\":2}}],[\"溢出没有被裁剪\",{\"1\":{\"55\":1}}],[\"溢出\",{\"0\":{\"55\":1}}],[\"zzl\",{\"1\":{\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"539\":1}}],[\"zch\",{\"1\":{\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1}}],[\"zh\",{\"1\":{\"206\":6,\"207\":15,\"209\":2}}],[\"zhuang\",{\"1\":{\"162\":1,\"172\":1}}],[\"z\",{\"1\":{\"54\":1,\"167\":2,\"425\":2}}],[\"然后通过这个对象去访问所有插槽\",{\"1\":{\"552\":1}}],[\"然后重新渲染界面\",{\"1\":{\"539\":1}}],[\"然后重新编译\",{\"1\":{\"460\":1}}],[\"然后才执行事件\",{\"1\":{\"521\":1}}],[\"然后再通过中括号访问\",{\"1\":{\"517\":1}}],[\"然后再传入\",{\"1\":{\"238\":1}}],[\"然后为\",{\"1\":{\"517\":1}}],[\"然后为这个组件配置路由\",{\"1\":{\"372\":1}}],[\"然后需要为这个表单增加订阅者\",{\"1\":{\"517\":1}}],[\"然后需要一个\",{\"1\":{\"334\":1}}],[\"然后调用下面的函数进行编译\",{\"1\":{\"517\":1}}],[\"然后调用传进来的回调函数更新\",{\"1\":{\"517\":1}}],[\"然后调用数组原型的\",{\"1\":{\"517\":1}}],[\"然后陷入死循环\",{\"1\":{\"517\":1}}],[\"然后开始编写\",{\"1\":{\"517\":1}}],[\"然后就可以在\",{\"1\":{\"461\":1}}],[\"然后书写声明文件\",{\"1\":{\"461\":1}}],[\"然后执行\",{\"1\":{\"460\":1,\"470\":1}}],[\"然后执行脚手架创建应用\",{\"1\":{\"266\":1}}],[\"然后编写页面的解析函数\",{\"1\":{\"517\":1}}],[\"然后编写\",{\"1\":{\"407\":1,\"460\":1,\"517\":1}}],[\"然后我们在\",{\"1\":{\"379\":1,\"460\":1}}],[\"然后我们就可以将\",{\"1\":{\"334\":1}}],[\"然后定义\",{\"1\":{\"379\":1}}],[\"然后定义一个\",{\"1\":{\"379\":1}}],[\"然后定义国际化文件\",{\"1\":{\"206\":1}}],[\"然后将每次调用的结果作为下\",{\"1\":{\"517\":1}}],[\"然后将\",{\"1\":{\"379\":1}}],[\"然后将这个\",{\"1\":{\"378\":1}}],[\"然后修改声明文件\",{\"1\":{\"460\":1}}],[\"然后修改\",{\"1\":{\"372\":1,\"379\":1,\"380\":1,\"390\":1,\"398\":1,\"408\":1}}],[\"然后修改之前的所有组件\",{\"1\":{\"344\":1}}],[\"然后引入这个中间件\",{\"1\":{\"359\":1}}],[\"然后可以加入到\",{\"1\":{\"356\":1}}],[\"然后可以用如下方式调用\",{\"1\":{\"275\":1}}],[\"然后回到列表页\",{\"1\":{\"346\":1}}],[\"然后返回下一个函数\",{\"1\":{\"356\":1}}],[\"然后返回\",{\"1\":{\"345\":1}}],[\"然后返回这个成员\",{\"1\":{\"148\":1}}],[\"然后来替换\",{\"1\":{\"343\":1}}],[\"然后来回切换页面\",{\"1\":{\"342\":1}}],[\"然后是文章列表页面\",{\"1\":{\"337\":1}}],[\"然后触发\",{\"1\":{\"337\":1}}],[\"然后用这个复制结果更新\",{\"1\":{\"330\":1}}],[\"然后紧跟一个大写字母\",{\"1\":{\"296\":1}}],[\"然后\",{\"1\":{\"286\":1,\"358\":1,\"517\":1}}],[\"然后直接使用这些中间组件包裹要使用\",{\"1\":{\"281\":1}}],[\"然后增加\",{\"1\":{\"269\":1}}],[\"然后要修改默认的\",{\"1\":{\"269\":1}}],[\"然后在使用方\",{\"1\":{\"460\":1}}],[\"然后在路由配置中使用自定义组件包裹正常组件\",{\"1\":{\"399\":1}}],[\"然后在要使用\",{\"1\":{\"366\":1}}],[\"然后在要使用的组件文件中引用\",{\"1\":{\"268\":1}}],[\"然后在\",{\"1\":{\"283\":1,\"345\":1}}],[\"然后在组件中引用\",{\"1\":{\"297\":1}}],[\"然后在组件中\",{\"1\":{\"210\":1}}],[\"然后一行一行的运行\",{\"1\":{\"213\":1}}],[\"然后配置\",{\"1\":{\"206\":1,\"267\":1,\"344\":1}}],[\"然后会下载一个\",{\"1\":{\"197\":1}}],[\"然后粘贴在适当的位置\",{\"1\":{\"54\":1}}],[\"然后设置左右外边距为\",{\"1\":{\"52\":1}}],[\"起点的路由对象\",{\"1\":{\"602\":1}}],[\"起点在下面\",{\"1\":{\"45\":1}}],[\"起点在上面\",{\"1\":{\"45\":1}}],[\"起点在右端\",{\"1\":{\"45\":1}}],[\"起点在左端\",{\"1\":{\"45\":1}}],[\"起\",{\"1\":{\"551\":1}}],[\"起步\",{\"0\":{\"139\":1,\"206\":1,\"263\":1,\"468\":1}}],[\"起先会被相对定位\",{\"1\":{\"54\":1}}],[\"并对其依赖项跟踪和更新触发进行显式控制\",{\"1\":{\"651\":1}}],[\"并通过\",{\"1\":{\"632\":1}}],[\"并使用提供的\",{\"1\":{\"646\":1}}],[\"并使用上述配置\",{\"1\":{\"576\":1}}],[\"并使用两个局部\",{\"1\":{\"337\":1}}],[\"并创建\",{\"0\":{\"559\":1}}],[\"并没有进行数据代理\",{\"1\":{\"516\":1}}],[\"并没有提供这个功能\",{\"1\":{\"399\":1}}],[\"并不会真的定义一个变量\",{\"1\":{\"456\":1}}],[\"并移除\",{\"1\":{\"408\":1}}],[\"并触发下一次渲染\",{\"1\":{\"403\":1}}],[\"并根据\",{\"1\":{\"397\":1}}],[\"并修改\",{\"1\":{\"379\":1}}],[\"并修改上面\",{\"1\":{\"372\":1}}],[\"并注入到\",{\"1\":{\"356\":1}}],[\"并调用\",{\"1\":{\"337\":1}}],[\"并组装一个\",{\"1\":{\"337\":1}}],[\"并传入由\",{\"1\":{\"335\":1}}],[\"并传入\",{\"1\":{\"334\":1}}],[\"并传入一个\",{\"1\":{\"331\":1}}],[\"并放入组件之外的另一个集中的位置\",{\"1\":{\"329\":1}}],[\"并将状态设置为\",{\"1\":{\"379\":1}}],[\"并将这个值返回给\",{\"1\":{\"314\":1}}],[\"并将异步操作的结果作为参数传递出去\",{\"1\":{\"176\":1}}],[\"并在需要验证的路由规则的\",{\"1\":{\"602\":1}}],[\"并在其中创建\",{\"1\":{\"576\":1,\"613\":1}}],[\"并在\",{\"1\":{\"391\":1,\"517\":1}}],[\"并在发出请求前确认此变量\",{\"1\":{\"290\":1}}],[\"并在对应位置渲染\",{\"1\":{\"281\":1}}],[\"并绑定一个\",{\"1\":{\"287\":1}}],[\"并返回\",{\"1\":{\"335\":1}}],[\"并返回另一个表达式的值\",{\"1\":{\"241\":1}}],[\"并返回添加新元素后的数组长度\",{\"1\":{\"215\":1}}],[\"并可以在删除的位置添加新的数组成员\",{\"1\":{\"215\":1}}],[\"并且会配合组件一起使用\",{\"1\":{\"553\":1}}],[\"并且会随着页面滚动而移动\",{\"1\":{\"54\":1}}],[\"并且其构造函数接收一个对象\",{\"1\":{\"517\":1}}],[\"并且是预置在\",{\"1\":{\"467\":1}}],[\"并且不能包含计算成员\",{\"1\":{\"415\":1}}],[\"并且在组建卸载时取消这个事件\",{\"1\":{\"641\":1}}],[\"并且在\",{\"1\":{\"517\":1}}],[\"并且在代码中使用自己的\",{\"1\":{\"399\":1}}],[\"并且在初始挂载及后续更新时都会调用\",{\"1\":{\"310\":1}}],[\"并且重定向到\",{\"1\":{\"379\":1}}],[\"并且依赖空数组\",{\"1\":{\"408\":1}}],[\"并且依赖\",{\"1\":{\"379\":1}}],[\"并且根据结果\",{\"1\":{\"358\":1}}],[\"并且因为使用了\",{\"1\":{\"351\":1}}],[\"并且每个方法都包含构造请求\",{\"1\":{\"344\":1}}],[\"并且可以返回任意类型\",{\"1\":{\"301\":1}}],[\"并且可能与其他内容重叠\",{\"1\":{\"61\":1}}],[\"并且它们会保持最新\",{\"1\":{\"298\":1}}],[\"并且它是浮动的\",{\"1\":{\"57\":1}}],[\"并且调用\",{\"1\":{\"154\":1,\"517\":1}}],[\"并且返回值为\",{\"1\":{\"109\":1}}],[\"并且有一个\",{\"1\":{\"102\":1}}],[\"并且接收方的动态类型实现了\",{\"1\":{\"91\":1}}],[\"并占据可用的全部宽度\",{\"1\":{\"49\":1}}],[\"值指向另一个对象中的某个属性\",{\"1\":{\"642\":1}}],[\"值必须用引号\",{\"1\":{\"616\":1}}],[\"值时虚拟\",{\"1\":{\"535\":1}}],[\"值时不一定会出问题\",{\"1\":{\"534\":1}}],[\"值成了\",{\"1\":{\"534\":1}}],[\"值只对\",{\"1\":{\"534\":1}}],[\"值的时候\",{\"1\":{\"534\":1}}],[\"值就是用户输入的值\",{\"1\":{\"512\":1}}],[\"值就变成了\",{\"1\":{\"403\":1}}],[\"值相同\",{\"1\":{\"403\":1}}],[\"值我们使用\",{\"1\":{\"335\":1}}],[\"值和\",{\"1\":{\"334\":1}}],[\"值传递给一个组件\",{\"1\":{\"317\":1}}],[\"值原理类似\",{\"1\":{\"306\":1}}],[\"值不会发送给服务器\",{\"1\":{\"608\":1}}],[\"值不会包含在\",{\"1\":{\"608\":1}}],[\"值不能改变\",{\"1\":{\"306\":1}}],[\"值不是\",{\"1\":{\"54\":1}}],[\"值在兄弟节点之间必须是唯一的\",{\"1\":{\"306\":1}}],[\"值需要满足下面的条件\",{\"1\":{\"306\":1}}],[\"值可以是字符串或者数字的形式\",{\"1\":{\"306\":1}}],[\"值来表示针对第一个\",{\"1\":{\"243\":1}}],[\"值为对象\",{\"1\":{\"633\":2}}],[\"值为一个函数\",{\"1\":{\"626\":1}}],[\"值为箭头函数\",{\"1\":{\"616\":1}}],[\"值为组件名\",{\"1\":{\"596\":1}}],[\"值为\",{\"1\":{\"193\":1,\"534\":1,\"616\":1,\"617\":2}}],[\"值等于\",{\"1\":{\"193\":1}}],[\"值\",{\"1\":{\"56\":1,\"57\":1,\"306\":2,\"380\":1,\"512\":2,\"522\":1,\"534\":3,\"608\":1}}],[\"值越低越透明\",{\"1\":{\"32\":1}}],[\"一对一\",{\"1\":{\"553\":1}}],[\"一次激活对应路由以后\",{\"1\":{\"598\":1}}],[\"一次\",{\"1\":{\"517\":1}}],[\"一定可以\",{\"1\":{\"507\":1}}],[\"一定要在可信的内容上使用\",{\"1\":{\"477\":1}}],[\"一种组件间通信方式\",{\"1\":{\"502\":1,\"524\":1}}],[\"一元运算符应用于常数枚举表达式\",{\"1\":{\"414\":1}}],[\"一开始只需要编写少量的代码\",{\"1\":{\"325\":1}}],[\"一直向下\",{\"1\":{\"275\":1}}],[\"一起分发\",{\"1\":{\"266\":1}}],[\"一致\",{\"1\":{\"229\":1,\"366\":1,\"396\":1,\"586\":1}}],[\"一般来说\",{\"1\":{\"460\":1}}],[\"一般来说是异步的\",{\"1\":{\"378\":1}}],[\"一般通过\",{\"1\":{\"456\":1}}],[\"一般有以下两种变化顺序\",{\"1\":{\"387\":1}}],[\"一般的\",{\"1\":{\"366\":1}}],[\"一般情况下\",{\"1\":{\"287\":1}}],[\"一般情况下只替换第一个匹配\",{\"1\":{\"216\":1}}],[\"一般结合\",{\"1\":{\"224\":1}}],[\"一些数据\",{\"1\":{\"378\":1}}],[\"一些\",{\"0\":{\"299\":1,\"303\":1}}],[\"一些与数值相关的全局方法\",{\"1\":{\"222\":1}}],[\"一些类提供了常量构造函数\",{\"1\":{\"72\":1}}],[\"一旦\",{\"1\":{\"553\":1}}],[\"一旦子组件中包含具名插槽\",{\"1\":{\"552\":1}}],[\"一旦出现了\",{\"1\":{\"465\":1}}],[\"一旦此组件被渲染\",{\"1\":{\"399\":1}}],[\"一旦设置会使\",{\"1\":{\"193\":1}}],[\"一旦单独使用可能会报错\",{\"1\":{\"153\":1}}],[\"一旦遇到同名属性\",{\"1\":{\"169\":1}}],[\"一旦遇到\",{\"1\":{\"151\":1}}],[\"一个路由匹配到的所有路由记录会暴露为\",{\"1\":{\"600\":1}}],[\"一个包含修饰符的对象\",{\"1\":{\"547\":1}}],[\"一个对象\",{\"1\":{\"547\":1}}],[\"一个对象而不是分多次\",{\"1\":{\"326\":1}}],[\"一个计算属性中不能操作自己\",{\"1\":{\"506\":1}}],[\"一个重要的内置关系\",{\"0\":{\"493\":1}}],[\"一个简写方式\",{\"1\":{\"490\":1}}],[\"一个简单地\",{\"0\":{\"141\":1}}],[\"一个单词组成\",{\"1\":{\"490\":1}}],[\"一个接口中只能定义一个任意属性\",{\"1\":{\"441\":1}}],[\"一个组件的\",{\"1\":{\"387\":1}}],[\"一个序列化后的错误对象\",{\"1\":{\"344\":1}}],[\"一个内部\",{\"1\":{\"334\":1}}],[\"一个添加\",{\"1\":{\"323\":1}}],[\"一个布尔值或字符串\",{\"1\":{\"243\":1}}],[\"一个布尔值\",{\"1\":{\"243\":4}}],[\"一个字符串\",{\"1\":{\"243\":2}}],[\"一个数字\",{\"1\":{\"243\":1}}],[\"一个事件发生后\",{\"1\":{\"230\":1}}],[\"一个监听器配置对象\",{\"1\":{\"229\":1}}],[\"一个页面只有一个\",{\"1\":{\"202\":1}}],[\"一个有序列表容器\",{\"1\":{\"198\":1}}],[\"一个只能输入日期的输入框\",{\"1\":{\"193\":1}}],[\"一个只能输入电话号码的输入框\",{\"1\":{\"193\":1}}],[\"一个只能输入网址的文本框\",{\"1\":{\"193\":1}}],[\"一个滑块\",{\"1\":{\"193\":1}}],[\"一个模块只能有一个默认导出\",{\"1\":{\"164\":1}}],[\"一个空的\",{\"1\":{\"153\":1}}],[\"一个类必须具有\",{\"1\":{\"153\":1}}],[\"一个类的实例\",{\"1\":{\"118\":1}}],[\"一个\",{\"1\":{\"67\":1,\"145\":1,\"190\":1,\"199\":1,\"243\":1,\"323\":1}}],[\"一个固定定位元素不会保留它原本在页面应有的空隙\",{\"1\":{\"54\":1}}],[\"一个元素相对于正常位置进行定位\",{\"1\":{\"54\":1}}],[\"一个请求对应一个\",{\"1\":{\"13\":1}}],[\"一样使用之外\",{\"1\":{\"368\":1}}],[\"一样\",{\"1\":{\"54\":1,\"360\":2,\"582\":1}}],[\"表演的舞台\",{\"1\":{\"626\":1}}],[\"表尾\",{\"1\":{\"203\":1}}],[\"表体\",{\"1\":{\"203\":1}}],[\"表头\",{\"1\":{\"203\":1}}],[\"表格\",{\"0\":{\"203\":1}}],[\"表明当前链接用于下载\",{\"1\":{\"197\":1}}],[\"表单添加\",{\"1\":{\"517\":1}}],[\"表单提交的数据或者\",{\"1\":{\"388\":1}}],[\"表单\",{\"0\":{\"193\":1},\"1\":{\"517\":1}}],[\"表达式为\",{\"1\":{\"547\":1}}],[\"表达式的初始值未能匹配任何选项\",{\"1\":{\"510\":1}}],[\"表达式的子集\",{\"1\":{\"414\":1}}],[\"表达式的类型必须是\",{\"1\":{\"69\":1}}],[\"表达式与\",{\"1\":{\"213\":1}}],[\"表达式2\",{\"1\":{\"130\":1}}],[\"表达式1\",{\"1\":{\"130\":1}}],[\"表达式\",{\"1\":{\"120\":1,\"507\":3,\"553\":1,\"554\":2}}],[\"表现和\",{\"1\":{\"54\":1}}],[\"表示在\",{\"1\":{\"616\":1}}],[\"表示这是一个\",{\"1\":{\"517\":1}}],[\"表示函数的定义\",{\"1\":{\"445\":1}}],[\"表示请求是否出错\",{\"1\":{\"344\":1}}],[\"表示当前\",{\"1\":{\"344\":1}}],[\"表示当前是否正在发出请求\",{\"1\":{\"344\":1}}],[\"表示此全局变量是一个常量\",{\"1\":{\"459\":1}}],[\"表示此\",{\"1\":{\"344\":1}}],[\"表示重新渲染之前的\",{\"1\":{\"314\":1}}],[\"表示元素内容的整体高度\",{\"1\":{\"314\":1}}],[\"表示元数据的值\",{\"1\":{\"199\":1}}],[\"表示元数据的名字\",{\"1\":{\"199\":1}}],[\"表示为这个标签设置的属性值\",{\"1\":{\"294\":1}}],[\"表示是否覆盖以前设置的同名的\",{\"1\":{\"243\":1}}],[\"表示是否要对\",{\"1\":{\"243\":1}}],[\"表示是否找到了参数字符串\",{\"1\":{\"183\":1}}],[\"表示该\",{\"1\":{\"243\":1}}],[\"表示该单元格是一行的标题还是一列的标题\",{\"1\":{\"203\":1}}],[\"表示从\",{\"1\":{\"243\":1}}],[\"表示事件是否可以被取消\",{\"1\":{\"231\":1}}],[\"表示事件对象是否冒泡\",{\"1\":{\"231\":1}}],[\"表示事件对象的配置\",{\"1\":{\"231\":1}}],[\"表示监听函数执行一次就会自动移除\",{\"1\":{\"229\":1}}],[\"表示监听函数在捕获阶段就会触发\",{\"1\":{\"229\":1}}],[\"表示被解析的值的进制\",{\"1\":{\"222\":1}}],[\"表示对象是否是某个构造函数的实例\",{\"1\":{\"220\":1}}],[\"表示定时器的编号\",{\"1\":{\"212\":1}}],[\"表示文字方向与网页主题内容方向不一致\",{\"1\":{\"204\":1}}],[\"表示文字的语音注释\",{\"1\":{\"204\":1}}],[\"表示文字的阅读方向\",{\"1\":{\"192\":1}}],[\"表示删除的内容\",{\"1\":{\"204\":1}}],[\"表示原始文档添加的内容\",{\"1\":{\"204\":1}}],[\"表示原型对象时\",{\"1\":{\"166\":1}}],[\"表示某个值是否为正常的数值\",{\"1\":{\"222\":1}}],[\"表示某个数组是否包含给定的值\",{\"1\":{\"149\":1}}],[\"表示某人\",{\"1\":{\"204\":1}}],[\"表示多行必须放在\",{\"1\":{\"204\":1}}],[\"表示计算机代码\",{\"1\":{\"204\":1}}],[\"表示引言出处或作者\",{\"1\":{\"204\":1}}],[\"表示引用\",{\"1\":{\"204\":2}}],[\"表示代码或数学公式的变量\",{\"1\":{\"204\":1}}],[\"表示表格的一行\",{\"1\":{\"203\":1}}],[\"表示表格的标题\",{\"1\":{\"203\":1}}],[\"表示一个术语\",{\"1\":{\"204\":1}}],[\"表示一个缩写\",{\"1\":{\"204\":1}}],[\"表示一个可选的断行\",{\"1\":{\"204\":1}}],[\"表示一个含有主题的独立部分\",{\"1\":{\"202\":1}}],[\"表示一组术语\",{\"1\":{\"198\":1}}],[\"表示页面主体\",{\"1\":{\"202\":1}}],[\"表示图像的文本描述\",{\"1\":{\"195\":1}}],[\"表示最佳范围\",{\"1\":{\"193\":1}}],[\"表示完成进度\",{\"1\":{\"193\":1}}],[\"表示控件的集合\",{\"1\":{\"193\":1}}],[\"表示按下\",{\"1\":{\"192\":1}}],[\"表示将原字符串重复指定的次数\",{\"1\":{\"183\":1}}],[\"表示参数字符串是否在原字符串的尾部\",{\"1\":{\"183\":1}}],[\"表示参数字符串是否在原字符串的头部\",{\"1\":{\"183\":1}}],[\"表示\",{\"1\":{\"126\":1,\"193\":2,\"243\":4}}],[\"表示继承父元素的\",{\"1\":{\"46\":1}}],[\"表示全色\",{\"1\":{\"43\":1}}],[\"表示灰色阴影\",{\"1\":{\"43\":1}}],[\"例如复杂的第三方库等\",{\"1\":{\"650\":1}}],[\"例如异步操作\",{\"1\":{\"624\":1}}],[\"例如异步请求\",{\"1\":{\"358\":1}}],[\"例如通过如下方式在\",{\"1\":{\"619\":1}}],[\"例如下面的代码会显示\",{\"1\":{\"553\":1}}],[\"例如下面这样\",{\"1\":{\"117\":1}}],[\"例如div标签和内部的button同时有点击事件\",{\"1\":{\"521\":1}}],[\"例如阻止a标签跳转\",{\"1\":{\"521\":1}}],[\"例如修改\",{\"1\":{\"466\":1}}],[\"例如修改外观的黑暗模式\",{\"1\":{\"282\":1}}],[\"例如不会修改外部变量\",{\"1\":{\"403\":1}}],[\"例如我们现在修改\",{\"1\":{\"390\":1}}],[\"例如我们上面的例子中\",{\"1\":{\"388\":1}}],[\"例如上面的\",{\"1\":{\"379\":1}}],[\"例如上面的组件中\",{\"1\":{\"287\":1}}],[\"例如如果上面的例子中\",{\"1\":{\"371\":1}}],[\"例如如果上面的\",{\"1\":{\"368\":1}}],[\"例如如果要更新的\",{\"1\":{\"351\":1}}],[\"例如遮罩层或者鱼骨架等效果\",{\"1\":{\"367\":1}}],[\"例如只能执行聚焦操作而不能修改样式\",{\"1\":{\"362\":1}}],[\"例如有以下例子\",{\"1\":{\"362\":1}}],[\"例如现在为\",{\"1\":{\"379\":1}}],[\"例如现在有一个输入框和一个按钮\",{\"1\":{\"361\":1}}],[\"例如现在要使得每次调用\",{\"1\":{\"355\":1}}],[\"例如将超时时间改为\",{\"1\":{\"346\":1}}],[\"例如将通用的部分放置在一个\",{\"1\":{\"207\":1}}],[\"例如按照标题长度排序\",{\"1\":{\"343\":1}}],[\"例如在线聊天\",{\"1\":{\"288\":1}}],[\"例如可以通过\",{\"1\":{\"282\":1}}],[\"例如表单\",{\"1\":{\"274\":1}}],[\"例如第一个字符是数字\",{\"1\":{\"224\":1}}],[\"例如事件监听函数\",{\"1\":{\"159\":1}}],[\"例如$\",{\"1\":{\"120\":1}}],[\"例如true\",{\"1\":{\"120\":1}}],[\"例如\",{\"1\":{\"53\":1,\"64\":3,\"83\":1,\"117\":2,\"132\":1,\"207\":1,\"208\":1,\"243\":1,\"267\":1,\"275\":1,\"290\":2,\"304\":1,\"314\":1,\"326\":1,\"334\":1,\"342\":1,\"350\":1,\"352\":1,\"354\":1,\"358\":1,\"363\":1,\"368\":1,\"374\":1,\"380\":1,\"381\":1,\"399\":1,\"401\":1,\"404\":2,\"517\":1,\"522\":1,\"535\":1,\"547\":4,\"559\":1,\"645\":1,\"657\":1}}],[\"vnode\",{\"1\":{\"547\":5,\"548\":5}}],[\"vc\",{\"1\":{\"492\":3,\"562\":1,\"576\":1}}],[\"vm\",{\"0\":{\"474\":1},\"1\":{\"474\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"489\":1,\"491\":1,\"492\":2,\"504\":1,\"506\":1,\"507\":1,\"509\":1,\"510\":4,\"517\":19,\"518\":2,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"539\":3,\"548\":1,\"553\":1,\"562\":1,\"621\":3,\"623\":1}}],[\"version\",{\"1\":{\"459\":4,\"466\":1}}],[\"vertical\",{\"1\":{\"65\":1}}],[\"vtt\",{\"1\":{\"200\":1}}],[\"vite\",{\"0\":{\"339\":1,\"661\":1},\"1\":{\"339\":2,\"661\":2}}],[\"view>\",{\"1\":{\"576\":1,\"583\":3,\"596\":4}}],[\"view><\",{\"1\":{\"576\":1,\"596\":4}}],[\"viewport\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"viewmodel\",{\"1\":{\"474\":1}}],[\"view\",{\"1\":{\"329\":3,\"337\":3,\"343\":2,\"344\":2,\"473\":1,\"576\":1,\"583\":7,\"596\":1}}],[\"video\",{\"1\":{\"200\":1,\"286\":3}}],[\"visual\",{\"1\":{\"140\":1}}],[\"visited\",{\"1\":{\"60\":1}}],[\"visible\",{\"1\":{\"55\":1}}],[\"visibility\",{\"1\":{\"51\":1}}],[\"v2\",{\"1\":{\"164\":3,\"260\":2,\"262\":2}}],[\"v1\",{\"1\":{\"164\":2,\"260\":2,\"261\":2,\"338\":1,\"339\":2,\"344\":1}}],[\"v\",{\"0\":{\"473\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"509\":1,\"510\":1,\"511\":1},\"1\":{\"108\":2,\"405\":8,\"473\":1,\"476\":3,\"477\":6,\"478\":5,\"479\":6,\"480\":3,\"483\":2,\"496\":1,\"502\":1,\"504\":2,\"507\":18,\"508\":5,\"509\":2,\"510\":11,\"511\":6,\"512\":3,\"517\":4,\"520\":2,\"529\":2,\"532\":5,\"534\":1,\"536\":2,\"537\":2,\"538\":1,\"539\":3,\"547\":6,\"548\":2,\"550\":1,\"551\":5,\"552\":8,\"554\":3,\"562\":1,\"614\":1,\"618\":2,\"631\":2,\"645\":1,\"646\":2,\"651\":1,\"658\":24}}],[\"val\",{\"1\":{\"529\":4,\"627\":1,\"633\":2,\"635\":2,\"651\":3}}],[\"value++\",{\"1\":{\"334\":1,\"627\":1}}],[\"value=xxx\",{\"1\":{\"627\":1}}],[\"value=binding\",{\"1\":{\"546\":2}}],[\"value=\",{\"1\":{\"280\":1,\"283\":3,\"287\":1,\"323\":2,\"333\":1,\"335\":1,\"337\":2,\"344\":2,\"351\":1,\"363\":1,\"405\":1,\"407\":1,\"408\":1,\"504\":2,\"509\":2,\"510\":11,\"523\":1,\"536\":1,\"537\":1,\"614\":3}}],[\"values\",{\"0\":{\"170\":1},\"1\":{\"93\":1,\"170\":2,\"405\":5}}],[\"value\",{\"1\":{\"68\":2,\"69\":1,\"122\":3,\"124\":2,\"151\":2,\"170\":4,\"193\":6,\"198\":1,\"243\":1,\"279\":2,\"283\":5,\"287\":3,\"312\":6,\"313\":6,\"323\":5,\"324\":1,\"333\":7,\"334\":7,\"335\":1,\"337\":2,\"344\":2,\"361\":2,\"363\":7,\"405\":7,\"407\":2,\"408\":1,\"430\":1,\"451\":2,\"508\":2,\"512\":7,\"514\":3,\"517\":7,\"522\":1,\"532\":2,\"534\":2,\"546\":3,\"547\":1,\"548\":5,\"557\":1,\"627\":1,\"628\":1,\"631\":3,\"632\":3,\"637\":1,\"642\":1}}],[\"variable\",{\"1\":{\"144\":1}}],[\"variant\",{\"1\":{\"47\":1}}],[\"varortype\",{\"1\":{\"69\":1}}],[\"var\",{\"1\":{\"68\":1,\"70\":1,\"72\":3,\"73\":1,\"75\":2,\"80\":1,\"81\":1,\"83\":2,\"85\":4,\"86\":5,\"87\":1,\"89\":2,\"90\":1,\"94\":1,\"100\":1,\"103\":2,\"104\":2,\"106\":2,\"108\":3,\"109\":4,\"111\":2,\"112\":3,\"113\":1,\"115\":1,\"116\":1,\"117\":1,\"119\":2,\"122\":5,\"123\":5,\"124\":4,\"125\":1,\"129\":2,\"130\":1,\"134\":1,\"135\":4,\"137\":2,\"138\":1,\"141\":1,\"143\":1,\"144\":2,\"145\":1,\"157\":3,\"164\":3,\"204\":1,\"213\":1,\"456\":4,\"459\":3}}],[\"voidfunc\",{\"1\":{\"437\":1}}],[\"void>\",{\"1\":{\"338\":1,\"344\":1,\"345\":1,\"347\":1}}],[\"void\",{\"1\":{\"68\":2,\"70\":1,\"72\":2,\"73\":1,\"75\":2,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":2,\"90\":3,\"91\":3,\"92\":2,\"93\":1,\"94\":5,\"95\":2,\"96\":4,\"99\":2,\"100\":1,\"102\":1,\"103\":4,\"104\":1,\"105\":1,\"106\":1,\"108\":4,\"109\":3,\"111\":2,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"117\":1,\"119\":1,\"120\":4,\"121\":1,\"122\":3,\"123\":3,\"124\":2,\"125\":1,\"126\":1,\"128\":3,\"129\":1,\"130\":1,\"131\":1,\"132\":2,\"134\":1,\"135\":4,\"137\":2,\"138\":1,\"141\":2,\"144\":3,\"145\":1,\"241\":1,\"323\":2,\"334\":4,\"337\":2,\"359\":6,\"381\":2,\"407\":2,\"411\":1,\"421\":2,\"423\":4,\"424\":3,\"428\":1,\"437\":1,\"440\":2,\"452\":2,\"454\":1,\"459\":4,\"465\":1}}],[\"vuex\",{\"0\":{\"611\":1,\"612\":1,\"613\":1},\"1\":{\"613\":6,\"615\":1,\"616\":1,\"617\":1,\"618\":1,\"619\":9}}],[\"vueresource\",{\"1\":{\"573\":1}}],[\"vuerouter\",{\"0\":{\"575\":1,\"576\":1},\"1\":{\"530\":2,\"576\":5,\"577\":2,\"581\":3,\"582\":1,\"583\":1,\"584\":2,\"602\":1,\"603\":1,\"608\":1,\"609\":1}}],[\"vue全局配置\",{\"1\":{\"553\":1}}],[\"vue2\",{\"0\":{\"630\":1},\"1\":{\"551\":1,\"552\":1,\"626\":3,\"638\":1,\"644\":1,\"657\":1}}],[\"vue监视数据改变的原理\",{\"0\":{\"539\":1}}],[\"vue中常用按键别名\",{\"1\":{\"522\":1}}],[\"vue中的事件修饰符\",{\"1\":{\"521\":1}}],[\"vue实例\",{\"1\":{\"516\":2,\"518\":1}}],[\"vuecomponent\",{\"0\":{\"492\":1},\"1\":{\"492\":5,\"493\":1}}],[\"vue使用组件三大步骤\",{\"1\":{\"489\":1}}],[\"vue3\",{\"0\":{\"12\":1,\"631\":1,\"656\":1,\"659\":1},\"1\":{\"626\":1,\"627\":1,\"633\":1,\"638\":1,\"644\":1,\"657\":1,\"660\":1}}],[\"vue\",{\"0\":{\"11\":1,\"484\":1,\"488\":1,\"516\":1,\"553\":1,\"558\":1,\"559\":1,\"571\":1,\"572\":1,\"573\":1,\"574\":1,\"629\":1,\"660\":1},\"1\":{\"268\":1,\"306\":2,\"366\":1,\"473\":1,\"474\":1,\"476\":2,\"477\":2,\"478\":4,\"479\":2,\"480\":2,\"482\":2,\"483\":2,\"485\":1,\"486\":1,\"489\":9,\"490\":1,\"491\":4,\"492\":7,\"493\":1,\"494\":11,\"504\":2,\"505\":1,\"506\":1,\"507\":2,\"508\":1,\"509\":2,\"510\":8,\"514\":1,\"516\":5,\"517\":5,\"518\":4,\"520\":5,\"521\":2,\"522\":6,\"525\":4,\"529\":3,\"530\":1,\"532\":1,\"534\":7,\"535\":2,\"536\":3,\"537\":2,\"538\":2,\"539\":13,\"546\":1,\"547\":1,\"548\":3,\"553\":9,\"554\":2,\"559\":5,\"560\":8,\"561\":3,\"565\":2,\"568\":6,\"569\":11,\"570\":1,\"572\":1,\"573\":3,\"575\":1,\"576\":8,\"577\":1,\"584\":1,\"608\":1,\"613\":11,\"619\":6,\"621\":3,\"622\":4,\"624\":4,\"633\":2,\"636\":2,\"640\":1,\"641\":1,\"642\":2,\"645\":2,\"646\":2,\"651\":1,\"653\":2,\"654\":1,\"657\":10,\"660\":1}}],[\"倾斜\",{\"1\":{\"47\":1,\"204\":1}}],[\"斜体\",{\"1\":{\"47\":1,\"204\":1}}],[\"覆盖与被覆盖的两个方法的参数个数必须相等\",{\"1\":{\"91\":1}}],[\"覆盖\",{\"1\":{\"46\":1,\"193\":1,\"658\":1}}],[\"也要指明监视的回调\",{\"1\":{\"637\":1}}],[\"也是一种组件间通信方式\",{\"1\":{\"549\":1}}],[\"也是一个函数\",{\"1\":{\"379\":1}}],[\"也是可以的\",{\"1\":{\"535\":1}}],[\"也就无法使用上面的正则表达式进行匹配了\",{\"1\":{\"517\":1}}],[\"也就是跳转到\",{\"1\":{\"381\":1}}],[\"也就是说更新\",{\"1\":{\"534\":1}}],[\"也就是说会先渲染组件再等待响应\",{\"1\":{\"390\":1}}],[\"也就是说展示的数据还是旧数据\",{\"1\":{\"380\":1}}],[\"也就是说下面的方法并不会发出请求\",{\"1\":{\"348\":1}}],[\"也就是说创建后切换回\",{\"1\":{\"345\":1}}],[\"也就是说需要只对部分字段做出响应\",{\"1\":{\"289\":1}}],[\"也就是在调用\",{\"1\":{\"338\":1}}],[\"也就是冒泡\",{\"1\":{\"274\":1}}],[\"也就是不能\",{\"1\":{\"159\":1}}],[\"也就是项目本来的大小\",{\"1\":{\"46\":1}}],[\"也使用\",{\"1\":{\"459\":1}}],[\"也实现了它们\",{\"1\":{\"417\":1}}],[\"也有\",{\"1\":{\"396\":1}}],[\"也能阻止冒泡\",{\"1\":{\"521\":1}}],[\"也能从页面流向\",{\"1\":{\"508\":1}}],[\"也能渲染出一个组件可以使用\",{\"1\":{\"376\":1}}],[\"也能展示\",{\"1\":{\"373\":1}}],[\"也可不写\",{\"1\":{\"552\":1}}],[\"也可称为组件实例对象\",{\"1\":{\"492\":1}}],[\"也可能有一个特定项用于保存所有的\",{\"1\":{\"343\":1}}],[\"也可以用来定义对象\",{\"1\":{\"632\":1}}],[\"也可以不用\",{\"1\":{\"628\":1}}],[\"也可以每个模块拆分出一个文件然后\",{\"1\":{\"619\":1}}],[\"也可以给枚举项手动赋值\",{\"1\":{\"413\":1}}],[\"也可以像\",{\"1\":{\"384\":1}}],[\"也可以返回数据\",{\"1\":{\"379\":1}}],[\"也可以只使用\",{\"1\":{\"294\":1}}],[\"也可以使用数组写法\",{\"1\":{\"483\":1}}],[\"也可以使用对象解构的写法\",{\"1\":{\"318\":1}}],[\"也可以使用\",{\"1\":{\"279\":1,\"343\":1,\"344\":1}}],[\"也可以使用类声明组件\",{\"1\":{\"273\":1}}],[\"也可以通过对象的形式访问动态数据\",{\"1\":{\"208\":1}}],[\"也可以赋值给一个变量\",{\"1\":{\"103\":1}}],[\"也可以是一个接收上面这个对象的纯函数\",{\"1\":{\"368\":1}}],[\"也可以是抽象方法\",{\"1\":{\"91\":1}}],[\"也可以是\",{\"1\":{\"15\":1,\"344\":1}}],[\"也算是\",{\"1\":{\"302\":1}}],[\"也支持\",{\"1\":{\"123\":1}}],[\"也不应该使用\",{\"1\":{\"405\":1}}],[\"也不必捕获任何异常\",{\"1\":{\"96\":1}}],[\"也不可以被实现\",{\"1\":{\"93\":1}}],[\"也不能\",{\"1\":{\"93\":1}}],[\"也始终位于同一位置\",{\"1\":{\"54\":1}}],[\"轴线占满整个交叉轴\",{\"1\":{\"45\":1}}],[\"轴线之间的间隔比轴线与边框间隔大一倍\",{\"1\":{\"45\":1}}],[\"轴线之间的间隔平均分布\",{\"1\":{\"45\":1}}],[\"项目名\",{\"1\":{\"559\":1}}],[\"项目中执行\",{\"1\":{\"460\":1}}],[\"项目建议使用\",{\"1\":{\"366\":1}}],[\"项目本身是值\",{\"1\":{\"343\":1}}],[\"项目\",{\"1\":{\"209\":1,\"343\":1,\"466\":1}}],[\"项目占据的主轴空间\",{\"1\":{\"46\":1}}],[\"项目的属性\",{\"0\":{\"46\":1}}],[\"项目的第一行文字的基线对齐\",{\"1\":{\"45\":1}}],[\"项目之间的间隔比项目和边框的间隔大一倍\",{\"1\":{\"45\":1}}],[\"项目之间的间隔都相等\",{\"1\":{\"45\":1}}],[\"居中对齐图像\",{\"1\":{\"59\":1}}],[\"居中对齐文本\",{\"1\":{\"59\":1}}],[\"居中对齐元素\",{\"1\":{\"59\":1}}],[\"居中\",{\"1\":{\"45\":1}}],[\"两种写法\",{\"1\":{\"546\":1}}],[\"两种类型的异常以及它们一系列的子类\",{\"1\":{\"96\":1}}],[\"两者的差值就是新插入元素的高度\",{\"1\":{\"314\":1}}],[\"两者可以结合使用\",{\"1\":{\"96\":1}}],[\"两个参数\",{\"1\":{\"651\":1}}],[\"两个写法都会执行\",{\"1\":{\"640\":1}}],[\"两个原则\",{\"1\":{\"624\":1}}],[\"两个新的生命周期钩子\",{\"0\":{\"597\":1}}],[\"两个组件\",{\"1\":{\"378\":1,\"408\":1}}],[\"两个字段来实现调用更新接口后失效查询接口\",{\"1\":{\"347\":1}}],[\"两个方法\",{\"1\":{\"223\":1}}],[\"两个数组的对应位置上的内容会发生替换\",{\"1\":{\"169\":1}}],[\"两个使用相同构造函数\",{\"1\":{\"72\":1}}],[\"两个值\",{\"1\":{\"32\":1}}],[\"两端对齐\",{\"1\":{\"45\":1}}],[\"jquery\",{\"1\":{\"456\":6,\"457\":3,\"459\":11}}],[\"join\",{\"1\":{\"215\":1,\"460\":2,\"462\":1,\"463\":1}}],[\"jsx\",{\"0\":{\"294\":1,\"305\":1,\"319\":1,\"320\":1},\"1\":{\"267\":4,\"281\":1,\"293\":1,\"305\":4,\"317\":1,\"319\":1,\"320\":1,\"367\":1}}],[\"js\",{\"1\":{\"206\":1,\"207\":4,\"223\":1,\"267\":1,\"268\":1,\"269\":1,\"272\":6,\"292\":3,\"293\":6,\"294\":6,\"305\":6,\"306\":6,\"459\":2,\"460\":4,\"461\":1,\"466\":2,\"467\":2,\"470\":2,\"476\":2,\"477\":2,\"478\":2,\"479\":2,\"480\":2,\"482\":2,\"485\":1,\"486\":1,\"489\":2,\"491\":2,\"494\":4,\"504\":2,\"507\":2,\"509\":2,\"510\":4,\"514\":2,\"517\":2,\"518\":2,\"520\":2,\"521\":2,\"522\":2,\"525\":1,\"529\":3,\"534\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"540\":1,\"541\":1,\"542\":1,\"548\":2,\"553\":2,\"559\":2,\"560\":3,\"561\":2,\"576\":2,\"584\":1,\"613\":7,\"615\":1,\"618\":1,\"619\":5,\"621\":2,\"622\":2,\"641\":2}}],[\"jsonvalue\",{\"1\":{\"379\":1}}],[\"json$\",{\"1\":{\"252\":1}}],[\"jsonlimit\",{\"1\":{\"252\":1}}],[\"json\",{\"0\":{\"218\":1,\"388\":1},\"1\":{\"162\":6,\"218\":4,\"252\":3,\"257\":1,\"267\":1,\"270\":1,\"297\":1,\"354\":2,\"358\":2,\"379\":7,\"380\":4,\"385\":1,\"388\":3,\"390\":2,\"397\":2,\"431\":1,\"437\":1,\"460\":3,\"466\":3,\"556\":2,\"557\":2,\"561\":1}}],[\"jpg\",{\"1\":{\"196\":9,\"550\":1,\"551\":4}}],[\"jack\",{\"1\":{\"417\":2,\"420\":1}}],[\"jackson\",{\"1\":{\"164\":1}}],[\"java\",{\"1\":{\"96\":2,\"114\":2,\"130\":1,\"272\":1,\"273\":1,\"275\":1,\"306\":3,\"307\":1,\"411\":2,\"539\":1}}],[\"javascript\",{\"0\":{\"7\":1},\"1\":{\"68\":1,\"135\":1,\"182\":1,\"192\":1,\"197\":1,\"213\":1,\"222\":1,\"225\":1,\"243\":1,\"267\":3,\"272\":4,\"273\":1,\"275\":1,\"293\":4,\"294\":5,\"305\":6,\"306\":6,\"307\":1,\"317\":1,\"330\":2,\"331\":1,\"360\":1,\"378\":1,\"460\":2,\"510\":8,\"537\":1,\"553\":1,\"554\":2}}],[\"justify\",{\"1\":{\"45\":1}}],[\"如何监测\",{\"1\":{\"539\":2}}],[\"如何选择\",{\"1\":{\"535\":1}}],[\"如何注册组件\",{\"1\":{\"489\":1}}],[\"如何定义一个组件\",{\"1\":{\"489\":1}}],[\"如何换行\",{\"1\":{\"45\":1}}],[\"如\",{\"1\":{\"290\":1}}],[\"如果写在\",{\"1\":{\"613\":1}}],[\"如果全部钩子执行完\",{\"1\":{\"602\":1}}],[\"如果选择\",{\"1\":{\"570\":1}}],[\"如果确实需要修改\",{\"1\":{\"565\":1}}],[\"如果进行修改会产生警告\",{\"1\":{\"565\":1}}],[\"如果定义了一个配置项但是没有设置配置值\",{\"1\":{\"561\":1}}],[\"如果安装太慢可以使用国内镜像\",{\"1\":{\"559\":1}}],[\"如果安装过旧版本可以用这个命令卸载\",{\"1\":{\"559\":1}}],[\"如果子组件仅有默认插槽\",{\"1\":{\"552\":1}}],[\"如果子组件中不包含插槽\",{\"1\":{\"549\":1}}],[\"如果子类没有声明构造函数\",{\"1\":{\"77\":1}}],[\"如果结构中还包含输入类\",{\"1\":{\"535\":1}}],[\"如果对数据进行诸如逆序添加\",{\"1\":{\"535\":1}}],[\"如果对象拥有深层的层级\",{\"1\":{\"459\":1}}],[\"如果同样使用\",{\"1\":{\"534\":1}}],[\"如果绑定的是\",{\"1\":{\"522\":1}}],[\"如果事件处理器需要同时接收事件对象和其他对象作参数\",{\"1\":{\"520\":1}}],[\"如果属性名是\",{\"1\":{\"517\":1}}],[\"如果这里不调用\",{\"1\":{\"517\":1}}],[\"如果这个成员是在同一个枚举类型中定义的\",{\"1\":{\"414\":1}}],[\"如果这个数组内的变量的值没有发生改变\",{\"1\":{\"287\":1}}],[\"如果表单是\",{\"1\":{\"512\":2}}],[\"如果表达式值为\",{\"1\":{\"138\":2}}],[\"如果表达式\",{\"1\":{\"130\":1}}],[\"如果表达式的结果为一个对象\",{\"1\":{\"120\":1}}],[\"如果表达式是一个标识符\",{\"1\":{\"120\":1}}],[\"如果把\",{\"1\":{\"502\":1}}],[\"如果声明文件名字不是\",{\"1\":{\"466\":1}}],[\"如果声明时不赋值那么将被推断为\",{\"1\":{\"439\":1}}],[\"如果再没有找到就会视为一个没有声明文件的库\",{\"1\":{\"466\":1}}],[\"如果库本身就就是\",{\"1\":{\"466\":1}}],[\"如果导入此库之后会扩展全局变量\",{\"1\":{\"463\":1}}],[\"如果上述方式都无法找到声明文件\",{\"1\":{\"460\":1}}],[\"如果上面的\",{\"1\":{\"379\":1}}],[\"如果上面的例子改为类\",{\"1\":{\"94\":1}}],[\"如果上面的例子中继承的类\",{\"1\":{\"94\":1}}],[\"如果只有内层\",{\"1\":{\"459\":1}}],[\"如果向一个\",{\"1\":{\"454\":1}}],[\"如果向改变\",{\"1\":{\"334\":1}}],[\"如果真的希望类型转换应该调用类型转换的方法\",{\"1\":{\"453\":1}}],[\"如果它没有初始化方法\",{\"1\":{\"414\":1}}],[\"如果紧接在计算所得项后面的是未手动赋值的项\",{\"1\":{\"414\":1}}],[\"如果渲染同一个组件多次\",{\"1\":{\"404\":1}}],[\"如果两次调用结果相同则其中一次调用结果将被忽略\",{\"1\":{\"403\":1}}],[\"如果想自动将用户的输入值转为数值类型\",{\"1\":{\"511\":1}}],[\"如果想让事件只触发一次或其他限制\",{\"1\":{\"502\":1}}],[\"如果想用\",{\"1\":{\"467\":1}}],[\"如果想触发一个\",{\"1\":{\"395\":1}}],[\"如果想要以不可变的方式更新\",{\"1\":{\"330\":1}}],[\"如果想要阻止事件向上传播\",{\"1\":{\"274\":1}}],[\"如果想要彻底取消一个事件\",{\"1\":{\"230\":1}}],[\"如果直接访问\",{\"1\":{\"376\":1}}],[\"如果访问\",{\"1\":{\"368\":1}}],[\"如果接口中有多个类型的属性\",{\"1\":{\"441\":1}}],[\"如果接口的响应很慢\",{\"1\":{\"390\":1}}],[\"如果接口报错\",{\"1\":{\"351\":1}}],[\"如果接口返回的数据格式和组件中需要的格式不同\",{\"1\":{\"350\":1}}],[\"如果重复这个过程可以在控制台看到\",{\"1\":{\"345\":1}}],[\"如果后续改变参数再请求此字段仍然为\",{\"1\":{\"344\":1}}],[\"如果数组很长\",{\"1\":{\"343\":1}}],[\"如果数组成员包括对象\",{\"1\":{\"215\":1}}],[\"如果数组成员是\",{\"1\":{\"215\":1}}],[\"如果文章获取不到就返回一个空页面\",{\"1\":{\"337\":1}}],[\"如果文件中有\",{\"1\":{\"267\":1}}],[\"如果需要在钩子之间共享数据\",{\"1\":{\"547\":1}}],[\"如果需要引用另一个库的类型\",{\"1\":{\"465\":1}}],[\"如果需要异步的话\",{\"1\":{\"334\":1}}],[\"如果需要处理那么以不可变形式返回新的\",{\"1\":{\"331\":1}}],[\"如果状态对象不可变\",{\"1\":{\"330\":1}}],[\"如果创建一个数组\",{\"1\":{\"330\":1}}],[\"如果创建一个对象\",{\"1\":{\"330\":1}}],[\"如果有一个对象数据\",{\"1\":{\"648\":2}}],[\"如果有重名\",{\"1\":{\"626\":1}}],[\"如果有多个插槽\",{\"1\":{\"550\":1}}],[\"如果有多个组件需要共享\",{\"1\":{\"329\":1}}],[\"如果有很多组件\",{\"1\":{\"283\":1}}],[\"如果以后还要添加其他需求\",{\"1\":{\"323\":1}}],[\"如果按照\",{\"1\":{\"323\":1}}],[\"如果返回\",{\"1\":{\"310\":1}}],[\"如果首字母小写那么会被解析为\",{\"1\":{\"305\":1}}],[\"如果标签首字母大写\",{\"1\":{\"305\":1}}],[\"如果组件发生了嵌套\",{\"1\":{\"320\":1}}],[\"如果组件内有一个局部定义的数组或者对象\",{\"1\":{\"301\":1}}],[\"如果组件不是很复杂\",{\"1\":{\"281\":1}}],[\"如果依赖项数组没有发生变化\",{\"1\":{\"301\":1}}],[\"如果给\",{\"1\":{\"287\":1}}],[\"如果没指定\",{\"1\":{\"267\":1}}],[\"如果没有东西要插入插槽\",{\"1\":{\"549\":1}}],[\"如果没有这个变量\",{\"1\":{\"517\":1}}],[\"如果没有这个元素\",{\"1\":{\"54\":1}}],[\"如果没有明确指定类型\",{\"1\":{\"439\":1}}],[\"如果没有其他\",{\"1\":{\"338\":1}}],[\"如果没有全局安装某个包\",{\"1\":{\"266\":1}}],[\"如果没有指定错误事件侦听器\",{\"1\":{\"245\":1}}],[\"如果没有匹配就返回\",{\"1\":{\"216\":1}}],[\"如果没有找到匹配就返回\",{\"1\":{\"216\":1}}],[\"如果没有就返回\",{\"1\":{\"215\":1}}],[\"如果没有上层窗口\",{\"1\":{\"197\":1}}],[\"如果没有使用\",{\"1\":{\"178\":1,\"367\":1}}],[\"如果没有显式定义\",{\"1\":{\"153\":1}}],[\"如果没有符合条件的就返回\",{\"1\":{\"148\":1}}],[\"如果没有声明构造函数\",{\"1\":{\"76\":1}}],[\"如果没有父元素\",{\"1\":{\"46\":1}}],[\"如果未指定错误侦听器\",{\"1\":{\"245\":1}}],[\"如果为\",{\"1\":{\"243\":1}}],[\"如果设为\",{\"1\":{\"238\":1}}],[\"如果设置为\",{\"1\":{\"229\":1}}],[\"如果设置了属性值\",{\"1\":{\"197\":1}}],[\"如果设置了参数的默认值\",{\"1\":{\"157\":1}}],[\"如果设置了\",{\"1\":{\"58\":1}}],[\"如果当前路径不在免认证路径中\",{\"1\":{\"399\":1}}],[\"如果当前路径是\",{\"1\":{\"381\":1}}],[\"如果当前函数是\",{\"1\":{\"237\":1}}],[\"如果当前窗口就是顶层窗口\",{\"1\":{\"197\":1}}],[\"如果构造函数内部存在\",{\"1\":{\"237\":1}}],[\"如果脚本之间存在依赖关系就使用\",{\"1\":{\"227\":1}}],[\"如果脚本之间没有依赖关系\",{\"1\":{\"227\":1}}],[\"如果认为扩大\",{\"1\":{\"226\":1}}],[\"如果传递的是函数\",{\"1\":{\"403\":1}}],[\"如果传一个参数\",{\"1\":{\"225\":1}}],[\"如果传入其他值会被先转成数值\",{\"1\":{\"222\":1}}],[\"如果存在重名\",{\"1\":{\"570\":1}}],[\"如果存在重名的参数\",{\"1\":{\"225\":1}}],[\"如果存在错误就会报错\",{\"1\":{\"182\":1}}],[\"如果参数为空\",{\"1\":{\"238\":1}}],[\"如果参数是一个原始值则会转成包装对象\",{\"1\":{\"238\":1}}],[\"如果参数是符合类型的值\",{\"1\":{\"225\":1}}],[\"如果参数是原始类型的值\",{\"1\":{\"225\":1}}],[\"如果参数不是字符串则会先转换为字符串\",{\"1\":{\"222\":1}}],[\"如果删除一个不存在的属性也是返回\",{\"1\":{\"224\":1}}],[\"如果取消某个变量对于原对象的引用\",{\"1\":{\"224\":1}}],[\"如果遇到不能转为数字的字符\",{\"1\":{\"222\":1}}],[\"如果字符串头部有空格\",{\"1\":{\"222\":1}}],[\"如果不写\",{\"1\":{\"619\":1}}],[\"如果不写set方法\",{\"1\":{\"504\":1}}],[\"如果不存在对数据的逆序添加\",{\"1\":{\"535\":1}}],[\"如果不传\",{\"1\":{\"379\":1}}],[\"如果不希望使用\",{\"1\":{\"266\":1}}],[\"如果不同的变量名指向同一个对象\",{\"1\":{\"224\":1}}],[\"如果不提供参数\",{\"1\":{\"215\":1}}],[\"如果不使用辅助函数\",{\"1\":{\"619\":1}}],[\"如果不使用缓存\",{\"1\":{\"598\":1,\"599\":1}}],[\"如果不使用函数对数组或对象的某个元素或者属性进行修改\",{\"1\":{\"538\":1}}],[\"如果不使用\",{\"1\":{\"157\":1}}],[\"如果不使用额外的属性\",{\"1\":{\"54\":1}}],[\"如果变量声明时同时进行了赋值\",{\"1\":{\"213\":1}}],[\"如果变量名与属性名不一致要使用\",{\"1\":{\"186\":1}}],[\"如果国际化中包含对象嵌套\",{\"1\":{\"208\":1}}],[\"如果省略\",{\"1\":{\"193\":2}}],[\"如果赋值为\",{\"1\":{\"185\":2}}],[\"如果解构失败\",{\"1\":{\"185\":1}}],[\"如果是多个组件\",{\"1\":{\"596\":1}}],[\"如果是多选框\",{\"1\":{\"512\":1}}],[\"如果是正数就是前进对应的步数\",{\"1\":{\"595\":1}}],[\"如果是钩子函数\",{\"1\":{\"568\":1}}],[\"如果是数组\",{\"1\":{\"512\":1}}],[\"如果是普通函数\",{\"1\":{\"502\":1}}],[\"如果是一个普通类型\",{\"1\":{\"438\":1}}],[\"如果是设置对象的话\",{\"1\":{\"406\":1}}],[\"如果是函数的话\",{\"1\":{\"391\":1}}],[\"如果是的话就调用这个函数\",{\"1\":{\"358\":1}}],[\"如果是更新表单数据\",{\"1\":{\"326\":1}}],[\"如果是非默认导出可以用下面的方法\",{\"1\":{\"304\":1}}],[\"如果是使用\",{\"1\":{\"268\":1}}],[\"如果是\",{\"1\":{\"243\":1,\"388\":1}}],[\"如果是通过变量赋值定义的匿名函数\",{\"1\":{\"225\":1}}],[\"如果是编译为\",{\"1\":{\"209\":1}}],[\"如果是小数会取证\",{\"1\":{\"183\":1}}],[\"如果是负数就表示倒数的位置\",{\"1\":{\"149\":1}}],[\"如果多个\",{\"1\":{\"180\":1,\"192\":1,\"338\":1}}],[\"如果左侧对象为\",{\"1\":{\"172\":1}}],[\"如果源对象的某个属性的值是对象\",{\"1\":{\"169\":1}}],[\"如果等号右边是数值和布尔值\",{\"1\":{\"188\":1}}],[\"如果等号右边是\",{\"1\":{\"167\":1}}],[\"如果键名不符合标识名的条件\",{\"1\":{\"224\":1}}],[\"如果键中存在非字符串可以选择转为数组\",{\"1\":{\"162\":1}}],[\"如果键是对象类型\",{\"1\":{\"161\":1}}],[\"如果所有的键都是字符串就可以无损的转换\",{\"1\":{\"162\":1}}],[\"如果所有成员都不符合条件就返回\",{\"1\":{\"148\":1}}],[\"如果在父组件中要使显示内容改变\",{\"1\":{\"552\":1}}],[\"如果在渲染一个组件时报错\",{\"1\":{\"371\":1}}],[\"如果在一个组件里想向子组件传递一些数据\",{\"1\":{\"276\":1}}],[\"如果在\",{\"1\":{\"224\":1,\"403\":1,\"517\":1}}],[\"如果在声明前使用这些变量就会报错\",{\"1\":{\"160\":1}}],[\"如果在分支语句中使用\",{\"1\":{\"128\":1}}],[\"如果函数的选项中设置了\",{\"1\":{\"381\":1}}],[\"如果函数体中修改对象\",{\"1\":{\"225\":1}}],[\"如果函数体中只有一个表达式\",{\"1\":{\"97\":1}}],[\"如果函数中的\",{\"1\":{\"157\":1}}],[\"如果静态方法中包含\",{\"1\":{\"153\":1}}],[\"如果希望使用\",{\"1\":{\"456\":1}}],[\"如果希望一个接口允许任意的属性\",{\"1\":{\"441\":1}}],[\"如果希望某些字段只能在创建的时候赋值\",{\"1\":{\"441\":1}}],[\"如果希望某些字段是可选的\",{\"1\":{\"441\":1}}],[\"如果希望只设置一部分字段\",{\"1\":{\"404\":1}}],[\"如果希望更细粒度的控制\",{\"1\":{\"399\":1}}],[\"如果希望有一个默认首选组件\",{\"1\":{\"376\":1}}],[\"如果希望去掉这种效果\",{\"1\":{\"368\":1}}],[\"如果希望大小写敏感\",{\"1\":{\"368\":1}}],[\"如果希望链接在被激活时有高亮效果\",{\"1\":{\"368\":1}}],[\"如果希望控制\",{\"1\":{\"362\":1}}],[\"如果希望不渲染页面可以使用\",{\"1\":{\"360\":1}}],[\"如果希望组件记住某些信息在之前可以使用\",{\"1\":{\"360\":1}}],[\"如果希望在更新后网页滚动的位置保持不变\",{\"1\":{\"314\":1}}],[\"如果希望在两个组件都能获取到用户信息\",{\"1\":{\"297\":1}}],[\"如果希望为每个列表项显示多个\",{\"1\":{\"306\":1}}],[\"如果希望传递自定义参数\",{\"1\":{\"275\":1}}],[\"如果希望从现有对象作为模板创建新的实例对象可以使用\",{\"1\":{\"237\":1}}],[\"如果希望事件到某个节点为止不再传播\",{\"1\":{\"230\":1}}],[\"如果希望即使前面的异步操作失败也不中断后面的异步操作可以将前面的\",{\"1\":{\"152\":1}}],[\"如果希望抽象类可以实例化\",{\"1\":{\"89\":1}}],[\"如果使用组件直接传入组件即可\",{\"1\":{\"560\":1}}],[\"如果使用的\",{\"1\":{\"268\":1}}],[\"如果使用箭头函数定义对象的方法\",{\"1\":{\"159\":1}}],[\"如果使用\",{\"1\":{\"138\":1,\"339\":1,\"343\":1,\"344\":1}}],[\"如果被赋值的变量不是\",{\"1\":{\"129\":1}}],[\"如果要能够监视\",{\"1\":{\"622\":1}}],[\"如果要只监视\",{\"1\":{\"622\":1}}],[\"如果要为后追加的数据添加响应式\",{\"1\":{\"539\":1}}],[\"如果要指定\",{\"1\":{\"522\":1}}],[\"如果要自动过滤用户输入的首尾空白字符\",{\"1\":{\"511\":1}}],[\"如果要读取\",{\"1\":{\"384\":1}}],[\"如果要去掉这种效果\",{\"1\":{\"368\":1}}],[\"如果要在\",{\"1\":{\"305\":1,\"374\":1}}],[\"如果要用\",{\"1\":{\"302\":1}}],[\"如果要将\",{\"1\":{\"281\":1}}],[\"如果要复制的值是一个\",{\"1\":{\"169\":1}}],[\"如果要级联的对象可能为\",{\"1\":{\"131\":1}}],[\"如果要把插值字符串字面量赋值给一个\",{\"1\":{\"120\":1}}],[\"如果要显式地声明允许任意类型\",{\"1\":{\"117\":1}}],[\"如果要创建一个\",{\"1\":{\"90\":1}}],[\"如果你确定变量使用前已被初始化\",{\"1\":{\"144\":1}}],[\"如果你明确一个表达式不会为空\",{\"1\":{\"117\":1}}],[\"如果你开启了空安全\",{\"1\":{\"117\":1}}],[\"如果开启了空安全\",{\"1\":{\"117\":2}}],[\"如果生成器是递归调用的\",{\"1\":{\"109\":1}}],[\"如果\",{\"1\":{\"96\":1,\"128\":1,\"132\":1,\"137\":1,\"145\":1,\"162\":1,\"178\":1,\"192\":1,\"290\":2,\"337\":1,\"338\":1,\"374\":1,\"385\":1,\"388\":2,\"401\":1,\"420\":1,\"510\":1,\"583\":1,\"602\":1}}],[\"如果将状态和\",{\"1\":{\"283\":1}}],[\"如果将函数赋给一个\",{\"1\":{\"160\":1}}],[\"如果将枚举类用在\",{\"1\":{\"93\":1}}],[\"如果将两个类选择器链接在一起\",{\"1\":{\"64\":1}}],[\"如果调用了对象上不存在的方法或实例变量会触发\",{\"1\":{\"91\":1}}],[\"如果父类没有匿名无参构造函数\",{\"1\":{\"79\":1}}],[\"如果项目中有这个类选择器的样式那么就会生效\",{\"1\":{\"368\":1}}],[\"如果项目只有一根轴线\",{\"1\":{\"45\":1}}],[\"如果项目未设置高度或设为\",{\"1\":{\"45\":1}}],[\"如果一行宽度足够就不断行\",{\"1\":{\"204\":1}}],[\"如果一个组件内部定义了和混入中定义的相同的\",{\"1\":{\"568\":1}}],[\"如果一个组件标签的属性过多\",{\"1\":{\"319\":1}}],[\"如果一个页面中有多个\",{\"1\":{\"300\":1}}],[\"如果一个错误被捕获并且不再抛出\",{\"1\":{\"245\":1}}],[\"如果一个函数有两个重名参数\",{\"1\":{\"225\":1}}],[\"如果一个变量使用了\",{\"1\":{\"144\":1}}],[\"如果一个类只是用来\",{\"1\":{\"94\":1}}],[\"如果一个\",{\"1\":{\"64\":1,\"67\":1,\"342\":1,\"376\":1,\"551\":1}}],[\"如果一个元素同时定义了\",{\"1\":{\"658\":2}}],[\"如果一个元素比包含它的元素高\",{\"1\":{\"57\":1}}],[\"如果一个元素内容为空\",{\"1\":{\"35\":1}}],[\"如果一条轴线排不下\",{\"1\":{\"45\":1}}],[\"如果元素有指定的宽度\",{\"1\":{\"36\":1}}],[\"即最后这个组件的展示位置两边使用\",{\"1\":{\"596\":1}}],[\"即不做修改直接保留\",{\"1\":{\"534\":1}}],[\"即template不会出现在渲染后的页面中而把内部元素直接暴露出来\",{\"1\":{\"507\":1}}],[\"即父组件对象\",{\"1\":{\"502\":1}}],[\"即前端服务器根目录\",{\"1\":{\"485\":1}}],[\"即编译后输出到来的地方\",{\"1\":{\"460\":1}}],[\"即提交到\",{\"1\":{\"314\":1}}],[\"即\",{\"1\":{\"231\":1,\"323\":1,\"492\":1,\"586\":1,\"608\":1,\"657\":1}}],[\"即可以使用字符串写法\",{\"1\":{\"483\":1}}],[\"即可以通过\",{\"1\":{\"461\":1}}],[\"即可实现对变量值的修改\",{\"1\":{\"403\":1}}],[\"即可实现对状态的修改\",{\"1\":{\"335\":1}}],[\"即可实现\",{\"1\":{\"360\":1,\"406\":1}}],[\"即可\",{\"1\":{\"193\":1,\"348\":1,\"356\":1,\"358\":1,\"451\":1}}],[\"即使用了自己的数组修改方法\",{\"1\":{\"539\":1}}],[\"即使改为\",{\"1\":{\"379\":1}}],[\"即使不指定\",{\"1\":{\"376\":1}}],[\"即使是自己的子组件\",{\"1\":{\"362\":1}}],[\"即使是整数\",{\"1\":{\"222\":1}}],[\"即使它会引发数据的多个变化\",{\"1\":{\"326\":1}}],[\"即使子组件阻止了冒泡\",{\"1\":{\"274\":1}}],[\"即使在运行时也会保持类型信息\",{\"1\":{\"114\":1}}],[\"即使滚动页面\",{\"1\":{\"54\":1}}],[\"即如果存在剩余空间也不放大\",{\"1\":{\"46\":1}}],[\"即项目排列的方向\",{\"1\":{\"45\":1}}],[\"即配置对象中要使用\",{\"1\":{\"15\":1}}],[\"垂直阴影\",{\"1\":{\"65\":1}}],[\"垂直对齐\",{\"1\":{\"59\":1,\"65\":1}}],[\"垂直居中属性会失效\",{\"1\":{\"44\":1}}],[\"垂直重复\",{\"1\":{\"32\":1}}],[\"前面加三个点表示以对象形式加入\",{\"1\":{\"616\":1}}],[\"前面添加\",{\"1\":{\"44\":1}}],[\"前进功能\",{\"1\":{\"594\":1}}],[\"前进后退指定步数\",{\"1\":{\"381\":1}}],[\"前者持久保存\",{\"1\":{\"555\":1}}],[\"前端服务器端口号设置为90\",{\"1\":{\"485\":1}}],[\"前提是事件对象的\",{\"1\":{\"231\":1}}],[\"前加上类型参数的方式创建一个空的\",{\"1\":{\"123\":1}}],[\"前没有执行\",{\"1\":{\"613\":1}}],[\"前没有\",{\"1\":{\"96\":1}}],[\"前缀\",{\"1\":{\"44\":1,\"547\":1}}],[\"亮度是百分比\",{\"1\":{\"43\":1}}],[\"饱和度\",{\"1\":{\"43\":1}}],[\"饱和度和明度来指定颜色\",{\"1\":{\"43\":1}}],[\"是所有\",{\"1\":{\"626\":1}}],[\"是计算属性\",{\"1\":{\"618\":1}}],[\"是创建的\",{\"1\":{\"602\":1}}],[\"是静态时是有用的\",{\"1\":{\"587\":1}}],[\"是事件的名字\",{\"1\":{\"520\":1}}],[\"是前面函数中\",{\"1\":{\"517\":1}}],[\"是布尔值\",{\"1\":{\"512\":1}}],[\"是子组件\",{\"1\":{\"502\":1}}],[\"是父组件\",{\"1\":{\"502\":1}}],[\"是非常危险的\",{\"1\":{\"477\":1}}],[\"是早期为了解决模块化而创造的关键字\",{\"1\":{\"459\":1}}],[\"是什么\",{\"1\":{\"456\":1}}],[\"是隔离且私有的\",{\"1\":{\"404\":1}}],[\"是批量处理状态的更新\",{\"1\":{\"403\":1}}],[\"是不允许出现\",{\"1\":{\"465\":1}}],[\"是不会渲染\",{\"1\":{\"373\":1}}],[\"是不是函数\",{\"1\":{\"358\":1}}],[\"是不是在发出第一次请求\",{\"1\":{\"344\":1}}],[\"是当前查询的一个\",{\"1\":{\"351\":1}}],[\"是当前\",{\"1\":{\"350\":1}}],[\"是从\",{\"1\":{\"348\":1}}],[\"是独立设计的\",{\"1\":{\"348\":1}}],[\"是数字或者字符串\",{\"1\":{\"347\":1}}],[\"是使用回调函数构造的\",{\"1\":{\"344\":1}}],[\"是完全替换\",{\"1\":{\"343\":1}}],[\"是键\",{\"1\":{\"343\":1}}],[\"是指某个节点可以匹配不同的内容并能获取对应的参数\",{\"1\":{\"372\":1}}],[\"是指\",{\"1\":{\"343\":1}}],[\"是一种模块规范\",{\"1\":{\"461\":1}}],[\"是一种特定类型的\",{\"1\":{\"334\":1}}],[\"是一个对\",{\"1\":{\"517\":1}}],[\"是一个对象\",{\"1\":{\"231\":1}}],[\"是一个\",{\"1\":{\"517\":1}}],[\"是一个全局变量\",{\"1\":{\"459\":1,\"517\":1}}],[\"是一个普通的\",{\"1\":{\"360\":1}}],[\"是一个查询的生命周期函数\",{\"1\":{\"351\":1}}],[\"是一个基础查询函数\",{\"1\":{\"344\":1}}],[\"是一个带有\",{\"1\":{\"334\":1}}],[\"是一个开箱即用的\",{\"1\":{\"332\":1}}],[\"是一个函数\",{\"1\":{\"331\":1,\"355\":1,\"356\":1,\"517\":1}}],[\"是一个具有\",{\"1\":{\"331\":1}}],[\"是一个使用\",{\"1\":{\"328\":1}}],[\"是一个不依赖组件的纯函数\",{\"1\":{\"325\":1}}],[\"是一个字符串类型\",{\"1\":{\"322\":1}}],[\"是一个包执行器工具\",{\"1\":{\"266\":1}}],[\"是一个变量\",{\"1\":{\"157\":2}}],[\"是一个百分比值\",{\"1\":{\"43\":1}}],[\"是只读的\",{\"1\":{\"318\":1,\"565\":1}}],[\"是只读属性\",{\"1\":{\"314\":1}}],[\"是传递给\",{\"1\":{\"317\":1}}],[\"是元素中被隐藏在滚动视图上方的元素高度\",{\"1\":{\"314\":1}}],[\"是可选的\",{\"1\":{\"301\":1}}],[\"是通过\",{\"1\":{\"287\":1}}],[\"是字符串表示事件的名称\",{\"1\":{\"231\":1}}],[\"是必需属性\",{\"1\":{\"197\":1}}],[\"是否应该被处理\",{\"1\":{\"331\":1}}],[\"是否禁止不可达代码\",{\"1\":{\"267\":1}}],[\"是否禁用\",{\"1\":{\"193\":1}}],[\"是否在设置此cookie\",{\"1\":{\"243\":1}}],[\"是否在页面加载时自动获得焦点\",{\"1\":{\"193\":1}}],[\"是否为\",{\"1\":{\"243\":1}}],[\"是否仅通过\",{\"1\":{\"243\":2}}],[\"是否默认打开\",{\"1\":{\"200\":1}}],[\"是否可以选择多个菜单项\",{\"1\":{\"193\":1}}],[\"是否只读\",{\"1\":{\"193\":1}}],[\"是强类型语言\",{\"1\":{\"117\":1}}],[\"是\",{\"1\":{\"97\":1,\"128\":1,\"338\":1,\"378\":1,\"379\":1,\"385\":1,\"403\":2,\"492\":1,\"543\":1,\"554\":1,\"626\":1,\"631\":1,\"633\":1}}],[\"是白色\",{\"1\":{\"43\":1}}],[\"是黑色\",{\"1\":{\"43\":1}}],[\"是蓝色\",{\"1\":{\"43\":1}}],[\"是绿色\",{\"1\":{\"43\":1}}],[\"是红色\",{\"1\":{\"43\":1}}],[\"是色轮上从\",{\"1\":{\"43\":1}}],[\"色相\",{\"1\":{\"43\":1}}],[\"格式是\",{\"1\":{\"200\":1}}],[\"格式\",{\"1\":{\"43\":1}}],[\"每当\",{\"1\":{\"354\":1}}],[\"每次路由切换之后调用\",{\"1\":{\"603\":1}}],[\"每次路由切换之前调用\",{\"1\":{\"602\":1}}],[\"每次调用返回值不会重新计算\",{\"1\":{\"503\":1}}],[\"每次调用\",{\"1\":{\"492\":1}}],[\"每次点击就调用\",{\"1\":{\"397\":1}}],[\"每次点击按钮会在控制台输出点击的总次数\",{\"1\":{\"360\":1}}],[\"每次渲染组件时调用的\",{\"1\":{\"345\":1}}],[\"每次渲染时进行判断\",{\"1\":{\"287\":1}}],[\"每次组件重新渲染时\",{\"1\":{\"298\":1}}],[\"每次重新执行\",{\"1\":{\"288\":1}}],[\"每一次调用都是在上一次调用的基础上进行计算\",{\"1\":{\"225\":1}}],[\"每一组都是介于\",{\"1\":{\"42\":1}}],[\"每根轴线两侧的间隔都相等\",{\"1\":{\"45\":1}}],[\"每个模块中的\",{\"1\":{\"619\":1}}],[\"每个模块拥有自己的\",{\"1\":{\"619\":1}}],[\"每个路由规则的\",{\"1\":{\"603\":1}}],[\"每个组件中定义的\",{\"1\":{\"570\":1}}],[\"每个副本都会有完全隔离的\",{\"1\":{\"404\":1}}],[\"每个页面要求访问者具有相应的权限\",{\"1\":{\"399\":1}}],[\"每个对象包含\",{\"1\":{\"347\":1}}],[\"每个对象都是一个类的实例\",{\"1\":{\"117\":1}}],[\"每个文章的标题是一个\",{\"1\":{\"337\":1}}],[\"每个按钮都有点击事件处理函数\",{\"1\":{\"275\":1}}],[\"每个原型对象都有一个\",{\"1\":{\"239\":1}}],[\"每个\",{\"1\":{\"102\":1,\"326\":1,\"352\":1,\"492\":1}}],[\"每个类都隐式的定义了一个接口并实现了这个接口\",{\"1\":{\"90\":1}}],[\"每个实例变量之间使用逗号分隔\",{\"1\":{\"80\":1}}],[\"每个项目两侧的间隔相等\",{\"1\":{\"45\":1}}],[\"每个参数定义了\",{\"1\":{\"40\":1}}],[\"额外制定了颜色的不透明度\",{\"1\":{\"41\":1}}],[\"到达目标元素后开始向上执行点击事件称为冒泡\",{\"1\":{\"521\":1}}],[\"到这里已经实现了通过\",{\"1\":{\"517\":1}}],[\"到这里\",{\"1\":{\"337\":1}}],[\"到\",{\"1\":{\"40\":1,\"43\":1}}],[\"将全局的\",{\"1\":{\"657\":1}}],[\"将可能复用的\",{\"1\":{\"641\":1}}],[\"将上一个部分中人员列表和计数器的\",{\"1\":{\"619\":1}}],[\"将变成组件的属性\",{\"1\":{\"586\":1}}],[\"将渲染后的内容添加到页面上\",{\"1\":{\"517\":1}}],[\"将接收对象的\",{\"1\":{\"517\":1}}],[\"将不能修改对应的属性\",{\"1\":{\"504\":1}}],[\"将不会出发\",{\"1\":{\"522\":1}}],[\"将不会被调用\",{\"1\":{\"380\":1}}],[\"将不会在依赖值不改变的情况下发生调用\",{\"1\":{\"342\":1}}],[\"将请求代理到localhost的80端口\",{\"1\":{\"485\":1}}],[\"将库暴露为一个全局变量\",{\"1\":{\"461\":1}}],[\"将任何一个类型断言为\",{\"1\":{\"451\":1}}],[\"将任意类型的值转为布尔值\",{\"1\":{\"233\":1}}],[\"将任意类型的值转化成字符串\",{\"1\":{\"233\":1}}],[\"将任意类型的值转化为数值\",{\"1\":{\"233\":1}}],[\"将联合类型断言为其中一个类型\",{\"1\":{\"451\":1}}],[\"将数据存储在这里然后调用实例方法\",{\"1\":{\"406\":1}}],[\"将数组的所有成员依次传入参数函数\",{\"1\":{\"215\":1}}],[\"将数组传入\",{\"1\":{\"162\":1}}],[\"将只输出一次\",{\"1\":{\"403\":1}}],[\"将两次调用传入\",{\"1\":{\"403\":1}}],[\"将之前的\",{\"1\":{\"398\":1}}],[\"将之前的创建\",{\"1\":{\"338\":1}}],[\"将得到\",{\"1\":{\"392\":1}}],[\"将现有的路由配置改为全部懒加载如下\",{\"1\":{\"377\":1}}],[\"将这个\",{\"1\":{\"348\":1,\"379\":1}}],[\"将这个空对象赋值给函数内部的\",{\"1\":{\"237\":1}}],[\"将这个空对象的原型指向构造函数的\",{\"1\":{\"237\":1}}],[\"将会在\",{\"1\":{\"517\":1}}],[\"将会在组件被渲染前调用\",{\"1\":{\"394\":1}}],[\"将会被执行\",{\"1\":{\"338\":1}}],[\"将会作为这个参数的其中一个字段\",{\"1\":{\"334\":1}}],[\"将会执行下一个\",{\"1\":{\"137\":1}}],[\"将根\",{\"1\":{\"334\":1}}],[\"将执行所有\",{\"1\":{\"331\":1}}],[\"将设置状态的逻辑修改成\",{\"1\":{\"323\":1}}],[\"将传入的\",{\"1\":{\"301\":1}}],[\"将直接返回相同的值\",{\"1\":{\"301\":1}}],[\"将在每次渲染时都被调用\",{\"1\":{\"287\":1}}],[\"将控制\",{\"1\":{\"286\":1}}],[\"将普通函数柯里化之后传入\",{\"1\":{\"275\":1}}],[\"将响应体设置为以下之一\",{\"1\":{\"257\":1}}],[\"将函数体内的\",{\"1\":{\"238\":1}}],[\"将函数匿名赋给一个变量\",{\"1\":{\"225\":1}}],[\"将字符串转换为\",{\"1\":{\"223\":1}}],[\"将字符串转为整数\",{\"1\":{\"222\":1}}],[\"将新数组的成员添加到原数组成员的后部然后返回一个新数组\",{\"1\":{\"215\":1}}],[\"将所有数组成员连接成一个字符串返回\",{\"1\":{\"215\":1}}],[\"将所有内容放在一个文件中可能是合理的\",{\"1\":{\"207\":1}}],[\"将\",{\"0\":{\"320\":1},\"1\":{\"212\":1,\"218\":1,\"223\":1,\"242\":1,\"314\":1,\"343\":1,\"344\":1,\"407\":1,\"451\":1,\"459\":1,\"516\":1,\"609\":1}}],[\"将图像和相关信息封装在一起\",{\"1\":{\"195\":1}}],[\"将图像设置为块元素并将左右外边距设置为\",{\"1\":{\"59\":1}}],[\"将文件分成多块传送\",{\"1\":{\"193\":1}}],[\"将原对象的所有可枚举属性复制到目标对象\",{\"1\":{\"169\":1}}],[\"将对象传入\",{\"1\":{\"162\":1}}],[\"将一个由\",{\"1\":{\"650\":1}}],[\"将一个父类断言为更加具体的子类\",{\"1\":{\"451\":1}}],[\"将一个字符串转为浮点数\",{\"1\":{\"222\":1}}],[\"将一个字符串全部转为小写或大写\",{\"1\":{\"216\":1}}],[\"将一个值转为\",{\"1\":{\"218\":1}}],[\"将一个图像文件作为提交按钮\",{\"1\":{\"193\":1}}],[\"将一个数组变为参数序列\",{\"1\":{\"147\":1}}],[\"将一系列参数包裹起来作为位置参数\",{\"1\":{\"100\":1}}],[\"将检查延迟到运行时进行\",{\"1\":{\"117\":1}}],[\"将捕获的异常再次抛出\",{\"1\":{\"96\":1}}],[\"将保留上下内外边距\",{\"1\":{\"58\":1}}],[\"将占满整个容器的高度\",{\"1\":{\"45\":1}}],[\"将颜色指定为\",{\"1\":{\"40\":1}}],[\"将属性值按空格分隔\",{\"1\":{\"32\":1}}],[\"games\",{\"1\":{\"550\":1}}],[\"guardrouter\",{\"1\":{\"399\":2}}],[\"gg\",{\"1\":{\"288\":1,\"316\":1}}],[\"globalproperties\",{\"1\":{\"657\":1}}],[\"globalthis\",{\"1\":{\"463\":1}}],[\"globalclassname\",{\"1\":{\"269\":2}}],[\"globalandlocal\",{\"1\":{\"269\":1}}],[\"global\",{\"1\":{\"269\":3,\"462\":1,\"463\":2}}],[\"g\",{\"1\":{\"266\":1,\"559\":2}}],[\"github\",{\"1\":{\"243\":1}}],[\"gif\",{\"1\":{\"62\":1}}],[\"generator\",{\"1\":{\"153\":1,\"159\":1}}],[\"getformattime\",{\"1\":{\"529\":2}}],[\"getallstudents\",{\"1\":{\"487\":1,\"573\":1}}],[\"getarticle\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"350\":1}}],[\"getname\",{\"1\":{\"410\":3,\"418\":1,\"419\":2,\"421\":1,\"459\":3}}],[\"getemitter\",{\"1\":{\"408\":4}}],[\"getelementbyid\",{\"1\":{\"272\":2,\"273\":1,\"274\":5,\"300\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"337\":1,\"360\":2,\"366\":1,\"369\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":2}}],[\"getdefaultmiddleware\",{\"1\":{\"344\":2}}],[\"getderivedstatefromprops\",{\"1\":{\"310\":1}}],[\"getinfo\",{\"1\":{\"527\":1,\"528\":2}}],[\"getinitialindex\",{\"1\":{\"403\":2}}],[\"getinitialstate\",{\"1\":{\"343\":2}}],[\"getitem\",{\"1\":{\"26\":1,\"297\":1,\"496\":1,\"556\":2,\"557\":2,\"602\":1}}],[\"get<array<article>>\",{\"1\":{\"338\":1,\"358\":1,\"359\":1}}],[\"getselectors<statetype>\",{\"1\":{\"343\":1}}],[\"getselectors\",{\"1\":{\"343\":2}}],[\"getstate>\",{\"1\":{\"343\":1,\"353\":1}}],[\"getstate\",{\"1\":{\"331\":1,\"334\":1,\"354\":1,\"355\":1,\"356\":2,\"358\":2}}],[\"getstyleloaders\",{\"1\":{\"269\":3}}],[\"getsnapshotbeforeupdate\",{\"1\":{\"314\":2,\"315\":1}}],[\"getlink\",{\"1\":{\"378\":2,\"379\":1}}],[\"getlistitems\",{\"1\":{\"273\":2}}],[\"getlocalident\",{\"1\":{\"269\":2}}],[\"getcssmodulelocalident\",{\"1\":{\"269\":2}}],[\"getownpropertynames\",{\"1\":{\"240\":1}}],[\"getuser\",{\"1\":{\"159\":2}}],[\"getprototypeof\",{\"1\":{\"154\":2,\"240\":1}}],[\"getters\",{\"0\":{\"615\":1},\"1\":{\"615\":4,\"616\":2,\"619\":4}}],[\"getter\",{\"0\":{\"87\":1},\"1\":{\"74\":1,\"87\":1,\"88\":1,\"91\":1,\"169\":1,\"505\":1,\"516\":3,\"517\":7,\"619\":2}}],[\"get方式\",{\"1\":{\"16\":1}}],[\"get\",{\"0\":{\"17\":1,\"505\":1},\"1\":{\"15\":1,\"16\":1,\"17\":1,\"19\":1,\"20\":1,\"21\":1,\"30\":1,\"87\":2,\"111\":3,\"140\":4,\"153\":1,\"161\":1,\"243\":1,\"252\":1,\"255\":1,\"260\":2,\"261\":1,\"262\":2,\"338\":1,\"344\":1,\"349\":1,\"379\":8,\"384\":2,\"385\":1,\"459\":7,\"487\":1,\"504\":1,\"514\":2,\"515\":1,\"517\":1,\"536\":1,\"573\":1,\"614\":1,\"615\":1,\"627\":1,\"631\":4,\"632\":1,\"635\":1,\"651\":1}}],[\"go\",{\"0\":{\"595\":1},\"1\":{\"272\":1,\"273\":1,\"275\":1,\"306\":3,\"307\":1,\"381\":1,\"387\":1,\"390\":1,\"595\":2}}],[\"googleapis\",{\"1\":{\"140\":1}}],[\"google\",{\"1\":{\"140\":1,\"190\":1}}],[\"golang\",{\"1\":{\"125\":1,\"128\":1}}],[\"grade=\",{\"1\":{\"538\":1}}],[\"grade\",{\"1\":{\"537\":8,\"538\":5}}],[\"gradient\",{\"1\":{\"482\":3,\"483\":1}}],[\"grandson\",{\"1\":{\"279\":5}}],[\"grapheme\",{\"0\":{\"125\":1}}],[\"growup\",{\"1\":{\"406\":2}}],[\"grow\",{\"1\":{\"46\":1,\"405\":6,\"406\":3}}],[\"green\",{\"1\":{\"40\":1,\"41\":1,\"414\":2,\"415\":1,\"645\":1}}],[\"颜色\",{\"0\":{\"39\":1},\"1\":{\"65\":1}}],[\"+person\",{\"1\":{\"635\":2}}],[\"+newvalue\",{\"1\":{\"621\":1,\"622\":2,\"623\":2}}],[\"+oldvalue\",{\"1\":{\"621\":1,\"622\":2,\"623\":2}}],[\"+alt\",{\"1\":{\"192\":1}}],[\"+=\",{\"1\":{\"158\":1,\"314\":1,\"334\":1,\"449\":1,\"614\":1,\"619\":1,\"642\":4}}],[\"++i\",{\"1\":{\"147\":1}}],[\"+\",{\"1\":{\"38\":12,\"70\":1,\"85\":1,\"86\":5,\"87\":1,\"89\":1,\"106\":1,\"120\":1,\"147\":1,\"156\":2,\"189\":1,\"210\":1,\"275\":1,\"280\":1,\"301\":5,\"305\":1,\"313\":1,\"323\":1,\"324\":1,\"329\":1,\"333\":3,\"335\":1,\"337\":1,\"379\":4,\"403\":8,\"404\":2,\"405\":1,\"406\":3,\"414\":2,\"444\":1,\"445\":1,\"446\":1,\"450\":1,\"451\":1,\"504\":2,\"506\":2,\"543\":1,\"547\":3,\"553\":1,\"621\":2,\"626\":2,\"627\":4,\"628\":2,\"633\":1}}],[\"宽度和高度会包括内边距和边框\",{\"1\":{\"53\":1}}],[\"宽度\",{\"1\":{\"38\":1}}],[\"清除浏览器缓存可能导致失效\",{\"1\":{\"555\":1}}],[\"清除定时器\",{\"1\":{\"530\":1}}],[\"清除浮动\",{\"0\":{\"57\":1},\"1\":{\"44\":1}}],[\"清除边界外的区域\",{\"1\":{\"38\":1}}],[\"清除内容周围的区域\",{\"1\":{\"38\":1}}],[\"围绕内边距和内容的边框\",{\"1\":{\"38\":1}}],[\"框的内容\",{\"1\":{\"38\":1}}],[\"内存中还是原来对象或者数组的引用\",{\"1\":{\"330\":1}}],[\"内层表示要定义一个\",{\"1\":{\"305\":1}}],[\"内层的\",{\"1\":{\"238\":1}}],[\"内联样式不能使用字符串定义\",{\"1\":{\"305\":1}}],[\"内部会将多个标签包含在一个\",{\"1\":{\"644\":1}}],[\"内部基于\",{\"1\":{\"628\":1}}],[\"内部使用了\",{\"1\":{\"627\":1}}],[\"内部返回的对象中\",{\"1\":{\"609\":1}}],[\"内部可见\",{\"1\":{\"534\":1}}],[\"内部\",{\"1\":{\"204\":1}}],[\"内部只能包含\",{\"1\":{\"202\":1}}],[\"内部通常是列表\",{\"1\":{\"202\":1}}],[\"内部包含的控件不可用\",{\"1\":{\"193\":1}}],[\"内置指令\",{\"0\":{\"475\":1}}],[\"内置的自动缓存\",{\"1\":{\"344\":1}}],[\"内置的\",{\"0\":{\"299\":1},\"1\":{\"296\":1}}],[\"内置对象\",{\"0\":{\"214\":1,\"467\":1}}],[\"内置类型\",{\"0\":{\"118\":1}}],[\"内置支持两种形式的生成器方法\",{\"1\":{\"109\":1}}],[\"内核的浏览器需要在\",{\"1\":{\"44\":1}}],[\"内容为$\",{\"1\":{\"631\":1}}],[\"内容改变了\",{\"1\":{\"535\":1}}],[\"内容与调用\",{\"1\":{\"389\":1}}],[\"内容是在\",{\"1\":{\"287\":1}}],[\"内容是函数的源码\",{\"1\":{\"225\":1}}],[\"内容在元素框外渲染\",{\"1\":{\"55\":1}}],[\"内容\",{\"1\":{\"38\":1,\"337\":1,\"344\":1}}],[\"内边距是透明的\",{\"1\":{\"38\":1}}],[\"内边距\",{\"0\":{\"36\":1},\"1\":{\"38\":1}}],[\"和配置\",{\"1\":{\"657\":1}}],[\"和全局前置守卫相同\",{\"1\":{\"604\":1}}],[\"和插值语法可以使用过滤器\",{\"1\":{\"529\":1}}],[\"和其他访问修饰符同时存在的话\",{\"1\":{\"420\":1}}],[\"和计算所得项\",{\"1\":{\"414\":1}}],[\"和服务端渲染\",{\"1\":{\"366\":1}}],[\"和空\",{\"1\":{\"335\":1}}],[\"和一个相同的单独的\",{\"1\":{\"658\":2}}],[\"和一个\",{\"1\":{\"331\":1}}],[\"和状态更新函数类似\",{\"1\":{\"326\":1}}],[\"和字符串互相转换\",{\"1\":{\"119\":1}}],[\"和\",{\"0\":{\"52\":1,\"145\":1,\"148\":1,\"160\":1,\"283\":1,\"289\":1,\"325\":1},\"1\":{\"37\":1,\"41\":1,\"42\":1,\"59\":1,\"64\":1,\"65\":1,\"67\":1,\"94\":2,\"96\":1,\"119\":1,\"122\":2,\"153\":1,\"176\":1,\"188\":1,\"193\":2,\"209\":1,\"212\":1,\"213\":1,\"215\":1,\"242\":1,\"269\":1,\"286\":1,\"297\":1,\"313\":1,\"331\":1,\"334\":1,\"338\":1,\"344\":2,\"347\":3,\"356\":1,\"360\":1,\"368\":1,\"378\":2,\"379\":2,\"387\":1,\"405\":1,\"408\":1,\"456\":2,\"459\":2,\"478\":1,\"503\":1,\"517\":1,\"547\":2,\"555\":1,\"605\":1,\"614\":1,\"616\":1,\"617\":3,\"619\":1,\"640\":1,\"642\":1,\"652\":1,\"658\":1}}],[\"使其永远不会再成为响应式对象\",{\"1\":{\"650\":1}}],[\"使不展示的组件保持挂载不销毁\",{\"1\":{\"596\":1}}],[\"使\",{\"1\":{\"570\":1}}],[\"使库可以同时支持多种模块加载方案\",{\"1\":{\"461\":1}}],[\"使代码更简洁\",{\"1\":{\"419\":1}}],[\"使得返回的数据被修改时\",{\"1\":{\"642\":1}}],[\"使得点击添加后创建\",{\"1\":{\"380\":1}}],[\"使得能够展示所有\",{\"1\":{\"379\":1}}],[\"使得能够处理\",{\"1\":{\"269\":1}}],[\"使元素保持其宽度\",{\"1\":{\"36\":1}}],[\"使用键值对形式传递\",{\"1\":{\"653\":1}}],[\"使用键值对注册\",{\"1\":{\"489\":1}}],[\"使用一对\",{\"1\":{\"652\":1}}],[\"使用一个\",{\"1\":{\"243\":1}}],[\"使用一个变量固定\",{\"1\":{\"238\":1}}],[\"使用选择器写法\",{\"1\":{\"645\":1}}],[\"使用组合式\",{\"0\":{\"640\":1}}],[\"使用组件\",{\"1\":{\"489\":1}}],[\"使用角度\",{\"1\":{\"632\":1}}],[\"使用前端路由\",{\"1\":{\"609\":1}}],[\"使用缓存后\",{\"1\":{\"598\":1,\"599\":1}}],[\"使用逗号分隔\",{\"1\":{\"596\":1}}],[\"使用逗号分隔每个选择器\",{\"1\":{\"64\":1}}],[\"使用$\",{\"1\":{\"578\":1}}],[\"使用方法基本一致\",{\"1\":{\"573\":1}}],[\"使用插件\",{\"1\":{\"569\":2}}],[\"使用如下命令将现有配置输出到指定文件\",{\"1\":{\"561\":1}}],[\"使用render可以在这个环境中完成模板渲染\",{\"1\":{\"560\":1}}],[\"使用简写形式\",{\"1\":{\"552\":1}}],[\"使用以下非变更方法时\",{\"1\":{\"539\":1}}],[\"使用事件总线\",{\"0\":{\"526\":1}}],[\"使用事件的捕获模式\",{\"1\":{\"521\":1}}],[\"使用时要加前缀\",{\"1\":{\"547\":1}}],[\"使用时\",{\"1\":{\"522\":1}}],[\"使用按键名时要注意不能使用驼峰命名\",{\"1\":{\"522\":1}}],[\"使用stop修饰后\",{\"1\":{\"521\":1}}],[\"使用正则表达式对节点的内容进行匹配\",{\"1\":{\"517\":1}}],[\"使用中间变量存储此节点的内容\",{\"1\":{\"517\":1}}],[\"使用原生事件触发这个事件并在这个方法中调用自定义的事件\",{\"1\":{\"502\":1}}],[\"使用场景\",{\"1\":{\"502\":1,\"650\":2}}],[\"使用数组传递所有要解绑的事件\",{\"1\":{\"499\":1}}],[\"使用修饰符\",{\"1\":{\"496\":1}}],[\"使用接口来定义对象的类型\",{\"1\":{\"441\":1}}],[\"使用下面的配置关闭严格模式\",{\"1\":{\"437\":1}}],[\"使用下面的代码获取一个实例\",{\"1\":{\"408\":1}}],[\"使用下面的代码可以实现\",{\"1\":{\"250\":1}}],[\"使用父组件管理\",{\"1\":{\"408\":1}}],[\"使用默认的\",{\"1\":{\"388\":1}}],[\"使用星号\",{\"1\":{\"374\":1}}],[\"使用自定义ref\",{\"1\":{\"651\":1}}],[\"使用自定义\",{\"1\":{\"358\":1}}],[\"使用自动生成的钩子\",{\"1\":{\"344\":1}}],[\"使用懒加载\",{\"0\":{\"352\":1}}],[\"使用的是缓存的数据\",{\"1\":{\"345\":1}}],[\"使用异步引入则可以依次渲染\",{\"1\":{\"646\":1}}],[\"使用异步引入\",{\"1\":{\"626\":1}}],[\"使用异步\",{\"1\":{\"340\":1}}],[\"使用了\",{\"1\":{\"334\":1,\"584\":1}}],[\"使用另一个进程下载脚本\",{\"1\":{\"227\":1}}],[\"使用注意点\",{\"1\":{\"152\":1}}],[\"使用关键字声明变量\",{\"1\":{\"143\":1}}],[\"使用三个单引号或者三个双引号创建多行字符串\",{\"1\":{\"120\":1}}],[\"使用类型参数化的构造函数\",{\"0\":{\"113\":1}}],[\"使用集合字面量\",{\"0\":{\"112\":1}}],[\"使用泛型方法\",{\"0\":{\"116\":1}}],[\"使用泛型\",{\"0\":{\"111\":1}}],[\"使用常量构造函数\",{\"1\":{\"72\":1}}],[\"使用构造函数\",{\"0\":{\"72\":1}}],[\"使用色相\",{\"1\":{\"43\":1}}],[\"使用十六进制指定颜色\",{\"1\":{\"42\":1}}],[\"使用公式\",{\"1\":{\"40\":1,\"41\":1}}],[\"使用\",{\"0\":{\"94\":1,\"277\":1,\"279\":1,\"319\":1,\"322\":1,\"324\":1,\"359\":1,\"368\":1,\"558\":1,\"573\":1,\"576\":1,\"653\":1,\"654\":1,\"660\":1,\"661\":1},\"1\":{\"15\":2,\"18\":1,\"32\":1,\"52\":1,\"53\":1,\"59\":8,\"64\":1,\"67\":2,\"69\":3,\"73\":1,\"83\":1,\"87\":1,\"91\":1,\"94\":1,\"96\":2,\"100\":1,\"117\":1,\"120\":1,\"140\":1,\"145\":1,\"154\":1,\"158\":1,\"213\":1,\"223\":1,\"224\":1,\"226\":1,\"230\":1,\"244\":1,\"262\":1,\"269\":1,\"279\":3,\"301\":1,\"325\":2,\"332\":1,\"334\":2,\"337\":1,\"344\":2,\"345\":1,\"356\":1,\"366\":1,\"381\":1,\"393\":1,\"397\":1,\"457\":1,\"459\":1,\"460\":2,\"489\":2,\"496\":1,\"501\":1,\"502\":2,\"507\":1,\"520\":1,\"522\":1,\"529\":1,\"534\":2,\"535\":1,\"551\":1,\"552\":1,\"577\":1,\"596\":2,\"608\":1,\"616\":1,\"617\":1,\"622\":1,\"627\":3,\"631\":1,\"642\":2,\"646\":2,\"648\":2}}],[\"使用配置对象时\",{\"1\":{\"15\":1}}],[\"当渲染具有不可变数据源的大列表时\",{\"1\":{\"650\":1}}],[\"当被监视的属性发生变化时\",{\"1\":{\"621\":1}}],[\"当应用变得非常复杂时\",{\"1\":{\"619\":1}}],[\"当要获取加工后的\",{\"1\":{\"615\":1}}],[\"当创建一个\",{\"1\":{\"609\":1}}],[\"当切换到新路由时\",{\"1\":{\"609\":1}}],[\"当用户访问\",{\"1\":{\"582\":1}}],[\"当指令与元素成功绑定时调用\",{\"1\":{\"546\":1,\"548\":1}}],[\"当视图发生变化\",{\"1\":{\"510\":1}}],[\"当数据发生变化时\",{\"1\":{\"535\":1}}],[\"当数据发生变化\",{\"1\":{\"510\":1}}],[\"当依赖的数据发生改变时会被再次调用\",{\"1\":{\"505\":1}}],[\"当请求的资源在\",{\"1\":{\"485\":1}}],[\"当请求就绪后再次渲染组件\",{\"1\":{\"345\":1}}],[\"当我们需要依赖一个全局变量的声明文件时\",{\"1\":{\"465\":2}}],[\"当我们在书写一个全局变量的声明文件时\",{\"1\":{\"465\":1}}],[\"当我们确定一个属性或者方法存在时\",{\"1\":{\"451\":1}}],[\"当全局变量是一个类的时候\",{\"1\":{\"459\":1}}],[\"当构造函数修饰为\",{\"1\":{\"418\":2}}],[\"当满足以下条件时\",{\"1\":{\"414\":1}}],[\"当添加越界的元素时\",{\"1\":{\"412\":1}}],[\"当存在多个变量时\",{\"1\":{\"403\":1}}],[\"当再次渲染这个组件时会从头开始渲染而不会考虑之前对局部变量的任何更改\",{\"1\":{\"403\":1}}],[\"当组件发生非\",{\"1\":{\"379\":1}}],[\"当组件因为\",{\"1\":{\"313\":1}}],[\"当元素发生交互\",{\"1\":{\"363\":1}}],[\"当需要直接操作一个\",{\"1\":{\"361\":1}}],[\"当然也就必须使用三斜线指令来引入了\",{\"1\":{\"465\":1}}],[\"当然也可以反柯里化\",{\"1\":{\"275\":1}}],[\"当然我们也可以忽略上面的\",{\"1\":{\"373\":1}}],[\"当然为了方便也可以直接用\",{\"1\":{\"366\":1}}],[\"当然这样的方式要不断构造\",{\"1\":{\"358\":1}}],[\"当然这种手动刷新的机制在很多时候不太合适\",{\"1\":{\"345\":1}}],[\"当然操作缓存仍然要已不可变的形式完成\",{\"1\":{\"351\":1}}],[\"当然\",{\"1\":{\"329\":1,\"351\":1}}],[\"当发生事件时\",{\"1\":{\"329\":1}}],[\"当使用第三方库时\",{\"1\":{\"455\":1}}],[\"当使用泛型时没有在代码中直接指定类型参数\",{\"1\":{\"431\":1}}],[\"当使用\",{\"1\":{\"325\":1,\"397\":1,\"459\":1}}],[\"当状态更新逻辑足够简单时\",{\"1\":{\"325\":1}}],[\"当多个事件处理器以相似的方式修改\",{\"1\":{\"325\":1}}],[\"当返回为\",{\"1\":{\"301\":1}}],[\"当这个组件被渲染时\",{\"1\":{\"286\":1}}],[\"当项目逐渐增大\",{\"1\":{\"207\":1}}],[\"当前路由改变但是该组件被复用时调用\",{\"1\":{\"605\":1}}],[\"当前枚举成员的值为上一个枚举成员的值加\",{\"1\":{\"414\":1}}],[\"当前有\",{\"1\":{\"387\":1}}],[\"当前没有正在发生的导航\",{\"1\":{\"387\":1}}],[\"当前登录用户信息保存在\",{\"1\":{\"297\":1}}],[\"当前账户\",{\"1\":{\"282\":1}}],[\"当前\",{\"1\":{\"238\":1}}],[\"当前变量\",{\"1\":{\"215\":1}}],[\"当前成员\",{\"1\":{\"215\":1}}],[\"当前元素\",{\"1\":{\"215\":1}}],[\"当前位置\",{\"1\":{\"215\":4}}],[\"当前作者年龄是\",{\"1\":{\"208\":2}}],[\"当前作者是\",{\"1\":{\"208\":2}}],[\"当前数字是\",{\"1\":{\"208\":1}}],[\"当前窗口打开\",{\"1\":{\"197\":1}}],[\"当前值\",{\"1\":{\"193\":1}}],[\"当前类的构造函数\",{\"1\":{\"79\":1}}],[\"当\",{\"1\":{\"193\":1,\"354\":1,\"404\":1,\"440\":1,\"587\":1}}],[\"当为这个方法传入数组时\",{\"1\":{\"169\":1}}],[\"当函数执行的时候\",{\"1\":{\"151\":1}}],[\"当且仅当在以下几个场景下\",{\"1\":{\"465\":1}}],[\"当且仅当\",{\"1\":{\"128\":1}}],[\"当你需要延迟地生成一连串的值时\",{\"1\":{\"109\":1}}],[\"当一个第三方库没有提供声明文件时\",{\"1\":{\"458\":1}}],[\"当一个表达式满足下面条件之一时\",{\"1\":{\"414\":1}}],[\"当一个\",{\"1\":{\"67\":1,\"368\":1}}],[\"当一个元素包含在另一个元素中时\",{\"1\":{\"35\":1}}],[\"当调用一个返回\",{\"1\":{\"67\":1}}],[\"当浏览器窗口小于元素宽度时\",{\"1\":{\"52\":1}}],[\"当两个垂直外边距相遇时\",{\"1\":{\"35\":1}}],[\"边距继承自父元素\",{\"1\":{\"35\":1}}],[\"边框颜色\",{\"1\":{\"33\":1}}],[\"边框宽度\",{\"1\":{\"33\":1}}],[\"边框样式\",{\"1\":{\"33\":1}}],[\"边框\",{\"0\":{\"33\":1},\"1\":{\"36\":1,\"37\":1,\"38\":1}}],[\"盒子模型\",{\"0\":{\"34\":1,\"38\":1}}],[\"圆角边框\",{\"1\":{\"33\":1}}],[\"顺序由浏览器指定\",{\"1\":{\"192\":1}}],[\"顺序必须是\",{\"1\":{\"145\":1}}],[\"顺序无所谓\",{\"1\":{\"61\":1}}],[\"顺序是\",{\"1\":{\"33\":1}}],[\"顺序为\",{\"1\":{\"32\":1}}],[\"wheel\",{\"1\":{\"521\":1}}],[\"wheel鼠标滚轮\",{\"1\":{\"521\":1}}],[\"while\",{\"0\":{\"136\":2},\"1\":{\"109\":4,\"136\":2,\"147\":1,\"301\":1,\"517\":1}}],[\"white\",{\"1\":{\"65\":1}}],[\"watcheffect\",{\"0\":{\"637\":1},\"1\":{\"637\":2}}],[\"watch\",{\"1\":{\"492\":2,\"536\":1,\"537\":1,\"618\":1,\"619\":1,\"621\":3,\"622\":3,\"623\":1,\"636\":6,\"637\":4}}],[\"warn\",{\"1\":{\"27\":1,\"235\":1}}],[\"wrold\",{\"1\":{\"560\":1}}],[\"writable属性共存\",{\"1\":{\"514\":1}}],[\"writable\",{\"1\":{\"514\":1}}],[\"write\",{\"1\":{\"243\":1}}],[\"writehead\",{\"1\":{\"243\":1}}],[\"wrap\",{\"1\":{\"45\":3}}],[\"wbr\",{\"1\":{\"204\":1}}],[\"www\",{\"1\":{\"190\":1,\"193\":2,\"521\":1,\"553\":1}}],[\"wget\",{\"1\":{\"140\":2}}],[\"w\",{\"1\":{\"108\":4}}],[\"world项目\",{\"1\":{\"559\":1}}],[\"world<\",{\"1\":{\"293\":1,\"294\":1}}],[\"world\",{\"0\":{\"265\":1,\"291\":1,\"470\":1,\"559\":1},\"1\":{\"103\":1,\"135\":2,\"151\":1,\"169\":1,\"197\":2,\"246\":1,\"265\":1,\"294\":1,\"305\":1,\"491\":1,\"532\":1,\"534\":1,\"553\":1,\"560\":1,\"562\":1}}],[\"word\",{\"1\":{\"65\":1}}],[\"win\",{\"1\":{\"522\":1}}],[\"windows\",{\"1\":{\"522\":1}}],[\"window\",{\"1\":{\"230\":2,\"238\":1,\"451\":1,\"555\":1,\"556\":1,\"631\":1,\"641\":3}}],[\"will\",{\"1\":{\"128\":1,\"269\":2,\"345\":1}}],[\"with\",{\"1\":{\"94\":6,\"224\":2}}],[\"width=\",{\"1\":{\"550\":1,\"551\":4}}],[\"width=device\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"width\",{\"0\":{\"52\":2},\"1\":{\"33\":2,\"36\":1,\"37\":1,\"52\":2,\"61\":2,\"196\":4,\"274\":4,\"286\":1,\"287\":1,\"290\":1,\"314\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":2,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":2,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1,\"645\":1}}],[\"wuhu2\",{\"1\":{\"255\":2}}],[\"wuhu\",{\"1\":{\"68\":1,\"96\":2,\"243\":2,\"255\":4}}],[\"wednesday\",{\"1\":{\"413\":2}}],[\"webpack\",{\"1\":{\"268\":1,\"269\":2}}],[\"web\",{\"1\":{\"242\":1,\"366\":1}}],[\"webvtt\",{\"1\":{\"200\":1}}],[\"webkit\",{\"1\":{\"44\":2}}],[\"weekday\",{\"1\":{\"413\":14}}],[\"week\",{\"1\":{\"193\":1}}],[\"weight\",{\"1\":{\"47\":1,\"434\":6}}],[\"左键\",{\"1\":{\"523\":1}}],[\"左边是参数类型\",{\"1\":{\"445\":1}}],[\"左边的操作对象不能为\",{\"1\":{\"132\":1}}],[\"左边框\",{\"1\":{\"38\":1}}],[\"左右对齐\",{\"1\":{\"59\":1}}],[\"左侧调用者不为空时\",{\"1\":{\"132\":1}}],[\"左侧或右侧均不允许浮动元素\",{\"1\":{\"57\":1}}],[\"左侧不允许浮动元素\",{\"1\":{\"57\":1}}],[\"左外边距\",{\"1\":{\"38\":1}}],[\"左内边距\",{\"1\":{\"38\":1}}],[\"左的外边距\",{\"1\":{\"35\":1}}],[\"左\",{\"1\":{\"33\":1,\"522\":1}}],[\"下一帧被移除\",{\"1\":{\"658\":1}}],[\"下默认为\",{\"1\":{\"243\":2}}],[\"下载时不会阻塞渲染\",{\"1\":{\"227\":1}}],[\"下面使用\",{\"1\":{\"517\":1}}],[\"下面调用\",{\"1\":{\"517\":1}}],[\"下面将指定容器内的所有元素添加到\",{\"1\":{\"517\":1}}],[\"下面一一演示\",{\"1\":{\"385\":1}}],[\"下面做一个例子\",{\"1\":{\"378\":1}}],[\"下面创建一个\",{\"1\":{\"366\":1}}],[\"下面改造上面的手动刷新例子\",{\"1\":{\"345\":1}}],[\"下面改造此前的\",{\"1\":{\"283\":1}}],[\"下面的代码导出了\",{\"1\":{\"343\":1}}],[\"下面的函数可以将一个函数柯里化\",{\"1\":{\"275\":1}}],[\"下面定义一个\",{\"1\":{\"334\":1}}],[\"下面编写一个计数器示例\",{\"1\":{\"333\":1}}],[\"下面是仅使用\",{\"1\":{\"353\":1}}],[\"下面是使用\",{\"1\":{\"338\":1}}],[\"下面是对三个接口调用的封装\",{\"1\":{\"338\":1}}],[\"下面是结合\",{\"1\":{\"331\":1}}],[\"下面是一个例子\",{\"1\":{\"313\":1,\"360\":1}}],[\"下面这些内容会被转为\",{\"1\":{\"221\":1}}],[\"下面两组语句都会报错\",{\"1\":{\"122\":1}}],[\"下标\",{\"1\":{\"204\":1}}],[\"下划线\",{\"1\":{\"190\":1,\"204\":1}}],[\"下外边距\",{\"1\":{\"38\":1}}],[\"下边框\",{\"1\":{\"38\":1}}],[\"下内边距\",{\"1\":{\"38\":1}}],[\"下\",{\"1\":{\"33\":1,\"35\":1,\"522\":1}}],[\"右键\",{\"1\":{\"523\":1}}],[\"右边是返回值类型\",{\"1\":{\"445\":1}}],[\"右边是构造函数\",{\"1\":{\"220\":1}}],[\"右边已有的属性名\",{\"1\":{\"186\":1}}],[\"右边框\",{\"1\":{\"38\":1}}],[\"右侧不允许浮动元素\",{\"1\":{\"57\":1}}],[\"右外边距\",{\"1\":{\"38\":1}}],[\"右内边距\",{\"1\":{\"38\":1}}],[\"右\",{\"1\":{\"33\":1,\"35\":1,\"522\":1}}],[\"上述代码用于修改页面标题\",{\"1\":{\"603\":1}}],[\"上述代码中的\",{\"1\":{\"492\":1}}],[\"上述写法中\",{\"1\":{\"552\":1}}],[\"上一个虚拟节点\",{\"1\":{\"547\":1}}],[\"上文中\",{\"1\":{\"539\":1}}],[\"上不会出现\",{\"1\":{\"428\":1}}],[\"上的任何内容\",{\"1\":{\"356\":1}}],[\"上有增加\",{\"1\":{\"343\":1}}],[\"上面\",{\"1\":{\"393\":1}}],[\"上面如果使用\",{\"1\":{\"379\":1}}],[\"上面使用\",{\"1\":{\"379\":1}}],[\"上面可以看到\",{\"1\":{\"344\":1}}],[\"上面是一个简单的表单\",{\"1\":{\"337\":1}}],[\"上面组件的工作流程可以用下面的步骤概括\",{\"1\":{\"329\":1}}],[\"上面的这个\",{\"1\":{\"378\":1}}],[\"上面的例子也可以用不支持\",{\"1\":{\"369\":1}}],[\"上面的例子中使用了\",{\"1\":{\"338\":1}}],[\"上面的例子中\",{\"1\":{\"338\":1,\"351\":1,\"368\":1}}],[\"上面的文章管理中使用了\",{\"1\":{\"353\":1}}],[\"上面的组件中\",{\"1\":{\"335\":1}}],[\"上面的组件中包含下面的部分\",{\"1\":{\"329\":1}}],[\"上面的流程就是单项数据流\",{\"1\":{\"329\":1}}],[\"上面的代码不会修改页面上现实的数值\",{\"1\":{\"403\":1}}],[\"上面的代码会报错\",{\"1\":{\"306\":1}}],[\"上面的代码中是向\",{\"1\":{\"379\":1}}],[\"上面的代码中限制了\",{\"1\":{\"322\":1}}],[\"上面的代码中\",{\"1\":{\"94\":1,\"362\":1,\"394\":1}}],[\"上面的程序会创建一个\",{\"1\":{\"294\":1}}],[\"上面的\",{\"1\":{\"266\":1,\"334\":1,\"379\":1}}],[\"上面代码基于\",{\"1\":{\"209\":1}}],[\"上下载\",{\"1\":{\"292\":1}}],[\"上下文\",{\"0\":{\"242\":1},\"1\":{\"633\":1}}],[\"上下文与动态内容\",{\"0\":{\"208\":1}}],[\"上下外边距碰到了一起也会合并\",{\"1\":{\"35\":1}}],[\"上下外边距也会发生合并\",{\"1\":{\"35\":1}}],[\"上标\",{\"1\":{\"204\":1}}],[\"上层窗口打开\",{\"1\":{\"197\":1}}],[\"上外边距\",{\"1\":{\"38\":1}}],[\"上边框\",{\"1\":{\"38\":1}}],[\"上内边距\",{\"1\":{\"38\":1}}],[\"上\",{\"1\":{\"33\":1,\"362\":1,\"522\":1,\"657\":1}}],[\"滚动行为\",{\"0\":{\"609\":1}}],[\"滚动\",{\"1\":{\"32\":1}}],[\"设为true时\",{\"1\":{\"621\":1}}],[\"设为\",{\"1\":{\"32\":2,\"192\":1,\"229\":2}}],[\"设置全局总线\",{\"0\":{\"525\":1}}],[\"设置目标服务器\",{\"1\":{\"486\":1}}],[\"设置请求前缀\",{\"1\":{\"486\":1}}],[\"设置状态更新并重新渲染后的回调函数\",{\"1\":{\"406\":1}}],[\"设置给\",{\"1\":{\"379\":1}}],[\"设置其中一个按钮不传\",{\"1\":{\"379\":1}}],[\"设置默认组件\",{\"0\":{\"376\":1}}],[\"设置\",{\"1\":{\"193\":2,\"460\":1}}],[\"设置文本水平对齐\",{\"1\":{\"65\":1}}],[\"设置元素的宽度将防止其延伸到容器的边缘\",{\"1\":{\"59\":1}}],[\"设置四个属性将导致元素偏离正常位置\",{\"1\":{\"54\":1}}],[\"设置块级元素的\",{\"1\":{\"52\":1}}],[\"设置为\",{\"1\":{\"44\":1,\"375\":1,\"388\":2}}],[\"设置背景图像高度和宽度\",{\"1\":{\"32\":1}}],[\"设置重复的方向\",{\"1\":{\"32\":1}}],[\"设置超时等\",{\"1\":{\"13\":1}}],[\"固定\",{\"1\":{\"32\":1}}],[\"把\",{\"1\":{\"516\":1}}],[\"把每一次的执行结果组成一个新数组返回\",{\"1\":{\"215\":1}}],[\"把图像扩展至最大尺寸\",{\"1\":{\"32\":1}}],[\"把背景图片扩展至足够大\",{\"1\":{\"32\":1}}],[\"裁剪\",{\"1\":{\"32\":1}}],[\"相当于getter\",{\"1\":{\"506\":1}}],[\"相当于\",{\"1\":{\"434\":2,\"633\":3}}],[\"相当于定位符\",{\"1\":{\"213\":1}}],[\"相关\",{\"1\":{\"530\":2}}],[\"相关的\",{\"1\":{\"358\":1}}],[\"相关依赖\",{\"1\":{\"269\":1}}],[\"相同的\",{\"1\":{\"535\":1}}],[\"相同的输入总是产生相同的输出\",{\"1\":{\"403\":1}}],[\"相同的国际化定义\",{\"1\":{\"207\":1}}],[\"相同站点\",{\"1\":{\"243\":1}}],[\"相同\",{\"1\":{\"192\":1,\"343\":1}}],[\"相同参数值构造的编译时常量是一个对象\",{\"1\":{\"72\":1}}],[\"相邻兄弟选择器\",{\"1\":{\"64\":1}}],[\"相比于\",{\"1\":{\"461\":1}}],[\"相比\",{\"1\":{\"58\":1,\"360\":1,\"366\":1}}],[\"相比非别名方法\",{\"1\":{\"18\":1}}],[\"相对路径被解析为以路由为相对\",{\"1\":{\"381\":1}}],[\"相对于假设开发者总是希望单独的\",{\"1\":{\"658\":1}}],[\"相对于内容框来定位\",{\"1\":{\"32\":1}}],[\"相对于边框盒来定位\",{\"1\":{\"32\":1}}],[\"相对与内边距框来定位\",{\"1\":{\"32\":1}}],[\"相对定位\",{\"1\":{\"32\":1}}],[\"rootstate\",{\"1\":{\"619\":1}}],[\"rootreducer\",{\"1\":{\"353\":4,\"355\":1,\"356\":1}}],[\"root\",{\"1\":{\"300\":1,\"337\":1,\"366\":1,\"369\":1,\"461\":2,\"476\":2,\"477\":2,\"478\":2,\"479\":2,\"480\":2,\"482\":2,\"483\":1,\"489\":2,\"491\":2,\"494\":2,\"504\":2,\"506\":1,\"507\":2,\"509\":2,\"517\":2,\"518\":4,\"520\":2,\"521\":2,\"522\":2,\"529\":2,\"532\":1,\"534\":2,\"536\":3,\"537\":2,\"538\":2,\"539\":2,\"548\":2,\"553\":2,\"621\":2,\"622\":1}}],[\"route\",{\"0\":{\"370\":1},\"1\":{\"376\":1,\"377\":1,\"586\":1,\"588\":6,\"608\":1}}],[\"route>\",{\"1\":{\"369\":1}}],[\"routes>\",{\"1\":{\"369\":1}}],[\"routes\",{\"1\":{\"260\":3,\"338\":1,\"376\":1,\"576\":1,\"577\":1,\"580\":2,\"581\":3,\"582\":1,\"583\":1,\"584\":1,\"604\":1,\"608\":1,\"609\":1}}],[\"router实现\",{\"1\":{\"369\":1}}],[\"routerprovider\",{\"0\":{\"367\":1}}],[\"router=\",{\"1\":{\"337\":1,\"366\":1}}],[\"routerv2\",{\"1\":{\"260\":3,\"262\":2}}],[\"routerv1\",{\"1\":{\"260\":3,\"261\":1}}],[\"router\",{\"0\":{\"364\":1,\"366\":1,\"369\":1,\"574\":1,\"589\":1},\"1\":{\"259\":3,\"260\":9,\"262\":1,\"336\":1,\"337\":3,\"338\":9,\"364\":2,\"366\":10,\"367\":2,\"368\":1,\"371\":1,\"372\":2,\"376\":1,\"377\":1,\"378\":1,\"379\":3,\"390\":2,\"391\":1,\"399\":2,\"575\":1,\"576\":11,\"577\":2,\"578\":2,\"580\":1,\"581\":3,\"582\":1,\"583\":5,\"584\":2,\"586\":1,\"589\":3,\"591\":1,\"592\":1,\"596\":5,\"602\":3,\"603\":1,\"606\":2,\"608\":1,\"609\":2,\"610\":1}}],[\"round\",{\"1\":{\"217\":1}}],[\"rowkey=\",{\"1\":{\"337\":1,\"343\":1,\"344\":1,\"345\":2,\"352\":1}}],[\"rowspan\",{\"1\":{\"203\":1}}],[\"row\",{\"1\":{\"45\":2}}],[\"rb\",{\"1\":{\"204\":1}}],[\"rtk\",{\"0\":{\"344\":1,\"348\":1},\"1\":{\"344\":4,\"345\":2,\"348\":2,\"351\":3}}],[\"rt\",{\"1\":{\"204\":1}}],[\"rtl\",{\"1\":{\"192\":1}}],[\"rp\",{\"1\":{\"204\":1}}],[\"rules=\",{\"1\":{\"337\":2,\"344\":2}}],[\"ruby\",{\"1\":{\"204\":1}}],[\"runtime\",{\"1\":{\"560\":1}}],[\"runtimetype==type这样表达式做条件语句\",{\"1\":{\"73\":1}}],[\"runtimetype\",{\"1\":{\"73\":2}}],[\"running\",{\"1\":{\"246\":1,\"390\":1,\"394\":1}}],[\"run\",{\"1\":{\"138\":2,\"452\":1,\"454\":1,\"459\":3,\"460\":1,\"559\":1,\"561\":1}}],[\"runes\",{\"0\":{\"125\":1},\"1\":{\"125\":1}}],[\"random\",{\"1\":{\"217\":1,\"247\":4,\"482\":1}}],[\"range\",{\"1\":{\"193\":1}}],[\"radio2\",{\"1\":{\"510\":1}}],[\"radio1\",{\"1\":{\"510\":1}}],[\"radio\",{\"1\":{\"193\":1,\"510\":4,\"512\":1}}],[\"radius\",{\"1\":{\"33\":1,\"477\":2,\"482\":1,\"539\":2}}],[\"r\",{\"1\":{\"120\":2}}],[\"rrggbb\",{\"1\":{\"42\":1}}],[\"rgba\",{\"0\":{\"41\":1},\"1\":{\"41\":1,\"645\":1}}],[\"rgb值\",{\"1\":{\"40\":1}}],[\"rgb\",{\"0\":{\"40\":1},\"1\":{\"40\":1,\"41\":1}}],[\"right\",{\"1\":{\"32\":1,\"54\":1,\"56\":1,\"57\":1,\"482\":1,\"522\":1,\"523\":1,\"645\":1}}],[\"registry\",{\"1\":{\"559\":1}}],[\"receive\",{\"1\":{\"496\":2,\"501\":1}}],[\"rewrite\",{\"1\":{\"339\":1}}],[\"reflect\",{\"1\":{\"631\":9,\"632\":1}}],[\"ref函数\",{\"0\":{\"627\":1}}],[\"ref1\",{\"1\":{\"496\":3}}],[\"refs\",{\"1\":{\"361\":1}}],[\"refdemo\",{\"1\":{\"360\":2}}],[\"refresh\",{\"1\":{\"345\":2}}],[\"refetch\",{\"1\":{\"345\":4}}],[\"reference\",{\"1\":{\"417\":1}}],[\"referrer\",{\"1\":{\"258\":1}}],[\"refer\",{\"1\":{\"108\":2}}],[\"ref=\",{\"1\":{\"286\":2,\"287\":1,\"290\":1,\"314\":1,\"361\":4,\"362\":4,\"363\":1,\"496\":1,\"502\":1,\"562\":1}}],[\"ref\",{\"0\":{\"360\":1,\"361\":1,\"362\":1,\"562\":1,\"632\":1},\"1\":{\"286\":9,\"287\":4,\"290\":4,\"360\":10,\"361\":8,\"362\":12,\"363\":1,\"496\":1,\"502\":1,\"562\":1,\"627\":6,\"632\":4,\"633\":1,\"636\":4,\"640\":1,\"642\":5,\"645\":2,\"651\":1,\"653\":2,\"655\":2}}],[\"renderitem\",{\"1\":{\"337\":2,\"343\":1,\"344\":2,\"345\":4,\"351\":1,\"352\":1}}],[\"renderitem=\",{\"1\":{\"337\":1,\"343\":1,\"344\":1,\"345\":2,\"352\":1}}],[\"rendering\",{\"1\":{\"301\":1,\"390\":1,\"395\":1,\"399\":1}}],[\"render\",{\"0\":{\"311\":1,\"560\":1},\"1\":{\"272\":2,\"273\":2,\"274\":5,\"293\":1,\"294\":1,\"300\":1,\"305\":1,\"306\":2,\"307\":1,\"310\":2,\"312\":1,\"313\":3,\"314\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":3,\"322\":1,\"337\":1,\"360\":3,\"361\":3,\"366\":1,\"367\":1,\"369\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":4,\"525\":1,\"560\":3,\"576\":1,\"613\":1}}],[\"remain\",{\"1\":{\"269\":1}}],[\"removeitem\",{\"1\":{\"556\":1,\"557\":1}}],[\"remove\",{\"1\":{\"255\":1,\"316\":1}}],[\"removeeventlistener\",{\"1\":{\"229\":1,\"641\":1}}],[\"reqid\",{\"1\":{\"255\":1}}],[\"req\",{\"1\":{\"243\":1,\"251\":7,\"252\":4,\"338\":6}}],[\"requst\",{\"1\":{\"379\":1}}],[\"require\",{\"1\":{\"243\":4,\"246\":1,\"247\":1,\"249\":1,\"250\":1,\"252\":3,\"260\":2,\"265\":1,\"460\":1,\"461\":2,\"464\":1,\"465\":1}}],[\"required\",{\"1\":{\"99\":3,\"337\":2,\"344\":2,\"565\":4}}],[\"requestbody\",{\"1\":{\"18\":1}}],[\"request\",{\"0\":{\"16\":1},\"1\":{\"16\":3,\"26\":1,\"29\":2,\"242\":1,\"243\":3,\"249\":3,\"250\":3,\"251\":1,\"252\":3,\"253\":1,\"338\":4,\"344\":1,\"378\":3,\"379\":10,\"384\":1}}],[\"repository\",{\"1\":{\"559\":1}}],[\"repo\",{\"1\":{\"559\":3}}],[\"replace=\",{\"1\":{\"589\":1}}],[\"replace\",{\"0\":{\"589\":1,\"592\":1},\"1\":{\"216\":2,\"339\":1,\"517\":3,\"589\":6,\"592\":1}}],[\"repeat\",{\"1\":{\"32\":5,\"183\":1}}],[\"rel\",{\"1\":{\"197\":1}}],[\"relative\",{\"1\":{\"54\":2,\"381\":2}}],[\"realref\",{\"1\":{\"362\":3}}],[\"readdata\",{\"1\":{\"556\":1,\"557\":1}}],[\"readerli\",{\"1\":{\"272\":2}}],[\"readonlyarray<update<article>>\",{\"1\":{\"343\":1}}],[\"readonly\",{\"0\":{\"420\":1,\"649\":1},\"1\":{\"193\":1,\"420\":3,\"421\":1,\"441\":1,\"649\":2,\"653\":2,\"655\":3}}],[\"reactive\",{\"0\":{\"628\":1,\"632\":1},\"1\":{\"627\":1,\"628\":4,\"632\":4,\"633\":1,\"636\":6,\"641\":2,\"642\":4,\"649\":1,\"650\":1,\"655\":3}}],[\"reactelement\",{\"1\":{\"399\":1}}],[\"reactdom\",{\"1\":{\"272\":2,\"273\":1,\"274\":5,\"293\":1,\"294\":1,\"300\":1,\"305\":1,\"306\":2,\"307\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"337\":1,\"360\":2,\"366\":1,\"369\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":2}}],[\"react\",{\"0\":{\"9\":1,\"210\":1,\"266\":1,\"293\":1,\"299\":1,\"303\":1,\"348\":1,\"364\":1},\"1\":{\"210\":4,\"266\":5,\"267\":3,\"268\":1,\"269\":1,\"272\":2,\"273\":1,\"274\":1,\"275\":1,\"279\":4,\"280\":2,\"286\":7,\"287\":5,\"288\":2,\"290\":3,\"292\":2,\"293\":3,\"294\":6,\"296\":3,\"300\":3,\"301\":3,\"305\":3,\"306\":6,\"308\":1,\"309\":1,\"310\":1,\"312\":1,\"313\":1,\"314\":2,\"316\":1,\"321\":2,\"323\":2,\"329\":1,\"333\":2,\"334\":1,\"336\":1,\"337\":1,\"339\":1,\"344\":2,\"345\":2,\"348\":1,\"360\":4,\"361\":5,\"362\":7,\"363\":3,\"364\":2,\"365\":1,\"366\":3,\"368\":1,\"369\":1,\"371\":1,\"372\":2,\"378\":1,\"379\":3,\"380\":1,\"385\":1,\"390\":3,\"391\":1,\"399\":2,\"403\":12,\"404\":2,\"405\":5,\"406\":4,\"407\":3}}],[\"re\",{\"1\":{\"108\":2}}],[\"rethrow\",{\"1\":{\"96\":2}}],[\"returntype<typeof\",{\"1\":{\"343\":1,\"353\":1}}],[\"return\",{\"1\":{\"26\":1,\"27\":1,\"68\":2,\"83\":1,\"85\":1,\"86\":1,\"89\":1,\"91\":2,\"97\":1,\"100\":1,\"104\":1,\"106\":2,\"107\":1,\"116\":1,\"117\":1,\"137\":1,\"147\":1,\"152\":2,\"156\":2,\"158\":1,\"210\":1,\"237\":3,\"252\":1,\"267\":1,\"268\":1,\"272\":3,\"273\":2,\"274\":2,\"275\":9,\"279\":3,\"280\":1,\"283\":4,\"286\":3,\"287\":2,\"288\":1,\"290\":3,\"297\":3,\"301\":5,\"304\":2,\"306\":2,\"307\":1,\"310\":2,\"312\":2,\"313\":2,\"314\":3,\"315\":1,\"316\":1,\"318\":2,\"319\":1,\"320\":2,\"321\":2,\"322\":1,\"323\":6,\"324\":5,\"329\":1,\"333\":1,\"334\":1,\"335\":1,\"336\":1,\"337\":12,\"338\":4,\"342\":2,\"343\":2,\"344\":8,\"345\":4,\"347\":5,\"349\":1,\"350\":1,\"351\":1,\"352\":2,\"353\":5,\"355\":3,\"356\":1,\"358\":5,\"359\":3,\"360\":2,\"361\":4,\"362\":5,\"363\":2,\"365\":1,\"368\":1,\"371\":2,\"372\":3,\"374\":1,\"377\":1,\"378\":4,\"379\":12,\"380\":3,\"381\":1,\"384\":1,\"385\":1,\"390\":4,\"392\":1,\"394\":2,\"397\":2,\"398\":1,\"399\":3,\"403\":9,\"404\":4,\"405\":11,\"406\":5,\"407\":3,\"408\":4,\"410\":3,\"418\":1,\"419\":1,\"421\":1,\"426\":1,\"427\":1,\"428\":2,\"429\":3,\"444\":1,\"445\":1,\"446\":2,\"447\":2,\"448\":2,\"449\":1,\"450\":2,\"451\":4,\"452\":1,\"459\":1,\"460\":8,\"461\":3,\"462\":1,\"463\":4,\"464\":1,\"466\":2,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"489\":2,\"491\":3,\"494\":2,\"504\":2,\"506\":2,\"507\":1,\"514\":1,\"515\":1,\"517\":2,\"518\":1,\"520\":1,\"521\":1,\"522\":2,\"529\":5,\"532\":1,\"534\":1,\"536\":5,\"537\":4,\"538\":1,\"539\":1,\"548\":1,\"552\":1,\"560\":1,\"562\":1,\"565\":1,\"568\":1,\"569\":1,\"581\":1,\"588\":2,\"609\":2,\"614\":3,\"615\":2,\"616\":3,\"618\":5,\"619\":8,\"621\":2,\"626\":2,\"631\":3,\"633\":2,\"635\":4,\"641\":2,\"642\":3,\"645\":1,\"651\":4,\"653\":1,\"654\":1}}],[\"reversed\",{\"1\":{\"198\":1}}],[\"reverse\",{\"1\":{\"45\":3,\"215\":1,\"405\":1,\"460\":9,\"462\":5,\"463\":3,\"539\":1}}],[\"reduxjs\",{\"1\":{\"333\":1,\"334\":2,\"337\":1,\"344\":2}}],[\"redux\",{\"0\":{\"327\":1,\"328\":1,\"332\":1,\"334\":1,\"353\":1},\"1\":{\"328\":2,\"330\":2,\"331\":1,\"332\":5,\"333\":6,\"334\":13,\"337\":5,\"338\":5,\"343\":2,\"344\":2,\"348\":1,\"351\":1,\"353\":10,\"354\":1,\"355\":2,\"356\":1,\"358\":2,\"359\":3}}],[\"reducer<articlestate\",{\"1\":{\"353\":1}}],[\"reducerpath\",{\"1\":{\"344\":3,\"346\":1}}],[\"reducers\",{\"1\":{\"334\":3,\"337\":1,\"338\":1}}],[\"reducer\",{\"0\":{\"283\":1,\"323\":1,\"324\":1,\"325\":1,\"326\":1},\"1\":{\"283\":2,\"323\":4,\"324\":1,\"325\":4,\"326\":2,\"331\":6,\"332\":1,\"334\":5,\"337\":3,\"338\":12,\"343\":1,\"344\":4,\"353\":2,\"358\":1,\"359\":1,\"379\":1}}],[\"reduceright\",{\"1\":{\"215\":2}}],[\"reduce\",{\"1\":{\"215\":2,\"517\":8}}],[\"red\",{\"1\":{\"40\":1,\"41\":1,\"62\":1,\"64\":1,\"414\":2,\"415\":1,\"477\":1,\"539\":1,\"658\":5}}],[\"redirect\",{\"0\":{\"0\":1},\"1\":{\"258\":2,\"379\":2,\"385\":1,\"581\":3}}],[\"reselect\",{\"1\":{\"342\":1}}],[\"resetfields\",{\"1\":{\"337\":1,\"340\":3,\"344\":1}}],[\"reset\",{\"1\":{\"193\":2}}],[\"resp\",{\"1\":{\"338\":2,\"340\":4,\"344\":4,\"345\":10,\"358\":2,\"359\":2,\"430\":4,\"431\":5,\"459\":2}}],[\"responseresult\",{\"1\":{\"431\":1}}],[\"responseresult<t\",{\"1\":{\"431\":1}}],[\"responseresult<t>\",{\"1\":{\"430\":1}}],[\"responseresult<map<string\",{\"1\":{\"430\":1}}],[\"response\",{\"1\":{\"27\":4,\"29\":1,\"30\":1,\"242\":1,\"243\":4,\"244\":2,\"252\":1,\"255\":5,\"256\":2,\"257\":2,\"258\":1,\"260\":2,\"261\":1,\"262\":2,\"338\":2,\"379\":3,\"459\":8,\"487\":2,\"573\":2}}],[\"resource\",{\"0\":{\"571\":1,\"572\":1,\"573\":1},\"1\":{\"572\":1,\"573\":2}}],[\"resources\",{\"1\":{\"206\":1,\"207\":1,\"209\":7}}],[\"resolve=\",{\"1\":{\"390\":1,\"392\":1,\"393\":1}}],[\"resolved\",{\"1\":{\"176\":2,\"178\":1,\"358\":1,\"359\":1}}],[\"resolve\",{\"1\":{\"151\":2,\"176\":2,\"391\":4}}],[\"restful\",{\"0\":{\"584\":1}}],[\"rest\",{\"0\":{\"158\":1},\"1\":{\"147\":1,\"158\":3,\"159\":1}}],[\"result\",{\"1\":{\"100\":4,\"275\":4,\"347\":6,\"348\":3,\"351\":2,\"355\":2,\"356\":2,\"517\":4,\"614\":3,\"619\":2,\"658\":3}}],[\"res\",{\"1\":{\"30\":2,\"243\":5,\"312\":2,\"378\":2,\"379\":2,\"380\":2}}],[\"rejected\",{\"1\":{\"176\":2,\"180\":2,\"340\":2,\"344\":1,\"358\":1}}],[\"reject\",{\"1\":{\"26\":1,\"27\":1,\"152\":5,\"176\":2}}],[\"第四个泛型是当前\",{\"1\":{\"359\":1}}],[\"第三个泛型是额外参数\",{\"1\":{\"359\":1}}],[\"第三个参数是一个函数\",{\"1\":{\"351\":1}}],[\"第三个参数是一个配置对象\",{\"1\":{\"338\":1}}],[\"第三个参数\",{\"1\":{\"350\":1}}],[\"第三个标签表示这个虚拟\",{\"1\":{\"294\":1}}],[\"第二种方式\",{\"1\":{\"502\":1}}],[\"第二种方法时校验\",{\"1\":{\"340\":1}}],[\"第二种写法会导致后续组件不能渲染\",{\"1\":{\"490\":1}}],[\"第二种写法\",{\"1\":{\"490\":1}}],[\"第二步\",{\"1\":{\"324\":1}}],[\"第二个以后的参数是插件使用者传递的数据\",{\"1\":{\"569\":1}}],[\"第二个元素为这个变量的\",{\"1\":{\"403\":1}}],[\"第二个元素是这个\",{\"1\":{\"384\":1}}],[\"第二个元素是\",{\"1\":{\"324\":1}}],[\"第二个泛型是\",{\"1\":{\"359\":1}}],[\"第二个类型是参数类型\",{\"1\":{\"338\":1}}],[\"第二个是旧值\",{\"1\":{\"621\":1}}],[\"第二个是原型对象\",{\"1\":{\"240\":1}}],[\"第二个是垂直位置\",{\"1\":{\"32\":1}}],[\"第二个回调函数对应\",{\"1\":{\"176\":1}}],[\"第二个参数与第一种写法一致\",{\"1\":{\"621\":1}}],[\"第二个参数\",{\"1\":{\"231\":1,\"517\":1}}],[\"第二个参数表示从该位置向前匹配\",{\"1\":{\"216\":1}}],[\"第二个参数为指数的幂运算值\",{\"1\":{\"217\":1}}],[\"第二个参数为终止位置\",{\"1\":{\"215\":1}}],[\"第二个参数为可选信息\",{\"1\":{\"138\":1}}],[\"第二个参数是默认值\",{\"1\":{\"654\":1}}],[\"第二个参数是对象中的键\",{\"1\":{\"642\":1}}],[\"第二个参数是要传递的数据\",{\"1\":{\"544\":1}}],[\"第二个参数是回调函数\",{\"1\":{\"543\":1}}],[\"第二个参数是提交选项\",{\"1\":{\"379\":1}}],[\"第二个参数是入参筛选\",{\"1\":{\"351\":1}}],[\"第二个参数是一个对象\",{\"1\":{\"351\":1}}],[\"第二个参数是一个包含多个字段的对象\",{\"1\":{\"344\":1}}],[\"第二个参数是一个函数\",{\"1\":{\"301\":1,\"362\":1}}],[\"第二个参数是一个数组\",{\"1\":{\"238\":1}}],[\"第二个参数是依赖项数组\",{\"1\":{\"301\":1}}],[\"第二个参数是个对象\",{\"1\":{\"294\":1}}],[\"第二个参数是被删除的元素个数\",{\"1\":{\"215\":1}}],[\"第二个参数是推迟执行的毫秒数\",{\"1\":{\"212\":1}}],[\"第二个参数是用来补全的字符串\",{\"1\":{\"183\":1}}],[\"第二个参数是栈信息\",{\"1\":{\"96\":1}}],[\"第二个值为高度\",{\"1\":{\"32\":2}}],[\"第一次替\",{\"1\":{\"517\":1}}],[\"第一次执行时\",{\"1\":{\"215\":1}}],[\"第一次执行时默认为数组第一个成员\",{\"1\":{\"215\":1}}],[\"第一种方式\",{\"1\":{\"502\":1}}],[\"第一种方法是将\",{\"1\":{\"340\":1}}],[\"第一种写法\",{\"1\":{\"490\":1}}],[\"第一步\",{\"1\":{\"324\":1}}],[\"第一步仍然是创建\",{\"1\":{\"283\":1}}],[\"第一行在下方\",{\"1\":{\"45\":1}}],[\"第一行在上方\",{\"1\":{\"45\":1}}],[\"第一个泛型是返回类型\",{\"1\":{\"359\":1}}],[\"第一个元素是一个函数\",{\"1\":{\"344\":1}}],[\"第一个元素为一个\",{\"1\":{\"324\":1}}],[\"第一个类型是里面包裹的函数的返回类型\",{\"1\":{\"338\":1}}],[\"第一个\",{\"0\":{\"293\":1,\"553\":1},\"1\":{\"394\":1}}],[\"第一个是现有对象\",{\"1\":{\"240\":1}}],[\"第一个是水平位置\",{\"1\":{\"32\":1}}],[\"第一个回调函数对应\",{\"1\":{\"176\":1}}],[\"第一个参数指定要更新哪个\",{\"1\":{\"351\":1}}],[\"第一个参数应该是一个没有任何参数的纯函数\",{\"1\":{\"301\":1}}],[\"第一个参数做\",{\"1\":{\"238\":1}}],[\"第一个参数\",{\"1\":{\"231\":1}}],[\"第一个参数如果是负数表示从后面开始计算\",{\"1\":{\"215\":1}}],[\"第一个参数为起始位置\",{\"1\":{\"215\":1}}],[\"第一个参数为布尔值表达式\",{\"1\":{\"138\":1}}],[\"第一个参数是对象\",{\"1\":{\"642\":1}}],[\"第一个参数是要监视的属性名\",{\"1\":{\"621\":1}}],[\"第一个参数是要推迟执行的函数名或一段代码\",{\"1\":{\"212\":1}}],[\"第一个参数是消息\",{\"1\":{\"544\":1}}],[\"第一个参数是订阅的消息的名字\",{\"1\":{\"543\":1}}],[\"第一个参数是父组件给子组件绑定的事件的名字\",{\"1\":{\"496\":1}}],[\"第一个参数是当前查询的入参\",{\"1\":{\"351\":1}}],[\"第一个参数是一个\",{\"1\":{\"362\":1}}],[\"第一个参数是一个组件\",{\"1\":{\"301\":1}}],[\"第一个参数是一个函数\",{\"1\":{\"215\":1}}],[\"第一个参数是标签名\",{\"1\":{\"294\":1}}],[\"第一个参数是\",{\"1\":{\"238\":1}}],[\"第一个参数是删除的起始位置\",{\"1\":{\"215\":1}}],[\"第一个参数是字符串补全生效的最大长度\",{\"1\":{\"183\":1}}],[\"第一个参数是目标对象\",{\"1\":{\"169\":1}}],[\"第一个参数是抛出的异常对象\",{\"1\":{\"96\":1}}],[\"第一个值为宽度\",{\"1\":{\"32\":2}}],[\"不写在这里面会被视作原生事件\",{\"1\":{\"658\":1}}],[\"不希望数据被修改时\",{\"1\":{\"649\":1}}],[\"不进行对象的响应式处理\",{\"1\":{\"648\":1}}],[\"不用指明监视哪个属性\",{\"1\":{\"637\":1}}],[\"不论使用哪种写法\",{\"1\":{\"617\":1}}],[\"不接收\",{\"1\":{\"603\":1}}],[\"不要与\",{\"1\":{\"626\":1}}],[\"不要用驼峰命名\",{\"1\":{\"547\":1}}],[\"不要做数组或对象的整体替换\",{\"1\":{\"538\":1}}],[\"不要使用el\",{\"1\":{\"489\":1}}],[\"不要使用第三种写法\",{\"1\":{\"122\":1}}],[\"不要使用类似o\",{\"1\":{\"73\":1}}],[\"不推荐\",{\"1\":{\"522\":1}}],[\"不显示的\",{\"1\":{\"507\":1}}],[\"不展示的\",{\"1\":{\"507\":1}}],[\"不允许再去修改它的值了\",{\"1\":{\"459\":1}}],[\"不建议使用\",{\"1\":{\"452\":1}}],[\"不建议使用数组下标作为\",{\"1\":{\"306\":1}}],[\"不确定一个联合类型的变量到底是哪个类型的时候\",{\"1\":{\"440\":1}}],[\"不具有初始化函数并且之前的枚举成员是常数\",{\"1\":{\"414\":1}}],[\"不变性\",{\"1\":{\"406\":1}}],[\"不执行但是因为引用的关系在组件中使用\",{\"1\":{\"380\":1}}],[\"不\",{\"1\":{\"380\":1}}],[\"不响应\",{\"1\":{\"379\":1}}],[\"不支持\",{\"1\":{\"366\":1}}],[\"不过\",{\"1\":{\"351\":1}}],[\"不依赖于\",{\"1\":{\"348\":1}}],[\"不需要第二个参数\",{\"1\":{\"560\":1}}],[\"不需要等号\",{\"1\":{\"551\":1}}],[\"不需要手动编写任何\",{\"1\":{\"332\":1}}],[\"不需要闭合的单独标签\",{\"1\":{\"190\":1}}],[\"不再等待整个应用编译完成\",{\"1\":{\"661\":1}}],[\"不再会声明一个全局变量\",{\"1\":{\"460\":1}}],[\"不再使用\",{\"1\":{\"353\":1}}],[\"不再依赖\",{\"1\":{\"344\":1}}],[\"不再像\",{\"1\":{\"323\":1}}],[\"不再赘述\",{\"1\":{\"136\":1}}],[\"不断累加这个差值即可实现滚动条保持不变\",{\"1\":{\"314\":1}}],[\"不使用脚手架时\",{\"1\":{\"490\":1}}],[\"不使用\",{\"0\":{\"294\":1,\"353\":1,\"369\":1},\"1\":{\"627\":2}}],[\"不使用拦截器处理\",{\"0\":{\"30\":1}}],[\"不传依赖数组和传递空依赖数组是不一样的\",{\"1\":{\"287\":1}}],[\"不输出编译后的\",{\"1\":{\"267\":1}}],[\"不返回任何值\",{\"1\":{\"241\":1}}],[\"不指向外部\",{\"1\":{\"238\":1}}],[\"不管监听函数定义在当前节点还是其他节点\",{\"1\":{\"231\":1}}],[\"不仅遍历对象自身的属性\",{\"1\":{\"224\":1}}],[\"不等于任何值\",{\"1\":{\"222\":1}}],[\"不改变原字符串\",{\"1\":{\"216\":1}}],[\"不包括\",{\"1\":{\"547\":1}}],[\"不包括在当前节点上其他事件监听函数\",{\"1\":{\"231\":1}}],[\"不包括内边距\",{\"1\":{\"37\":1}}],[\"不包含模板解析器\",{\"1\":{\"560\":1}}],[\"不包含构造函数\",{\"1\":{\"425\":1}}],[\"不包含继承的键名\",{\"1\":{\"240\":1}}],[\"不包含就返回\",{\"1\":{\"224\":1}}],[\"不包含在返回值中\",{\"1\":{\"215\":1}}],[\"不是全局可用\",{\"1\":{\"619\":1}}],[\"不是内置对象的一部分\",{\"1\":{\"467\":1}}],[\"不是\",{\"1\":{\"385\":1,\"387\":1}}],[\"不是生命周期\",{\"1\":{\"284\":1}}],[\"不是独立的数据类型\",{\"1\":{\"222\":1}}],[\"不是立即执行\",{\"1\":{\"197\":1}}],[\"不是原来那个\",{\"1\":{\"177\":1}}],[\"不修改原始字符串\",{\"1\":{\"183\":1}}],[\"不可交换顺序\",{\"1\":{\"621\":1}}],[\"不可删除\",{\"1\":{\"514\":1}}],[\"不可修改\",{\"1\":{\"514\":1}}],[\"不可枚举\",{\"1\":{\"514\":1}}],[\"不可枚举和继承来的属性是不会拷贝的\",{\"1\":{\"169\":1}}],[\"不可变的更新逻辑\",{\"1\":{\"332\":1}}],[\"不可变性\",{\"0\":{\"330\":1}}],[\"不可改变的\",{\"1\":{\"330\":1}}],[\"不可以使用过滤器\",{\"1\":{\"529\":1}}],[\"不可以使用\",{\"1\":{\"159\":2}}],[\"不可以当做构造函数\",{\"1\":{\"159\":1}}],[\"不初始化会报错\",{\"1\":{\"160\":1}}],[\"不存在变量提升\",{\"1\":{\"153\":1}}],[\"不存在的键会返回\",{\"1\":{\"124\":1}}],[\"不行\",{\"1\":{\"145\":1}}],[\"不能是一个异步方法\",{\"1\":{\"626\":1}}],[\"不能是引用\",{\"1\":{\"380\":1}}],[\"不能配置其他参数\",{\"1\":{\"623\":1}}],[\"不能配置多个代理\",{\"1\":{\"485\":1}}],[\"不能获取组件实例\",{\"1\":{\"605\":1}}],[\"不能加斜线\",{\"1\":{\"577\":1}}],[\"不能省略\",{\"1\":{\"552\":1}}],[\"不能给\",{\"1\":{\"539\":1}}],[\"不能和value\",{\"1\":{\"514\":1}}],[\"不能灵活的控制请求是否走代理\",{\"1\":{\"485\":1}}],[\"不能只更新其中一个字段而不显式复制其他字段\",{\"1\":{\"404\":1}}],[\"不能\",{\"1\":{\"385\":1}}],[\"不能在声明语句中定义具体的实现\",{\"1\":{\"459\":1}}],[\"不能在声明它的类的外部访问\",{\"1\":{\"418\":1}}],[\"不能在\",{\"1\":{\"379\":1}}],[\"不能在内部包含另一个\",{\"1\":{\"202\":1}}],[\"不能包含副作用\",{\"1\":{\"358\":1}}],[\"不能包含异步逻辑\",{\"1\":{\"338\":1}}],[\"不能包含任何的异步逻辑\",{\"1\":{\"334\":1}}],[\"不能放在\",{\"1\":{\"202\":1}}],[\"不能跨域\",{\"1\":{\"197\":1}}],[\"不能赋值为\",{\"1\":{\"117\":1}}],[\"不能显式地实例化一个枚举类\",{\"1\":{\"93\":1}}],[\"不同\",{\"1\":{\"96\":2,\"406\":1}}],[\"不会引起页面更新\",{\"1\":{\"650\":1}}],[\"不会调用\",{\"1\":{\"599\":1}}],[\"不会再次调用\",{\"1\":{\"598\":1}}],[\"不会覆盖没传入的字段\",{\"1\":{\"406\":1}}],[\"不会发生变化的原因\",{\"1\":{\"403\":1}}],[\"不会有任何执行\",{\"1\":{\"345\":1}}],[\"不会执行模块解析和加载\",{\"1\":{\"306\":1}}],[\"不会渲染成\",{\"1\":{\"306\":1}}],[\"不会触发\",{\"1\":{\"301\":1}}],[\"不会局部化使用了其他选择器的类名\",{\"1\":{\"269\":1}}],[\"不会阻止事件的传播\",{\"1\":{\"231\":1}}],[\"不会影响\",{\"1\":{\"226\":1}}],[\"不会影响到另一个变量\",{\"1\":{\"224\":1}}],[\"不会换行\",{\"1\":{\"204\":1}}],[\"不会\",{\"1\":{\"58\":1,\"128\":1}}],[\"不会对其余内容进行调整来适应元素留下的任何空间\",{\"1\":{\"54\":1}}],[\"不重复\",{\"1\":{\"32\":1}}],[\"yyyy年mm月dd日\",{\"1\":{\"529\":5}}],[\"yyy\",{\"1\":{\"522\":1}}],[\"yarn\",{\"1\":{\"206\":1,\"210\":1,\"252\":2,\"259\":2,\"264\":2,\"268\":1,\"269\":2,\"333\":2,\"359\":1,\"364\":1,\"408\":1,\"457\":2,\"460\":2,\"465\":1,\"469\":3}}],[\"yesterday\",{\"1\":{\"464\":3}}],[\"year\",{\"1\":{\"164\":2}}],[\"yellow\",{\"1\":{\"62\":1,\"274\":2,\"414\":1}}],[\"yield\",{\"1\":{\"109\":6,\"147\":1,\"159\":1}}],[\"ypos\",{\"1\":{\"32\":1}}],[\"y\",{\"1\":{\"32\":2,\"55\":1,\"82\":2,\"85\":4,\"86\":6,\"87\":3,\"89\":6,\"104\":2,\"108\":2,\"147\":2,\"156\":2,\"157\":3,\"167\":3,\"169\":2,\"185\":1,\"189\":4,\"425\":5,\"515\":1,\"522\":1,\"609\":2,\"641\":3}}],[\"的优先级对比\",{\"1\":{\"658\":1}}],[\"的修饰符\",{\"1\":{\"658\":1}}],[\"的修改都通过\",{\"1\":{\"335\":1}}],[\"的转移\",{\"0\":{\"657\":1}}],[\"的套路是\",{\"1\":{\"637\":2}}],[\"的响应式\",{\"0\":{\"630\":1,\"631\":1}}],[\"的响应式原理\",{\"0\":{\"629\":1}}],[\"的新函数\",{\"1\":{\"627\":1}}],[\"的变化\",{\"1\":{\"622\":1}}],[\"的变量赋值\",{\"1\":{\"129\":1}}],[\"的链接\",{\"1\":{\"589\":1}}],[\"的别名是\",{\"1\":{\"582\":1}}],[\"的另一个属性\",{\"1\":{\"570\":1}}],[\"的原型对象上定义全局方法\",{\"1\":{\"569\":1}}],[\"的替代者\",{\"1\":{\"562\":1}}],[\"的替代品\",{\"1\":{\"200\":1}}],[\"的vue实例中不能添加\",{\"1\":{\"560\":1}}],[\"的版本等选项\",{\"1\":{\"559\":1}}],[\"的版本号\",{\"1\":{\"209\":1}}],[\"的其中一个\",{\"1\":{\"539\":1}}],[\"的差异比较\",{\"1\":{\"535\":1}}],[\"的作用\",{\"1\":{\"535\":1}}],[\"的作用和原理\",{\"0\":{\"533\":1}}],[\"的两个注意点\",{\"0\":{\"633\":1}}],[\"的两个\",{\"1\":{\"539\":1}}],[\"的两个泛型分别表示返回类型和入参类型\",{\"1\":{\"344\":1}}],[\"的两种写法\",{\"0\":{\"518\":1}}],[\"的构造函数\",{\"1\":{\"492\":1}}],[\"的区别是\",{\"1\":{\"465\":1}}],[\"的类\",{\"1\":{\"417\":1,\"425\":1}}],[\"的类型定义中\",{\"1\":{\"445\":1}}],[\"的类型定义\",{\"1\":{\"358\":1}}],[\"的类型提示\",{\"1\":{\"344\":1}}],[\"的类型是\",{\"1\":{\"338\":1}}],[\"的类型声明\",{\"1\":{\"268\":1}}],[\"的类型\",{\"1\":{\"117\":1,\"144\":1,\"425\":1,\"456\":1}}],[\"的类型擦除不同\",{\"1\":{\"114\":1}}],[\"的类型的成员变量\",{\"1\":{\"74\":1}}],[\"的维护就要提升到他们的共同父组件中\",{\"1\":{\"407\":1}}],[\"的最新值\",{\"1\":{\"403\":1}}],[\"的最后\",{\"1\":{\"94\":1}}],[\"的路由\",{\"1\":{\"395\":1}}],[\"的路径\",{\"1\":{\"243\":1}}],[\"的相关方法外\",{\"1\":{\"384\":1}}],[\"的数组变量\",{\"1\":{\"380\":1}}],[\"的数据\",{\"1\":{\"348\":1,\"380\":1}}],[\"的数据返回完毕\",{\"1\":{\"69\":1}}],[\"的实现方式过于复杂\",{\"1\":{\"379\":1}}],[\"的实例对象\",{\"1\":{\"492\":1}}],[\"的实例\",{\"1\":{\"73\":1}}],[\"的操作\",{\"1\":{\"379\":1}}],[\"的功能\",{\"1\":{\"356\":1}}],[\"的日志功能\",{\"1\":{\"356\":1}}],[\"的判断需要自行处理\",{\"1\":{\"353\":1}}],[\"的执行\",{\"1\":{\"351\":1}}],[\"的执行内容通常是\",{\"1\":{\"331\":1}}],[\"的缓存数据\",{\"1\":{\"351\":1}}],[\"的缓存\",{\"1\":{\"351\":1}}],[\"的缓存中读取的\",{\"1\":{\"348\":1}}],[\"的入参\",{\"1\":{\"350\":1,\"355\":1}}],[\"的入参就是\",{\"1\":{\"344\":1}}],[\"的第一个参数是\",{\"1\":{\"569\":1}}],[\"的第一个参数应该是服务器返回的类型\",{\"1\":{\"350\":1}}],[\"的第一个参数必须也返回一个函数\",{\"1\":{\"302\":1}}],[\"的存在变得简单\",{\"1\":{\"348\":1}}],[\"的重新渲染可以通过改变\",{\"1\":{\"379\":1}}],[\"的重新加载\",{\"1\":{\"345\":1}}],[\"的重写\",{\"1\":{\"251\":1}}],[\"的一系列标签\",{\"1\":{\"345\":1}}],[\"的一个\",{\"1\":{\"323\":1}}],[\"的一个伪随机数\",{\"1\":{\"217\":1}}],[\"的自定义中间件\",{\"1\":{\"344\":1}}],[\"的话\",{\"1\":{\"344\":1}}],[\"的名字\",{\"1\":{\"344\":1}}],[\"的名称必须以\",{\"1\":{\"296\":1}}],[\"的使用\",{\"1\":{\"343\":1}}],[\"的使用场景\",{\"0\":{\"282\":1}}],[\"的泛型可以通过导出\",{\"1\":{\"343\":1}}],[\"的地方\",{\"1\":{\"342\":1}}],[\"的写法\",{\"1\":{\"338\":1}}],[\"的更新函数以确保这是纯函数\",{\"1\":{\"403\":1}}],[\"的更新\",{\"1\":{\"337\":1}}],[\"的初始值\",{\"1\":{\"334\":1,\"517\":1}}],[\"的集合\",{\"1\":{\"334\":1}}],[\"的对比\",{\"0\":{\"325\":1}}],[\"的对象起个名字\",{\"1\":{\"552\":1}}],[\"的对象\",{\"1\":{\"238\":1,\"555\":1}}],[\"的方式异步捕获并处理\",{\"1\":{\"610\":1}}],[\"的方式可能会写出下面的代码\",{\"1\":{\"323\":1}}],[\"的方法分离到渲染逻辑之外\",{\"1\":{\"286\":1}}],[\"的方法\",{\"1\":{\"94\":1,\"238\":1}}],[\"的方法时\",{\"1\":{\"67\":1}}],[\"的展开语法\",{\"1\":{\"319\":1}}],[\"的高度\",{\"1\":{\"314\":1}}],[\"的倍数才重新渲染\",{\"1\":{\"313\":1}}],[\"的导入\",{\"1\":{\"306\":1}}],[\"的完整写法\",{\"1\":{\"306\":1}}],[\"的意义\",{\"1\":{\"306\":1}}],[\"的结果相同\",{\"1\":{\"389\":1}}],[\"的结果更新到\",{\"1\":{\"343\":1}}],[\"的结果\",{\"1\":{\"342\":1,\"378\":1,\"379\":1}}],[\"的结果是不是\",{\"1\":{\"340\":1}}],[\"的结果展开为一个\",{\"1\":{\"340\":1}}],[\"的结果必须是默认导出\",{\"1\":{\"304\":1}}],[\"的结果设置前缀\",{\"1\":{\"300\":1}}],[\"的计算过程包裹起来\",{\"1\":{\"301\":1}}],[\"的计算基准\",{\"1\":{\"190\":1}}],[\"的每个调用完全独立\",{\"1\":{\"297\":1}}],[\"的命名公约\",{\"1\":{\"296\":1}}],[\"的虚拟\",{\"1\":{\"294\":1}}],[\"的调用报错\",{\"1\":{\"292\":1}}],[\"的问题\",{\"0\":{\"290\":1}}],[\"的依赖项里必须要声明这些字段\",{\"1\":{\"289\":1}}],[\"的内置页面\",{\"1\":{\"371\":1}}],[\"的内容都会导致\",{\"1\":{\"287\":1}}],[\"的内容\",{\"1\":{\"286\":1,\"378\":1}}],[\"的内部\",{\"1\":{\"200\":1}}],[\"的播放和暂停\",{\"1\":{\"286\":1}}],[\"的步骤\",{\"1\":{\"285\":1}}],[\"的定义就是\",{\"1\":{\"284\":1}}],[\"的例子\",{\"0\":{\"353\":1},\"1\":{\"283\":1,\"353\":1,\"366\":1,\"403\":1}}],[\"的组件的\",{\"1\":{\"378\":1}}],[\"的组件\",{\"1\":{\"281\":1,\"342\":1}}],[\"的注意点\",{\"0\":{\"281\":1,\"298\":1}}],[\"的标签包裹起来\",{\"1\":{\"279\":1,\"280\":1}}],[\"的场景为例\",{\"1\":{\"277\":1}}],[\"的函数\",{\"1\":{\"272\":1}}],[\"的处理同时可能还有其他的处理器\",{\"1\":{\"269\":1}}],[\"的资源的处理器数量\",{\"1\":{\"269\":1}}],[\"的解析配置\",{\"1\":{\"269\":1}}],[\"的规则\",{\"1\":{\"268\":1}}],[\"的效果\",{\"1\":{\"268\":1,\"368\":1}}],[\"的主要用途\",{\"1\":{\"266\":1}}],[\"的哈希值\",{\"1\":{\"243\":1}}],[\"的同名\",{\"1\":{\"243\":1}}],[\"的域\",{\"1\":{\"243\":1}}],[\"的到期日期\",{\"1\":{\"243\":1}}],[\"的指向才是\",{\"1\":{\"624\":2}}],[\"的指向\",{\"1\":{\"238\":1}}],[\"的指向永远都是指向外部\",{\"1\":{\"159\":1}}],[\"的几个使用场合\",{\"1\":{\"238\":1}}],[\"的布尔对象\",{\"1\":{\"233\":1}}],[\"的特点\",{\"1\":{\"225\":1}}],[\"的返回值停止计时器\",{\"1\":{\"360\":1}}],[\"的返回值并更新到\",{\"1\":{\"338\":1}}],[\"的返回值\",{\"1\":{\"335\":1,\"344\":1}}],[\"的返回值要么是一个十进制整数\",{\"1\":{\"222\":1}}],[\"的返回值传入这两个方法中就可以取消对应的计时器\",{\"1\":{\"212\":1}}],[\"的位置上\",{\"1\":{\"399\":1}}],[\"的位置\",{\"1\":{\"215\":1,\"366\":1}}],[\"的支持\",{\"1\":{\"210\":1,\"269\":1}}],[\"的支持有问题\",{\"1\":{\"209\":1}}],[\"的情况除外\",{\"1\":{\"626\":1}}],[\"的情况下能够取到这些内容\",{\"1\":{\"397\":1}}],[\"的情况下\",{\"1\":{\"349\":1}}],[\"的情况\",{\"1\":{\"210\":1,\"333\":1}}],[\"的文件\",{\"1\":{\"197\":1,\"292\":1}}],[\"的文件中\",{\"1\":{\"31\":1}}],[\"的可选子元素\",{\"1\":{\"195\":1}}],[\"的下限门槛值\",{\"1\":{\"193\":1}}],[\"的上限门槛值\",{\"1\":{\"193\":1}}],[\"的浮点数\",{\"1\":{\"193\":1}}],[\"的各个部分\",{\"1\":{\"190\":1}}],[\"的代码\",{\"1\":{\"182\":1}}],[\"的语法规则\",{\"1\":{\"305\":1}}],[\"的语法\",{\"0\":{\"163\":1}}],[\"的键名都是字符串可以先转为对象再转为\",{\"1\":{\"162\":1}}],[\"的时候打印日志\",{\"1\":{\"355\":1}}],[\"的时候就会被执行\",{\"1\":{\"354\":1}}],[\"的时候并没有发生网络请求\",{\"1\":{\"345\":1}}],[\"的时候\",{\"1\":{\"159\":1,\"459\":1}}],[\"的继承\",{\"0\":{\"154\":1}}],[\"的基本语法\",{\"0\":{\"153\":1}}],[\"的参数可以传入初始化函数\",{\"1\":{\"403\":1}}],[\"的参数保存在\",{\"1\":{\"397\":1}}],[\"的参数的函数\",{\"1\":{\"338\":1}}],[\"的参数次方\",{\"1\":{\"217\":1}}],[\"的参数会被\",{\"1\":{\"152\":1}}],[\"的参数不被判断\",{\"1\":{\"138\":1}}],[\"的成员\",{\"1\":{\"148\":1}}],[\"的接口\",{\"1\":{\"128\":1}}],[\"的冗余\",{\"1\":{\"122\":1}}],[\"的子类实现构造函数时\",{\"1\":{\"309\":1}}],[\"的子类\",{\"1\":{\"119\":1,\"128\":1}}],[\"的值就是\",{\"1\":{\"374\":1}}],[\"的值并展示到页面上\",{\"1\":{\"372\":1}}],[\"的值也可以是一个纯函数\",{\"1\":{\"361\":1}}],[\"的值为重新渲染之后的值\",{\"1\":{\"314\":1}}],[\"的值进行操作\",{\"1\":{\"286\":1}}],[\"的值然后内层函数调用这个变量\",{\"1\":{\"238\":1}}],[\"的值\",{\"1\":{\"67\":1,\"130\":2,\"508\":1,\"517\":1}}],[\"的\",{\"0\":{\"369\":1,\"589\":1},\"1\":{\"63\":1,\"128\":1,\"193\":4,\"242\":1,\"243\":5,\"274\":1,\"331\":1,\"337\":1,\"338\":1,\"343\":2,\"344\":2,\"345\":2,\"354\":1,\"358\":1,\"366\":3,\"367\":1,\"369\":1,\"372\":1,\"373\":1,\"374\":1,\"378\":1,\"379\":1,\"385\":1,\"390\":1,\"399\":1,\"403\":1,\"512\":2,\"543\":1,\"544\":1,\"577\":1,\"589\":1,\"600\":1,\"608\":1,\"614\":1,\"627\":1,\"628\":1,\"632\":1,\"636\":1,\"646\":1}}],[\"的元素\",{\"1\":{\"54\":1,\"64\":2,\"534\":1}}],[\"的元素不会占用页面空间\",{\"1\":{\"51\":1}}],[\"的度数\",{\"1\":{\"43\":1}}],[\"的形式使用表达式\",{\"1\":{\"120\":1}}],[\"的形式\",{\"1\":{\"32\":1,\"186\":1}}],[\"19\",{\"1\":{\"595\":1}}],[\"1958\",{\"1\":{\"164\":1}}],[\"1<\",{\"1\":{\"539\":1}}],[\"13\",{\"1\":{\"522\":1}}],[\"1px\",{\"1\":{\"314\":1}}],[\"18\",{\"1\":{\"190\":1}}],[\"1627296335622\",{\"1\":{\"529\":1}}],[\"160w\",{\"1\":{\"196\":1}}],[\"160\",{\"1\":{\"196\":1}}],[\"1658\",{\"1\":{\"186\":1}}],[\"1658272229\",{\"1\":{\"124\":2}}],[\"16\",{\"1\":{\"120\":1}}],[\"14159\",{\"1\":{\"119\":1}}],[\"14\",{\"1\":{\"119\":1}}],[\"101\",{\"1\":{\"537\":1,\"538\":1}}],[\"10秒后事件被解绑\",{\"1\":{\"498\":1}}],[\"10px\",{\"1\":{\"362\":1,\"477\":2,\"482\":3,\"539\":6}}],[\"105\",{\"1\":{\"106\":1}}],[\"10\",{\"1\":{\"99\":2,\"106\":1,\"109\":3,\"119\":1,\"123\":1,\"134\":1,\"147\":1,\"247\":1,\"346\":2,\"360\":1,\"403\":1,\"428\":1,\"448\":1,\"529\":1,\"532\":1}}],[\"100px\",{\"1\":{\"482\":1,\"483\":1,\"521\":2}}],[\"100vw\",{\"1\":{\"196\":1}}],[\"100000\",{\"1\":{\"521\":1}}],[\"10000\",{\"1\":{\"498\":1}}],[\"1000\",{\"1\":{\"105\":2,\"301\":1,\"314\":1,\"321\":1,\"333\":1,\"334\":1,\"360\":1}}],[\"100\",{\"1\":{\"43\":2,\"95\":1,\"105\":2,\"106\":1,\"112\":1,\"123\":1,\"312\":1,\"337\":1,\"344\":1,\"448\":1,\"482\":3,\"483\":1,\"515\":1,\"538\":2,\"551\":4,\"616\":1,\"628\":1,\"654\":1}}],[\"1293\",{\"1\":{\"551\":2}}],[\"1292\",{\"1\":{\"551\":1}}],[\"1291\",{\"1\":{\"550\":1,\"551\":1}}],[\"127\",{\"1\":{\"270\":1,\"339\":1}}],[\"1280w\",{\"1\":{\"196\":1}}],[\"1280\",{\"1\":{\"196\":2}}],[\"12\",{\"1\":{\"117\":1,\"144\":1}}],[\"123123\",{\"1\":{\"255\":1}}],[\"123\",{\"1\":{\"91\":1,\"99\":1,\"111\":1,\"116\":1,\"124\":1,\"126\":1,\"128\":3,\"129\":3,\"132\":1,\"143\":2,\"208\":1,\"220\":2,\"243\":1,\"305\":2,\"312\":1,\"322\":1,\"373\":1,\"374\":2,\"418\":1,\"419\":1,\"420\":1,\"431\":1,\"438\":2,\"440\":4,\"441\":1,\"442\":4,\"451\":1,\"501\":1,\"510\":1,\"520\":1}}],[\"123456\",{\"1\":{\"75\":1,\"159\":1,\"186\":1}}],[\"120deg\",{\"1\":{\"482\":1,\"483\":1}}],[\"120\",{\"1\":{\"43\":1}}],[\"1\",{\"1\":{\"32\":1,\"41\":1,\"46\":1,\"91\":1,\"104\":1,\"108\":1,\"109\":1,\"112\":1,\"117\":1,\"119\":5,\"122\":9,\"123\":1,\"130\":4,\"135\":1,\"147\":6,\"148\":1,\"156\":3,\"157\":2,\"158\":1,\"167\":2,\"196\":1,\"198\":1,\"210\":1,\"215\":2,\"216\":1,\"217\":1,\"243\":1,\"256\":1,\"270\":1,\"275\":4,\"280\":1,\"294\":2,\"301\":6,\"305\":1,\"313\":1,\"323\":1,\"324\":1,\"329\":1,\"331\":1,\"333\":3,\"335\":1,\"337\":2,\"339\":1,\"351\":2,\"372\":1,\"378\":1,\"379\":5,\"381\":1,\"390\":1,\"397\":2,\"403\":9,\"404\":3,\"405\":1,\"406\":3,\"412\":1,\"413\":6,\"414\":1,\"425\":1,\"426\":1,\"428\":1,\"429\":1,\"439\":2,\"442\":3,\"444\":1,\"446\":2,\"447\":2,\"448\":2,\"449\":1,\"450\":2,\"451\":1,\"464\":1,\"466\":1,\"479\":1,\"480\":1,\"517\":5,\"521\":1,\"529\":1,\"532\":1,\"534\":2,\"536\":4,\"537\":4,\"538\":2,\"539\":1,\"547\":6,\"548\":1,\"553\":2,\"569\":1,\"605\":1,\"614\":2,\"619\":1,\"627\":2,\"628\":2,\"636\":1}}],[\"~\",{\"1\":{\"32\":1,\"63\":2,\"414\":1,\"642\":2}}],[\"0+\",{\"1\":{\"606\":1}}],[\"00\",{\"1\":{\"42\":1}}],[\"0\",{\"0\":{\"659\":1},\"1\":{\"32\":3,\"40\":1,\"41\":3,\"42\":1,\"43\":4,\"46\":1,\"68\":1,\"74\":1,\"89\":2,\"90\":1,\"109\":3,\"122\":4,\"123\":4,\"132\":1,\"134\":5,\"135\":2,\"147\":1,\"158\":1,\"189\":2,\"192\":1,\"193\":1,\"210\":1,\"217\":1,\"221\":2,\"233\":1,\"243\":12,\"246\":4,\"249\":4,\"250\":4,\"252\":4,\"260\":4,\"265\":4,\"266\":1,\"270\":2,\"301\":6,\"313\":2,\"329\":1,\"333\":1,\"334\":1,\"338\":4,\"339\":2,\"351\":2,\"360\":3,\"378\":1,\"403\":9,\"412\":2,\"414\":1,\"449\":1,\"451\":1,\"466\":2,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":4,\"483\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":2,\"509\":1,\"514\":1,\"515\":1,\"517\":2,\"518\":1,\"520\":1,\"521\":2,\"522\":1,\"529\":2,\"534\":3,\"536\":1,\"537\":4,\"538\":4,\"539\":4,\"548\":1,\"551\":1,\"552\":1,\"553\":1,\"614\":2,\"618\":1,\"619\":2,\"621\":1,\"622\":1,\"628\":1,\"636\":1,\"641\":2,\"645\":8,\"653\":1,\"655\":1,\"660\":2}}],[\"取得要传递的参数\",{\"1\":{\"578\":1}}],[\"取消订阅消息等收尾工作\",{\"1\":{\"530\":1}}],[\"取消浏览器对当前事件的默认行为\",{\"1\":{\"231\":1}}],[\"取消请求\",{\"0\":{\"13\":1}}],[\"取最后的值\",{\"1\":{\"225\":1}}],[\"取\",{\"1\":{\"193\":1}}],[\"取值通过\",{\"1\":{\"32\":1}}],[\"取值范围\",{\"1\":{\"32\":1}}],[\"背景附着\",{\"1\":{\"32\":1}}],[\"背景被裁剪到内容框\",{\"1\":{\"32\":1}}],[\"背景被裁剪到内边距框\",{\"1\":{\"32\":1}}],[\"背景被裁剪到边框盒\",{\"1\":{\"32\":1}}],[\"背景重复\",{\"1\":{\"32\":1}}],[\"背景图像的尺寸\",{\"1\":{\"32\":1}}],[\"背景图像位置\",{\"1\":{\"32\":1}}],[\"背景图像\",{\"1\":{\"32\":1}}],[\"背景\",{\"0\":{\"32\":1}}],[\"fbing\",{\"1\":{\"548\":1}}],[\"fbind=\",{\"1\":{\"548\":1}}],[\"fbind\",{\"1\":{\"546\":1,\"548\":1}}],[\"fbc2eb\",{\"1\":{\"482\":1}}],[\"fmttime\",{\"1\":{\"529\":2}}],[\"f1\",{\"1\":{\"496\":5}}],[\"f5576c\",{\"1\":{\"482\":1,\"483\":1}}],[\"f093fb\",{\"1\":{\"482\":1,\"483\":1}}],[\"fenchingking\",{\"1\":{\"550\":1,\"551\":4,\"553\":1}}],[\"fee140\",{\"1\":{\"482\":1}}],[\"fetcher\",{\"0\":{\"395\":1},\"1\":{\"395\":3,\"396\":1,\"397\":9,\"398\":4}}],[\"fetch\",{\"1\":{\"344\":1,\"358\":2,\"378\":1,\"379\":3,\"384\":1}}],[\"fetchbasequery\",{\"1\":{\"344\":1}}],[\"fetcharticlesfn\",{\"1\":{\"358\":2}}],[\"fetcharticles\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"348\":2,\"351\":1,\"358\":4,\"359\":4}}],[\"fetchargs\",{\"1\":{\"344\":7}}],[\"fetchuser\",{\"1\":{\"68\":2}}],[\"fc<searchprops>\",{\"1\":{\"407\":1}}],[\"fc<todolistprops>\",{\"1\":{\"323\":1}}],[\"fc<\",{\"1\":{\"301\":1,\"393\":1,\"399\":2,\"407\":1}}],[\"fc\",{\"1\":{\"279\":6,\"280\":2,\"283\":2,\"297\":1,\"323\":3,\"329\":1,\"333\":1,\"335\":1,\"337\":5,\"343\":2,\"344\":3,\"345\":2,\"352\":1,\"365\":2,\"371\":2,\"372\":4,\"374\":1,\"378\":2,\"379\":4,\"381\":1,\"384\":1,\"390\":1,\"392\":1,\"395\":1,\"397\":1,\"407\":4,\"408\":2}}],[\"fn<boolean>\",{\"1\":{\"429\":1}}],[\"fn\",{\"1\":{\"275\":7,\"358\":2,\"429\":4}}],[\"friends\",{\"1\":{\"539\":4}}],[\"friend\",{\"1\":{\"539\":3}}],[\"friend<\",{\"1\":{\"539\":1}}],[\"friday\",{\"1\":{\"413\":2}}],[\"freeze\",{\"1\":{\"460\":1}}],[\"fragmentcompile\",{\"1\":{\"517\":3}}],[\"fragment\",{\"0\":{\"644\":1},\"1\":{\"279\":1,\"306\":3,\"323\":2,\"407\":3,\"517\":5,\"644\":1}}],[\"fragment>\",{\"1\":{\"210\":1,\"279\":1,\"283\":1,\"306\":2,\"323\":2,\"407\":3,\"408\":2}}],[\"from\",{\"1\":{\"31\":1,\"206\":5,\"207\":10,\"209\":3,\"223\":2,\"268\":1,\"279\":6,\"280\":2,\"306\":1,\"323\":3,\"334\":4,\"337\":1,\"338\":4,\"344\":3,\"353\":5,\"354\":1,\"359\":2,\"365\":2,\"372\":1,\"374\":1,\"407\":5,\"408\":1,\"429\":1,\"460\":4,\"461\":1,\"462\":1,\"463\":1,\"464\":2,\"465\":2,\"466\":1,\"494\":3,\"517\":1,\"542\":1,\"560\":3,\"562\":2,\"568\":3,\"569\":2,\"576\":10,\"577\":6,\"584\":6,\"602\":3,\"603\":2,\"604\":1,\"605\":1,\"609\":2,\"613\":5,\"616\":1,\"617\":1,\"618\":1,\"619\":7,\"633\":2,\"640\":1,\"641\":2,\"642\":2,\"645\":1,\"646\":1,\"651\":1,\"653\":2,\"654\":1,\"658\":4}}],[\"f\",{\"1\":{\"103\":2,\"559\":1,\"641\":3}}],[\"fa709a\",{\"1\":{\"482\":1}}],[\"fallback>\",{\"1\":{\"646\":1}}],[\"fallback\",{\"1\":{\"646\":1}}],[\"fallback=\",{\"1\":{\"390\":1}}],[\"fallbackelement\",{\"1\":{\"367\":1}}],[\"false\",{\"1\":{\"121\":1,\"128\":1,\"138\":1,\"143\":1,\"215\":3,\"221\":2,\"222\":1,\"224\":1,\"229\":3,\"231\":2,\"233\":2,\"243\":4,\"267\":1,\"286\":1,\"287\":1,\"290\":1,\"337\":2,\"338\":1,\"344\":3,\"359\":1,\"368\":1,\"377\":1,\"378\":2,\"380\":2,\"413\":1,\"429\":1,\"437\":1,\"442\":1,\"451\":1,\"460\":1,\"466\":1,\"482\":1,\"553\":1,\"560\":1,\"561\":1,\"565\":2,\"576\":1,\"602\":1,\"613\":1,\"619\":1,\"621\":1,\"636\":1,\"645\":2}}],[\"favorite`\",{\"1\":{\"351\":2,\"358\":1,\"359\":1}}],[\"favorite\",{\"1\":{\"351\":4}}],[\"factory\",{\"1\":{\"83\":2,\"461\":4}}],[\"father\",{\"1\":{\"79\":3}}],[\"family\",{\"1\":{\"47\":1}}],[\"focus\",{\"1\":{\"361\":6,\"362\":4,\"546\":2,\"548\":2}}],[\"found\",{\"1\":{\"338\":1,\"378\":1,\"662\":1}}],[\"foodd\",{\"1\":{\"552\":1}}],[\"foodc\",{\"1\":{\"552\":1}}],[\"foodb\",{\"1\":{\"552\":1}}],[\"fooda\",{\"1\":{\"552\":1}}],[\"foods\",{\"1\":{\"550\":1,\"551\":1,\"552\":8}}],[\"footer\",{\"1\":{\"202\":3}}],[\"foo\",{\"1\":{\"108\":3,\"132\":2,\"147\":1,\"157\":3,\"164\":1,\"169\":3,\"196\":9,\"297\":2,\"304\":6,\"310\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"320\":1,\"451\":1,\"456\":1,\"460\":2,\"465\":7,\"466\":4,\"547\":4,\"581\":1,\"583\":1}}],[\"forbidden\",{\"1\":{\"602\":1}}],[\"forward\",{\"0\":{\"594\":1},\"1\":{\"594\":1}}],[\"forwardref\",{\"1\":{\"362\":3}}],[\"for=\",{\"1\":{\"510\":1,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":2,\"618\":1}}],[\"formatstr\",{\"1\":{\"529\":2}}],[\"format\",{\"1\":{\"529\":3}}],[\"formdata\",{\"0\":{\"388\":1},\"1\":{\"379\":2,\"380\":1,\"388\":2,\"397\":1}}],[\"form=\",{\"1\":{\"337\":1,\"344\":1}}],[\"formtype\",{\"1\":{\"337\":2,\"340\":3,\"344\":1,\"358\":1}}],[\"form>\",{\"1\":{\"274\":1,\"337\":1,\"344\":1,\"379\":3,\"384\":1,\"385\":1,\"398\":1}}],[\"formmethod\",{\"1\":{\"193\":1}}],[\"formenctype\",{\"1\":{\"193\":1}}],[\"form\",{\"1\":{\"193\":15,\"274\":1,\"337\":7,\"340\":5,\"344\":7,\"379\":2,\"385\":3,\"388\":1,\"398\":2}}],[\"foreach\",{\"1\":{\"135\":2,\"215\":4,\"275\":1,\"449\":1,\"517\":4}}],[\"for\",{\"0\":{\"135\":1},\"1\":{\"69\":2,\"90\":1,\"109\":1,\"122\":2,\"123\":3,\"124\":1,\"135\":6,\"147\":1,\"158\":1,\"170\":3,\"193\":2,\"224\":2,\"428\":1,\"521\":1,\"658\":4}}],[\"fontsize\",{\"1\":{\"483\":1}}],[\"font3\",{\"1\":{\"482\":3}}],[\"font2\",{\"1\":{\"482\":3}}],[\"font1\",{\"1\":{\"482\":3}}],[\"font\",{\"1\":{\"47\":5,\"482\":3}}],[\"fulfilled\",{\"1\":{\"338\":1,\"340\":2,\"344\":1}}],[\"future<string>\",{\"1\":{\"68\":2}}],[\"future<void>\",{\"1\":{\"67\":1}}],[\"future<t>\",{\"1\":{\"67\":1}}],[\"future\",{\"0\":{\"67\":1},\"1\":{\"66\":1,\"67\":8,\"68\":2}}],[\"functions\",{\"1\":{\"108\":1}}],[\"function\",{\"1\":{\"13\":1,\"97\":1,\"103\":1,\"106\":1,\"108\":2,\"147\":4,\"151\":2,\"156\":2,\"157\":2,\"158\":1,\"164\":2,\"189\":2,\"210\":1,\"225\":2,\"239\":1,\"247\":3,\"268\":1,\"272\":3,\"274\":3,\"275\":6,\"286\":3,\"287\":2,\"290\":1,\"301\":3,\"304\":1,\"318\":2,\"319\":1,\"320\":2,\"322\":1,\"336\":1,\"358\":1,\"360\":2,\"361\":1,\"362\":2,\"363\":2,\"403\":8,\"404\":2,\"405\":4,\"410\":1,\"411\":1,\"426\":1,\"427\":1,\"428\":2,\"429\":1,\"437\":1,\"440\":2,\"444\":1,\"445\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":3,\"451\":4,\"452\":1,\"459\":16,\"460\":5,\"461\":9,\"462\":1,\"464\":2,\"465\":3,\"466\":2,\"470\":1,\"517\":3,\"529\":1,\"556\":4,\"557\":4,\"569\":1,\"623\":1,\"626\":1,\"627\":6,\"628\":3,\"633\":2,\"641\":2,\"651\":1,\"653\":1}}],[\"films\",{\"1\":{\"550\":1}}],[\"filters\",{\"1\":{\"529\":1}}],[\"filter\",{\"1\":{\"215\":2,\"323\":1,\"324\":1,\"353\":1,\"405\":2,\"529\":1,\"536\":2,\"537\":1,\"539\":1}}],[\"fish\",{\"1\":{\"452\":2}}],[\"figcaption\",{\"1\":{\"195\":1}}],[\"figure\",{\"1\":{\"195\":2}}],[\"fieldset\",{\"1\":{\"193\":3}}],[\"findindex\",{\"0\":{\"148\":1},\"1\":{\"148\":1,\"351\":1,\"378\":1}}],[\"find\",{\"0\":{\"148\":1},\"1\":{\"148\":1,\"337\":1,\"353\":1,\"405\":1}}],[\"finally\",{\"0\":{\"179\":1},\"1\":{\"96\":4,\"179\":1}}],[\"final\",{\"0\":{\"145\":1},\"1\":{\"74\":1,\"82\":2,\"83\":1,\"145\":8}}],[\"firstchild\",{\"1\":{\"517\":1}}],[\"firstname\",{\"1\":{\"162\":1,\"164\":2,\"172\":2,\"504\":3,\"506\":2}}],[\"first\",{\"1\":{\"62\":2,\"63\":4,\"122\":1,\"147\":1,\"337\":1,\"539\":2}}],[\"fixed\",{\"1\":{\"32\":1,\"54\":2,\"345\":1}}],[\"flag\",{\"1\":{\"507\":3}}],[\"floor\",{\"1\":{\"217\":1,\"247\":1,\"482\":1}}],[\"float\",{\"1\":{\"56\":2,\"59\":1}}],[\"flexbox\",{\"1\":{\"59\":1}}],[\"flex\",{\"0\":{\"44\":1},\"1\":{\"44\":6,\"45\":8,\"46\":3}}],[\"ff\",{\"1\":{\"42\":1}}],[\"在离开过渡被触发之后下一帧生效\",{\"1\":{\"658\":1}}],[\"在离开过渡被触发时立刻生效\",{\"1\":{\"658\":2}}],[\"在整个离开过渡的阶段中应用\",{\"1\":{\"658\":1}}],[\"在整个进入过渡的阶段中应用\",{\"1\":{\"658\":1}}],[\"在过渡\",{\"1\":{\"658\":4}}],[\"在元素被插入之后下一帧生效\",{\"1\":{\"658\":1}}],[\"在元素被插入之后的下一帧移除\",{\"1\":{\"658\":1}}],[\"在元素被插入之前生效\",{\"1\":{\"658\":2}}],[\"在进入\",{\"1\":{\"658\":1}}],[\"在网速较慢的情况下\",{\"1\":{\"646\":1}}],[\"在网站上动态渲染任意\",{\"1\":{\"477\":1}}],[\"在方法中操作响应式数据时\",{\"1\":{\"627\":1}}],[\"在方法前加上\",{\"1\":{\"153\":1}}],[\"在所有的\",{\"1\":{\"619\":1}}],[\"在分模块中添加\",{\"1\":{\"619\":1}}],[\"在计数器组件模板中添加\",{\"1\":{\"618\":1}}],[\"在计算属性中使用\",{\"1\":{\"616\":1}}],[\"在mutations中添加\",{\"1\":{\"618\":1}}],[\"在此前计数器组件基础上\",{\"1\":{\"618\":1}}],[\"在此之前\",{\"1\":{\"460\":1}}],[\"在actions中再次分发给其他action并接受返回值\",{\"1\":{\"614\":1}}],[\"在渲染该组件的对应路由被\",{\"1\":{\"605\":1}}],[\"在渲染时运行\",{\"1\":{\"326\":1}}],[\"在目的组件中都要使用\",{\"1\":{\"578\":1}}],[\"在目标节点上触发\",{\"1\":{\"230\":1}}],[\"在可选项中根据实际情况选择\",{\"1\":{\"559\":1}}],[\"在有且只有操作指定按键时才会触发\",{\"1\":{\"522\":1}}],[\"在下面会见到\",{\"1\":{\"517\":1}}],[\"在每次\",{\"1\":{\"511\":1}}],[\"在每个\",{\"1\":{\"62\":1}}],[\"在默认情况下\",{\"1\":{\"511\":1}}],[\"在默认的\",{\"1\":{\"269\":1}}],[\"在父组件中使用\",{\"1\":{\"502\":2}}],[\"在另一个场景下\",{\"1\":{\"465\":1}}],[\"在全局变量的声明文件中\",{\"1\":{\"465\":1}}],[\"在其中创建自定义\",{\"1\":{\"641\":1}}],[\"在其中编写声明文件\",{\"1\":{\"460\":1}}],[\"在其它地方出现需要转义\",{\"1\":{\"190\":1}}],[\"在早期没有\",{\"1\":{\"459\":1}}],[\"在赋值过程中改变类型是不被允许的\",{\"1\":{\"438\":1}}],[\"在函数内部使用泛型变量的时候\",{\"1\":{\"428\":1}}],[\"在函数中使用\",{\"1\":{\"109\":1}}],[\"在声明文件中可以直接使用\",{\"1\":{\"459\":1}}],[\"在声明\",{\"1\":{\"425\":1}}],[\"在操作\",{\"1\":{\"405\":1}}],[\"在更新\",{\"1\":{\"405\":1}}],[\"在严格模式中\",{\"1\":{\"403\":1}}],[\"在严格模式下\",{\"1\":{\"225\":1}}],[\"在这里首先获取\",{\"1\":{\"517\":1}}],[\"在这里可以将响应对象转换为视图对象\",{\"1\":{\"350\":1}}],[\"在这种情况下\",{\"1\":{\"414\":1}}],[\"在这个组件中\",{\"1\":{\"399\":1}}],[\"在这个组件里\",{\"1\":{\"393\":1}}],[\"在这个场景中\",{\"1\":{\"379\":1}}],[\"在外部访问\",{\"1\":{\"378\":1}}],[\"在非严格模式下\",{\"1\":{\"437\":1}}],[\"在非\",{\"0\":{\"348\":1}}],[\"在最初实现编辑功能时\",{\"1\":{\"347\":1}}],[\"在最外层的组件中使用\",{\"1\":{\"280\":1}}],[\"在文章列表等待\",{\"1\":{\"346\":1}}],[\"在调用\",{\"1\":{\"345\":1}}],[\"在第一次请求成功之后就一直是\",{\"1\":{\"345\":1}}],[\"在切换回\",{\"1\":{\"345\":1}}],[\"在完成后\",{\"1\":{\"345\":1}}],[\"在完成上面的内容之后\",{\"1\":{\"336\":1}}],[\"在后续调用时保持为\",{\"1\":{\"344\":1}}],[\"在实际发出请求时\",{\"1\":{\"344\":1}}],[\"在之前的例子中\",{\"1\":{\"395\":1}}],[\"在之前的内容中\",{\"1\":{\"344\":1}}],[\"在之后的渲染中\",{\"1\":{\"301\":1}}],[\"在加入\",{\"1\":{\"338\":1}}],[\"在事件处理函数中使用\",{\"1\":{\"335\":1}}],[\"在组件中引入\",{\"1\":{\"641\":1}}],[\"在组件中引用混合\",{\"1\":{\"568\":1}}],[\"在组件中频繁创建方法调用\",{\"1\":{\"617\":1}}],[\"在组件中频繁写\",{\"1\":{\"616\":1}}],[\"在组件中执行异步\",{\"0\":{\"340\":1}}],[\"在组件中使用这些\",{\"1\":{\"359\":1}}],[\"在组件中使用\",{\"1\":{\"323\":1}}],[\"在组件内不能修改\",{\"1\":{\"318\":1}}],[\"在组件挂载前会先调用构造函数\",{\"1\":{\"309\":1}}],[\"在重新渲染前该函数会被触发\",{\"1\":{\"313\":1}}],[\"在为\",{\"1\":{\"309\":1}}],[\"在不同的数组中可以使用相同的\",{\"1\":{\"306\":1}}],[\"在清理函数中修改此变量的值\",{\"1\":{\"290\":1}}],[\"在开发环境中\",{\"1\":{\"290\":1}}],[\"在一些场景中\",{\"1\":{\"288\":1}}],[\"在使用时通过绑定\",{\"1\":{\"580\":1}}],[\"在使用到组件的地方\",{\"1\":{\"564\":1}}],[\"在使用一些常用的方法的时候\",{\"1\":{\"467\":1}}],[\"在使用\",{\"1\":{\"281\":1,\"349\":1}}],[\"在使用这个插件的情况下配置项中就不要指定语言了\",{\"1\":{\"210\":1}}],[\"在上面的例子中我们删除了\",{\"1\":{\"351\":1}}],[\"在上面的例子中\",{\"1\":{\"275\":1,\"301\":1,\"323\":1,\"339\":1,\"343\":1,\"346\":1}}],[\"在上面的代码中\",{\"1\":{\"157\":1,\"286\":1,\"405\":1}}],[\"在同一个请求中设置相同名称的所有\",{\"1\":{\"243\":1}}],[\"在子类构造函数中调用父类的构造函数\",{\"1\":{\"239\":1}}],[\"在子类普通方法中通过\",{\"1\":{\"154\":1}}],[\"在当前节点上触发指定事件\",{\"1\":{\"229\":1}}],[\"在冒泡阶段触发\",{\"1\":{\"229\":1}}],[\"在转换为数值时会转换为\",{\"1\":{\"221\":1}}],[\"在解析时\",{\"1\":{\"213\":1}}],[\"在多少毫秒之后执行\",{\"1\":{\"212\":1}}],[\"在较小的项目中\",{\"1\":{\"207\":1}}],[\"在异步操作成功时调用\",{\"1\":{\"176\":1}}],[\"在属性声明前面添加\",{\"1\":{\"153\":1}}],[\"在字符串中\",{\"1\":{\"120\":1}}],[\"在浮点数上下文中使用整数字面量是错误的\",{\"1\":{\"119\":1}}],[\"在命名参数和位置参数后使用等号\",{\"1\":{\"101\":1}}],[\"在\",{\"0\":{\"463\":1},\"1\":{\"94\":1,\"97\":1,\"114\":1,\"119\":1,\"164\":1,\"223\":1,\"227\":1,\"292\":1,\"314\":1,\"338\":1,\"343\":1,\"345\":3,\"348\":1,\"352\":1,\"358\":1,\"373\":1,\"378\":1,\"379\":2,\"407\":1,\"431\":1,\"445\":1,\"451\":1,\"460\":5,\"462\":1,\"463\":1,\"485\":1,\"486\":1,\"511\":1,\"516\":1,\"530\":1,\"561\":1,\"569\":1,\"576\":3,\"580\":1,\"584\":2,\"586\":1,\"605\":1,\"606\":1,\"613\":1,\"617\":1,\"618\":1,\"633\":1,\"641\":1,\"644\":2,\"658\":2}}],[\"在工厂构造函数中无法访问\",{\"1\":{\"83\":1}}],[\"在构造函数名之前加\",{\"1\":{\"72\":1}}],[\"在相对和固定之间切换\",{\"1\":{\"54\":1}}],[\"在要使用\",{\"1\":{\"31\":1}}],[\"在配置了拦截器后\",{\"1\":{\"27\":1}}],[\"安装依赖\",{\"1\":{\"661\":1}}],[\"安装\",{\"0\":{\"31\":1,\"140\":1,\"264\":1,\"469\":1,\"541\":1,\"559\":1,\"572\":1,\"575\":1},\"1\":{\"140\":1,\"206\":1,\"359\":1,\"364\":1,\"408\":1,\"460\":1,\"613\":1}}],[\"oop\",{\"1\":{\"344\":1}}],[\"other\",{\"1\":{\"343\":1,\"345\":6,\"346\":1,\"350\":1,\"359\":2,\"376\":1}}],[\"outfile=main\",{\"1\":{\"459\":1}}],[\"outlet\",{\"1\":{\"366\":1,\"399\":2,\"402\":1}}],[\"outline\",{\"1\":{\"61\":5}}],[\"out\",{\"1\":{\"274\":2,\"561\":1}}],[\"outdir\",{\"1\":{\"209\":1,\"466\":1}}],[\"odd\",{\"1\":{\"208\":1}}],[\"ol>\",{\"1\":{\"552\":1}}],[\"oldvnode\",{\"1\":{\"547\":1,\"548\":1}}],[\"oldvalue\",{\"1\":{\"536\":1,\"537\":1,\"547\":1,\"621\":3,\"622\":2,\"623\":2,\"636\":16}}],[\"ol\",{\"1\":{\"198\":1}}],[\"onupdated\",{\"1\":{\"640\":3}}],[\"onunmounted\",{\"1\":{\"640\":3}}],[\"onmounted\",{\"1\":{\"640\":3,\"641\":2}}],[\"onbeforeupdate\",{\"1\":{\"640\":3}}],[\"onbeforeunmount\",{\"1\":{\"640\":3,\"641\":2}}],[\"onbeforemount\",{\"1\":{\"640\":3}}],[\"onsearch=\",{\"1\":{\"407\":1}}],[\"onsearch\",{\"1\":{\"407\":3,\"408\":2}}],[\"onsearchkeychange=\",{\"1\":{\"407\":1}}],[\"onsearchkeychange\",{\"1\":{\"407\":3}}],[\"onsubmit\",{\"1\":{\"337\":2,\"340\":3,\"344\":2,\"358\":1}}],[\"onsubmit=\",{\"1\":{\"274\":1}}],[\"onlinkdelete\",{\"1\":{\"379\":1}}],[\"onlinkadd\",{\"1\":{\"379\":1}}],[\"onquerystarted\",{\"1\":{\"351\":2}}],[\"onfinish=\",{\"1\":{\"337\":1,\"344\":1}}],[\"onkeydown=\",{\"1\":{\"283\":1,\"323\":1,\"407\":1,\"408\":1}}],[\"onxxx\",{\"1\":{\"274\":2}}],[\"onxxxcapture\",{\"1\":{\"274\":1}}],[\"onchange=\",{\"1\":{\"283\":2,\"287\":1,\"323\":2,\"333\":1,\"335\":1,\"337\":2,\"344\":2,\"351\":1,\"363\":2,\"405\":1,\"407\":1,\"408\":1}}],[\"onclick\",{\"1\":{\"275\":2,\"322\":2}}],[\"onclickcapture=\",{\"1\":{\"274\":1}}],[\"onclick=\",{\"1\":{\"210\":1,\"274\":5,\"275\":1,\"280\":1,\"283\":2,\"286\":1,\"287\":1,\"301\":5,\"313\":1,\"316\":1,\"318\":2,\"319\":1,\"322\":1,\"323\":2,\"329\":1,\"333\":4,\"335\":4,\"337\":2,\"344\":3,\"345\":3,\"351\":1,\"354\":1,\"359\":1,\"360\":3,\"361\":4,\"362\":3,\"379\":2,\"381\":1,\"390\":2,\"397\":3,\"403\":7,\"404\":2,\"405\":4,\"406\":2}}],[\"once=\",{\"1\":{\"496\":1,\"521\":1,\"534\":1}}],[\"once>n的初值为\",{\"1\":{\"479\":1}}],[\"once\",{\"0\":{\"479\":1},\"1\":{\"229\":1,\"479\":3,\"502\":1,\"521\":2}}],[\"onerror\",{\"1\":{\"245\":1,\"252\":1,\"602\":1,\"610\":1}}],[\"oneasstring\",{\"1\":{\"119\":1}}],[\"onepointone\",{\"1\":{\"119\":1}}],[\"one\",{\"1\":{\"119\":1,\"583\":1}}],[\"on\",{\"1\":{\"92\":1,\"94\":2,\"96\":3,\"193\":1,\"245\":1,\"408\":1,\"423\":1,\"424\":1,\"496\":1,\"502\":1,\"507\":1,\"520\":2,\"562\":1,\"640\":1,\"658\":3}}],[\"observer\",{\"1\":{\"517\":8}}],[\"objinstance\",{\"1\":{\"517\":3}}],[\"obj2\",{\"1\":{\"515\":2}}],[\"obj\",{\"1\":{\"169\":3,\"170\":3,\"515\":3}}],[\"objectid\",{\"1\":{\"338\":3,\"353\":1}}],[\"object\",{\"0\":{\"169\":1,\"170\":3,\"240\":1},\"1\":{\"73\":1,\"91\":2,\"117\":3,\"128\":5,\"130\":1,\"143\":1,\"154\":2,\"162\":1,\"169\":2,\"170\":6,\"200\":1,\"220\":1,\"224\":1,\"237\":1,\"239\":1,\"240\":3,\"257\":1,\"287\":1,\"301\":1,\"354\":1,\"459\":3,\"460\":1,\"461\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":5,\"627\":1,\"630\":1,\"632\":1,\"658\":4}}],[\"oblique\",{\"1\":{\"47\":1}}],[\"off\",{\"1\":{\"193\":1,\"408\":1,\"423\":1,\"424\":1}}],[\"offset\",{\"1\":{\"61\":1,\"609\":1}}],[\"of\",{\"1\":{\"73\":1,\"108\":2,\"147\":1,\"158\":1,\"170\":3,\"345\":1,\"378\":3,\"379\":2,\"539\":1}}],[\"o\",{\"1\":{\"66\":1,\"403\":1}}],[\"over\",{\"1\":{\"521\":1}}],[\"overwrite\",{\"1\":{\"243\":2}}],[\"override\",{\"1\":{\"89\":1,\"90\":1,\"91\":3}}],[\"overline\",{\"1\":{\"65\":1}}],[\"overflowy\",{\"1\":{\"314\":1}}],[\"overflow\",{\"1\":{\"55\":3,\"57\":1,\"521\":1}}],[\"orange\",{\"1\":{\"494\":1,\"521\":1,\"570\":1}}],[\"org\",{\"1\":{\"140\":1}}],[\"order\",{\"1\":{\"46\":1,\"345\":1}}],[\"originaldispatch\",{\"1\":{\"355\":2}}],[\"originalurl\",{\"1\":{\"251\":1}}],[\"origin\",{\"1\":{\"32\":1,\"251\":1}}],[\"open\",{\"1\":{\"201\":2}}],[\"operator\",{\"1\":{\"86\":1}}],[\"optimum\",{\"1\":{\"193\":1}}],[\"option>\",{\"1\":{\"510\":4,\"614\":3}}],[\"option\",{\"1\":{\"193\":2}}],[\"options\",{\"0\":{\"21\":1},\"1\":{\"231\":1,\"381\":1,\"489\":2,\"490\":1,\"492\":2}}],[\"opacity\",{\"1\":{\"32\":1}}],[\"ok\",{\"1\":{\"29\":1,\"337\":1,\"340\":3,\"344\":2,\"358\":1,\"359\":1,\"379\":1,\"430\":1,\"431\":1,\"440\":1,\"454\":1,\"459\":5}}],[\"响应式数据的判断\",{\"0\":{\"655\":1}}],[\"响应式依靠的是\",{\"1\":{\"627\":1}}],[\"响应式图片\",{\"0\":{\"196\":1}}],[\"响应事件\",{\"0\":{\"274\":1}}],[\"响应体相关\",{\"0\":{\"257\":1}}],[\"响应状态相关\",{\"0\":{\"256\":1}}],[\"响应头相关\",{\"0\":{\"255\":1}}],[\"响应头的信息字段\",{\"1\":{\"199\":1}}],[\"响应\",{\"0\":{\"254\":1}}],[\"响应内容\",{\"0\":{\"29\":1},\"1\":{\"344\":1}}],[\"响应处理\",{\"0\":{\"28\":1}}],[\"响应拦截器\",{\"0\":{\"27\":1}}],[\"要完成一个鼠标点击后将坐标显示在界面上\",{\"1\":{\"641\":1}}],[\"要调用到最后一层\",{\"1\":{\"637\":1}}],[\"要访问可以使用模块名前缀\",{\"1\":{\"619\":1}}],[\"要缓存哪个组件\",{\"1\":{\"596\":1}}],[\"要注意访问的路径为命名空间\",{\"1\":{\"619\":1}}],[\"要注意版本问题\",{\"1\":{\"570\":1}}],[\"要注意参数类型\",{\"1\":{\"344\":1}}],[\"要将响应式对象中的某个属性单独提供给外部使用时\",{\"1\":{\"642\":1}}],[\"要将\",{\"1\":{\"565\":1}}],[\"要将配置过的\",{\"1\":{\"27\":1}}],[\"要给标签配置\",{\"1\":{\"512\":1}}],[\"要实现此功能需要先了解\",{\"1\":{\"399\":1}}],[\"要配合\",{\"1\":{\"390\":1}}],[\"要改写上面的\",{\"1\":{\"379\":1}}],[\"要在组件中使用\",{\"1\":{\"378\":1}}],[\"要在项目中使用\",{\"1\":{\"366\":1}}],[\"要想触发\",{\"1\":{\"379\":1}}],[\"要想使用\",{\"1\":{\"366\":1}}],[\"要想处理异步结果\",{\"1\":{\"340\":1}}],[\"要创建\",{\"1\":{\"344\":1}}],[\"要先调用\",{\"1\":{\"338\":1}}],[\"要使得\",{\"1\":{\"451\":1}}],[\"要使用引号包裹\",{\"1\":{\"621\":1}}],[\"要使用箭头函数\",{\"1\":{\"502\":1}}],[\"要使用数据动态更新页面\",{\"1\":{\"403\":1}}],[\"要使用\",{\"1\":{\"305\":1,\"344\":2,\"520\":1,\"539\":1,\"547\":1}}],[\"要使块元素水平居中\",{\"1\":{\"59\":1}}],[\"要自定义\",{\"1\":{\"296\":1}}],[\"要么使用\",{\"1\":{\"306\":1}}],[\"要么忽略第二次的结果\",{\"1\":{\"290\":1}}],[\"要么是\",{\"1\":{\"222\":1}}],[\"要让\",{\"1\":{\"283\":1}}],[\"要求\",{\"1\":{\"428\":1}}],[\"要求这两个操作都要触发\",{\"1\":{\"379\":1}}],[\"要求浏览器提前渲染指定链接\",{\"1\":{\"197\":1}}],[\"要求浏览器提前与指定服务器建立连接\",{\"1\":{\"197\":1}}],[\"要求提前执行指定网址的\",{\"1\":{\"197\":1}}],[\"要求提前下载并缓存指定资源\",{\"1\":{\"197\":1}}],[\"要返回参数类型的变量\",{\"1\":{\"26\":1}}],[\"请输入内容\",{\"1\":{\"618\":1,\"619\":1}}],[\"请为所有的插槽使用完整的\",{\"1\":{\"552\":1}}],[\"请先登录\",{\"1\":{\"27\":1}}],[\"请求中\",{\"1\":{\"608\":1}}],[\"请求资源必须加前缀\",{\"1\":{\"486\":1}}],[\"请求资源时直接发送给前端即可\",{\"1\":{\"485\":1}}],[\"请求端口号后紧跟这个前缀才会被这条规则转发\",{\"1\":{\"486\":1}}],[\"请求接口可以定义一个\",{\"1\":{\"350\":1}}],[\"请求是否已成功并有可用的缓存数据\",{\"1\":{\"344\":1}}],[\"请求去重\",{\"1\":{\"344\":1}}],[\"请求路径相关\",{\"0\":{\"251\":1}}],[\"请求头相关\",{\"0\":{\"249\":1}}],[\"请求\",{\"0\":{\"248\":1},\"1\":{\"344\":1,\"379\":1}}],[\"请求失败\",{\"1\":{\"30\":1}}],[\"请求成功\",{\"1\":{\"30\":1}}],[\"请求错误后\",{\"1\":{\"29\":1}}],[\"请求正确后的响应对象内容\",{\"1\":{\"29\":1}}],[\"请求拦截器\",{\"0\":{\"26\":1}}],[\"请求时\",{\"1\":{\"15\":2}}],[\"effect\",{\"0\":{\"284\":1,\"285\":1,\"286\":1,\"287\":1,\"289\":1,\"290\":1},\"1\":{\"284\":3,\"285\":6,\"286\":6,\"287\":5,\"288\":3,\"289\":3,\"290\":7,\"637\":2}}],[\"editingsearchkey\",{\"1\":{\"407\":3}}],[\"editingtodo\",{\"1\":{\"283\":5,\"323\":5}}],[\"edit\",{\"1\":{\"283\":1,\"323\":1,\"337\":1,\"344\":1}}],[\"eject\",{\"1\":{\"269\":1}}],[\"every\",{\"1\":{\"215\":3}}],[\"event2\",{\"1\":{\"499\":1}}],[\"event1\",{\"1\":{\"499\":1}}],[\"event=\",{\"1\":{\"496\":1}}],[\"events\",{\"1\":{\"408\":1}}],[\"event\",{\"0\":{\"231\":1},\"1\":{\"229\":1,\"230\":1,\"231\":6,\"274\":6,\"275\":3,\"287\":2,\"363\":2,\"405\":2,\"496\":4,\"498\":1,\"502\":1,\"520\":2,\"521\":3,\"522\":5,\"617\":1,\"641\":3}}],[\"eventtarget\",{\"0\":{\"229\":1}}],[\"even\",{\"1\":{\"208\":2}}],[\"esm\",{\"1\":{\"560\":1}}],[\"esmoduleinterop\",{\"1\":{\"209\":2}}],[\"esc\",{\"1\":{\"522\":1}}],[\"es7\",{\"1\":{\"417\":3}}],[\"esnext\",{\"1\":{\"267\":1}}],[\"es6\",{\"0\":{\"4\":1},\"1\":{\"209\":1,\"267\":1,\"305\":1,\"306\":1,\"417\":2,\"459\":2,\"460\":2,\"628\":1}}],[\"equiv=\",{\"1\":{\"517\":1}}],[\"equiv\",{\"1\":{\"199\":1}}],[\"equal\",{\"1\":{\"108\":1,\"138\":1}}],[\"eager\",{\"1\":{\"195\":1}}],[\"each\",{\"1\":{\"69\":1}}],[\"etc\",{\"1\":{\"140\":1}}],[\"el指定当前vue实例为那个容器服务\",{\"1\":{\"553\":1}}],[\"el\",{\"0\":{\"518\":1},\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"506\":1,\"507\":1,\"509\":1,\"510\":4,\"517\":2,\"518\":4,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"539\":1,\"547\":2,\"548\":6,\"553\":1,\"621\":1}}],[\"element=\",{\"1\":{\"369\":3}}],[\"element\",{\"1\":{\"135\":2,\"337\":4,\"366\":3,\"370\":1,\"371\":1,\"372\":6,\"373\":4,\"374\":2,\"376\":2,\"377\":2,\"399\":1,\"517\":2,\"546\":9,\"547\":1,\"548\":9}}],[\"else>java<\",{\"1\":{\"507\":1}}],[\"else\",{\"0\":{\"134\":1},\"1\":{\"27\":1,\"134\":3,\"247\":3,\"275\":1,\"286\":2,\"287\":1,\"290\":2,\"340\":1,\"353\":1,\"358\":2,\"359\":1,\"379\":4,\"461\":2,\"507\":5,\"517\":1,\"537\":2,\"602\":2,\"618\":1,\"619\":1}}],[\"exact\",{\"1\":{\"522\":1}}],[\"exec\",{\"1\":{\"517\":1}}],[\"executes\",{\"1\":{\"69\":1}}],[\"extrareducers\",{\"1\":{\"338\":3,\"343\":3}}],[\"extra\",{\"1\":{\"337\":1}}],[\"extra=\",{\"1\":{\"337\":2,\"344\":3,\"345\":1,\"351\":1}}],[\"extend\",{\"1\":{\"489\":3,\"490\":1,\"491\":2,\"492\":2,\"494\":2,\"565\":1,\"568\":1,\"569\":1,\"657\":1}}],[\"extendquery\",{\"1\":{\"349\":1}}],[\"extends\",{\"1\":{\"79\":1,\"89\":1,\"91\":1,\"94\":3,\"115\":2,\"154\":2,\"273\":1,\"283\":1,\"310\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"321\":2,\"324\":1,\"353\":1,\"358\":1,\"361\":3,\"406\":2,\"418\":1,\"421\":1,\"423\":1,\"424\":1,\"425\":1,\"428\":2,\"451\":1}}],[\"extension\",{\"1\":{\"92\":1,\"353\":1}}],[\"exclude\",{\"1\":{\"267\":1,\"269\":1}}],[\"exceptiondemo\",{\"1\":{\"96\":4}}],[\"exception\",{\"1\":{\"96\":2}}],[\"expose\",{\"1\":{\"245\":1}}],[\"exports\",{\"1\":{\"460\":1,\"461\":2,\"485\":1,\"486\":1,\"561\":2}}],[\"export\",{\"0\":{\"164\":1},\"1\":{\"27\":1,\"164\":7,\"206\":2,\"207\":4,\"209\":2,\"278\":1,\"279\":3,\"280\":1,\"283\":2,\"297\":2,\"323\":2,\"334\":9,\"337\":7,\"338\":3,\"339\":1,\"342\":2,\"343\":3,\"344\":3,\"348\":2,\"349\":1,\"353\":6,\"354\":1,\"358\":2,\"359\":1,\"365\":1,\"372\":1,\"381\":1,\"401\":1,\"407\":3,\"408\":1,\"416\":1,\"460\":13,\"461\":3,\"462\":2,\"463\":4,\"464\":2,\"465\":4,\"466\":3,\"494\":4,\"496\":1,\"552\":1,\"562\":1,\"567\":1,\"568\":1,\"569\":2,\"576\":1,\"577\":1,\"584\":1,\"586\":1,\"613\":1,\"614\":1,\"615\":2,\"618\":1,\"619\":5,\"626\":1,\"633\":2,\"639\":1,\"640\":1,\"641\":2,\"642\":2,\"645\":1,\"646\":1,\"651\":1,\"653\":1,\"654\":1,\"658\":1}}],[\"expires\",{\"1\":{\"243\":2}}],[\"exp\",{\"1\":{\"217\":1}}],[\"expression\",{\"1\":{\"69\":1,\"547\":1}}],[\"e\",{\"1\":{\"68\":2,\"96\":4,\"137\":2,\"187\":1,\"217\":2,\"244\":2,\"283\":6,\"323\":6,\"324\":2,\"333\":2,\"335\":2,\"337\":4,\"338\":2,\"340\":2,\"344\":6,\"358\":9,\"407\":4,\"408\":4,\"517\":2}}],[\"empty\",{\"1\":{\"338\":1,\"378\":1}}],[\"emitter<events>\",{\"1\":{\"408\":2}}],[\"emitter\",{\"1\":{\"408\":10}}],[\"emit\",{\"1\":{\"243\":1,\"408\":1,\"633\":2}}],[\"emits\",{\"1\":{\"69\":1,\"658\":1}}],[\"embed\",{\"1\":{\"200\":2}}],[\"email\",{\"1\":{\"124\":2,\"193\":1,\"631\":1}}],[\"em\",{\"1\":{\"64\":2,\"204\":1}}],[\"enhancer\",{\"1\":{\"355\":2,\"356\":3}}],[\"enhancers\",{\"0\":{\"355\":1},\"1\":{\"353\":1,\"355\":2,\"356\":2}}],[\"env\",{\"1\":{\"292\":1,\"460\":2}}],[\"enter=\",{\"1\":{\"618\":1}}],[\"enter\",{\"1\":{\"283\":1,\"323\":1,\"324\":1,\"407\":1,\"408\":1,\"522\":1,\"658\":4}}],[\"entries\",{\"0\":{\"170\":1},\"1\":{\"124\":1,\"162\":1,\"170\":2}}],[\"encoding\",{\"1\":{\"252\":1}}],[\"encodeuricomponent\",{\"1\":{\"223\":1}}],[\"enctype\",{\"1\":{\"193\":1,\"379\":3,\"385\":1,\"388\":3,\"390\":2,\"397\":2}}],[\"enabletypes\",{\"1\":{\"252\":1}}],[\"enable\",{\"1\":{\"138\":2}}],[\"enumerable\",{\"1\":{\"514\":1}}],[\"enum\",{\"1\":{\"93\":1,\"413\":2,\"414\":2,\"415\":2,\"459\":8,\"460\":1}}],[\"en\",{\"1\":{\"63\":2,\"206\":4,\"207\":12,\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"end=\",{\"1\":{\"385\":1}}],[\"endpoints\",{\"0\":{\"349\":1},\"1\":{\"344\":6,\"345\":1,\"347\":1,\"348\":3,\"349\":1}}],[\"endpoint\",{\"1\":{\"344\":1,\"348\":1,\"351\":2}}],[\"endswith\",{\"1\":{\"183\":2}}],[\"end\",{\"1\":{\"45\":3,\"243\":1,\"246\":1,\"368\":2}}],[\"err\",{\"1\":{\"30\":2,\"252\":2,\"371\":2,\"392\":2,\"451\":2,\"610\":1}}],[\"errorboundary\",{\"1\":{\"372\":1,\"378\":1,\"379\":1,\"380\":1,\"399\":1,\"401\":1}}],[\"errorpage\",{\"1\":{\"371\":1,\"372\":1,\"377\":1,\"378\":1,\"379\":1,\"380\":1,\"392\":1,\"399\":1,\"401\":1}}],[\"errorelement=\",{\"1\":{\"390\":1,\"392\":1,\"393\":1}}],[\"errorelement\",{\"1\":{\"371\":2,\"377\":2,\"391\":1,\"392\":1}}],[\"errors\",{\"1\":{\"345\":1}}],[\"error\",{\"1\":{\"26\":2,\"27\":4,\"29\":5,\"96\":3,\"144\":1,\"234\":2,\"235\":1,\"243\":1,\"244\":1,\"245\":5,\"290\":2,\"338\":5,\"340\":4,\"344\":4,\"347\":2,\"358\":4,\"371\":4,\"378\":2,\"392\":2,\"420\":1,\"439\":1,\"440\":2,\"441\":1,\"442\":2,\"451\":2,\"454\":1,\"487\":2,\"573\":2,\"602\":2}}],[\"two\",{\"1\":{\"583\":1}}],[\"tuesday\",{\"1\":{\"413\":6}}],[\"tuple\",{\"1\":{\"412\":1}}],[\"tsc\",{\"1\":{\"413\":1,\"459\":1,\"470\":1}}],[\"tsconfig\",{\"1\":{\"267\":1,\"437\":1,\"466\":1}}],[\"tsx\",{\"1\":{\"267\":2,\"279\":2,\"280\":1,\"301\":1,\"323\":1,\"337\":5,\"343\":2,\"344\":3,\"351\":1,\"365\":1,\"402\":2,\"408\":2}}],[\"ts\",{\"1\":{\"209\":2,\"267\":2,\"323\":1,\"334\":1,\"339\":1,\"344\":1,\"348\":2,\"353\":2,\"379\":1,\"408\":1,\"457\":1,\"459\":15,\"460\":6,\"461\":1,\"462\":1,\"463\":1,\"464\":1,\"465\":3,\"466\":8,\"470\":2}}],[\"td\",{\"1\":{\"203\":1}}],[\"tfoot\",{\"1\":{\"203\":1}}],[\"tbody\",{\"1\":{\"203\":1}}],[\"txt\",{\"1\":{\"197\":2}}],[\"tagtypes\",{\"1\":{\"345\":1,\"347\":1}}],[\"tagtypes字段定义一系列标签\",{\"1\":{\"345\":1}}],[\"tag>\",{\"1\":{\"268\":1}}],[\"task\",{\"1\":{\"323\":2}}],[\"tasksreducer\",{\"1\":{\"283\":1,\"324\":2}}],[\"table中的第一个子元素\",{\"1\":{\"203\":1}}],[\"table\",{\"1\":{\"203\":1}}],[\"tablet\",{\"1\":{\"196\":2}}],[\"tab\",{\"1\":{\"192\":4,\"522\":2}}],[\"tabindex\",{\"1\":{\"192\":2}}],[\"target是当前操作的元素时才触发事件\",{\"1\":{\"521\":1}}],[\"target=\",{\"1\":{\"190\":1}}],[\"target\",{\"1\":{\"190\":1,\"197\":1,\"209\":1,\"237\":1,\"267\":1,\"275\":1,\"283\":2,\"287\":1,\"323\":2,\"333\":1,\"335\":1,\"337\":2,\"339\":1,\"344\":2,\"363\":1,\"379\":1,\"405\":3,\"407\":1,\"408\":1,\"428\":3,\"486\":1,\"517\":1,\"522\":1,\"631\":8}}],[\"t>\",{\"1\":{\"111\":1}}],[\"t2\",{\"1\":{\"106\":2}}],[\"t1\",{\"1\":{\"106\":4}}],[\"type=\",{\"1\":{\"272\":5,\"273\":1,\"274\":5,\"293\":4,\"294\":4,\"305\":4,\"306\":5,\"307\":1,\"318\":1,\"337\":2,\"344\":2,\"360\":2,\"379\":6,\"384\":2,\"385\":2,\"398\":2,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"504\":2,\"509\":2,\"510\":15,\"511\":1,\"517\":2,\"522\":1,\"523\":1,\"534\":1,\"536\":1,\"537\":1,\"548\":1,\"618\":1,\"651\":1}}],[\"typeof\",{\"1\":{\"209\":2,\"220\":3,\"337\":1,\"353\":1,\"358\":1,\"379\":1,\"410\":1,\"450\":1,\"451\":2,\"461\":2,\"517\":1}}],[\"types=\",{\"1\":{\"465\":2}}],[\"types\",{\"1\":{\"209\":3,\"252\":1,\"259\":1,\"264\":1,\"267\":2,\"268\":1,\"322\":2,\"333\":2,\"457\":3,\"460\":5,\"465\":2,\"466\":1,\"467\":1}}],[\"typescript\",{\"0\":{\"10\":1,\"209\":1,\"267\":1,\"469\":1},\"1\":{\"209\":4,\"267\":1,\"268\":1,\"343\":1,\"344\":1,\"349\":1,\"359\":1,\"411\":1,\"414\":1,\"417\":1,\"418\":1,\"431\":1,\"440\":1,\"441\":2,\"445\":1,\"453\":1,\"456\":1,\"460\":2,\"466\":2,\"467\":4,\"469\":1,\"470\":1}}],[\"type\",{\"1\":{\"73\":2,\"193\":1,\"198\":1,\"229\":1,\"231\":1,\"283\":5,\"293\":1,\"323\":1,\"324\":5,\"331\":4,\"332\":1,\"334\":6,\"337\":5,\"338\":2,\"343\":1,\"347\":7,\"353\":7,\"358\":8,\"359\":2,\"372\":1,\"374\":1,\"378\":1,\"379\":1,\"385\":1,\"408\":1,\"410\":3,\"411\":1,\"451\":2,\"459\":4,\"565\":6}}],[\"trigger\",{\"1\":{\"651\":2}}],[\"trim=\",{\"1\":{\"511\":1}}],[\"trim\",{\"1\":{\"216\":1,\"511\":2,\"618\":1,\"619\":1}}],[\"trimend\",{\"1\":{\"183\":1}}],[\"trimstart\",{\"1\":{\"183\":1}}],[\"tr\",{\"1\":{\"203\":1}}],[\"track\",{\"1\":{\"200\":1,\"651\":2}}],[\"trans`\",{\"1\":{\"350\":2}}],[\"translate\",{\"1\":{\"206\":1,\"645\":1}}],[\"translation\",{\"1\":{\"206\":4,\"207\":4,\"208\":5}}],[\"transport\",{\"1\":{\"140\":1}}],[\"transformresponse\",{\"1\":{\"350\":3}}],[\"transform\",{\"1\":{\"59\":1,\"65\":1,\"645\":1}}],[\"try\",{\"1\":{\"96\":1,\"152\":2,\"244\":2,\"338\":1,\"340\":1,\"344\":1,\"351\":1,\"358\":2}}],[\"true\",{\"1\":{\"72\":1,\"83\":1,\"105\":1,\"121\":1,\"122\":4,\"124\":1,\"128\":3,\"138\":1,\"148\":1,\"162\":2,\"192\":1,\"206\":1,\"207\":1,\"209\":4,\"215\":3,\"221\":1,\"222\":2,\"224\":3,\"229\":3,\"231\":1,\"233\":1,\"243\":11,\"245\":2,\"267\":2,\"269\":2,\"290\":2,\"301\":1,\"307\":1,\"313\":1,\"337\":3,\"338\":2,\"344\":3,\"345\":2,\"375\":1,\"376\":1,\"377\":1,\"385\":1,\"399\":1,\"413\":11,\"427\":1,\"437\":1,\"447\":1,\"448\":1,\"451\":1,\"460\":1,\"466\":2,\"482\":2,\"507\":1,\"514\":3,\"536\":1,\"537\":1,\"547\":2,\"565\":2,\"586\":2,\"589\":1,\"618\":1,\"619\":3,\"621\":1,\"622\":2,\"636\":7,\"645\":1,\"655\":4}}],[\"timeformater\",{\"1\":{\"529\":1}}],[\"time|timeformater\",{\"1\":{\"529\":2}}],[\"time>\",{\"1\":{\"321\":1}}],[\"timeout\",{\"1\":{\"151\":2}}],[\"time\",{\"1\":{\"69\":1,\"193\":1,\"204\":2,\"321\":7,\"529\":3}}],[\"title=$\",{\"1\":{\"578\":1}}],[\"title=\",{\"1\":{\"337\":3,\"344\":3,\"345\":3,\"351\":1}}],[\"title>\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"title|=\",{\"1\":{\"64\":1}}],[\"title$=\",{\"1\":{\"64\":1}}],[\"title^=\",{\"1\":{\"64\":1}}],[\"title\",{\"1\":{\"64\":7,\"192\":2,\"204\":2,\"268\":1,\"337\":18,\"338\":10,\"340\":6,\"343\":4,\"344\":10,\"345\":1,\"350\":2,\"351\":1,\"353\":6,\"358\":2,\"359\":1,\"550\":1,\"551\":1,\"552\":5,\"562\":2,\"578\":5,\"584\":4,\"586\":3,\"587\":1,\"588\":4,\"591\":2,\"592\":2,\"603\":3,\"604\":1}}],[\"temp\",{\"1\":{\"353\":2,\"380\":2,\"405\":3,\"496\":3,\"517\":5,\"618\":4,\"619\":2,\"631\":3}}],[\"template不影响页面的结构\",{\"1\":{\"507\":1}}],[\"template只能使用v\",{\"1\":{\"507\":1}}],[\"template>\",{\"1\":{\"494\":3,\"496\":1,\"507\":1,\"550\":2,\"551\":2,\"552\":4,\"562\":1,\"564\":1,\"569\":1,\"576\":1,\"586\":1,\"614\":1,\"618\":1,\"626\":1,\"633\":2,\"641\":1,\"642\":2,\"645\":1,\"646\":3,\"651\":1,\"653\":1,\"654\":1}}],[\"template\",{\"1\":{\"306\":1,\"489\":2,\"491\":5,\"551\":1,\"552\":2,\"560\":1,\"658\":3}}],[\"teleport>\",{\"1\":{\"645\":1}}],[\"teleport\",{\"0\":{\"645\":1},\"1\":{\"645\":1}}],[\"tel\",{\"1\":{\"193\":1}}],[\"testcat\",{\"1\":{\"452\":1}}],[\"test\",{\"1\":{\"68\":1,\"83\":2,\"90\":1,\"91\":1,\"92\":1,\"103\":1,\"104\":1,\"106\":4,\"113\":1,\"120\":5,\"122\":3,\"169\":1,\"244\":1,\"245\":1,\"252\":1,\"269\":2,\"272\":3,\"273\":1,\"274\":5,\"293\":2,\"294\":2,\"301\":1,\"305\":4,\"306\":3,\"307\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"360\":2,\"371\":1,\"381\":3,\"398\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"496\":1,\"502\":1,\"517\":1,\"534\":1,\"536\":1,\"539\":1,\"543\":1,\"544\":1,\"587\":2,\"605\":3,\"627\":2,\"628\":1}}],[\"textarea\",{\"1\":{\"337\":1,\"344\":1}}],[\"text=\",{\"1\":{\"322\":1,\"476\":1}}],[\"text\",{\"0\":{\"388\":1,\"476\":1},\"1\":{\"59\":1,\"65\":5,\"193\":2,\"268\":1,\"272\":5,\"273\":1,\"274\":5,\"293\":5,\"294\":4,\"305\":4,\"306\":5,\"307\":1,\"318\":1,\"322\":5,\"337\":1,\"360\":2,\"371\":1,\"379\":3,\"384\":1,\"385\":1,\"388\":2,\"392\":1,\"397\":1,\"398\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"476\":2,\"482\":1,\"504\":2,\"509\":2,\"510\":14,\"512\":1,\"517\":3,\"522\":1,\"534\":1,\"536\":1,\"537\":1,\"548\":1,\"618\":1,\"645\":1,\"651\":1}}],[\"t\",{\"1\":{\"67\":1,\"111\":2,\"113\":1,\"115\":1,\"116\":3,\"206\":1,\"207\":2,\"208\":4,\"210\":2,\"428\":5,\"429\":2,\"430\":1,\"431\":1}}],[\"three\",{\"1\":{\"583\":1}}],[\"throw\",{\"1\":{\"96\":2,\"137\":1,\"234\":2,\"243\":2,\"244\":1,\"245\":1,\"252\":1,\"290\":1,\"338\":4,\"358\":1,\"371\":1,\"378\":2}}],[\"through\",{\"1\":{\"65\":1}}],[\"thursday\",{\"1\":{\"413\":2}}],[\"thunkdispatch<nativestate\",{\"1\":{\"359\":1}}],[\"thunkdispatch\",{\"1\":{\"359\":1}}],[\"thunkaction<promise<void>\",{\"1\":{\"359\":3}}],[\"thunkaction<\",{\"1\":{\"359\":1}}],[\"thunkaction\",{\"1\":{\"348\":1,\"359\":2}}],[\"thunk\",{\"0\":{\"359\":1},\"1\":{\"334\":8,\"338\":3,\"359\":6}}],[\"th\",{\"1\":{\"203\":2}}],[\"this\",{\"0\":{\"238\":1},\"1\":{\"75\":7,\"78\":4,\"79\":2,\"80\":1,\"81\":1,\"82\":2,\"83\":2,\"85\":4,\"86\":6,\"87\":5,\"89\":4,\"92\":3,\"94\":5,\"111\":1,\"113\":1,\"147\":2,\"148\":1,\"153\":3,\"154\":9,\"159\":9,\"169\":1,\"215\":3,\"237\":2,\"238\":12,\"239\":1,\"269\":2,\"273\":2,\"275\":2,\"290\":3,\"309\":1,\"310\":1,\"312\":2,\"313\":3,\"314\":8,\"321\":8,\"345\":1,\"361\":6,\"406\":15,\"417\":1,\"418\":3,\"419\":2,\"420\":2,\"421\":2,\"425\":2,\"459\":2,\"461\":1,\"462\":1,\"482\":1,\"492\":2,\"496\":6,\"498\":1,\"499\":1,\"500\":1,\"502\":9,\"504\":2,\"506\":2,\"517\":13,\"520\":2,\"525\":1,\"527\":3,\"528\":4,\"529\":2,\"534\":1,\"536\":7,\"537\":10,\"538\":3,\"539\":9,\"543\":3,\"562\":1,\"565\":2,\"567\":1,\"569\":1,\"573\":1,\"586\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":2,\"605\":3,\"614\":9,\"615\":1,\"616\":1,\"618\":1,\"619\":2,\"621\":3,\"624\":2,\"627\":6,\"628\":3,\"631\":2,\"633\":4,\"653\":1}}],[\"there\",{\"1\":{\"371\":1,\"392\":1}}],[\"thead\",{\"1\":{\"203\":1}}],[\"they\",{\"1\":{\"108\":2}}],[\"these\",{\"1\":{\"108\":2}}],[\"the\",{\"1\":{\"69\":1,\"108\":1,\"345\":1,\"539\":1}}],[\"then\",{\"0\":{\"177\":1},\"1\":{\"30\":1,\"68\":1,\"151\":1,\"152\":2,\"176\":3,\"177\":1,\"178\":1,\"487\":1,\"573\":1,\"614\":1,\"619\":1}}],[\"toraw\",{\"0\":{\"650\":1},\"1\":{\"650\":1}}],[\"torefs\",{\"0\":{\"642\":1},\"1\":{\"642\":7}}],[\"toref\",{\"0\":{\"642\":1},\"1\":{\"642\":8}}],[\"to属性指定了teleport标签内部的html渲染到的目标位置\",{\"1\":{\"645\":1}}],[\"toisostring\",{\"1\":{\"464\":1}}],[\"total\",{\"1\":{\"449\":3,\"517\":10}}],[\"tom2\",{\"1\":{\"454\":1}}],[\"tom1\",{\"1\":{\"454\":1}}],[\"tom\",{\"1\":{\"412\":7,\"421\":3,\"454\":1}}],[\"tofixed\",{\"1\":{\"360\":1,\"412\":1}}],[\"tohexstring\",{\"1\":{\"338\":1,\"353\":1}}],[\"to=\",{\"1\":{\"337\":3,\"344\":3,\"345\":1,\"351\":1,\"368\":5,\"372\":4,\"385\":1,\"399\":2,\"576\":2,\"578\":2,\"584\":1,\"589\":2,\"645\":1}}],[\"toolkit\",{\"0\":{\"332\":1,\"353\":1},\"1\":{\"332\":2,\"333\":1,\"334\":6,\"337\":1,\"338\":3,\"343\":1,\"344\":3,\"353\":2}}],[\"tolocaletimestring\",{\"1\":{\"321\":2}}],[\"tolowercase\",{\"1\":{\"216\":1,\"306\":1,\"307\":1,\"412\":1,\"460\":2,\"461\":1,\"463\":1}}],[\"todos=json\",{\"1\":{\"496\":1}}],[\"todos=\",{\"1\":{\"323\":1}}],[\"todoscontext\",{\"1\":{\"283\":3}}],[\"todos\",{\"1\":{\"283\":8,\"323\":10,\"324\":1,\"496\":2}}],[\"todosreducer\",{\"1\":{\"283\":1}}],[\"todo\",{\"1\":{\"283\":12,\"289\":1,\"323\":21,\"324\":10,\"496\":1}}],[\"todolistprops\",{\"1\":{\"323\":1}}],[\"todolist\",{\"1\":{\"283\":4,\"323\":4}}],[\"touppercase\",{\"1\":{\"216\":1,\"368\":1,\"460\":2,\"461\":1,\"463\":1,\"553\":1}}],[\"tostringasfixed\",{\"1\":{\"119\":1}}],[\"tostring\",{\"1\":{\"119\":1,\"120\":1,\"220\":1,\"223\":2,\"225\":1,\"440\":1}}],[\"to\",{\"1\":{\"108\":2,\"138\":1,\"337\":3,\"345\":1,\"354\":1,\"368\":1,\"372\":2,\"373\":1,\"374\":1,\"381\":2,\"399\":1,\"482\":2,\"576\":1,\"577\":1,\"578\":2,\"580\":1,\"581\":1,\"591\":1,\"592\":1,\"602\":3,\"603\":2,\"604\":1,\"605\":1,\"609\":4,\"658\":2}}],[\"top\",{\"1\":{\"32\":1,\"54\":1,\"108\":2,\"197\":1,\"381\":1,\"482\":1,\"521\":1,\"550\":1,\"551\":4,\"553\":1,\"645\":2}}],[\"token\",{\"1\":{\"30\":2,\"243\":2,\"249\":3}}],[\"tokenkey\",{\"1\":{\"26\":2}}],[\"对比\",{\"0\":{\"632\":1}}],[\"对比规则\",{\"1\":{\"535\":1}}],[\"对被代理对象的属性进行操作\",{\"1\":{\"631\":1}}],[\"对数组的变更方法进行了包裹\",{\"1\":{\"630\":1}}],[\"对数组成员进行排序\",{\"1\":{\"215\":1}}],[\"对属性的读取\",{\"1\":{\"630\":1}}],[\"对这个普通对象的所有操作\",{\"1\":{\"650\":1}}],[\"对这个\",{\"1\":{\"340\":1}}],[\"对\",{\"0\":{\"322\":1},\"1\":{\"297\":1}}],[\"对空数组会返回\",{\"1\":{\"215\":1}}],[\"对于基本数据类型\",{\"1\":{\"627\":1}}],[\"对于模块内部的\",{\"1\":{\"619\":2}}],[\"对于参数节点的子节点递归渲染\",{\"1\":{\"517\":1}}],[\"对于嵌套的对象\",{\"1\":{\"517\":1}}],[\"对于一个库会去先找最外层的\",{\"1\":{\"466\":1}}],[\"对于一个\",{\"1\":{\"463\":1}}],[\"对于一些场景\",{\"1\":{\"208\":1}}],[\"对于这种需要\",{\"1\":{\"373\":1}}],[\"对于类组件\",{\"1\":{\"361\":2}}],[\"对于构造函数\",{\"1\":{\"239\":1}}],[\"对于对象和数组同样返回\",{\"1\":{\"222\":1}}],[\"对于空数组\",{\"1\":{\"215\":1}}],[\"对于使用\",{\"1\":{\"210\":1,\"605\":1}}],[\"对于\",{\"1\":{\"209\":1,\"459\":1,\"517\":1}}],[\"对于不允许为\",{\"1\":{\"144\":1}}],[\"对于不能为\",{\"1\":{\"117\":1}}],[\"对话框\",{\"1\":{\"201\":1}}],[\"对变量进行赋值\",{\"1\":{\"185\":1}}],[\"对应组件\",{\"1\":{\"576\":1}}],[\"对应订阅中的第一个参数\",{\"1\":{\"544\":1}}],[\"对应的地址\",{\"1\":{\"602\":1}}],[\"对应的视图内容会被修改\",{\"1\":{\"517\":1}}],[\"对应的组件中使用\",{\"1\":{\"379\":1}}],[\"对应的\",{\"1\":{\"368\":1}}],[\"对应一个资源\",{\"1\":{\"190\":1}}],[\"对应\",{\"1\":{\"42\":1,\"193\":1,\"203\":1,\"472\":1}}],[\"对请求做配置\",{\"1\":{\"26\":1}}],[\"对象类型\",{\"1\":{\"630\":1}}],[\"对象类型的数据\",{\"1\":{\"627\":1}}],[\"对象就有可能变得相当臃肿\",{\"1\":{\"619\":1}}],[\"对象前\",{\"1\":{\"613\":1}}],[\"对象模式\",{\"0\":{\"587\":1}}],[\"对象完成\",{\"1\":{\"573\":1}}],[\"对象方法\",{\"1\":{\"525\":1}}],[\"对象式函数式共存的时候\",{\"1\":{\"518\":1}}],[\"对象式\",{\"1\":{\"518\":1}}],[\"对象对应属性的最新取值\",{\"1\":{\"517\":1}}],[\"对象示例的\",{\"1\":{\"517\":1}}],[\"对象中是函数\",{\"1\":{\"616\":1}}],[\"对象中是键值对\",{\"1\":{\"616\":3}}],[\"对象中后追加的数据\",{\"1\":{\"539\":1}}],[\"对象中\",{\"1\":{\"520\":1}}],[\"对象中的属性没有\",{\"1\":{\"517\":1}}],[\"对象中的所有属性添加到\",{\"1\":{\"516\":1}}],[\"对象中属性的操作\",{\"1\":{\"516\":1}}],[\"对象中包含两个属性\",{\"1\":{\"378\":1}}],[\"对象写法\",{\"1\":{\"482\":1,\"616\":5,\"617\":2}}],[\"对象上有三个布尔属性\",{\"1\":{\"368\":1}}],[\"对象提供了一些方法\",{\"1\":{\"338\":1}}],[\"对象了\",{\"1\":{\"334\":1}}],[\"对象拆分成多个部分\",{\"1\":{\"334\":1}}],[\"对象也可以有其他字段\",{\"1\":{\"331\":1}}],[\"对象和函数\",{\"1\":{\"317\":1}}],[\"对象作为入参\",{\"1\":{\"275\":1}}],[\"对象作为异常抛出而不局限于\",{\"1\":{\"96\":1}}],[\"对象封装到单个对象中\",{\"1\":{\"242\":1}}],[\"对象与控制台\",{\"0\":{\"235\":1}}],[\"对象传导到目标节点\",{\"1\":{\"230\":1}}],[\"对象实例\",{\"1\":{\"229\":1,\"517\":1}}],[\"对象不会影响到实际的函数参数\",{\"1\":{\"225\":1}}],[\"对象解构属性没有次序\",{\"1\":{\"186\":1}}],[\"对象抛出的错误不会传递到外层代码\",{\"1\":{\"178\":1}}],[\"对象转为\",{\"1\":{\"162\":1}}],[\"对象必须先通过父类的构造函数完成塑造然后再加工\",{\"1\":{\"154\":1}}],[\"对象必须等到内部所有\",{\"1\":{\"152\":1}}],[\"对象被\",{\"1\":{\"152\":1}}],[\"对象如果变成\",{\"1\":{\"152\":1}}],[\"对象执行完才会发生状态改变\",{\"1\":{\"152\":1}}],[\"对象变为\",{\"1\":{\"152\":1}}],[\"对象是一个构造函数\",{\"1\":{\"176\":1}}],[\"对象是定义时上层作用域中的\",{\"1\":{\"159\":1}}],[\"对象是\",{\"1\":{\"120\":1}}],[\"对象的标识\",{\"1\":{\"535\":1}}],[\"对象的相关方法\",{\"0\":{\"240\":1}}],[\"对象的继承\",{\"0\":{\"239\":1}}],[\"对象的方法\",{\"1\":{\"238\":1}}],[\"对象的静态方法\",{\"1\":{\"235\":1}}],[\"对象的解构赋值\",{\"0\":{\"186\":1}}],[\"对象的错误有\",{\"1\":{\"178\":1}}],[\"对象的状态从\",{\"1\":{\"176\":2}}],[\"对象的新增方法\",{\"0\":{\"168\":1}}],[\"对象的扩展运算符用于取出参数对象的所有可比案例属性拷贝到当前对象之中\",{\"1\":{\"167\":1}}],[\"对象的扩展运算符\",{\"0\":{\"167\":1}}],[\"对象的扩展\",{\"0\":{\"165\":1}}],[\"对象的\",{\"1\":{\"73\":1,\"385\":1}}],[\"对象的函数\",{\"1\":{\"66\":1,\"344\":1}}],[\"对象\",{\"0\":{\"175\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"224\":1,\"231\":1},\"1\":{\"13\":1,\"109\":2,\"148\":1,\"151\":1,\"152\":1,\"159\":2,\"225\":1,\"229\":1,\"230\":1,\"243\":5,\"305\":1,\"318\":2,\"331\":3,\"344\":2,\"353\":1,\"358\":1,\"360\":1,\"379\":3,\"381\":2,\"391\":1,\"401\":1,\"517\":1,\"539\":3,\"600\":1,\"602\":1,\"626\":1,\"628\":1,\"632\":1,\"642\":2,\"655\":1}}],[\"ua\",{\"1\":{\"517\":1}}],[\"u>\",{\"1\":{\"428\":1}}],[\"utils\",{\"1\":{\"408\":1}}],[\"util\",{\"1\":{\"351\":1}}],[\"utf\",{\"1\":{\"120\":1,\"252\":1,\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":8,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"uimatch<data\",{\"1\":{\"401\":1}}],[\"ui\",{\"1\":{\"348\":1,\"379\":2,\"406\":1}}],[\"umd\",{\"0\":{\"461\":1,\"463\":1},\"1\":{\"292\":1,\"461\":1,\"463\":3,\"465\":1}}],[\"us\",{\"1\":{\"206\":1,\"207\":3}}],[\"usepoint\",{\"1\":{\"641\":5}}],[\"useparams\",{\"1\":{\"372\":1,\"374\":1}}],[\"useparams<homelinkparams>\",{\"1\":{\"372\":1,\"374\":1}}],[\"useparams<\",{\"1\":{\"337\":1,\"343\":1,\"344\":1}}],[\"usexxx\",{\"1\":{\"641\":1}}],[\"useoutletcontext<\",{\"1\":{\"402\":1}}],[\"useoutletcontext\",{\"0\":{\"402\":1},\"1\":{\"402\":1}}],[\"usematches\",{\"0\":{\"401\":1}}],[\"usemessage\",{\"1\":{\"337\":1,\"340\":1,\"344\":2}}],[\"usememo\",{\"0\":{\"301\":1},\"1\":{\"301\":4,\"302\":3}}],[\"useasyncvalue\",{\"1\":{\"393\":2}}],[\"useasyncdata\",{\"0\":{\"393\":1}}],[\"useasyncerror\",{\"1\":{\"392\":2}}],[\"useactiondata\",{\"1\":{\"379\":3}}],[\"usenavigation\",{\"1\":{\"386\":1,\"390\":1,\"396\":1}}],[\"usenavigate\",{\"1\":{\"381\":3,\"385\":1}}],[\"useimperativehandle\",{\"1\":{\"362\":3}}],[\"useid\",{\"0\":{\"300\":1},\"1\":{\"300\":4}}],[\"useextendqueryquery\",{\"1\":{\"349\":1}}],[\"useeffectevent\",{\"1\":{\"289\":1}}],[\"useeffect\",{\"1\":{\"280\":1,\"286\":1,\"287\":4,\"288\":1,\"290\":1,\"344\":1,\"352\":1,\"379\":2,\"408\":2}}],[\"usegetarticlequery\",{\"1\":{\"344\":2}}],[\"useloader\",{\"1\":{\"380\":1}}],[\"useloaderdata\",{\"1\":{\"378\":3,\"379\":4,\"380\":1,\"390\":1}}],[\"uselocation\",{\"1\":{\"337\":1,\"385\":2,\"389\":1,\"399\":1}}],[\"uselazygetarticlequery\",{\"1\":{\"344\":1}}],[\"uselazyfetcharticlesquery\",{\"1\":{\"344\":1,\"352\":1}}],[\"usefetcher<\",{\"1\":{\"397\":1}}],[\"usefetcher\",{\"1\":{\"395\":2}}],[\"usefetcharticlesquery\",{\"1\":{\"344\":2,\"345\":2}}],[\"usefavoritemutation\",{\"1\":{\"351\":1}}],[\"useform<formtype>\",{\"1\":{\"337\":1,\"340\":1,\"344\":1}}],[\"useupdatearticlemutation\",{\"1\":{\"344\":2}}],[\"usesearchparams\",{\"1\":{\"384\":2}}],[\"useselector\",{\"1\":{\"335\":2,\"337\":3,\"343\":2,\"344\":1,\"348\":1}}],[\"useselector<\",{\"1\":{\"335\":1}}],[\"usesubmit\",{\"1\":{\"379\":1,\"385\":2,\"388\":1,\"390\":1,\"397\":1}}],[\"usestate<array<link>>\",{\"1\":{\"379\":1}}],[\"usestate<array<todo>>\",{\"1\":{\"323\":1}}],[\"usestate<todo>\",{\"1\":{\"283\":1,\"323\":1}}],[\"usestate\",{\"1\":{\"210\":1,\"280\":2,\"283\":1,\"286\":1,\"287\":2,\"296\":2,\"301\":5,\"323\":4,\"324\":1,\"325\":2,\"329\":1,\"333\":2,\"335\":1,\"337\":3,\"344\":3,\"360\":1,\"363\":2,\"379\":2,\"380\":1,\"384\":2,\"385\":1,\"387\":1,\"403\":13,\"404\":2,\"405\":4,\"406\":2,\"407\":3,\"408\":2}}],[\"usecreatearticlesmutation\",{\"1\":{\"344\":2}}],[\"usecallback\",{\"0\":{\"302\":1},\"1\":{\"302\":2}}],[\"usecurrentuser\",{\"1\":{\"297\":3}}],[\"usecontext\",{\"1\":{\"279\":6,\"283\":1}}],[\"usetranslation\",{\"1\":{\"210\":1}}],[\"usedeletearticlemutation\",{\"1\":{\"344\":2,\"345\":3,\"351\":1}}],[\"usedispatch<articledispatch>\",{\"1\":{\"340\":1}}],[\"usedispatch<dispatch<counterincbystepaction\",{\"1\":{\"335\":1}}],[\"usedispatch\",{\"1\":{\"335\":1,\"337\":2}}],[\"used\",{\"1\":{\"144\":1}}],[\"userouteloaderdata\",{\"1\":{\"378\":2}}],[\"userouteerror\",{\"1\":{\"371\":2,\"392\":1}}],[\"usereducer\",{\"1\":{\"323\":1,\"324\":1,\"325\":3}}],[\"usereducer<reducer<array<todo>\",{\"1\":{\"283\":1,\"324\":1}}],[\"usereduce\",{\"1\":{\"296\":1}}],[\"useref\",{\"1\":{\"286\":2,\"287\":1,\"290\":1,\"360\":3,\"361\":1,\"362\":3,\"363\":1}}],[\"userid\",{\"1\":{\"243\":5}}],[\"userinfokeys\",{\"1\":{\"26\":2}}],[\"username\",{\"1\":{\"186\":1}}],[\"user2\",{\"1\":{\"83\":2,\"124\":1}}],[\"user1\",{\"1\":{\"83\":2}}],[\"user>\",{\"1\":{\"83\":1}}],[\"user\",{\"1\":{\"74\":1,\"75\":7,\"78\":6,\"80\":6,\"81\":7,\"82\":4,\"83\":6,\"124\":5,\"131\":6,\"132\":6,\"147\":3,\"162\":1,\"172\":3,\"224\":3,\"243\":1,\"249\":2,\"257\":1,\"260\":4,\"261\":3,\"262\":4,\"297\":7,\"437\":1,\"442\":1,\"459\":11}}],[\"use\",{\"1\":{\"26\":2,\"27\":1,\"210\":2,\"243\":8,\"244\":2,\"245\":2,\"246\":3,\"247\":1,\"249\":2,\"250\":2,\"251\":1,\"252\":5,\"253\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"260\":4,\"265\":1,\"269\":2,\"296\":2,\"338\":4,\"485\":1,\"486\":1,\"567\":1,\"569\":3,\"573\":1,\"576\":1,\"613\":4,\"619\":4,\"657\":2}}],[\"u\",{\"1\":{\"204\":1,\"428\":4,\"437\":1}}],[\"ulref\",{\"1\":{\"314\":5}}],[\"ul>\",{\"1\":{\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"306\":2,\"307\":1,\"314\":1,\"323\":1,\"379\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":3,\"406\":1,\"521\":1,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":1,\"618\":1}}],[\"ul\",{\"1\":{\"198\":1,\"306\":1,\"314\":1,\"323\":1}}],[\"up\",{\"1\":{\"522\":1}}],[\"up<\",{\"1\":{\"521\":1}}],[\"upper\",{\"1\":{\"460\":9,\"461\":3,\"462\":2,\"463\":3}}],[\"uppercase\",{\"1\":{\"65\":1}}],[\"upsertarticle\",{\"1\":{\"358\":2,\"359\":2}}],[\"upsertarticlefn\",{\"1\":{\"358\":2}}],[\"upsertarg>\",{\"1\":{\"344\":2,\"345\":2,\"347\":2}}],[\"upsertarg\",{\"1\":{\"344\":2}}],[\"upsert\",{\"1\":{\"353\":2}}],[\"upsertrequest\",{\"1\":{\"338\":5,\"358\":2,\"359\":1}}],[\"upsertpayload>\",{\"1\":{\"338\":3}}],[\"upsertpayload\",{\"1\":{\"337\":1,\"338\":1}}],[\"updatethefirsthobby\",{\"1\":{\"539\":2}}],[\"updatenameoffirstfriend\",{\"1\":{\"539\":2}}],[\"updatecty\",{\"1\":{\"538\":2}}],[\"updated\",{\"1\":{\"406\":1,\"639\":2}}],[\"updatefavoritefn\",{\"1\":{\"358\":2}}],[\"updatefavorite\",{\"1\":{\"353\":2,\"358\":2,\"359\":1}}],[\"updatequerydata\",{\"1\":{\"351\":3}}],[\"updatearticle\",{\"1\":{\"344\":1,\"345\":1,\"347\":1}}],[\"updater\",{\"1\":{\"343\":2}}],[\"updatemany\",{\"1\":{\"343\":2}}],[\"update\",{\"1\":{\"140\":2,\"337\":4,\"338\":3,\"344\":2,\"345\":4,\"347\":4,\"351\":1,\"517\":4,\"546\":1,\"547\":3,\"548\":2}}],[\"unmounted\",{\"1\":{\"639\":2}}],[\"unmountcomponentatnode\",{\"1\":{\"316\":1}}],[\"uninstall\",{\"1\":{\"559\":1}}],[\"unicode\",{\"1\":{\"65\":1}}],[\"unbind\",{\"1\":{\"547\":1,\"548\":1}}],[\"unknown>\",{\"1\":{\"401\":1}}],[\"unknown\",{\"1\":{\"399\":1,\"401\":1}}],[\"unsubscribe\",{\"1\":{\"543\":1}}],[\"unsubscribefn\",{\"1\":{\"354\":3}}],[\"unshift\",{\"1\":{\"215\":2,\"405\":1,\"534\":1,\"536\":1,\"539\":3,\"618\":1,\"619\":1}}],[\"undo\",{\"1\":{\"351\":1}}],[\"undefined>\",{\"1\":{\"353\":1}}],[\"undefined\",{\"0\":{\"221\":1},\"1\":{\"148\":1,\"161\":1,\"167\":1,\"172\":2,\"173\":1,\"178\":1,\"185\":3,\"188\":1,\"215\":3,\"221\":2,\"225\":1,\"233\":1,\"237\":1,\"238\":2,\"241\":1,\"283\":1,\"323\":1,\"334\":1,\"337\":1,\"344\":3,\"351\":1,\"359\":1,\"379\":1,\"390\":1,\"392\":1,\"406\":1,\"407\":1,\"408\":1,\"437\":3,\"543\":1,\"633\":1}}],[\"underline\",{\"1\":{\"65\":1}}],[\"unwrap\",{\"1\":{\"340\":1,\"344\":3}}],[\"uncurry\",{\"1\":{\"275\":2}}],[\"unequal\",{\"1\":{\"108\":1}}],[\"urlencoded\",{\"1\":{\"193\":2}}],[\"url1\",{\"1\":{\"16\":1,\"17\":1,\"18\":2}}],[\"url\",{\"0\":{\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"190\":1,\"262\":1},\"1\":{\"13\":1,\"15\":2,\"16\":5,\"18\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"32\":1,\"62\":1,\"190\":6,\"193\":1,\"204\":2,\"243\":1,\"251\":3,\"262\":1,\"292\":1,\"344\":7,\"349\":1,\"351\":2,\"368\":3,\"372\":1,\"373\":2,\"375\":1,\"376\":1,\"379\":4,\"381\":1,\"459\":9,\"553\":3,\"578\":1,\"582\":1,\"602\":1,\"608\":3}}],[\"ignoredelements\",{\"1\":{\"657\":1}}],[\"ie=edge\",{\"1\":{\"517\":1}}],[\"ii\",{\"1\":{\"405\":2}}],[\"ip\",{\"1\":{\"253\":1}}],[\"i18n\",{\"1\":{\"206\":4,\"207\":8,\"208\":4,\"209\":3,\"210\":1}}],[\"i18nextbrowserlanguagedetector\",{\"1\":{\"210\":2}}],[\"i18next\",{\"0\":{\"6\":1},\"1\":{\"206\":7,\"207\":5,\"208\":1,\"209\":3,\"210\":3}}],[\"icon\",{\"1\":{\"197\":1}}],[\"i++\",{\"1\":{\"90\":1,\"123\":2,\"135\":2}}],[\"isreadonly\",{\"1\":{\"655\":2}}],[\"isreactive\",{\"1\":{\"655\":2}}],[\"isref\",{\"1\":{\"655\":2}}],[\"isshow\",{\"1\":{\"645\":5}}],[\"issuccess\",{\"1\":{\"344\":3,\"345\":3}}],[\"ishot\",{\"1\":{\"621\":6,\"623\":2}}],[\"ishttperror\",{\"1\":{\"451\":2}}],[\"isauthorized\",{\"1\":{\"399\":5}}],[\"isactive\",{\"1\":{\"368\":11,\"372\":8,\"385\":2}}],[\"istransitioning\",{\"1\":{\"368\":1}}],[\"isloading\",{\"1\":{\"344\":7}}],[\"isfavorite\",{\"1\":{\"351\":3,\"353\":3}}],[\"isfetching\",{\"1\":{\"344\":3,\"345\":4,\"352\":3}}],[\"isfulfilled\",{\"1\":{\"338\":2,\"343\":2}}],[\"isfinite\",{\"1\":{\"222\":1}}],[\"iscustomelement\",{\"1\":{\"657\":1}}],[\"iscreate\",{\"1\":{\"337\":3}}],[\"isclosed\",{\"1\":{\"290\":4}}],[\"isproxy\",{\"1\":{\"655\":2}}],[\"isprototypeof\",{\"1\":{\"220\":1,\"240\":1}}],[\"ispending\",{\"1\":{\"368\":1}}],[\"isplaying=\",{\"1\":{\"286\":1,\"287\":1}}],[\"isplaying\",{\"1\":{\"286\":7,\"287\":6,\"290\":2}}],[\"isenabled\",{\"1\":{\"437\":1}}],[\"isenvdevelopment\",{\"1\":{\"269\":2}}],[\"isenvproduction\",{\"1\":{\"269\":2}}],[\"iserror\",{\"1\":{\"344\":2}}],[\"isediting\",{\"1\":{\"283\":4,\"323\":4,\"337\":7,\"344\":6,\"359\":1}}],[\"isnan\",{\"1\":{\"222\":1}}],[\"isodd\",{\"1\":{\"97\":4,\"99\":4,\"123\":1,\"614\":2,\"619\":2}}],[\"is\",{\"1\":{\"73\":2,\"122\":3,\"128\":9,\"138\":1,\"287\":1,\"301\":1,\"354\":1,\"371\":1,\"392\":1}}],[\"io\",{\"1\":{\"68\":1,\"243\":1}}],[\"idle\",{\"1\":{\"387\":6,\"389\":1}}],[\"id=$\",{\"1\":{\"578\":1}}],[\"id=\",{\"1\":{\"272\":1,\"293\":1,\"294\":2,\"305\":3,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":11,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1,\"658\":6}}],[\"identical\",{\"1\":{\"72\":1,\"82\":1,\"83\":1}}],[\"identifierprefix\",{\"1\":{\"300\":2}}],[\"identifier\",{\"1\":{\"69\":1}}],[\"id\",{\"1\":{\"64\":1,\"190\":1,\"192\":1,\"193\":6,\"203\":1,\"262\":7,\"283\":8,\"294\":1,\"297\":2,\"300\":1,\"305\":3,\"323\":14,\"324\":11,\"337\":20,\"338\":11,\"343\":13,\"344\":13,\"345\":4,\"347\":10,\"349\":2,\"350\":2,\"351\":8,\"352\":3,\"353\":14,\"358\":10,\"359\":8,\"360\":1,\"372\":4,\"373\":2,\"374\":3,\"378\":19,\"379\":9,\"390\":5,\"394\":3,\"397\":2,\"398\":2,\"399\":2,\"401\":3,\"428\":3,\"459\":1,\"532\":4,\"534\":5,\"535\":1,\"536\":8,\"537\":4,\"538\":5,\"543\":1,\"562\":1,\"578\":5,\"584\":5,\"586\":3,\"587\":1,\"588\":4,\"591\":2,\"592\":2,\"605\":1,\"658\":3}}],[\"i\",{\"1\":{\"63\":4,\"66\":1,\"90\":3,\"122\":1,\"123\":7,\"135\":8,\"147\":2,\"198\":2,\"204\":1,\"252\":1,\"403\":1,\"405\":5,\"541\":1}}],[\"it\",{\"1\":{\"144\":1}}],[\"item>\",{\"1\":{\"337\":6,\"344\":5,\"345\":1,\"351\":1}}],[\"item\",{\"1\":{\"124\":3,\"314\":2,\"323\":3,\"337\":5,\"343\":2,\"344\":6,\"345\":7,\"351\":2,\"352\":2,\"405\":4,\"406\":3,\"532\":5,\"534\":3,\"536\":3,\"537\":4,\"538\":4,\"550\":2,\"551\":2,\"552\":4,\"618\":2}}],[\"items\",{\"1\":{\"45\":1,\"46\":2,\"147\":2,\"405\":7,\"406\":4,\"429\":3}}],[\"iterator\",{\"1\":{\"109\":2,\"147\":2,\"161\":1,\"180\":1}}],[\"iterable<int>\",{\"1\":{\"109\":2}}],[\"iterable\",{\"1\":{\"109\":2,\"267\":1}}],[\"italic\",{\"1\":{\"47\":1}}],[\"immediate\",{\"1\":{\"536\":1,\"537\":1,\"621\":1,\"636\":6}}],[\"immer\",{\"1\":{\"334\":2,\"351\":1,\"353\":1}}],[\"immutable\",{\"1\":{\"330\":1}}],[\"img\",{\"1\":{\"195\":1,\"196\":1}}],[\"implements\",{\"1\":{\"90\":1,\"423\":3,\"424\":1,\"428\":1,\"429\":1}}],[\"importloaders\",{\"1\":{\"269\":3}}],[\"important\",{\"1\":{\"64\":2}}],[\"import\",{\"1\":{\"31\":1,\"68\":1,\"72\":2,\"73\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"164\":1,\"206\":5,\"207\":10,\"209\":3,\"243\":4,\"246\":1,\"247\":1,\"249\":1,\"250\":1,\"252\":3,\"260\":2,\"265\":1,\"268\":1,\"269\":2,\"279\":6,\"280\":2,\"304\":3,\"306\":1,\"323\":3,\"334\":4,\"337\":1,\"338\":4,\"344\":3,\"353\":5,\"359\":2,\"365\":2,\"372\":1,\"377\":5,\"378\":6,\"379\":3,\"380\":5,\"399\":1,\"401\":3,\"407\":5,\"408\":1,\"429\":1,\"460\":6,\"461\":2,\"462\":1,\"463\":1,\"464\":4,\"465\":8,\"494\":3,\"542\":1,\"560\":3,\"562\":2,\"568\":3,\"569\":2,\"576\":10,\"577\":6,\"584\":6,\"613\":6,\"616\":1,\"617\":1,\"618\":1,\"619\":7,\"633\":2,\"640\":1,\"641\":2,\"642\":2,\"645\":1,\"646\":2,\"651\":1,\"653\":2,\"654\":1}}],[\"image\",{\"1\":{\"32\":2,\"193\":1,\"482\":3}}],[\"inject\",{\"0\":{\"652\":1,\"654\":1},\"1\":{\"652\":2,\"654\":3}}],[\"injectendpoints\",{\"1\":{\"349\":3}}],[\"infinity\",{\"1\":{\"414\":1}}],[\"info=computed\",{\"1\":{\"635\":2}}],[\"info\",{\"1\":{\"96\":1,\"235\":1,\"621\":2,\"622\":1}}],[\"innertext\",{\"1\":{\"548\":1}}],[\"innertext=binding\",{\"1\":{\"546\":1}}],[\"inner\",{\"1\":{\"274\":2,\"460\":3}}],[\"invalidatestags\",{\"1\":{\"345\":5,\"347\":5,\"351\":3}}],[\"invalid\",{\"1\":{\"243\":1}}],[\"invocation\",{\"1\":{\"91\":3}}],[\"inspect\",{\"1\":{\"561\":1}}],[\"inserted\",{\"1\":{\"546\":1,\"547\":1,\"548\":2}}],[\"ins\",{\"1\":{\"204\":1}}],[\"instanceof\",{\"1\":{\"220\":2,\"358\":2,\"379\":2}}],[\"instances\",{\"1\":{\"108\":1}}],[\"instance\",{\"1\":{\"108\":5,\"220\":1}}],[\"installed\",{\"1\":{\"569\":1}}],[\"install\",{\"1\":{\"31\":1,\"140\":2,\"210\":1,\"266\":1,\"267\":1,\"457\":1,\"460\":2,\"467\":1,\"469\":1,\"559\":1,\"569\":3,\"572\":1,\"575\":1,\"613\":1,\"661\":1}}],[\"inputref\",{\"1\":{\"361\":5,\"362\":7,\"363\":3}}],[\"input\",{\"1\":{\"193\":2,\"216\":1,\"287\":2,\"361\":2,\"362\":4,\"363\":2,\"510\":1,\"511\":2,\"512\":1,\"517\":5,\"534\":3}}],[\"incrementwait\",{\"1\":{\"614\":2,\"617\":2,\"619\":1}}],[\"incrementodd\",{\"1\":{\"614\":2,\"617\":2,\"619\":1}}],[\"increment\",{\"1\":{\"614\":2,\"617\":1,\"619\":1}}],[\"incrasync\",{\"1\":{\"334\":2,\"335\":1}}],[\"incraction\",{\"1\":{\"331\":1}}],[\"incrbystep\",{\"1\":{\"334\":5,\"335\":1}}],[\"incr\",{\"1\":{\"334\":6,\"335\":1}}],[\"include=\",{\"1\":{\"596\":2}}],[\"include\",{\"1\":{\"209\":1,\"252\":1,\"267\":1,\"596\":2}}],[\"includes\",{\"0\":{\"149\":1},\"1\":{\"183\":2,\"399\":1}}],[\"inc\",{\"1\":{\"156\":2}}],[\"initiate\",{\"1\":{\"348\":2}}],[\"initial\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"initialarticles\",{\"1\":{\"337\":2,\"338\":1}}],[\"initialstate\",{\"1\":{\"334\":1,\"337\":1,\"338\":1,\"343\":1}}],[\"initoption\",{\"1\":{\"210\":1}}],[\"initoptions\",{\"1\":{\"208\":1}}],[\"initreacti18next\",{\"1\":{\"210\":2}}],[\"init\",{\"1\":{\"144\":4,\"145\":1,\"206\":1,\"207\":1,\"210\":1,\"403\":2,\"460\":2,\"469\":1,\"661\":1}}],[\"in\",{\"1\":{\"69\":1,\"93\":1,\"109\":1,\"122\":1,\"124\":1,\"135\":2,\"224\":3,\"226\":1,\"345\":1,\"428\":1,\"510\":1,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":2,\"618\":1}}],[\"intarray\",{\"1\":{\"426\":3}}],[\"integrity\",{\"1\":{\"197\":1}}],[\"intervalid\",{\"1\":{\"360\":3}}],[\"interface\",{\"1\":{\"209\":1,\"283\":1,\"297\":1,\"323\":1,\"324\":1,\"337\":1,\"344\":1,\"353\":2,\"358\":1,\"381\":1,\"401\":1,\"407\":1,\"423\":3,\"424\":2,\"425\":1,\"428\":1,\"429\":2,\"434\":10,\"441\":4,\"442\":1,\"446\":1,\"452\":2,\"454\":2,\"459\":5,\"460\":1,\"462\":1}}],[\"interpolation\",{\"1\":{\"208\":1}}],[\"internalservererror\",{\"1\":{\"459\":1}}],[\"internal\",{\"1\":{\"83\":2}}],[\"interceptors\",{\"1\":{\"26\":1,\"27\":1}}],[\"interceptor\",{\"1\":{\"25\":1,\"459\":3}}],[\"intfunc\",{\"1\":{\"116\":2}}],[\"int>\",{\"1\":{\"112\":1}}],[\"ints\",{\"1\":{\"112\":1}}],[\"intcache\",{\"1\":{\"111\":3}}],[\"intpoint\",{\"1\":{\"89\":4}}],[\"int\",{\"0\":{\"119\":1},\"1\":{\"68\":1,\"70\":3,\"74\":1,\"89\":2,\"91\":1,\"95\":1,\"97\":2,\"99\":2,\"104\":2,\"105\":2,\"106\":3,\"109\":5,\"117\":4,\"119\":5,\"131\":1,\"132\":1,\"143\":1,\"144\":2}}],[\"indent\",{\"1\":{\"65\":1}}],[\"index++\",{\"1\":{\"403\":1,\"521\":1}}],[\"indexpage\",{\"1\":{\"376\":1,\"377\":1}}],[\"indexof\",{\"1\":{\"215\":2,\"216\":1,\"536\":2,\"537\":1}}],[\"index\",{\"1\":{\"54\":1,\"93\":1,\"207\":2,\"216\":1,\"272\":2,\"273\":2,\"279\":3,\"306\":2,\"314\":2,\"337\":2,\"351\":4,\"366\":1,\"376\":3,\"377\":2,\"378\":3,\"403\":23,\"405\":13,\"406\":5,\"408\":1,\"442\":1,\"460\":6,\"465\":1,\"466\":8,\"494\":1,\"521\":2,\"532\":10,\"534\":6,\"535\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":4,\"550\":2,\"551\":2,\"552\":4,\"576\":1,\"584\":1,\"613\":5,\"615\":1,\"618\":3,\"619\":4}}],[\"inline\",{\"0\":{\"58\":1},\"1\":{\"44\":1,\"51\":1,\"58\":4}}],[\"inherit\",{\"1\":{\"35\":1,\"56\":1,\"57\":1}}],[\"if不能使用v\",{\"1\":{\"507\":1}}],[\"if=\",{\"1\":{\"507\":6,\"539\":1,\"645\":1}}],[\"if\",{\"0\":{\"134\":1},\"1\":{\"27\":1,\"100\":2,\"105\":1,\"109\":1,\"121\":1,\"122\":2,\"123\":2,\"128\":2,\"134\":4,\"224\":1,\"247\":3,\"275\":1,\"283\":3,\"286\":2,\"287\":1,\"290\":2,\"297\":1,\"323\":3,\"324\":2,\"337\":4,\"338\":6,\"340\":2,\"344\":2,\"345\":1,\"347\":1,\"351\":1,\"353\":3,\"354\":1,\"358\":4,\"359\":1,\"368\":1,\"378\":2,\"379\":5,\"380\":1,\"390\":1,\"394\":1,\"399\":1,\"405\":2,\"407\":1,\"408\":2,\"410\":1,\"447\":1,\"448\":1,\"450\":1,\"451\":2,\"461\":2,\"496\":1,\"507\":4,\"517\":5,\"522\":1,\"527\":2,\"536\":1,\"537\":3,\"602\":2,\"609\":1,\"614\":1,\"618\":1,\"619\":2,\"658\":3}}],[\"b++\",{\"1\":{\"622\":1}}],[\"b>\",{\"1\":{\"427\":1}}],[\"browserrouter>\",{\"1\":{\"369\":1}}],[\"browserrouter\",{\"1\":{\"366\":1}}],[\"break\",{\"1\":{\"137\":9,\"213\":1,\"353\":3}}],[\"bson\",{\"1\":{\"338\":1}}],[\"by\",{\"1\":{\"333\":1,\"335\":1,\"345\":1}}],[\"byte\",{\"1\":{\"243\":1}}],[\"binary\",{\"1\":{\"559\":1}}],[\"bind=\",{\"1\":{\"658\":5}}],[\"binding\",{\"1\":{\"546\":4,\"547\":1,\"548\":12}}],[\"bind\",{\"0\":{\"509\":1},\"1\":{\"238\":1,\"483\":2,\"508\":1,\"509\":1,\"529\":1,\"532\":1,\"546\":1,\"547\":1,\"548\":2,\"552\":1,\"554\":2,\"658\":1}}],[\"bidi\",{\"1\":{\"65\":1}}],[\"bug\",{\"1\":{\"636\":1}}],[\"bugs\",{\"1\":{\"345\":1}}],[\"build\",{\"1\":{\"460\":2}}],[\"builder\",{\"1\":{\"338\":6,\"343\":4,\"344\":11,\"345\":6,\"347\":6,\"349\":2,\"350\":1,\"351\":2}}],[\"bubbles\",{\"1\":{\"231\":1}}],[\"buffer\",{\"1\":{\"223\":2,\"257\":1}}],[\"buttons\",{\"1\":{\"379\":1,\"390\":1}}],[\"button>\",{\"1\":{\"210\":1,\"274\":3,\"275\":1,\"280\":1,\"283\":2,\"286\":1,\"287\":1,\"301\":5,\"313\":1,\"316\":1,\"318\":2,\"319\":1,\"322\":1,\"323\":2,\"329\":1,\"333\":4,\"335\":4,\"337\":3,\"344\":5,\"345\":3,\"351\":1,\"354\":1,\"359\":1,\"360\":3,\"361\":4,\"362\":3,\"365\":2,\"366\":1,\"368\":2,\"372\":3,\"379\":7,\"381\":1,\"384\":1,\"385\":1,\"390\":2,\"397\":3,\"398\":1,\"403\":7,\"404\":2,\"405\":4,\"406\":2,\"477\":1,\"479\":1,\"480\":1,\"507\":1,\"520\":2,\"521\":3,\"534\":1,\"537\":3,\"538\":1,\"539\":6,\"548\":1,\"562\":1,\"569\":1,\"614\":4,\"617\":2,\"621\":1,\"622\":3,\"626\":1,\"633\":1,\"642\":6,\"645\":2,\"653\":1,\"654\":1}}],[\"button\",{\"1\":{\"193\":2,\"365\":2,\"366\":1,\"368\":2,\"379\":1,\"381\":1,\"397\":1,\"477\":2,\"523\":1,\"539\":2}}],[\"btoa\",{\"1\":{\"223\":2}}],[\"bdi\",{\"1\":{\"204\":1}}],[\"bdo\",{\"1\":{\"204\":1}}],[\"b\",{\"1\":{\"70\":2,\"90\":5,\"91\":2,\"92\":3,\"93\":1,\"94\":17,\"100\":3,\"104\":1,\"106\":2,\"112\":1,\"115\":1,\"119\":1,\"120\":3,\"128\":3,\"129\":3,\"130\":2,\"137\":2,\"143\":1,\"144\":3,\"162\":2,\"167\":2,\"185\":1,\"187\":1,\"204\":1,\"208\":3,\"243\":2,\"275\":2,\"301\":7,\"343\":2,\"405\":4,\"427\":4,\"428\":2,\"444\":2,\"445\":3,\"446\":6,\"447\":3,\"448\":3,\"450\":5,\"451\":7,\"454\":2,\"482\":2,\"502\":3,\"510\":3,\"528\":2,\"569\":2,\"581\":2,\"582\":4,\"583\":2,\"622\":1,\"636\":1,\"637\":1,\"642\":5,\"649\":1,\"658\":1}}],[\"behavior\",{\"1\":{\"609\":2}}],[\"be\",{\"1\":{\"144\":2,\"269\":1}}],[\"beforeunmount\",{\"1\":{\"639\":2}}],[\"beforeupdate\",{\"1\":{\"639\":2}}],[\"beforemount\",{\"1\":{\"639\":2}}],[\"beforeresolve\",{\"1\":{\"606\":1}}],[\"beforerouteleave\",{\"1\":{\"605\":1}}],[\"beforerouteupdate\",{\"1\":{\"605\":1}}],[\"beforerouteenter\",{\"1\":{\"605\":1}}],[\"beforeenter\",{\"1\":{\"604\":1}}],[\"beforeeach\",{\"1\":{\"602\":1,\"606\":1}}],[\"beforedestroy\",{\"1\":{\"528\":2,\"530\":2,\"543\":1,\"599\":1}}],[\"beforecreate\",{\"1\":{\"525\":1,\"633\":1,\"639\":2,\"640\":1}}],[\"before\",{\"1\":{\"62\":2,\"144\":1,\"469\":1}}],[\"between\",{\"1\":{\"45\":2}}],[\"black\",{\"1\":{\"482\":1}}],[\"blank\",{\"1\":{\"190\":1,\"197\":1}}],[\"blockquote\",{\"1\":{\"204\":1}}],[\"block\",{\"0\":{\"58\":1},\"1\":{\"51\":1,\"58\":2}}],[\"blue\",{\"1\":{\"40\":1,\"41\":1,\"63\":3,\"274\":2,\"305\":1,\"414\":4,\"415\":3,\"658\":4}}],[\"bootcdn\",{\"1\":{\"529\":1}}],[\"boolean>\",{\"1\":{\"427\":1}}],[\"boolean\",{\"1\":{\"233\":1,\"353\":1,\"437\":1,\"447\":1,\"448\":1,\"451\":1}}],[\"bool\",{\"1\":{\"121\":1}}],[\"both\",{\"1\":{\"57\":1}}],[\"bottom\",{\"1\":{\"32\":1,\"54\":1,\"645\":1}}],[\"body>\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"bodyparser\",{\"1\":{\"252\":6,\"338\":3}}],[\"body\",{\"1\":{\"54\":1,\"162\":1,\"172\":3,\"173\":1,\"243\":4,\"244\":1,\"246\":1,\"247\":3,\"252\":2,\"257\":1,\"260\":2,\"261\":1,\"262\":2,\"265\":1,\"338\":10,\"344\":3,\"456\":1,\"645\":1}}],[\"body参数\",{\"1\":{\"16\":1}}],[\"borderradius\",{\"1\":{\"362\":1}}],[\"border\",{\"1\":{\"32\":2,\"33\":5,\"53\":1,\"314\":1,\"362\":1,\"477\":2,\"482\":4,\"539\":2}}],[\"box2\",{\"1\":{\"521\":2}}],[\"box1\",{\"1\":{\"521\":2}}],[\"box\",{\"0\":{\"53\":1},\"1\":{\"32\":6,\"36\":1,\"53\":4}}],[\"badrequest\",{\"1\":{\"459\":2}}],[\"babelrc\",{\"1\":{\"460\":1}}],[\"babel\",{\"1\":{\"272\":3,\"273\":1,\"274\":5,\"292\":1,\"293\":4,\"294\":1,\"305\":2,\"306\":4,\"307\":1,\"318\":1,\"360\":2,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"460\":6}}],[\"baidu\",{\"1\":{\"258\":1,\"521\":1}}],[\"back\",{\"0\":{\"593\":1},\"1\":{\"258\":1,\"593\":1}}],[\"backwards\",{\"1\":{\"247\":3}}],[\"backup\",{\"1\":{\"169\":4}}],[\"backgroundimage\",{\"1\":{\"483\":1}}],[\"backgroundcolor\",{\"1\":{\"274\":4,\"305\":1}}],[\"background\",{\"1\":{\"32\":9,\"62\":1,\"305\":1,\"477\":2,\"482\":6,\"494\":1,\"521\":4,\"539\":2,\"570\":1,\"645\":2}}],[\"baz\",{\"1\":{\"108\":5,\"583\":1}}],[\"bar>\",{\"1\":{\"320\":1}}],[\"bar\",{\"1\":{\"108\":3,\"132\":2,\"147\":1,\"297\":1,\"320\":2,\"466\":4,\"547\":2,\"583\":1}}],[\"basic\",{\"0\":{\"205\":1},\"1\":{\"482\":4,\"483\":2}}],[\"basis\",{\"1\":{\"46\":1}}],[\"basequeryreturnvalue\",{\"1\":{\"350\":4}}],[\"basequery\",{\"1\":{\"344\":8}}],[\"basequeryfn<fetchargs>\",{\"1\":{\"344\":1}}],[\"basequeryfn\",{\"1\":{\"344\":1}}],[\"base64\",{\"1\":{\"223\":8,\"243\":1}}],[\"baseline\",{\"1\":{\"45\":1}}],[\"baseurl\",{\"1\":{\"24\":1,\"338\":1,\"344\":1,\"460\":1}}],[\"示例代码\",{\"1\":{\"539\":1}}],[\"示例组件\",{\"0\":{\"365\":1}}],[\"示例\",{\"0\":{\"333\":1,\"337\":1,\"456\":1,\"534\":1},\"1\":{\"24\":1,\"561\":1,\"617\":1,\"641\":1,\"651\":1}}],[\"默认引入会导致只有所有组件都准备好才渲染界面\",{\"1\":{\"646\":1}}],[\"默认缓存中间的所有组件\",{\"1\":{\"596\":1}}],[\"默认插槽\",{\"0\":{\"550\":1}}],[\"默认不可以\",{\"1\":{\"622\":1}}],[\"默认不监视对象的内部值的变化\",{\"1\":{\"622\":1}}],[\"默认不进行响应式处理\",{\"1\":{\"539\":1}}],[\"默认不换行\",{\"1\":{\"45\":1}}],[\"默认功能是切换焦点\",{\"1\":{\"522\":1}}],[\"默认先执行内部元素的点击事件\",{\"1\":{\"521\":1}}],[\"默认收集的就是\",{\"1\":{\"508\":1}}],[\"默认暴露\",{\"1\":{\"494\":1}}],[\"默认都是false\",{\"1\":{\"482\":1}}],[\"默认修饰符\",{\"1\":{\"418\":1}}],[\"默认按照字典顺序排序\",{\"1\":{\"215\":1}}],[\"默认是\",{\"1\":{\"243\":2}}],[\"默认是逗号\",{\"1\":{\"215\":1}}],[\"默认是同步\",{\"1\":{\"197\":1}}],[\"默认以等宽字体显示\",{\"1\":{\"204\":1}}],[\"默认斜体\",{\"1\":{\"204\":1}}],[\"默认类型\",{\"1\":{\"193\":1}}],[\"默认导出\",{\"1\":{\"164\":1}}],[\"默认指向类的实例\",{\"1\":{\"153\":1}}],[\"默认参数\",{\"0\":{\"101\":1}}],[\"默认构造函数\",{\"0\":{\"76\":1}}],[\"默认\",{\"1\":{\"55\":1,\"197\":1,\"231\":2,\"514\":1,\"608\":1}}],[\"默认为数组的第二个成员\",{\"1\":{\"215\":1}}],[\"默认为\",{\"1\":{\"46\":3,\"229\":2,\"243\":3,\"619\":1}}],[\"默认值为\",{\"1\":{\"229\":1}}],[\"默认值也可以引用其他变量但是这个变量必须已经声明\",{\"1\":{\"185\":1}}],[\"默认值必须是编译时常量\",{\"1\":{\"101\":1}}],[\"默认值\",{\"0\":{\"144\":1},\"1\":{\"45\":3,\"46\":1,\"57\":1,\"99\":1,\"269\":1}}],[\"默认情况下引入的是\",{\"1\":{\"560\":1}}],[\"默认情况下是\",{\"1\":{\"371\":1}}],[\"默认情况下是使用\",{\"1\":{\"208\":1}}],[\"默认情况下访问这个子组件时\",{\"1\":{\"368\":1}}],[\"默认情况下会忽略大小写进行比较\",{\"1\":{\"368\":1}}],[\"默认情况下在会话结束时过期\",{\"1\":{\"243\":1}}],[\"默认情况下的定位方式\",{\"1\":{\"54\":1}}],[\"默认情况下\",{\"1\":{\"32\":1,\"53\":1,\"208\":1,\"269\":1,\"285\":1,\"375\":1,\"380\":1,\"381\":1,\"466\":1,\"521\":1}}],[\"默认情况下图像会重复填充整个元素\",{\"1\":{\"32\":1}}],[\"默认设置\",{\"0\":{\"24\":1},\"1\":{\"24\":1}}],[\"默认请求方法为\",{\"1\":{\"16\":1}}],[\"hmr\",{\"1\":{\"661\":1}}],[\"h4>\",{\"1\":{\"618\":1,\"645\":3}}],[\"h5>\",{\"1\":{\"586\":2}}],[\"h=>h\",{\"1\":{\"560\":1}}],[\"huaweicloud\",{\"1\":{\"559\":3}}],[\"hue\",{\"1\":{\"43\":2}}],[\"hh\",{\"1\":{\"529\":3}}],[\"h\",{\"1\":{\"525\":2,\"560\":2,\"576\":2,\"613\":2}}],[\"handler\",{\"1\":{\"536\":1,\"537\":1,\"618\":1,\"619\":1,\"621\":3,\"622\":2,\"623\":1}}],[\"handle\",{\"1\":{\"401\":5}}],[\"hash\",{\"1\":{\"608\":6,\"609\":2}}],[\"has\",{\"1\":{\"345\":1}}],[\"hasownproperties\",{\"1\":{\"224\":1}}],[\"hasownproperty\",{\"1\":{\"224\":2,\"240\":1}}],[\"h3>\",{\"1\":{\"279\":1,\"372\":2,\"374\":2,\"378\":1,\"539\":2,\"550\":1,\"551\":1,\"552\":1,\"586\":1,\"645\":1,\"646\":2,\"651\":1,\"654\":1}}],[\"h2>\",{\"1\":{\"272\":1,\"279\":2,\"306\":2,\"307\":1,\"321\":1,\"407\":1,\"408\":1,\"476\":2,\"478\":1,\"479\":2,\"480\":2,\"489\":4,\"491\":5,\"494\":4,\"507\":6,\"520\":1,\"521\":1,\"522\":1,\"529\":5,\"532\":4,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":3,\"548\":2,\"562\":1,\"569\":2,\"614\":1,\"615\":1,\"621\":1,\"622\":3,\"641\":2,\"642\":6}}],[\"hgroup\",{\"1\":{\"202\":1}}],[\"hobbies\",{\"1\":{\"539\":5}}],[\"hobby\",{\"1\":{\"539\":4}}],[\"hobby<\",{\"1\":{\"539\":2}}],[\"homedetail\",{\"1\":{\"372\":2,\"378\":3,\"379\":1}}],[\"homedetaillink\",{\"1\":{\"372\":4,\"373\":2}}],[\"homelinkshouldrevalidate\",{\"1\":{\"380\":2}}],[\"homelinkloader\",{\"1\":{\"378\":3,\"379\":1,\"380\":1,\"390\":1,\"394\":1,\"399\":1}}],[\"homelinkparams\",{\"1\":{\"372\":1,\"374\":1}}],[\"homelink\",{\"1\":{\"372\":3,\"374\":3,\"377\":1,\"378\":7,\"379\":9,\"380\":3,\"388\":1,\"390\":4,\"397\":1,\"399\":1}}],[\"home\",{\"1\":{\"366\":2,\"368\":10,\"369\":1,\"372\":2,\"373\":5,\"374\":3,\"376\":1,\"377\":2,\"378\":2,\"379\":1,\"381\":3,\"390\":2,\"394\":1,\"397\":3,\"576\":5,\"577\":4,\"580\":3,\"584\":5,\"604\":4}}],[\"homepage\",{\"1\":{\"196\":6}}],[\"holder\",{\"1\":{\"337\":2,\"340\":1,\"344\":4}}],[\"hook\",{\"0\":{\"296\":1,\"297\":1,\"298\":1,\"299\":1,\"641\":1},\"1\":{\"296\":7,\"297\":3,\"298\":4,\"300\":1,\"301\":1,\"344\":5,\"345\":3,\"352\":1,\"371\":1,\"372\":1,\"378\":2,\"379\":2,\"384\":1,\"386\":1,\"401\":1,\"408\":1,\"641\":3}}],[\"hooks\",{\"0\":{\"295\":1,\"400\":1},\"1\":{\"210\":2,\"279\":1,\"296\":1,\"344\":3,\"345\":3,\"348\":1,\"349\":1,\"352\":3,\"641\":2}}],[\"hover\",{\"1\":{\"60\":1,\"477\":1,\"539\":1}}],[\"href=\",{\"1\":{\"190\":1,\"197\":1,\"366\":1,\"521\":1,\"553\":1,\"554\":2}}],[\"href\",{\"1\":{\"190\":1,\"251\":1}}],[\"history\",{\"0\":{\"608\":1},\"1\":{\"385\":1,\"608\":1}}],[\"high\",{\"1\":{\"193\":2}}],[\"hi\",{\"1\":{\"125\":3}}],[\"hidden\",{\"1\":{\"51\":1,\"55\":1,\"192\":1}}],[\"h1>\",{\"1\":{\"293\":1,\"294\":1,\"305\":2,\"316\":1,\"371\":1,\"405\":2,\"518\":1,\"626\":2,\"633\":1,\"653\":1}}],[\"h1>strong\",{\"1\":{\"64\":1}}],[\"h1~h6\",{\"1\":{\"202\":1}}],[\"h1+p\",{\"1\":{\"64\":1}}],[\"h1\",{\"1\":{\"62\":2,\"64\":6,\"294\":1,\"560\":2}}],[\"hsla\",{\"1\":{\"43\":1}}],[\"hsl\",{\"0\":{\"43\":1}}],[\"hello事件被触发\",{\"1\":{\"633\":1}}],[\"hellotest\",{\"1\":{\"569\":2}}],[\"hello>\",{\"1\":{\"491\":1}}],[\"helloworld\",{\"1\":{\"470\":2}}],[\"hello<int>\",{\"1\":{\"116\":1}}],[\"hello<t>\",{\"1\":{\"116\":1}}],[\"hellob\",{\"1\":{\"94\":2}}],[\"helloa\",{\"1\":{\"94\":1}}],[\"hello\",{\"0\":{\"265\":1,\"291\":1,\"470\":1,\"559\":1},\"1\":{\"89\":2,\"90\":3,\"91\":3,\"92\":2,\"94\":2,\"95\":2,\"103\":4,\"135\":2,\"138\":1,\"141\":4,\"147\":1,\"151\":1,\"169\":1,\"187\":2,\"197\":5,\"246\":1,\"265\":1,\"294\":1,\"305\":1,\"337\":1,\"470\":1,\"491\":3,\"520\":1,\"521\":1,\"532\":1,\"534\":1,\"553\":1,\"560\":2,\"565\":1,\"568\":1,\"569\":3,\"633\":3,\"636\":1,\"651\":1}}],[\"hex\",{\"0\":{\"42\":1}}],[\"height=\",{\"1\":{\"550\":1,\"551\":4}}],[\"height的值\",{\"1\":{\"59\":1}}],[\"height\",{\"1\":{\"37\":1,\"59\":1,\"65\":1,\"274\":4,\"286\":1,\"287\":1,\"290\":1,\"314\":2,\"482\":1,\"521\":3,\"645\":1}}],[\"head>\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"header\",{\"1\":{\"202\":6,\"249\":3,\"496\":1}}],[\"headers\",{\"1\":{\"26\":1,\"29\":1,\"30\":1,\"203\":1,\"379\":1,\"459\":5}}],[\"head\",{\"0\":{\"20\":1}}],[\"httpcode\",{\"1\":{\"459\":12}}],[\"httperror\",{\"1\":{\"451\":3}}],[\"httponly\",{\"1\":{\"243\":2}}],[\"https\",{\"1\":{\"140\":3,\"190\":1,\"243\":2,\"258\":1,\"521\":1,\"529\":1,\"559\":3}}],[\"http\",{\"0\":{\"250\":1},\"1\":{\"13\":1,\"15\":1,\"24\":1,\"199\":2,\"243\":2,\"270\":1,\"338\":2,\"339\":1,\"485\":1,\"486\":1,\"487\":1,\"517\":1,\"550\":1,\"551\":4,\"553\":1,\"573\":1,\"608\":1}}],[\"html5\",{\"0\":{\"608\":1}}],[\"html存在安全问题\",{\"1\":{\"477\":1}}],[\"html=\",{\"1\":{\"477\":1}}],[\"htmltype=\",{\"1\":{\"337\":1,\"344\":1}}],[\"html>\",{\"1\":{\"272\":2,\"293\":2,\"294\":2,\"305\":2,\"306\":2,\"476\":2,\"477\":2,\"478\":2,\"479\":2,\"480\":2,\"482\":2,\"489\":2,\"491\":2,\"494\":2,\"504\":2,\"507\":2,\"509\":2,\"510\":8,\"514\":2,\"515\":2,\"517\":2,\"518\":2,\"520\":2,\"521\":2,\"522\":2,\"529\":2,\"534\":2,\"536\":2,\"537\":2,\"538\":2,\"539\":2,\"548\":2,\"553\":2,\"621\":2,\"622\":2}}],[\"html\",{\"0\":{\"5\":1,\"477\":1},\"1\":{\"38\":1,\"64\":1,\"293\":1,\"305\":1,\"306\":1,\"366\":1,\"477\":7,\"490\":1,\"494\":1,\"517\":1,\"549\":1,\"553\":2,\"562\":1,\"622\":1,\"645\":1}}],[\"与此同时\",{\"1\":{\"658\":2}}],[\"与此同时传入\",{\"1\":{\"138\":1}}],[\"与旧虚拟\",{\"1\":{\"535\":1}}],[\"与数据代理类似\",{\"1\":{\"505\":1}}],[\"与创建\",{\"1\":{\"489\":1}}],[\"与绑定\",{\"1\":{\"483\":1}}],[\"与插值语法的区别\",{\"1\":{\"476\":1,\"477\":1}}],[\"与该\",{\"1\":{\"460\":1}}],[\"与函数的合并一样\",{\"1\":{\"434\":1}}],[\"与处理对象相同\",{\"1\":{\"405\":1}}],[\"与调用\",{\"1\":{\"397\":1}}],[\"与上面的例子类似\",{\"1\":{\"290\":1}}],[\"与任何数运算得到的都是nan\",{\"1\":{\"222\":1}}],[\"与语音注释一一对应\",{\"1\":{\"204\":1}}],[\"与赋值运算符\",{\"1\":{\"174\":1}}],[\"与其他数据结构的互相转换\",{\"0\":{\"162\":1}}],[\"与其他语言相同\",{\"1\":{\"134\":1,\"136\":1}}],[\"与解构赋值默认值结合\",{\"1\":{\"156\":1}}],[\"与解构赋值结合\",{\"1\":{\"147\":1}}],[\"与大多数语言类似\",{\"1\":{\"75\":1}}],[\"与交叉轴两端对齐\",{\"1\":{\"45\":1}}],[\"与交叉轴的中点对齐\",{\"1\":{\"45\":1}}],[\"与交叉轴的终点对齐\",{\"1\":{\"45\":1}}],[\"与交叉轴起点对齐\",{\"1\":{\"45\":1}}],[\"与\",{\"0\":{\"125\":1,\"481\":1,\"518\":1,\"616\":1,\"617\":1,\"648\":1,\"649\":1,\"650\":1,\"652\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"54\":1,\"58\":1,\"96\":2,\"135\":1,\"193\":1,\"199\":1,\"256\":1,\"301\":1,\"360\":2,\"460\":1,\"465\":1,\"573\":1,\"616\":1,\"627\":1,\"632\":1,\"642\":1,\"646\":1,\"649\":1,\"658\":1}}],[\"s+\",{\"1\":{\"517\":1}}],[\"sdust\",{\"1\":{\"489\":1,\"491\":1,\"494\":1,\"569\":1}}],[\"sdrawkcab\",{\"1\":{\"247\":1}}],[\"swim\",{\"1\":{\"452\":2}}],[\"switch\",{\"0\":{\"137\":1},\"1\":{\"93\":1,\"128\":1,\"137\":2,\"213\":1,\"324\":1,\"353\":1}}],[\"skyblue\",{\"1\":{\"321\":1,\"477\":1,\"482\":3,\"494\":1,\"521\":1,\"539\":1}}],[\"snapshot\",{\"1\":{\"315\":2}}],[\"ssr\",{\"1\":{\"367\":1}}],[\"ss\",{\"1\":{\"275\":2,\"529\":3}}],[\"slots\",{\"1\":{\"633\":1}}],[\"slotfoods\",{\"1\":{\"552\":2}}],[\"slotfoods=\",{\"1\":{\"552\":1}}],[\"slot2>\",{\"1\":{\"551\":1}}],[\"slot2\",{\"1\":{\"551\":3}}],[\"slot1\",{\"1\":{\"551\":2}}],[\"slot=\",{\"1\":{\"551\":3}}],[\"slot\",{\"1\":{\"551\":7,\"552\":9,\"646\":2}}],[\"slot>\",{\"1\":{\"550\":2,\"551\":2,\"552\":2,\"633\":1}}],[\"slice\",{\"1\":{\"215\":1,\"216\":1,\"334\":6,\"337\":2,\"338\":1,\"343\":1,\"344\":3,\"351\":1,\"405\":1,\"517\":1,\"529\":1,\"539\":1}}],[\"sleep\",{\"1\":{\"68\":1}}],[\"school=\",{\"1\":{\"527\":1}}],[\"school=options\",{\"1\":{\"490\":1}}],[\"school=vue\",{\"1\":{\"490\":1}}],[\"school\",{\"1\":{\"489\":4,\"491\":2,\"492\":1,\"494\":8,\"527\":4,\"562\":3,\"569\":3}}],[\"school>\",{\"1\":{\"489\":1,\"490\":1,\"491\":1,\"494\":1,\"562\":1}}],[\"scale=1\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"scope=\",{\"1\":{\"552\":1}}],[\"scoped><\",{\"1\":{\"633\":1,\"654\":1}}],[\"scoped>\",{\"1\":{\"570\":1,\"645\":1}}],[\"scoped\",{\"0\":{\"570\":1},\"1\":{\"268\":1,\"570\":1}}],[\"scope\",{\"1\":{\"203\":1,\"552\":2}}],[\"scripts\",{\"1\":{\"460\":2}}],[\"script>\",{\"1\":{\"272\":5,\"273\":1,\"274\":5,\"293\":4,\"294\":4,\"305\":4,\"306\":5,\"307\":1,\"318\":1,\"360\":2,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"476\":2,\"477\":2,\"478\":2,\"479\":2,\"480\":2,\"482\":2,\"483\":1,\"489\":2,\"491\":2,\"494\":5,\"496\":1,\"504\":2,\"507\":2,\"509\":2,\"510\":8,\"514\":2,\"515\":1,\"517\":2,\"518\":2,\"520\":2,\"521\":2,\"522\":2,\"529\":3,\"534\":2,\"536\":1,\"537\":1,\"538\":2,\"539\":2,\"548\":2,\"552\":1,\"553\":2,\"562\":1,\"568\":1,\"569\":1,\"586\":1,\"614\":1,\"615\":1,\"618\":1,\"619\":2,\"621\":2,\"622\":1,\"626\":1,\"633\":2,\"641\":1,\"642\":2,\"645\":1,\"651\":1,\"653\":1,\"654\":1,\"658\":1}}],[\"script\",{\"1\":{\"197\":1,\"227\":2,\"293\":1,\"456\":1}}],[\"scrollbehavior\",{\"1\":{\"609\":4}}],[\"scroll滚动条\",{\"1\":{\"521\":1}}],[\"scrolltop\",{\"1\":{\"314\":3}}],[\"scrollheight\",{\"1\":{\"314\":5}}],[\"scroll\",{\"1\":{\"32\":1,\"55\":1}}],[\"src\",{\"1\":{\"209\":1,\"267\":2,\"286\":3,\"287\":2,\"290\":1,\"460\":2,\"466\":2,\"550\":1,\"551\":4,\"576\":1,\"613\":1,\"641\":1}}],[\"srclang\",{\"1\":{\"200\":1}}],[\"src=\",{\"1\":{\"196\":2,\"272\":3,\"286\":3,\"287\":2,\"290\":1,\"293\":3,\"294\":3,\"305\":3,\"306\":3,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":2,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":2,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"550\":1,\"551\":4,\"553\":1,\"621\":1,\"622\":1}}],[\"srcset=\",{\"1\":{\"196\":5}}],[\"srcset\",{\"1\":{\"196\":2}}],[\"site\",{\"1\":{\"559\":1}}],[\"side\",{\"1\":{\"367\":1}}],[\"sidebar\",{\"1\":{\"365\":1}}],[\"sideeffects\",{\"1\":{\"269\":2}}],[\"silent\",{\"1\":{\"245\":1}}],[\"sig\",{\"1\":{\"243\":1}}],[\"signed\",{\"1\":{\"243\":3}}],[\"signal\",{\"1\":{\"229\":1}}],[\"signing\",{\"1\":{\"140\":1}}],[\"sizing\",{\"0\":{\"53\":1},\"1\":{\"36\":1,\"53\":3}}],[\"sizes=\",{\"1\":{\"196\":1}}],[\"sizes\",{\"1\":{\"196\":1}}],[\"size\",{\"1\":{\"32\":1,\"47\":1,\"482\":3}}],[\"symbol\",{\"1\":{\"126\":4,\"147\":1}}],[\"symbols\",{\"0\":{\"126\":1}}],[\"sync\",{\"1\":{\"109\":3}}],[\"s2\",{\"1\":{\"112\":1}}],[\"s1\",{\"1\":{\"112\":1}}],[\"solid\",{\"1\":{\"314\":1,\"482\":1}}],[\"some\",{\"1\":{\"215\":3}}],[\"sortbyscore\",{\"1\":{\"537\":4}}],[\"sortcomparer\",{\"1\":{\"343\":2}}],[\"sort\",{\"1\":{\"215\":2,\"343\":1,\"405\":1,\"537\":2,\"539\":1}}],[\"sourcepropertiesarray\",{\"1\":{\"517\":5}}],[\"sourcenodevalue\",{\"1\":{\"517\":4}}],[\"sourcemap\",{\"1\":{\"269\":2}}],[\"source\",{\"1\":{\"200\":1,\"428\":2,\"460\":32,\"461\":6,\"462\":4,\"463\":12,\"536\":5,\"537\":4,\"538\":5,\"550\":1,\"551\":4}}],[\"sources\",{\"1\":{\"140\":1}}],[\"sound\",{\"1\":{\"154\":4}}],[\"so\",{\"1\":{\"108\":2}}],[\"son\",{\"1\":{\"79\":5,\"279\":5,\"280\":1}}],[\"say\",{\"1\":{\"421\":3}}],[\"saving\",{\"1\":{\"387\":1,\"390\":1}}],[\"savedposition\",{\"1\":{\"609\":2}}],[\"savedata\",{\"1\":{\"556\":1,\"557\":1}}],[\"saved\",{\"1\":{\"387\":1,\"390\":1}}],[\"save\",{\"1\":{\"283\":1,\"323\":1,\"457\":1,\"460\":1,\"467\":1,\"613\":1}}],[\"saturday\",{\"1\":{\"413\":6}}],[\"saturation\",{\"1\":{\"43\":2}}],[\"sate\",{\"1\":{\"379\":1}}],[\"sass\",{\"1\":{\"269\":1,\"559\":2}}],[\"safe\",{\"1\":{\"243\":1}}],[\"samp\",{\"1\":{\"204\":1}}],[\"samesite\",{\"1\":{\"243\":2}}],[\"same\",{\"1\":{\"108\":1}}],[\"sqrtn\",{\"1\":{\"615\":2,\"616\":1,\"619\":1}}],[\"sqrt\",{\"1\":{\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"217\":1,\"615\":1,\"619\":1}}],[\"su\",{\"1\":{\"461\":6,\"462\":3,\"463\":3}}],[\"sunday\",{\"1\":{\"413\":1}}],[\"suspense>\",{\"1\":{\"390\":1,\"646\":1}}],[\"suspense\",{\"0\":{\"646\":1},\"1\":{\"390\":1,\"626\":1,\"646\":2}}],[\"success\",{\"1\":{\"337\":1,\"340\":3,\"344\":2,\"358\":1,\"359\":1}}],[\"suffix\",{\"1\":{\"208\":1}}],[\"sup\",{\"1\":{\"204\":1}}],[\"super\",{\"0\":{\"166\":1},\"1\":{\"79\":1,\"89\":1,\"94\":1,\"154\":7,\"166\":1,\"169\":1,\"309\":1,\"310\":1,\"321\":1,\"361\":1,\"406\":1,\"418\":1}}],[\"subtract\",{\"1\":{\"464\":1}}],[\"subscribers\",{\"1\":{\"517\":3}}],[\"subscriber\",{\"1\":{\"517\":9}}],[\"subscribe\",{\"0\":{\"354\":1},\"1\":{\"354\":4,\"356\":1,\"543\":3}}],[\"substring\",{\"1\":{\"216\":1}}],[\"sub\",{\"1\":{\"204\":1,\"368\":1,\"447\":3,\"448\":3,\"614\":4,\"617\":2,\"619\":2}}],[\"submit=\",{\"1\":{\"393\":1}}],[\"submitfunction\",{\"1\":{\"393\":1}}],[\"submitting\",{\"1\":{\"387\":4,\"390\":1,\"397\":1}}],[\"submit\",{\"1\":{\"193\":2,\"274\":2,\"337\":3,\"344\":3,\"359\":1,\"379\":5,\"384\":1,\"385\":3,\"390\":3,\"393\":3,\"397\":2,\"398\":1,\"523\":3}}],[\"sudo\",{\"1\":{\"140\":6}}],[\"sum++\",{\"1\":{\"653\":1}}],[\"sumimpl\",{\"1\":{\"446\":3}}],[\"sumstring\",{\"1\":{\"446\":3}}],[\"sumnumber\",{\"1\":{\"446\":3}}],[\"summary\",{\"1\":{\"201\":1}}],[\"sum\",{\"1\":{\"70\":2,\"158\":5,\"275\":3,\"444\":2,\"445\":2,\"446\":2,\"449\":3,\"450\":5,\"451\":3,\"636\":3,\"653\":5,\"654\":4,\"655\":2}}],[\"s\",{\"1\":{\"70\":2,\"79\":2,\"96\":1,\"204\":1,\"243\":1,\"434\":4,\"517\":2,\"521\":1}}],[\"shallowreadonly\",{\"0\":{\"649\":1},\"1\":{\"649\":2}}],[\"shallowreactive\",{\"0\":{\"648\":1},\"1\":{\"648\":2}}],[\"shallowref\",{\"0\":{\"648\":1},\"1\":{\"648\":2}}],[\"sha1\",{\"1\":{\"243\":1}}],[\"shadow\",{\"1\":{\"65\":1,\"482\":1}}],[\"shift\",{\"1\":{\"215\":2,\"405\":1,\"522\":1,\"539\":1}}],[\"shouldrevalidatefunction\",{\"1\":{\"380\":1}}],[\"shouldrevalidate\",{\"0\":{\"380\":1},\"1\":{\"380\":5}}],[\"shouldcomponentupdate\",{\"1\":{\"313\":1}}],[\"shouldusesourcemap\",{\"1\":{\"269\":2}}],[\"shopify\",{\"1\":{\"196\":1}}],[\"showname\",{\"1\":{\"567\":1,\"569\":1}}],[\"showdom\",{\"1\":{\"562\":2}}],[\"showall\",{\"1\":{\"528\":1}}],[\"showmsg\",{\"1\":{\"521\":3}}],[\"showmodal\",{\"1\":{\"290\":1}}],[\"showinfo\",{\"1\":{\"520\":3,\"521\":7,\"522\":2}}],[\"show=\",{\"1\":{\"507\":2}}],[\"showcount\",{\"1\":{\"337\":1,\"344\":1}}],[\"show\",{\"1\":{\"154\":2,\"411\":2,\"507\":3,\"658\":1}}],[\"sh\",{\"1\":{\"140\":2}}],[\"shrink\",{\"1\":{\"46\":1}}],[\"smooth\",{\"1\":{\"609\":1}}],[\"smiley\",{\"1\":{\"62\":1}}],[\"small\",{\"1\":{\"47\":1,\"204\":1}}],[\"spring\",{\"1\":{\"539\":1}}],[\"springboot\",{\"1\":{\"18\":1}}],[\"spin>\",{\"1\":{\"344\":3,\"345\":2,\"352\":1}}],[\"spinning=\",{\"1\":{\"344\":3,\"345\":2,\"352\":1}}],[\"span>\",{\"1\":{\"297\":1,\"301\":3,\"305\":2,\"312\":2,\"313\":1,\"318\":4,\"319\":2,\"321\":1,\"333\":1,\"335\":1,\"360\":1,\"363\":2,\"371\":1,\"387\":1,\"390\":1,\"392\":1,\"403\":8,\"404\":4,\"406\":2,\"504\":1,\"517\":2,\"633\":1}}],[\"span><\",{\"1\":{\"294\":1,\"548\":1}}],[\"span\",{\"1\":{\"294\":1}}],[\"spacing\",{\"1\":{\"65\":2}}],[\"space>\",{\"1\":{\"337\":2,\"344\":1}}],[\"space\",{\"1\":{\"45\":4,\"65\":1,\"522\":1}}],[\"split\",{\"1\":{\"216\":1,\"460\":2,\"462\":1,\"463\":1,\"517\":4}}],[\"splice\",{\"1\":{\"215\":1,\"405\":2,\"539\":2}}],[\"spellcheck\",{\"1\":{\"192\":1}}],[\"studentage++\",{\"1\":{\"565\":1}}],[\"studentage\",{\"1\":{\"565\":1}}],[\"student=\",{\"1\":{\"527\":1}}],[\"student\",{\"1\":{\"489\":2,\"491\":2,\"494\":6,\"527\":4,\"539\":15,\"562\":2,\"565\":1,\"568\":2}}],[\"student>\",{\"1\":{\"489\":1,\"491\":1,\"494\":1,\"562\":1,\"564\":1}}],[\"studio\",{\"1\":{\"140\":1}}],[\"storeenhancer\",{\"1\":{\"355\":3}}],[\"store=\",{\"1\":{\"336\":1,\"337\":1}}],[\"store\",{\"0\":{\"334\":1,\"336\":1},\"1\":{\"331\":2,\"332\":1,\"334\":5,\"336\":3,\"337\":6,\"343\":5,\"344\":6,\"348\":1,\"353\":1,\"354\":1,\"355\":6,\"356\":3,\"359\":1,\"613\":6,\"614\":2,\"615\":1,\"619\":5}}],[\"storage\",{\"1\":{\"140\":1}}],[\"stop=\",{\"1\":{\"521\":1}}],[\"stop\",{\"1\":{\"360\":1,\"521\":2}}],[\"stopimmediatepropagation\",{\"1\":{\"230\":1,\"231\":1}}],[\"stoppropagation\",{\"1\":{\"230\":1,\"231\":1,\"274\":3,\"521\":1}}],[\"step\",{\"1\":{\"193\":3,\"313\":2,\"333\":5,\"334\":5,\"335\":6,\"614\":6,\"617\":2,\"619\":1}}],[\"strutil\",{\"1\":{\"460\":24,\"461\":7,\"462\":4,\"463\":5,\"464\":2,\"465\":3,\"466\":2}}],[\"str\",{\"1\":{\"223\":2,\"297\":3,\"477\":2,\"496\":2,\"532\":2,\"534\":1}}],[\"strictmode>\",{\"1\":{\"300\":2,\"337\":2,\"366\":2,\"369\":2}}],[\"strict\",{\"1\":{\"209\":1,\"243\":2,\"437\":1,\"460\":1,\"466\":1,\"485\":1,\"486\":1,\"567\":1,\"569\":1,\"613\":1,\"619\":3}}],[\"stringarray\",{\"1\":{\"442\":2}}],[\"stringify\",{\"1\":{\"162\":1,\"218\":1,\"252\":1,\"354\":2,\"358\":2,\"431\":1,\"556\":1,\"557\":1}}],[\"strings\",{\"0\":{\"120\":1},\"1\":{\"112\":1}}],[\"stringcache\",{\"1\":{\"111\":3}}],[\"string>>\",{\"1\":{\"430\":1}}],[\"string>\",{\"1\":{\"80\":1,\"81\":1,\"124\":1,\"344\":2,\"345\":2,\"347\":2,\"349\":1,\"350\":1,\"351\":2,\"430\":1,\"431\":1}}],[\"string\",{\"0\":{\"120\":1,\"216\":1},\"1\":{\"74\":2,\"75\":6,\"78\":2,\"79\":2,\"80\":2,\"81\":4,\"82\":2,\"83\":2,\"90\":2,\"92\":1,\"94\":5,\"95\":1,\"96\":1,\"100\":5,\"103\":2,\"111\":2,\"119\":6,\"120\":7,\"126\":1,\"128\":6,\"131\":1,\"135\":2,\"141\":1,\"220\":1,\"233\":1,\"247\":1,\"257\":1,\"297\":2,\"322\":1,\"323\":4,\"324\":1,\"337\":10,\"338\":5,\"343\":1,\"344\":4,\"353\":7,\"358\":4,\"359\":2,\"372\":1,\"374\":2,\"378\":3,\"379\":2,\"401\":2,\"407\":3,\"408\":1,\"410\":4,\"412\":2,\"418\":3,\"419\":2,\"420\":3,\"421\":2,\"428\":2,\"430\":1,\"431\":1,\"434\":9,\"437\":2,\"440\":4,\"441\":7,\"442\":1,\"446\":3,\"450\":7,\"451\":8,\"454\":2,\"456\":2,\"459\":15,\"460\":33,\"461\":5,\"462\":11,\"463\":9,\"465\":1,\"466\":2,\"470\":1,\"565\":6,\"609\":1}}],[\"streamlatestversion\",{\"1\":{\"164\":1}}],[\"streamv2\",{\"1\":{\"164\":1}}],[\"streamv1\",{\"1\":{\"164\":1}}],[\"stream<int>\",{\"1\":{\"109\":1}}],[\"stream\",{\"0\":{\"69\":1},\"1\":{\"66\":1,\"69\":7,\"109\":2,\"257\":1}}],[\"stretch\",{\"1\":{\"45\":2,\"46\":1}}],[\"strong\",{\"1\":{\"64\":2,\"204\":1}}],[\"sticky\",{\"1\":{\"54\":1}}],[\"stable\",{\"1\":{\"140\":2}}],[\"stack\",{\"1\":{\"96\":1}}],[\"state=\",{\"1\":{\"385\":2}}],[\"statetype\",{\"1\":{\"343\":2}}],[\"state\",{\"0\":{\"289\":1,\"324\":1,\"325\":1,\"329\":1,\"385\":1,\"387\":1,\"396\":1,\"403\":1,\"404\":1,\"405\":1,\"406\":1},\"1\":{\"243\":6,\"287\":1,\"289\":1,\"301\":1,\"309\":3,\"310\":3,\"312\":2,\"313\":4,\"314\":5,\"321\":2,\"323\":2,\"324\":1,\"325\":2,\"329\":9,\"331\":10,\"334\":17,\"335\":1,\"337\":13,\"338\":2,\"343\":17,\"344\":1,\"348\":1,\"351\":1,\"353\":14,\"354\":2,\"355\":3,\"356\":1,\"358\":1,\"360\":8,\"363\":3,\"379\":8,\"381\":1,\"385\":12,\"387\":5,\"389\":1,\"390\":2,\"396\":2,\"397\":1,\"402\":1,\"403\":5,\"404\":3,\"405\":3,\"406\":13,\"407\":4,\"408\":3,\"613\":2,\"614\":7,\"615\":4,\"616\":17,\"618\":12,\"619\":22}}],[\"static\",{\"1\":{\"54\":3,\"83\":1,\"95\":2,\"108\":3,\"145\":1,\"153\":2,\"310\":1,\"378\":1,\"379\":4,\"380\":1,\"417\":2,\"460\":21,\"462\":4,\"463\":8}}],[\"status=\",{\"1\":{\"344\":1}}],[\"statuscode\",{\"1\":{\"243\":1}}],[\"statustext\",{\"1\":{\"29\":1}}],[\"status\",{\"1\":{\"29\":1,\"30\":1,\"244\":1,\"245\":1,\"256\":2,\"257\":1,\"290\":1,\"338\":1,\"379\":1}}],[\"startswith\",{\"1\":{\"183\":2}}],[\"start\",{\"1\":{\"45\":3,\"198\":1,\"246\":1,\"301\":2,\"360\":6,\"496\":1}}],[\"styleobj2\",{\"1\":{\"483\":2}}],[\"styleobj\",{\"1\":{\"483\":3}}],[\"style>\",{\"1\":{\"305\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"494\":2,\"521\":1,\"539\":1,\"562\":1,\"570\":1,\"633\":1,\"645\":1,\"654\":1}}],[\"style=\",{\"1\":{\"274\":4,\"286\":1,\"287\":1,\"290\":1,\"305\":2,\"314\":2,\"321\":1,\"483\":2}}],[\"styles\",{\"1\":{\"268\":2,\"365\":7,\"366\":2,\"368\":6,\"371\":2,\"372\":9,\"379\":5,\"381\":2,\"385\":1,\"390\":3,\"392\":2}}],[\"stylesheet\",{\"1\":{\"197\":1}}],[\"style\",{\"0\":{\"481\":1,\"483\":1},\"1\":{\"33\":2,\"47\":1,\"61\":2,\"192\":1,\"268\":1,\"362\":1,\"482\":1,\"570\":3}}],[\"serve\",{\"1\":{\"559\":1,\"561\":1}}],[\"server\",{\"1\":{\"338\":1,\"339\":1,\"367\":1}}],[\"send=\",{\"1\":{\"496\":2,\"501\":1}}],[\"sender\",{\"1\":{\"337\":2,\"340\":6,\"344\":5,\"358\":3,\"359\":1}}],[\"seo\",{\"1\":{\"366\":1}}],[\"searchkey=\",{\"1\":{\"407\":2}}],[\"searchkey\",{\"1\":{\"407\":9,\"408\":10}}],[\"searchprops\",{\"1\":{\"407\":1}}],[\"searchparams\",{\"1\":{\"379\":1}}],[\"search\",{\"1\":{\"216\":2,\"252\":1,\"407\":6,\"408\":7}}],[\"securitydoor\",{\"1\":{\"423\":3}}],[\"secure\",{\"1\":{\"243\":2}}],[\"section\",{\"1\":{\"202\":1}}],[\"seconds\",{\"1\":{\"68\":2}}],[\"second\",{\"1\":{\"68\":3,\"337\":1}}],[\"setup\",{\"0\":{\"626\":1,\"633\":1},\"1\":{\"626\":10,\"633\":2,\"635\":2,\"639\":1,\"640\":1,\"641\":2,\"642\":2,\"645\":1,\"646\":2,\"651\":1,\"653\":1,\"654\":1}}],[\"set方法代理了修改\",{\"1\":{\"514\":1}}],[\"seteditingsearchkey\",{\"1\":{\"407\":2}}],[\"seteditingtodo\",{\"1\":{\"283\":4,\"323\":4}}],[\"setperson\",{\"1\":{\"403\":2,\"404\":5}}],[\"setprototypeof\",{\"1\":{\"169\":1,\"240\":1}}],[\"setlinks\",{\"1\":{\"379\":5}}],[\"setnow\",{\"1\":{\"360\":3}}],[\"setmany\",{\"1\":{\"343\":2}}],[\"setmemberid\",{\"1\":{\"280\":2}}],[\"setcontent\",{\"1\":{\"337\":2,\"344\":3}}],[\"setcount\",{\"1\":{\"210\":2,\"329\":2}}],[\"setb\",{\"1\":{\"301\":4,\"405\":2}}],[\"seta\",{\"1\":{\"301\":6,\"405\":2}}],[\"setitem\",{\"1\":{\"556\":1,\"557\":1}}],[\"setindex\",{\"1\":{\"403\":11}}],[\"setinterval\",{\"1\":{\"212\":2,\"314\":1,\"321\":1,\"360\":3}}],[\"setisediting\",{\"1\":{\"337\":3,\"344\":3,\"359\":1}}],[\"setisplaying\",{\"1\":{\"286\":2,\"287\":2}}],[\"setvalues\",{\"1\":{\"405\":3}}],[\"setvalue\",{\"1\":{\"283\":3,\"287\":2,\"323\":2,\"324\":1,\"333\":5,\"363\":4,\"405\":3}}],[\"set<int>\",{\"1\":{\"123\":2}}],[\"set<string>\",{\"1\":{\"123\":1}}],[\"set2\",{\"1\":{\"123\":1}}],[\"set1\",{\"1\":{\"123\":1}}],[\"setsearchkey\",{\"1\":{\"407\":2,\"408\":4}}],[\"setstep\",{\"1\":{\"333\":2,\"335\":2}}],[\"setstate\",{\"1\":{\"286\":1,\"309\":2,\"312\":1,\"313\":2,\"314\":1,\"316\":1,\"321\":1,\"323\":1,\"406\":9}}],[\"sets\",{\"0\":{\"123\":1}}],[\"set\",{\"1\":{\"87\":2,\"111\":3,\"123\":5,\"153\":1,\"161\":1,\"162\":3,\"243\":2,\"255\":2,\"343\":1,\"403\":1,\"430\":1,\"514\":1,\"515\":1,\"517\":1,\"536\":1,\"539\":3,\"559\":3,\"627\":1,\"631\":4,\"632\":1,\"635\":1,\"651\":1}}],[\"settings\",{\"1\":{\"459\":1}}],[\"setting\",{\"1\":{\"459\":6}}],[\"settitle\",{\"1\":{\"337\":2,\"344\":3}}],[\"settimeout\",{\"1\":{\"13\":1,\"151\":1,\"212\":2,\"312\":1,\"333\":1,\"334\":1,\"352\":1,\"378\":1,\"498\":1,\"499\":1,\"500\":1,\"614\":1,\"619\":1}}],[\"settodos\",{\"1\":{\"323\":4}}],[\"setter\",{\"0\":{\"87\":1},\"1\":{\"74\":1,\"87\":1,\"88\":1,\"91\":1,\"384\":1,\"403\":10,\"405\":4,\"505\":1,\"516\":4,\"517\":4,\"539\":1}}],[\"select>\",{\"1\":{\"510\":1,\"614\":1}}],[\"selectbyid\",{\"1\":{\"343\":2}}],[\"selecttotal\",{\"1\":{\"343\":1}}],[\"selectallarticles\",{\"1\":{\"353\":2}}],[\"selectall\",{\"1\":{\"343\":2}}],[\"selectarticlebyid\",{\"1\":{\"353\":2}}],[\"selectarticle\",{\"1\":{\"337\":2}}],[\"selectarticlesresult\",{\"1\":{\"348\":2}}],[\"selectarticleswithdep\",{\"1\":{\"342\":2}}],[\"selectarticles\",{\"1\":{\"337\":2,\"342\":5,\"348\":2}}],[\"selectids\",{\"1\":{\"343\":1}}],[\"selectid\",{\"1\":{\"343\":2}}],[\"selection\",{\"1\":{\"62\":2}}],[\"selectcount\",{\"1\":{\"334\":2,\"335\":1}}],[\"selector<nativestate\",{\"1\":{\"353\":2}}],[\"selectors\",{\"1\":{\"343\":1}}],[\"selector\",{\"0\":{\"342\":1},\"1\":{\"331\":2,\"334\":2,\"335\":3,\"337\":4,\"342\":5,\"343\":4,\"348\":2,\"353\":1,\"456\":2,\"459\":3,\"609\":2}}],[\"select\",{\"1\":{\"193\":1,\"348\":1,\"510\":2}}],[\"self=\",{\"1\":{\"521\":1}}],[\"self\",{\"1\":{\"46\":1,\"197\":2,\"406\":2,\"521\":1}}],[\"sessionstorage\",{\"0\":{\"557\":1},\"1\":{\"26\":1,\"555\":1,\"557\":6}}],[\"sex=\",{\"1\":{\"564\":1}}],[\"sex\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"514\":1,\"532\":1,\"534\":1,\"539\":4,\"565\":4,\"568\":1}}],[\"mm\",{\"1\":{\"529\":3}}],[\"m\",{\"0\":{\"472\":1},\"1\":{\"472\":1}}],[\"mvvm模型\",{\"0\":{\"471\":1}}],[\"mkdir\",{\"1\":{\"469\":1}}],[\"myref\",{\"1\":{\"651\":2}}],[\"myslice\",{\"1\":{\"529\":1}}],[\"mystate\",{\"1\":{\"385\":2}}],[\"myvue\",{\"1\":{\"517\":2}}],[\"myvideo\",{\"1\":{\"286\":2,\"287\":1,\"290\":1}}],[\"myevent\",{\"1\":{\"496\":2,\"502\":1}}],[\"mycomponent\",{\"1\":{\"403\":7,\"404\":2,\"405\":2,\"406\":2}}],[\"mycount\",{\"1\":{\"210\":1}}],[\"myform\",{\"1\":{\"362\":2}}],[\"myinput\",{\"1\":{\"362\":3}}],[\"myapp\",{\"1\":{\"280\":2}}],[\"mybutton\",{\"1\":{\"274\":2}}],[\"my\",{\"1\":{\"266\":1,\"362\":2,\"547\":4}}],[\"mutation\",{\"1\":{\"344\":5,\"345\":4,\"352\":1,\"619\":1}}],[\"mutations\",{\"1\":{\"344\":1,\"613\":2,\"614\":2,\"615\":1,\"617\":3,\"619\":3}}],[\"mutation<void\",{\"1\":{\"344\":3,\"345\":3,\"347\":3,\"351\":2}}],[\"mutable\",{\"1\":{\"330\":1}}],[\"multiple\",{\"1\":{\"193\":2}}],[\"multipart\",{\"1\":{\"193\":2}}],[\"must\",{\"1\":{\"144\":1}}],[\"mit\",{\"1\":{\"466\":1}}],[\"mitt<events>\",{\"1\":{\"408\":1}}],[\"mitt\",{\"1\":{\"408\":5}}],[\"miao\",{\"1\":{\"421\":1}}],[\"middle=\",{\"1\":{\"523\":1}}],[\"middle\",{\"1\":{\"523\":1}}],[\"middleenhancer\",{\"1\":{\"356\":2,\"359\":1}}],[\"middleware\",{\"0\":{\"356\":1,\"358\":1,\"359\":1},\"1\":{\"344\":2,\"356\":8,\"358\":5,\"359\":2}}],[\"missing\",{\"1\":{\"338\":2}}],[\"min\",{\"1\":{\"193\":4,\"196\":2,\"217\":1,\"272\":1,\"292\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"529\":1}}],[\"minlength\",{\"1\":{\"193\":1}}],[\"mime\",{\"1\":{\"193\":3}}],[\"michael\",{\"1\":{\"164\":1}}],[\"mixins\",{\"1\":{\"568\":2}}],[\"mixin\",{\"0\":{\"94\":1,\"566\":1,\"567\":1,\"568\":1},\"1\":{\"94\":14,\"567\":1,\"568\":8,\"641\":1,\"657\":2}}],[\"mix\",{\"1\":{\"93\":1}}],[\"mounted\",{\"1\":{\"496\":1,\"498\":1,\"499\":1,\"500\":1,\"502\":1,\"527\":1,\"530\":1,\"543\":1,\"586\":1,\"598\":1,\"639\":2}}],[\"moment\",{\"1\":{\"464\":13,\"465\":6}}],[\"monday\",{\"1\":{\"413\":6}}],[\"month\",{\"1\":{\"193\":1}}],[\"more\",{\"1\":{\"337\":1,\"517\":8}}],[\"mocknetwork\",{\"1\":{\"378\":2,\"379\":1,\"380\":1}}],[\"mock\",{\"1\":{\"378\":2}}],[\"mockreq\",{\"1\":{\"312\":2}}],[\"mockapi\",{\"1\":{\"290\":2}}],[\"modifiers\",{\"1\":{\"547\":1}}],[\"modal\",{\"1\":{\"290\":1}}],[\"model=\",{\"1\":{\"510\":8,\"517\":2,\"618\":1,\"651\":1}}],[\"model\",{\"0\":{\"510\":1,\"511\":1},\"1\":{\"472\":1,\"504\":2,\"508\":4,\"509\":1,\"510\":2,\"511\":6,\"512\":3,\"517\":2,\"529\":1,\"536\":1,\"537\":1,\"614\":1}}],[\"mode\",{\"1\":{\"269\":3,\"608\":2}}],[\"moduleresolution\",{\"1\":{\"209\":1}}],[\"modules\",{\"1\":{\"207\":7,\"209\":3,\"267\":1,\"268\":4,\"269\":4,\"368\":1,\"619\":1}}],[\"module\",{\"0\":{\"163\":1},\"1\":{\"209\":2,\"267\":1,\"268\":2,\"269\":1,\"365\":1,\"459\":3,\"460\":2,\"461\":1,\"464\":1,\"466\":1,\"485\":1,\"486\":1,\"561\":2,\"619\":1}}],[\"mobile\",{\"1\":{\"196\":2}}],[\"move\",{\"1\":{\"189\":1}}],[\"movenext\",{\"1\":{\"109\":2}}],[\"ms\",{\"1\":{\"151\":4}}],[\"msg=\",{\"1\":{\"633\":1}}],[\"msg\",{\"1\":{\"103\":2,\"104\":2,\"491\":2,\"511\":2,\"521\":2,\"543\":2,\"556\":4,\"557\":4,\"562\":2,\"565\":1,\"568\":1,\"578\":8,\"584\":4,\"591\":2,\"592\":2,\"633\":5,\"636\":2}}],[\"mask\",{\"1\":{\"645\":2}}],[\"matched\",{\"1\":{\"600\":2}}],[\"matcher\",{\"1\":{\"338\":2}}],[\"match\",{\"1\":{\"216\":2,\"340\":2}}],[\"math\",{\"0\":{\"217\":1},\"1\":{\"72\":2,\"73\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"247\":3,\"447\":1,\"448\":1,\"482\":2,\"615\":1,\"619\":1}}],[\"markraw\",{\"0\":{\"650\":1},\"1\":{\"650\":1}}],[\"mark\",{\"1\":{\"204\":1}}],[\"margin\",{\"1\":{\"35\":1,\"59\":1,\"521\":1,\"539\":2}}],[\"mapmutations\",{\"0\":{\"617\":1},\"1\":{\"617\":7,\"619\":2}}],[\"mapactions\",{\"0\":{\"617\":1},\"1\":{\"617\":7,\"618\":2,\"619\":4}}],[\"mapgetters\",{\"0\":{\"616\":1},\"1\":{\"616\":6,\"619\":2}}],[\"mapstate\",{\"0\":{\"616\":1},\"1\":{\"616\":8,\"618\":3,\"619\":6}}],[\"maps\",{\"0\":{\"124\":1}}],[\"map\",{\"0\":{\"161\":1},\"1\":{\"80\":3,\"81\":3,\"112\":1,\"124\":4,\"161\":4,\"162\":16,\"215\":2,\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"306\":3,\"307\":1,\"314\":1,\"323\":2,\"324\":1,\"337\":1,\"338\":1,\"343\":1,\"353\":2,\"379\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":6,\"406\":1,\"619\":1}}],[\"map<string\",{\"1\":{\"80\":1,\"81\":1,\"83\":1,\"111\":1,\"124\":1,\"430\":1}}],[\"main\",{\"1\":{\"68\":2,\"70\":1,\"72\":2,\"73\":1,\"75\":2,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":2,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":2,\"99\":2,\"100\":1,\"102\":2,\"103\":2,\"104\":1,\"105\":1,\"106\":1,\"108\":1,\"109\":3,\"111\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"117\":2,\"119\":1,\"120\":4,\"121\":1,\"122\":3,\"123\":3,\"124\":2,\"125\":1,\"126\":1,\"128\":3,\"129\":1,\"130\":1,\"131\":1,\"132\":2,\"134\":1,\"135\":3,\"137\":2,\"138\":1,\"141\":1,\"144\":2,\"145\":1,\"202\":1,\"337\":1,\"459\":9,\"460\":5,\"461\":1,\"462\":1,\"463\":1,\"464\":1,\"465\":2,\"466\":3,\"470\":3,\"494\":2,\"525\":1,\"560\":2,\"576\":1,\"613\":2}}],[\"maxage\",{\"1\":{\"243\":2}}],[\"maxlength=\",{\"1\":{\"337\":1,\"344\":1}}],[\"maxlength\",{\"1\":{\"193\":1}}],[\"max\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"193\":5,\"196\":2,\"217\":1}}],[\"male\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"514\":1,\"532\":1,\"534\":1,\"564\":1,\"568\":1}}],[\"me\",{\"1\":{\"441\":5,\"470\":2}}],[\"menubutton\",{\"1\":{\"372\":3,\"379\":4,\"390\":2}}],[\"menus\",{\"1\":{\"372\":1}}],[\"memo\",{\"1\":{\"301\":4}}],[\"memotest\",{\"1\":{\"301\":2}}],[\"memberidcontext\",{\"1\":{\"278\":1,\"279\":6,\"280\":2}}],[\"memberid\",{\"1\":{\"277\":1,\"279\":4,\"280\":3}}],[\"member\",{\"1\":{\"207\":11,\"414\":2}}],[\"membername\",{\"1\":{\"91\":1}}],[\"merchant\",{\"1\":{\"196\":1}}],[\"media=\",{\"1\":{\"196\":2}}],[\"meta\",{\"1\":{\"337\":1,\"344\":1,\"345\":1,\"350\":1,\"351\":1,\"522\":1,\"600\":2,\"602\":2,\"603\":2,\"604\":1}}],[\"meter\",{\"1\":{\"193\":1}}],[\"method=\",{\"1\":{\"379\":3,\"384\":1,\"385\":1,\"398\":1}}],[\"methodoverwrite\",{\"1\":{\"250\":1}}],[\"methods实现\",{\"1\":{\"529\":1}}],[\"methods\",{\"1\":{\"108\":2,\"482\":1,\"492\":2,\"496\":1,\"502\":1,\"503\":2,\"520\":4,\"521\":1,\"522\":1,\"528\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"543\":1,\"562\":1,\"565\":1,\"567\":1,\"569\":1,\"614\":1,\"617\":2,\"618\":1,\"619\":2,\"621\":1}}],[\"method\",{\"1\":{\"16\":2,\"18\":2,\"24\":1,\"108\":2,\"193\":2,\"250\":3,\"252\":1,\"344\":6,\"349\":1,\"351\":2,\"379\":9,\"380\":2,\"385\":2,\"390\":4,\"397\":2,\"568\":1,\"626\":1}}],[\"message\",{\"1\":{\"27\":2,\"29\":1,\"162\":1,\"172\":3,\"173\":1,\"244\":1,\"256\":2,\"337\":1,\"338\":1,\"340\":3,\"344\":3,\"358\":6,\"371\":1,\"378\":3,\"392\":1,\"430\":2,\"431\":2,\"437\":2,\"487\":1,\"573\":1,\"576\":2,\"577\":4,\"578\":2,\"584\":5,\"586\":3,\"589\":1,\"596\":2}}],[\"形式传递\",{\"1\":{\"587\":1}}],[\"形式传递到目的地\",{\"1\":{\"586\":1}}],[\"形式都是\",{\"1\":{\"554\":1}}],[\"形式定义\",{\"1\":{\"158\":1}}],[\"形式\",{\"1\":{\"15\":1}}],[\"形式而不是\",{\"1\":{\"15\":1}}],[\"可快速冷启动\",{\"1\":{\"661\":1}}],[\"可简写为\",{\"1\":{\"490\":1}}],[\"可利用它跳过没有使用指令语法\",{\"1\":{\"480\":1}}],[\"可能需要不跳转就调用\",{\"1\":{\"395\":1}}],[\"可能需要遍历大量元素才能找到对应的内容\",{\"1\":{\"343\":1}}],[\"可能会有很多地方需要读取\",{\"1\":{\"331\":1}}],[\"可能希望能够捕获子组件的全部事件\",{\"1\":{\"274\":1}}],[\"可读性不强\",{\"1\":{\"393\":1}}],[\"可读性良好\",{\"1\":{\"325\":1}}],[\"可读可写\",{\"1\":{\"240\":1}}],[\"可见性设置优先级高于此属性\",{\"1\":{\"192\":1}}],[\"可是使用\",{\"1\":{\"109\":1}}],[\"可选参考项\",{\"1\":{\"561\":1}}],[\"可选参数后不能再有必需参数\",{\"1\":{\"447\":1}}],[\"可选参数必须在必需参数后面\",{\"1\":{\"447\":1}}],[\"可选参数\",{\"0\":{\"447\":1}}],[\"可选参数可以是命名的或位置的\",{\"1\":{\"98\":1}}],[\"可选参数定义在必要参数后面\",{\"1\":{\"98\":1}}],[\"可选路由\",{\"0\":{\"373\":1}}],[\"可选\",{\"1\":{\"193\":1,\"231\":2,\"547\":1}}],[\"可选的位置参数\",{\"0\":{\"100\":1}}],[\"可选配置项\",{\"1\":{\"15\":1}}],[\"可调用类\",{\"0\":{\"70\":1}}],[\"可取值\",{\"1\":{\"56\":1}}],[\"可以监测对象内部值的变化\",{\"1\":{\"622\":1}}],[\"可以写在\",{\"1\":{\"619\":1}}],[\"可以进行增加\",{\"1\":{\"631\":1}}],[\"可以进行复杂处理\",{\"1\":{\"616\":1}}],[\"可以进行通配\",{\"1\":{\"374\":1}}],[\"可以访问组件实例对象\",{\"1\":{\"605\":2}}],[\"可以选择\",{\"1\":{\"570\":1}}],[\"可以选四个值\",{\"1\":{\"33\":1}}],[\"可以把多个组件共用的配置提取成一个混入对象\",{\"1\":{\"566\":1}}],[\"可以给\",{\"1\":{\"511\":2}}],[\"可以和\",{\"1\":{\"507\":1}}],[\"可以不写set方法\",{\"1\":{\"504\":1}}],[\"可以不使用\",{\"1\":{\"193\":1}}],[\"可以配置多个代理\",{\"1\":{\"486\":1}}],[\"可以配置使用那个字段作为\",{\"1\":{\"343\":1}}],[\"可以识别\",{\"1\":{\"477\":1}}],[\"可以用来直接操作\",{\"1\":{\"547\":1}}],[\"可以用来获取焦点等操作\",{\"1\":{\"530\":1}}],[\"可以用于优化性能\",{\"1\":{\"479\":1}}],[\"可以用\",{\"1\":{\"459\":1}}],[\"可以断言为任意类型\",{\"1\":{\"452\":1}}],[\"可以直接调用\",{\"1\":{\"505\":1}}],[\"可以直接默认导出\",{\"1\":{\"460\":1}}],[\"可以直接通过下标修改\",{\"1\":{\"406\":1}}],[\"可以直接操作\",{\"1\":{\"351\":1}}],[\"可以向\",{\"1\":{\"402\":1}}],[\"可以控制绑定的时机等等\",{\"1\":{\"496\":1}}],[\"可以控制\",{\"1\":{\"379\":1}}],[\"可以懒加载\",{\"1\":{\"377\":1}}],[\"可以指向任何东西\",{\"1\":{\"360\":1}}],[\"可以指定属性值\",{\"1\":{\"64\":1}}],[\"可以指定\",{\"1\":{\"57\":1}}],[\"可以实现这个要求\",{\"1\":{\"403\":1}}],[\"可以实现仅对\",{\"1\":{\"356\":1}}],[\"可以实现懒加载而不是在组件被挂载时就执行\",{\"1\":{\"352\":1}}],[\"可以实现重新渲染\",{\"1\":{\"301\":1}}],[\"可以分发\",{\"1\":{\"351\":1}}],[\"可以发现页面并没有显示刚刚创建的内容\",{\"1\":{\"345\":1}}],[\"可以视为是一个\",{\"1\":{\"344\":1}}],[\"可以是在不同的枚举类型中定义的\",{\"1\":{\"414\":1}}],[\"可以是一个对象数组\",{\"1\":{\"347\":1}}],[\"可以是一到四个值\",{\"1\":{\"33\":1}}],[\"可以是\",{\"1\":{\"344\":1,\"379\":1}}],[\"可以创建一个\",{\"1\":{\"344\":1}}],[\"可以获得异常\",{\"1\":{\"340\":1}}],[\"可以获取新\",{\"1\":{\"331\":1}}],[\"可以定义额外的\",{\"1\":{\"338\":1}}],[\"可以定义工厂构造函数\",{\"1\":{\"89\":1}}],[\"可以扩展\",{\"1\":{\"338\":1}}],[\"可以包含异步逻辑\",{\"1\":{\"334\":1}}],[\"可以简写为\",{\"1\":{\"520\":1}}],[\"可以简写为箭头函数\",{\"1\":{\"97\":1}}],[\"可以简写成箭头函数\",{\"1\":{\"560\":1}}],[\"可以简写成\",{\"1\":{\"508\":1,\"551\":1}}],[\"可以简化代码\",{\"1\":{\"332\":1,\"616\":1,\"617\":1}}],[\"可以被视为描述应用程序中发生了什么的事件\",{\"1\":{\"331\":1}}],[\"可以避免深度比较\",{\"1\":{\"330\":1}}],[\"可以改变的\",{\"1\":{\"330\":1}}],[\"可以从组件中提取\",{\"1\":{\"329\":1}}],[\"可以更容易理解状态何时\",{\"1\":{\"328\":1}}],[\"可以帮助管理全局状态\",{\"1\":{\"328\":1}}],[\"可以再\",{\"1\":{\"325\":1}}],[\"可以减少代码量\",{\"1\":{\"325\":1}}],[\"可以将新数组赋值给原数组实现响应式\",{\"1\":{\"539\":1}}],[\"可以将对象断言为\",{\"1\":{\"451\":1}}],[\"可以将相关\",{\"1\":{\"407\":1}}],[\"可以将其中的内容抽取为一个组件\",{\"1\":{\"393\":1}}],[\"可以将这个标签赋值给一个变量\",{\"1\":{\"361\":1}}],[\"可以将\",{\"1\":{\"331\":1,\"437\":1,\"459\":1}}],[\"可以将所有的状态更新逻辑添加到一个外部函数中\",{\"1\":{\"323\":1}}],[\"可以将任意\",{\"1\":{\"317\":1}}],[\"可以将响应值从一个\",{\"1\":{\"298\":1}}],[\"可以返回任意值\",{\"1\":{\"296\":1}}],[\"可以返回一个函数\",{\"1\":{\"288\":1}}],[\"可以调用\",{\"1\":{\"274\":1}}],[\"可以接受函数作为参数了\",{\"1\":{\"359\":1}}],[\"可以接受更多参数绑定原函数的参数\",{\"1\":{\"238\":1}}],[\"可以接受第二个参数表示搜索开始的位置\",{\"1\":{\"215\":1}}],[\"可以接受第二个参数用来绑定参数函数内部的\",{\"1\":{\"215\":1}}],[\"可以接受第二个参数\",{\"1\":{\"96\":1,\"222\":1}}],[\"可以抛出任何类型的值\",{\"1\":{\"234\":1}}],[\"可以对属性进行遍历\",{\"1\":{\"224\":1}}],[\"可以参考下面的\",{\"1\":{\"209\":1}}],[\"可以有以下几种写法\",{\"1\":{\"207\":1}}],[\"可以解释这次删改\",{\"1\":{\"204\":2}}],[\"可以解决这个问题\",{\"1\":{\"52\":1,\"53\":1}}],[\"可以先声明\",{\"1\":{\"145\":1}}],[\"可以添加\",{\"1\":{\"138\":1}}],[\"可以为值为\",{\"1\":{\"129\":1}}],[\"可以为一个类声明多个命名式构造函数来表达更明确的意图\",{\"1\":{\"78\":1}}],[\"可以防止扩展操作符右面为\",{\"1\":{\"122\":1}}],[\"可以省略掉\",{\"1\":{\"120\":1}}],[\"可以在创建\",{\"1\":{\"580\":1}}],[\"可以在这四个修饰符后再添加指定的按键\",{\"1\":{\"522\":1}}],[\"可以在任何地方被访问到\",{\"1\":{\"418\":1}}],[\"可以在\",{\"1\":{\"345\":1,\"380\":1,\"392\":1}}],[\"可以在此方法中获取之前滚动的位置\",{\"1\":{\"314\":1}}],[\"可以在没有全局安装工具的情况下运行这些工具\",{\"1\":{\"266\":1}}],[\"可以在变量声明前添加\",{\"1\":{\"144\":1}}],[\"可以在同一个对象上连续调用多个对象的变量或方法\",{\"1\":{\"131\":1}}],[\"可以在表达式后面添加叹号表示断言\",{\"1\":{\"117\":1}}],[\"可以在以下位置使用\",{\"1\":{\"116\":1}}],[\"可以在后面再使用\",{\"1\":{\"94\":1}}],[\"可以考虑使用\",{\"1\":{\"109\":1}}],[\"可以使用按键原始的\",{\"1\":{\"522\":1}}],[\"可以使用如下声明\",{\"1\":{\"459\":1}}],[\"可以使用重载定义多个函数类型\",{\"1\":{\"433\":1}}],[\"可以使用三种访问修饰符\",{\"1\":{\"418\":1}}],[\"可以使用非限定名来引用\",{\"1\":{\"414\":1}}],[\"可以使用消息订阅发布模型来实现兄弟组件之间的通信\",{\"1\":{\"408\":1}}],[\"可以使用对象替代多个\",{\"1\":{\"403\":1}}],[\"可以使用字符串形式\",{\"1\":{\"361\":1}}],[\"可以使用下面的组件\",{\"1\":{\"399\":1}}],[\"可以使用下面的\",{\"1\":{\"355\":1}}],[\"可以使用空标签\",{\"1\":{\"305\":1}}],[\"可以使用样式模块化来实现类似\",{\"1\":{\"268\":1}}],[\"可以使用事件对象的\",{\"1\":{\"230\":1}}],[\"可以使用上下文实现\",{\"1\":{\"208\":1}}],[\"可以使用在\",{\"1\":{\"123\":1}}],[\"可以使用单引号或者双引号来创建字符串\",{\"1\":{\"120\":1}}],[\"可以使用\",{\"1\":{\"96\":1,\"131\":1,\"151\":1,\"286\":1,\"301\":1,\"306\":1,\"319\":1,\"331\":1,\"344\":2,\"349\":1,\"360\":1,\"361\":1,\"362\":1,\"368\":1,\"371\":1,\"378\":2,\"385\":1,\"402\":1,\"417\":1,\"490\":1,\"522\":2}}],[\"可以使用一到四个值\",{\"1\":{\"33\":1}}],[\"可以重写这个方法来追踪和记录这个行为\",{\"1\":{\"91\":1}}],[\"可以水平居中\",{\"1\":{\"52\":1}}],[\"可以设置为\",{\"1\":{\"243\":1}}],[\"可以设置任意类型的键\",{\"1\":{\"161\":1}}],[\"可以设置上\",{\"1\":{\"35\":1}}],[\"可以设为\",{\"1\":{\"35\":1}}],[\"可以通过将\",{\"1\":{\"375\":1}}],[\"可以通过下面三种方式定义\",{\"1\":{\"338\":1}}],[\"可以通过下标对参数进行访问\",{\"1\":{\"225\":1}}],[\"可以通过定义组件的\",{\"1\":{\"322\":1}}],[\"可以通过返回一个清理函数解决\",{\"1\":{\"290\":1}}],[\"可以通过修改\",{\"1\":{\"251\":1}}],[\"可以通过为\",{\"1\":{\"215\":1}}],[\"可以通过\",{\"1\":{\"13\":1,\"193\":1,\"208\":1,\"274\":1,\"281\":1,\"289\":1,\"362\":1,\"367\":1,\"371\":1,\"405\":1}}],[\"peopleoptions\",{\"1\":{\"619\":5}}],[\"people\",{\"1\":{\"618\":7,\"619\":9}}],[\"pending\",{\"1\":{\"358\":1}}],[\"peru\",{\"1\":{\"521\":1}}],[\"performance\",{\"1\":{\"301\":2}}],[\"persons\",{\"1\":{\"532\":2,\"534\":3,\"536\":11,\"537\":13,\"538\":5}}],[\"person=reactive\",{\"1\":{\"635\":2}}],[\"person=\",{\"1\":{\"318\":1}}],[\"personinfo\",{\"1\":{\"318\":2,\"319\":1}}],[\"person\",{\"1\":{\"196\":6,\"318\":9,\"319\":7,\"403\":3,\"404\":8,\"441\":8,\"514\":3,\"556\":2,\"557\":2,\"618\":2,\"619\":2,\"627\":4,\"628\":3,\"631\":4,\"635\":6,\"636\":7,\"637\":1,\"642\":9,\"649\":7,\"655\":3}}],[\"percentage\",{\"1\":{\"32\":1}}],[\"plus\",{\"1\":{\"539\":1}}],[\"plugin1\",{\"1\":{\"569\":4}}],[\"plugin\",{\"1\":{\"465\":1,\"569\":1}}],[\"plugins\",{\"1\":{\"339\":1,\"569\":1}}],[\"please\",{\"1\":{\"469\":1}}],[\"placeholder=\",{\"1\":{\"362\":2,\"522\":1,\"536\":1,\"537\":1,\"618\":1}}],[\"playground\",{\"1\":{\"469\":2}}],[\"player\",{\"1\":{\"286\":1,\"287\":2}}],[\"play\",{\"1\":{\"286\":4,\"287\":2,\"290\":1}}],[\"plain\",{\"1\":{\"193\":1,\"388\":1}}],[\"p>\",{\"1\":{\"297\":1,\"329\":1,\"378\":1,\"390\":1,\"397\":1,\"398\":1,\"510\":2,\"553\":1}}],[\"php\",{\"1\":{\"272\":1,\"273\":1,\"306\":3,\"307\":1}}],[\"pi\",{\"1\":{\"247\":4}}],[\"picture>\",{\"1\":{\"196\":1}}],[\"picture\",{\"1\":{\"196\":1}}],[\"piasstring\",{\"1\":{\"119\":1}}],[\"pure\",{\"1\":{\"269\":1}}],[\"push\",{\"0\":{\"591\":1},\"1\":{\"147\":3,\"215\":2,\"337\":1,\"338\":1,\"379\":2,\"405\":2,\"412\":1,\"426\":1,\"429\":2,\"442\":3,\"517\":1,\"539\":1,\"589\":2,\"591\":1,\"602\":1}}],[\"publish\",{\"1\":{\"544\":2}}],[\"public\",{\"1\":{\"418\":4,\"419\":2,\"420\":3,\"421\":3,\"428\":1,\"429\":2,\"485\":1}}],[\"pubsub\",{\"1\":{\"540\":1,\"541\":1,\"542\":2,\"543\":2,\"544\":2}}],[\"pub\",{\"1\":{\"140\":1}}],[\"put<void\",{\"1\":{\"338\":1}}],[\"putifabsent\",{\"1\":{\"83\":1}}],[\"put\",{\"0\":{\"22\":1},\"1\":{\"250\":1,\"338\":1,\"344\":1,\"358\":1,\"359\":1}}],[\"p3\",{\"1\":{\"86\":2}}],[\"p2\",{\"1\":{\"72\":2,\"85\":2,\"86\":2,\"89\":2,\"537\":4}}],[\"port\",{\"1\":{\"485\":1,\"486\":1}}],[\"pop\",{\"1\":{\"215\":2,\"379\":1,\"405\":1,\"427\":1,\"539\":1}}],[\"pow\",{\"1\":{\"85\":2,\"86\":2,\"87\":2,\"89\":2,\"217\":1}}],[\"point3d\",{\"1\":{\"425\":3}}],[\"point\",{\"1\":{\"72\":3,\"73\":1,\"85\":5,\"86\":7,\"87\":3,\"89\":5,\"425\":5,\"641\":8}}],[\"position\",{\"0\":{\"54\":1},\"1\":{\"32\":2,\"54\":3,\"59\":2,\"645\":2}}],[\"post<void>\",{\"1\":{\"358\":2,\"359\":2}}],[\"post<void\",{\"1\":{\"338\":1}}],[\"post方式\",{\"1\":{\"16\":1}}],[\"post\",{\"0\":{\"18\":1},\"1\":{\"15\":1,\"16\":2,\"18\":4,\"22\":1,\"23\":1,\"24\":1,\"193\":1,\"337\":2,\"338\":1,\"344\":1,\"351\":2,\"379\":4,\"385\":1,\"390\":2,\"397\":1,\"398\":1}}],[\"p1\",{\"1\":{\"72\":3,\"73\":3,\"85\":2,\"86\":2,\"87\":3,\"89\":2,\"537\":4}}],[\"price\",{\"1\":{\"434\":8}}],[\"private\",{\"1\":{\"418\":2,\"419\":1,\"421\":1,\"460\":1,\"466\":1}}],[\"primary\",{\"1\":{\"337\":1,\"344\":1}}],[\"println\",{\"1\":{\"459\":1}}],[\"print=\",{\"1\":{\"318\":1}}],[\"print\",{\"1\":{\"68\":3,\"70\":1,\"72\":1,\"73\":1,\"75\":2,\"78\":2,\"79\":1,\"80\":2,\"81\":2,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":2,\"90\":2,\"91\":3,\"92\":1,\"93\":2,\"94\":4,\"95\":1,\"96\":4,\"99\":2,\"100\":2,\"103\":2,\"104\":2,\"105\":2,\"106\":3,\"109\":3,\"111\":2,\"113\":1,\"116\":2,\"117\":1,\"120\":4,\"121\":1,\"122\":5,\"123\":3,\"124\":3,\"125\":2,\"126\":1,\"128\":7,\"129\":2,\"130\":2,\"131\":2,\"132\":2,\"134\":3,\"135\":6,\"137\":8,\"141\":1,\"144\":5,\"145\":1,\"318\":5,\"319\":5}}],[\"pre>李在干神魔<\",{\"1\":{\"480\":1}}],[\"pre\",{\"0\":{\"480\":1},\"1\":{\"480\":1}}],[\"presets\",{\"1\":{\"460\":1}}],[\"preset\",{\"1\":{\"460\":2}}],[\"preserve\",{\"1\":{\"267\":2}}],[\"prevent=\",{\"1\":{\"521\":1}}],[\"prevent\",{\"1\":{\"521\":1}}],[\"preventdefault\",{\"1\":{\"229\":1,\"231\":2,\"274\":2,\"521\":1}}],[\"prevheight\",{\"1\":{\"314\":2}}],[\"prevstate\",{\"1\":{\"314\":1,\"315\":2,\"324\":5,\"354\":3}}],[\"prevprops\",{\"1\":{\"301\":1,\"314\":1,\"315\":2}}],[\"prefix\",{\"1\":{\"208\":1,\"252\":1,\"260\":2,\"338\":1}}],[\"prefetch\",{\"1\":{\"197\":1}}],[\"prerender\",{\"1\":{\"197\":1}}],[\"preconnect\",{\"1\":{\"197\":1}}],[\"preload\",{\"1\":{\"197\":1}}],[\"productiontip\",{\"1\":{\"553\":1,\"560\":1,\"576\":1,\"613\":1,\"657\":1}}],[\"protected\",{\"1\":{\"418\":2}}],[\"protectedroute>\",{\"1\":{\"399\":2}}],[\"protectedroute\",{\"1\":{\"399\":1}}],[\"protocted\",{\"1\":{\"418\":1}}],[\"proto\",{\"1\":{\"169\":2,\"240\":1,\"493\":1}}],[\"prototype\",{\"1\":{\"147\":1,\"220\":2,\"237\":1,\"239\":5,\"462\":1,\"493\":2,\"525\":1,\"569\":1,\"657\":1}}],[\"providestags\",{\"1\":{\"345\":4,\"347\":4}}],[\"provide\",{\"0\":{\"336\":1,\"652\":1,\"653\":1},\"1\":{\"652\":2,\"653\":3}}],[\"provider\",{\"1\":{\"280\":1,\"283\":1,\"336\":1}}],[\"provider>\",{\"1\":{\"280\":3,\"283\":1,\"336\":1,\"337\":1}}],[\"process\",{\"1\":{\"292\":1,\"465\":2,\"615\":2,\"616\":2,\"619\":3}}],[\"property\",{\"1\":{\"658\":4}}],[\"propertiesarraywithoutlast\",{\"1\":{\"517\":2}}],[\"propname\",{\"1\":{\"441\":1}}],[\"proptypes\",{\"0\":{\"322\":1},\"1\":{\"322\":4}}],[\"prop\",{\"0\":{\"322\":1},\"1\":{\"281\":1,\"322\":2,\"367\":2,\"552\":3}}],[\"props\",{\"0\":{\"289\":1,\"317\":1,\"318\":1,\"319\":1,\"321\":1,\"563\":1,\"585\":1},\"1\":{\"273\":1,\"276\":3,\"281\":5,\"283\":1,\"286\":8,\"287\":6,\"289\":1,\"290\":4,\"301\":1,\"309\":1,\"310\":3,\"313\":2,\"314\":1,\"317\":1,\"318\":8,\"319\":2,\"320\":1,\"321\":6,\"322\":3,\"361\":2,\"362\":2,\"379\":1,\"406\":4,\"407\":1,\"408\":1,\"552\":1,\"565\":7,\"586\":4,\"587\":4,\"588\":2,\"633\":6,\"639\":1,\"640\":1,\"641\":1,\"654\":1}}],[\"proxy\",{\"1\":{\"270\":1,\"339\":1,\"485\":1,\"486\":1,\"628\":2,\"631\":2,\"632\":1}}],[\"progress\",{\"1\":{\"193\":1}}],[\"promise<array<link>>\",{\"1\":{\"379\":2,\"380\":2,\"390\":1}}],[\"promise<link>\",{\"1\":{\"378\":1}}],[\"promise<void>\",{\"1\":{\"358\":1,\"359\":2,\"378\":1,\"379\":3}}],[\"promise对象变为\",{\"1\":{\"152\":1}}],[\"promise\",{\"0\":{\"175\":1,\"180\":1},\"1\":{\"26\":1,\"27\":1,\"68\":1,\"151\":2,\"152\":6,\"176\":7,\"177\":2,\"178\":3,\"180\":4,\"312\":1,\"340\":2,\"351\":2,\"377\":1,\"391\":3,\"401\":1,\"626\":1}}],[\"p\",{\"1\":{\"63\":6,\"64\":1,\"85\":3,\"86\":6,\"89\":4,\"465\":2,\"534\":2,\"536\":6,\"537\":2,\"631\":12}}],[\"png\",{\"1\":{\"32\":1,\"196\":6}}],[\"pagey\",{\"1\":{\"641\":1}}],[\"pagex\",{\"1\":{\"641\":1}}],[\"page\",{\"1\":{\"371\":1,\"392\":1}}],[\"payloadaction>>\",{\"1\":{\"335\":1}}],[\"payloadaction<upsertpayload>\",{\"1\":{\"337\":2}}],[\"payloadaction<\",{\"1\":{\"334\":1}}],[\"payloadaction\",{\"1\":{\"334\":1,\"337\":1}}],[\"payload\",{\"1\":{\"331\":2,\"334\":2,\"337\":6,\"338\":2,\"343\":3,\"353\":9,\"358\":12,\"359\":1}}],[\"pause\",{\"1\":{\"286\":4,\"287\":2,\"290\":1}}],[\"package\",{\"1\":{\"270\":1,\"460\":3,\"466\":2,\"561\":1}}],[\"passive=\",{\"1\":{\"521\":1}}],[\"passive\",{\"1\":{\"229\":1,\"521\":1}}],[\"password\",{\"1\":{\"74\":1,\"75\":7,\"78\":7,\"80\":6,\"81\":8,\"82\":4,\"124\":1,\"159\":2,\"186\":2}}],[\"pathrewrite\",{\"1\":{\"486\":1}}],[\"paths\",{\"1\":{\"460\":1}}],[\"path=\",{\"1\":{\"369\":3}}],[\"pathname\",{\"1\":{\"337\":1,\"399\":3,\"401\":2}}],[\"path\",{\"1\":{\"243\":2,\"247\":3,\"251\":1,\"252\":1,\"337\":3,\"339\":2,\"366\":3,\"370\":1,\"371\":1,\"372\":6,\"373\":4,\"374\":2,\"376\":1,\"377\":5,\"378\":3,\"379\":1,\"381\":2,\"399\":1,\"401\":1,\"576\":2,\"577\":6,\"578\":1,\"580\":2,\"581\":3,\"582\":1,\"583\":1,\"584\":7,\"586\":2,\"602\":1,\"604\":1}}],[\"pattern\",{\"1\":{\"193\":1,\"374\":1,\"517\":4}}],[\"patch\",{\"0\":{\"23\":1}}],[\"padend\",{\"1\":{\"183\":1}}],[\"padstart\",{\"1\":{\"183\":1}}],[\"padding\",{\"1\":{\"32\":2,\"36\":1,\"59\":1,\"521\":2,\"539\":2}}],[\"panic\",{\"1\":{\"128\":1}}],[\"parent\",{\"1\":{\"197\":1}}],[\"parsefloat\",{\"1\":{\"222\":1}}],[\"parseint\",{\"1\":{\"222\":3,\"233\":1,\"333\":1,\"335\":1}}],[\"parse\",{\"1\":{\"119\":2,\"218\":1,\"297\":1,\"496\":1,\"556\":1,\"557\":1}}],[\"parameterizedcontext\",{\"1\":{\"247\":3}}],[\"params<\",{\"1\":{\"378\":1,\"379\":1,\"390\":1,\"394\":1}}],[\"params\",{\"0\":{\"383\":1,\"584\":1},\"1\":{\"15\":4,\"16\":2,\"17\":1,\"18\":3,\"262\":2,\"337\":3,\"338\":1,\"343\":2,\"344\":4,\"358\":7,\"359\":5,\"372\":3,\"374\":6,\"378\":8,\"379\":6,\"390\":4,\"394\":4,\"401\":3,\"584\":3,\"586\":4,\"588\":3,\"605\":1}}],[\"paramstest\",{\"1\":{\"15\":1}}],[\"param\",{\"1\":{\"15\":2,\"16\":4,\"17\":2,\"18\":5,\"262\":2}}],[\"ppg=\",{\"1\":{\"522\":1,\"548\":1}}],[\"ppg007\",{\"1\":{\"124\":2,\"141\":1,\"208\":1,\"243\":1,\"249\":1,\"257\":1,\"262\":1,\"300\":1,\"318\":1,\"319\":1,\"403\":1,\"404\":2,\"405\":1,\"406\":2,\"410\":2,\"437\":1,\"441\":4,\"459\":3,\"460\":2,\"461\":1,\"463\":1,\"470\":1,\"517\":1,\"518\":2,\"539\":1}}],[\"ppg\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"75\":2,\"131\":1,\"147\":1,\"159\":1,\"162\":2,\"362\":2,\"462\":1,\"463\":1,\"476\":1,\"478\":1,\"482\":1,\"483\":1,\"489\":1,\"491\":1,\"494\":1,\"507\":1,\"509\":1,\"514\":1,\"520\":1,\"521\":1,\"522\":2,\"532\":1,\"534\":1,\"546\":1,\"548\":1,\"552\":4,\"553\":1,\"556\":1,\"557\":1,\"564\":1,\"568\":1,\"618\":1,\"619\":1,\"626\":1,\"627\":2,\"631\":2,\"635\":2,\"636\":2,\"642\":2,\"649\":1,\"655\":1}}],[\"a++\",{\"1\":{\"622\":1}}],[\"a+b\",{\"1\":{\"100\":1,\"104\":1,\"120\":1}}],[\"aqua\",{\"1\":{\"521\":1}}],[\"am\",{\"1\":{\"470\":1}}],[\"amd\",{\"1\":{\"461\":2}}],[\"ajax\",{\"1\":{\"459\":3,\"529\":1,\"624\":1}}],[\"agnosticroutematch\",{\"1\":{\"401\":1}}],[\"age=\",{\"1\":{\"406\":1,\"564\":1}}],[\"age++\",{\"1\":{\"405\":1,\"406\":1,\"539\":1,\"627\":3,\"628\":2,\"642\":2}}],[\"age+1\",{\"1\":{\"404\":1}}],[\"age>>\",{\"1\":{\"208\":1}}],[\"age\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"74\":1,\"131\":3,\"132\":2,\"208\":5,\"318\":3,\"319\":2,\"403\":5,\"404\":11,\"405\":5,\"406\":12,\"437\":1,\"441\":7,\"489\":2,\"491\":2,\"494\":2,\"511\":1,\"514\":1,\"527\":2,\"528\":2,\"532\":1,\"534\":1,\"539\":7,\"553\":1,\"556\":1,\"557\":1,\"565\":5,\"568\":1,\"616\":7,\"618\":3,\"619\":3,\"626\":4,\"627\":7,\"628\":2,\"631\":2,\"635\":4,\"636\":3,\"642\":6,\"649\":2}}],[\"avatar=\",{\"1\":{\"351\":1}}],[\"admin\",{\"1\":{\"532\":2,\"534\":1,\"602\":1}}],[\"adapter\",{\"1\":{\"343\":2}}],[\"addperson\",{\"1\":{\"618\":3,\"619\":2}}],[\"addwait\",{\"1\":{\"614\":2,\"617\":2,\"619\":2}}],[\"addodd\",{\"1\":{\"614\":2,\"617\":2,\"619\":2}}],[\"addonehobby\",{\"1\":{\"539\":2}}],[\"addone\",{\"1\":{\"534\":2,\"536\":1}}],[\"addfriend\",{\"1\":{\"539\":2}}],[\"addsex\",{\"1\":{\"539\":2}}],[\"addsubscribers\",{\"1\":{\"517\":4}}],[\"adddefaultcase\",{\"1\":{\"338\":1}}],[\"addmatcher\",{\"1\":{\"338\":3,\"343\":2}}],[\"addcase\",{\"1\":{\"338\":3}}],[\"addhandler\",{\"1\":{\"283\":2,\"323\":2,\"324\":1}}],[\"addlistener\",{\"1\":{\"243\":1,\"245\":1}}],[\"addeventlistener\",{\"1\":{\"229\":2,\"290\":1,\"517\":1,\"641\":1}}],[\"address\",{\"1\":{\"204\":1,\"489\":2,\"491\":2,\"494\":2,\"527\":2,\"569\":2}}],[\"addall\",{\"1\":{\"123\":1}}],[\"add\",{\"1\":{\"123\":1,\"140\":1,\"147\":2,\"156\":3,\"189\":1,\"206\":1,\"252\":2,\"259\":2,\"264\":2,\"268\":1,\"269\":2,\"283\":2,\"301\":5,\"324\":3,\"331\":1,\"333\":4,\"335\":2,\"359\":1,\"364\":1,\"379\":2,\"380\":1,\"390\":1,\"405\":1,\"408\":1,\"457\":1,\"460\":1,\"465\":1,\"469\":1,\"614\":6,\"617\":2,\"618\":2,\"619\":6,\"653\":5,\"654\":4}}],[\"attrs\",{\"1\":{\"633\":2}}],[\"attribute<\",{\"1\":{\"539\":1}}],[\"attribute\",{\"1\":{\"517\":5,\"551\":1,\"552\":1}}],[\"attributes\",{\"1\":{\"517\":3}}],[\"attachment\",{\"1\":{\"32\":2}}],[\"atob\",{\"1\":{\"223\":2}}],[\"abc\",{\"1\":{\"539\":1}}],[\"aboutloader\",{\"1\":{\"379\":1,\"401\":1}}],[\"aboutaction\",{\"1\":{\"379\":2,\"398\":1}}],[\"about\",{\"1\":{\"366\":1,\"369\":1,\"371\":3,\"372\":1,\"376\":1,\"377\":2,\"379\":10,\"384\":1,\"395\":2,\"397\":2,\"398\":1,\"401\":2,\"402\":1,\"576\":5,\"577\":4,\"578\":2,\"580\":3,\"584\":5,\"589\":2}}],[\"abortsignal\",{\"1\":{\"229\":1}}],[\"abbr\",{\"1\":{\"204\":1}}],[\"abs\",{\"1\":{\"217\":1,\"447\":3,\"448\":3}}],[\"abstract\",{\"1\":{\"89\":1,\"421\":2}}],[\"absolute\",{\"1\":{\"54\":1,\"59\":1,\"645\":2}}],[\"audio\",{\"1\":{\"200\":1}}],[\"authrequired\",{\"1\":{\"602\":1}}],[\"auth\",{\"1\":{\"249\":2}}],[\"author\",{\"1\":{\"197\":1,\"208\":8,\"460\":3,\"463\":3}}],[\"autofocus\",{\"1\":{\"193\":2}}],[\"autocomplete\",{\"1\":{\"193\":1}}],[\"auto\",{\"1\":{\"35\":1,\"45\":1,\"46\":2,\"52\":1,\"55\":1,\"57\":1,\"59\":2,\"192\":1,\"195\":1,\"314\":1,\"521\":1}}],[\"activated\",{\"0\":{\"598\":1},\"1\":{\"530\":1}}],[\"active\",{\"1\":{\"60\":1,\"368\":9,\"372\":5,\"385\":1,\"576\":5,\"589\":4,\"658\":2}}],[\"actiondata\",{\"1\":{\"379\":3}}],[\"actionfunction\",{\"1\":{\"379\":3}}],[\"action=\",{\"1\":{\"379\":1,\"398\":1}}],[\"actioncreator\",{\"1\":{\"338\":1,\"358\":1}}],[\"actions\",{\"1\":{\"325\":1,\"329\":1,\"334\":2,\"337\":1,\"613\":2,\"614\":3,\"615\":1,\"617\":3,\"618\":1,\"619\":3}}],[\"action>>\",{\"1\":{\"283\":1,\"324\":1}}],[\"action\",{\"0\":{\"379\":1,\"397\":1},\"1\":{\"283\":1,\"323\":3,\"324\":8,\"326\":1,\"328\":1,\"329\":1,\"331\":12,\"332\":2,\"334\":7,\"335\":5,\"337\":11,\"338\":5,\"343\":5,\"348\":1,\"351\":5,\"353\":12,\"354\":1,\"355\":5,\"356\":4,\"358\":8,\"359\":2,\"377\":1,\"379\":21,\"380\":3,\"385\":1,\"387\":3,\"390\":1,\"397\":6,\"398\":1,\"399\":1,\"619\":2}}],[\"access\",{\"1\":{\"249\":1,\"602\":1}}],[\"accesskey\",{\"1\":{\"192\":1}}],[\"accept\",{\"1\":{\"193\":1}}],[\"accountid\",{\"1\":{\"459\":1}}],[\"account\",{\"1\":{\"159\":2,\"186\":3,\"207\":17}}],[\"a3\",{\"1\":{\"147\":1}}],[\"a2\",{\"1\":{\"147\":3}}],[\"a18cd1\",{\"1\":{\"482\":1}}],[\"a1\",{\"1\":{\"147\":4}}],[\"app>\",{\"1\":{\"491\":1,\"494\":1}}],[\"appendchild\",{\"1\":{\"517\":1}}],[\"append\",{\"1\":{\"255\":1,\"517\":1}}],[\"applymiddleware\",{\"1\":{\"356\":2,\"359\":1}}],[\"apply\",{\"1\":{\"238\":1,\"275\":2}}],[\"application\",{\"1\":{\"193\":2,\"379\":4,\"385\":1,\"388\":1,\"390\":2,\"397\":1}}],[\"app\",{\"1\":{\"210\":1,\"243\":18,\"244\":2,\"245\":6,\"246\":4,\"247\":1,\"249\":4,\"250\":4,\"251\":1,\"252\":8,\"253\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"260\":3,\"265\":3,\"266\":4,\"268\":2,\"269\":1,\"280\":1,\"283\":2,\"301\":4,\"304\":1,\"323\":4,\"329\":1,\"336\":1,\"337\":2,\"338\":5,\"365\":5,\"366\":3,\"371\":1,\"377\":1,\"402\":1,\"407\":2,\"408\":1,\"491\":2,\"494\":5,\"525\":2,\"560\":4,\"562\":1,\"576\":5,\"613\":4,\"626\":1,\"633\":1,\"642\":2,\"646\":2,\"651\":1,\"653\":1,\"657\":9,\"661\":1}}],[\"apt\",{\"1\":{\"140\":7}}],[\"apis\",{\"0\":{\"369\":1},\"1\":{\"366\":5,\"369\":1}}],[\"api\",{\"0\":{\"14\":1,\"243\":1,\"303\":1,\"625\":1,\"640\":1,\"647\":1,\"657\":1},\"1\":{\"67\":1,\"69\":1,\"90\":1,\"126\":1,\"242\":1,\"290\":5,\"338\":1,\"344\":14,\"345\":1,\"346\":1,\"348\":4,\"349\":3,\"351\":3,\"352\":1,\"356\":2,\"378\":1,\"379\":2,\"384\":1,\"486\":2,\"487\":1,\"539\":2,\"555\":1,\"573\":1,\"626\":1,\"640\":3,\"641\":1,\"657\":4}}],[\"a>\",{\"1\":{\"115\":1,\"197\":1,\"365\":2,\"366\":1,\"521\":1,\"553\":1}}],[\"ascii\",{\"1\":{\"223\":1}}],[\"aside\",{\"1\":{\"202\":1}}],[\"assign\",{\"0\":{\"169\":1},\"1\":{\"169\":1}}],[\"assigned\",{\"1\":{\"144\":1}}],[\"asserts\",{\"1\":{\"138\":2}}],[\"assertionerror\",{\"1\":{\"138\":1}}],[\"assert\",{\"1\":{\"108\":4,\"138\":3}}],[\"as\",{\"1\":{\"128\":5,\"164\":3,\"209\":1,\"269\":1,\"297\":1,\"338\":6,\"340\":1,\"344\":1,\"358\":1,\"371\":1,\"378\":2,\"379\":7,\"380\":1,\"390\":1,\"392\":1,\"393\":1,\"410\":1,\"451\":4,\"452\":2,\"454\":1,\"461\":3,\"462\":2,\"463\":2}}],[\"asyncmiddleware\",{\"1\":{\"358\":1}}],[\"asyncthunk\",{\"1\":{\"338\":2,\"344\":1}}],[\"async函数可以保留运行堆栈\",{\"1\":{\"152\":1}}],[\"asyncprint\",{\"1\":{\"151\":2}}],[\"asynchronousnaturalsto\",{\"1\":{\"109\":2}}],[\"async\",{\"0\":{\"150\":1},\"1\":{\"67\":2,\"68\":4,\"69\":1,\"109\":3,\"151\":3,\"152\":7,\"197\":1,\"227\":3,\"243\":4,\"244\":2,\"245\":1,\"246\":1,\"247\":3,\"249\":1,\"250\":1,\"251\":1,\"252\":2,\"261\":1,\"262\":1,\"304\":1,\"312\":1,\"333\":1,\"335\":1,\"338\":4,\"340\":3,\"344\":2,\"351\":1,\"358\":6,\"359\":5,\"377\":5,\"378\":5,\"379\":10,\"380\":2,\"394\":1,\"399\":1,\"401\":1,\"626\":1,\"646\":1}}],[\"another\",{\"1\":{\"539\":1}}],[\"anotherset\",{\"1\":{\"123\":2}}],[\"any\",{\"1\":{\"438\":2,\"439\":1,\"442\":2,\"451\":7,\"452\":4,\"456\":2,\"459\":9}}],[\"and\",{\"1\":{\"345\":1}}],[\"antd\",{\"1\":{\"337\":1}}],[\"anestopoulos\",{\"1\":{\"196\":1}}],[\"animal\",{\"1\":{\"154\":2,\"239\":2,\"417\":4,\"418\":3,\"419\":2,\"420\":3,\"421\":3,\"454\":5}}],[\"an\",{\"1\":{\"108\":1,\"371\":1,\"392\":1}}],[\"arr\",{\"1\":{\"314\":5,\"405\":2,\"429\":3,\"442\":7,\"482\":2,\"628\":2}}],[\"array<string>\",{\"1\":{\"442\":1}}],[\"array<t>\",{\"1\":{\"426\":1,\"429\":3}}],[\"array<todo>\",{\"1\":{\"283\":1,\"323\":1,\"324\":2}}],[\"array<link>\",{\"1\":{\"378\":1,\"379\":3,\"390\":1,\"393\":2,\"397\":1}}],[\"array<article>>\",{\"1\":{\"353\":1}}],[\"array<article>\",{\"1\":{\"337\":2,\"338\":1,\"353\":1}}],[\"array<number>\",{\"1\":{\"301\":1}}],[\"array\",{\"0\":{\"215\":1},\"1\":{\"147\":3,\"257\":1,\"343\":1,\"379\":2,\"517\":3}}],[\"articleasyncfn\",{\"1\":{\"358\":7}}],[\"articleaction>\",{\"1\":{\"353\":1,\"359\":4}}],[\"articleaction\",{\"1\":{\"353\":1,\"358\":6,\"359\":1}}],[\"articleadapter\",{\"1\":{\"343\":8}}],[\"articlepayload\",{\"1\":{\"353\":2,\"358\":1}}],[\"articlefound\",{\"1\":{\"338\":3}}],[\"articledispatch\",{\"1\":{\"337\":1,\"338\":1,\"359\":1}}],[\"articlesapi\",{\"1\":{\"344\":1,\"346\":1}}],[\"articlestore\",{\"1\":{\"338\":1}}],[\"articlestate\",{\"1\":{\"337\":5,\"342\":1,\"353\":1,\"358\":1}}],[\"articles\",{\"1\":{\"337\":3,\"338\":10,\"342\":2,\"343\":2,\"344\":1,\"348\":1,\"353\":6,\"358\":8,\"359\":2}}],[\"articleslice\",{\"1\":{\"337\":3,\"338\":1,\"343\":2,\"344\":1}}],[\"articlereducer\",{\"1\":{\"337\":2,\"353\":6}}],[\"article\",{\"1\":{\"202\":1,\"337\":25,\"338\":5,\"342\":3,\"343\":7,\"344\":18,\"345\":6,\"350\":1,\"351\":9,\"353\":10,\"359\":1}}],[\"arg\",{\"1\":{\"245\":2,\"275\":2,\"344\":5,\"347\":4,\"350\":2,\"351\":2,\"465\":2,\"547\":1}}],[\"arguments\",{\"1\":{\"159\":1,\"225\":2}}],[\"args2\",{\"1\":{\"275\":2}}],[\"args\",{\"1\":{\"68\":2,\"70\":1,\"75\":2,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":2,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":2,\"100\":1,\"103\":2,\"104\":1,\"106\":1,\"109\":3,\"111\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"119\":1,\"120\":4,\"121\":1,\"122\":3,\"123\":3,\"124\":2,\"125\":1,\"126\":1,\"128\":3,\"129\":1,\"130\":1,\"131\":1,\"132\":2,\"134\":1,\"135\":3,\"137\":2,\"138\":1,\"141\":1,\"144\":1,\"145\":1,\"275\":6,\"344\":5}}],[\"around\",{\"1\":{\"45\":2}}],[\"await>\",{\"1\":{\"390\":1,\"393\":1}}],[\"await\",{\"0\":{\"391\":1},\"1\":{\"67\":2,\"68\":1,\"69\":2,\"109\":1,\"151\":3,\"152\":8,\"243\":4,\"244\":1,\"245\":1,\"246\":1,\"247\":3,\"249\":1,\"250\":1,\"251\":1,\"252\":2,\"261\":1,\"262\":1,\"304\":1,\"312\":1,\"338\":4,\"340\":5,\"344\":2,\"351\":2,\"358\":7,\"359\":9,\"377\":5,\"378\":7,\"379\":16,\"380\":6,\"390\":1,\"391\":1,\"392\":1,\"393\":2,\"394\":2,\"399\":1,\"401\":3}}],[\"aftereach\",{\"1\":{\"603\":1}}],[\"after\",{\"1\":{\"62\":1,\"539\":1}}],[\"a\",{\"0\":{\"368\":1},\"1\":{\"60\":4,\"69\":1,\"70\":2,\"90\":6,\"91\":10,\"92\":7,\"93\":2,\"94\":14,\"95\":3,\"97\":4,\"99\":5,\"100\":3,\"103\":2,\"104\":1,\"105\":4,\"106\":2,\"108\":9,\"112\":1,\"115\":2,\"117\":3,\"119\":1,\"120\":7,\"126\":3,\"128\":2,\"129\":3,\"130\":2,\"134\":6,\"137\":2,\"143\":1,\"144\":3,\"161\":2,\"162\":2,\"167\":2,\"185\":1,\"187\":1,\"198\":2,\"208\":3,\"243\":2,\"275\":2,\"301\":10,\"334\":1,\"337\":7,\"338\":5,\"343\":10,\"345\":1,\"351\":2,\"353\":14,\"366\":1,\"368\":3,\"384\":1,\"405\":4,\"417\":2,\"420\":3,\"423\":7,\"427\":7,\"428\":3,\"444\":2,\"445\":3,\"446\":6,\"447\":3,\"448\":3,\"450\":6,\"451\":8,\"454\":2,\"482\":2,\"502\":4,\"510\":3,\"527\":2,\"537\":3,\"539\":1,\"569\":2,\"581\":4,\"582\":5,\"583\":2,\"622\":3,\"636\":2,\"637\":1,\"642\":5,\"646\":3,\"649\":1,\"658\":1}}],[\"alert>\",{\"1\":{\"428\":1}}],[\"alert\",{\"1\":{\"423\":11,\"424\":4,\"428\":6,\"434\":4,\"520\":1,\"521\":1,\"556\":1,\"557\":1,\"567\":1,\"602\":1,\"618\":2,\"619\":2,\"626\":1,\"627\":2,\"628\":1,\"633\":1}}],[\"alarm\",{\"1\":{\"423\":7,\"424\":2,\"434\":10}}],[\"alt=\",{\"1\":{\"196\":1}}],[\"alt\",{\"1\":{\"192\":1,\"522\":1}}],[\"allowunreachablecode\",{\"1\":{\"267\":2}}],[\"allowjs\",{\"1\":{\"267\":2}}],[\"allowedmethods\",{\"1\":{\"260\":1,\"338\":1}}],[\"allowsyntheticdefaultimports\",{\"1\":{\"209\":2}}],[\"all\",{\"0\":{\"180\":1},\"1\":{\"180\":2,\"247\":2}}],[\"alive>\",{\"1\":{\"596\":4}}],[\"alive\",{\"1\":{\"596\":5}}],[\"alist\",{\"1\":{\"337\":1,\"344\":1,\"345\":1,\"351\":1}}],[\"alias\",{\"1\":{\"582\":1}}],[\"alia\",{\"1\":{\"81\":2}}],[\"align\",{\"1\":{\"45\":2,\"46\":3,\"59\":1,\"65\":2,\"645\":1}}],[\"alpha\",{\"1\":{\"41\":2}}],[\"axiossettingtype\",{\"1\":{\"459\":1}}],[\"axiossetting\",{\"1\":{\"459\":6}}],[\"axiosbasequery\",{\"1\":{\"344\":2}}],[\"axiosresponse<void>\",{\"1\":{\"338\":2}}],[\"axiosinstance\",{\"1\":{\"338\":4,\"344\":2,\"358\":5,\"359\":5}}],[\"axios\",{\"0\":{\"1\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"31\":1},\"1\":{\"13\":2,\"15\":1,\"16\":3,\"17\":1,\"18\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":2,\"26\":1,\"27\":3,\"30\":1,\"31\":4,\"290\":1,\"338\":1,\"344\":5,\"459\":11,\"487\":1,\"573\":2}}],[\"n===3\",{\"1\":{\"507\":1}}],[\"n===1\",{\"1\":{\"507\":1}}],[\"n==2\",{\"1\":{\"507\":1}}],[\"n++\",{\"1\":{\"479\":1,\"480\":1,\"507\":1,\"548\":1}}],[\"nvg\",{\"1\":{\"381\":2}}],[\"ngv\",{\"1\":{\"381\":4,\"385\":2}}],[\"nginx\",{\"1\":{\"366\":1}}],[\"npx\",{\"1\":{\"266\":7}}],[\"npm5\",{\"1\":{\"266\":1}}],[\"npm\",{\"0\":{\"460\":1,\"463\":1},\"1\":{\"31\":1,\"266\":3,\"267\":1,\"457\":2,\"460\":10,\"461\":1,\"463\":3,\"465\":1,\"467\":1,\"541\":1,\"559\":8,\"561\":1,\"572\":1,\"575\":1,\"613\":1,\"661\":2}}],[\"net\",{\"1\":{\"529\":1}}],[\"nextstate\",{\"1\":{\"313\":2,\"315\":1,\"403\":1}}],[\"nextprops\",{\"1\":{\"313\":2,\"315\":1}}],[\"next\",{\"1\":{\"243\":8,\"244\":2,\"245\":2,\"246\":2,\"247\":9,\"249\":2,\"250\":2,\"251\":2,\"252\":4,\"260\":2,\"261\":3,\"262\":4,\"338\":2,\"355\":1,\"356\":3,\"358\":2,\"469\":1,\"602\":9,\"603\":1,\"604\":1,\"605\":2,\"610\":1}}],[\"newval\",{\"1\":{\"651\":2}}],[\"newvalue\",{\"1\":{\"517\":9,\"536\":3,\"537\":3,\"621\":3,\"622\":2,\"623\":2,\"636\":12}}],[\"news\",{\"1\":{\"576\":2,\"577\":4,\"584\":5,\"589\":1,\"596\":2}}],[\"newstate\",{\"1\":{\"331\":1}}],[\"newlinks\",{\"1\":{\"379\":4}}],[\"newlink\",{\"1\":{\"379\":4}}],[\"newarticle\",{\"1\":{\"338\":2}}],[\"newprops\",{\"1\":{\"301\":1}}],[\"new\",{\"0\":{\"237\":1},\"1\":{\"13\":1,\"72\":2,\"75\":2,\"94\":1,\"147\":1,\"151\":1,\"153\":1,\"159\":1,\"162\":1,\"237\":4,\"243\":7,\"244\":1,\"245\":1,\"246\":1,\"249\":1,\"250\":1,\"252\":2,\"260\":4,\"265\":1,\"290\":2,\"312\":1,\"321\":2,\"338\":6,\"353\":1,\"371\":1,\"378\":3,\"379\":3,\"380\":1,\"381\":1,\"385\":4,\"401\":1,\"402\":1,\"417\":1,\"418\":2,\"419\":1,\"420\":1,\"421\":1,\"423\":3,\"424\":1,\"428\":2,\"429\":1,\"430\":2,\"431\":1,\"451\":1,\"459\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"489\":1,\"491\":1,\"492\":2,\"494\":1,\"504\":1,\"506\":1,\"507\":1,\"509\":1,\"510\":4,\"517\":4,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"525\":1,\"529\":1,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"560\":1,\"576\":2,\"577\":1,\"581\":3,\"582\":1,\"583\":1,\"584\":1,\"609\":1,\"613\":2,\"615\":1,\"619\":1,\"621\":1,\"631\":1}}],[\"ns\",{\"1\":{\"207\":2}}],[\"nstring\",{\"1\":{\"120\":1}}],[\"n\",{\"1\":{\"109\":8,\"120\":1,\"158\":2,\"410\":4,\"434\":2,\"437\":1,\"479\":3,\"480\":2,\"507\":2,\"548\":4,\"614\":7,\"615\":1,\"616\":7,\"618\":5,\"619\":8}}],[\"native=\",{\"1\":{\"501\":1}}],[\"native\",{\"1\":{\"501\":1,\"502\":1,\"658\":1}}],[\"nativestate\",{\"1\":{\"353\":1,\"359\":4}}],[\"nativestore\",{\"1\":{\"353\":5,\"354\":2,\"355\":1,\"356\":1}}],[\"nativedispatch\",{\"1\":{\"353\":1}}],[\"naturalsdownfrom\",{\"1\":{\"109\":3}}],[\"naturalsto\",{\"1\":{\"109\":2}}],[\"navigator\",{\"1\":{\"399\":1}}],[\"navigation\",{\"1\":{\"387\":3,\"388\":3,\"390\":3}}],[\"navigateoptions\",{\"1\":{\"381\":1}}],[\"navigatefunction\",{\"1\":{\"381\":2}}],[\"navigatepage\",{\"1\":{\"381\":1}}],[\"navigate\",{\"1\":{\"381\":6,\"385\":2,\"398\":1,\"399\":1}}],[\"navlink>\",{\"1\":{\"368\":2,\"372\":3}}],[\"navlink\",{\"0\":{\"368\":1},\"1\":{\"368\":9,\"372\":2,\"374\":1,\"379\":1,\"385\":2}}],[\"nav\",{\"1\":{\"202\":1}}],[\"nan和空字符串会被转换成\",{\"1\":{\"233\":1}}],[\"nan\",{\"1\":{\"161\":1,\"215\":1,\"221\":2,\"222\":7,\"233\":1,\"414\":1}}],[\"name+\",{\"1\":{\"635\":2}}],[\"namespaced\",{\"1\":{\"619\":3}}],[\"namespace\",{\"1\":{\"459\":17,\"460\":3,\"461\":3,\"462\":1,\"463\":1}}],[\"namespce\",{\"1\":{\"459\":1}}],[\"nameorresolver\",{\"1\":{\"410\":2}}],[\"nameresolver\",{\"1\":{\"410\":2}}],[\"name=toref\",{\"1\":{\"642\":1}}],[\"name=\",{\"1\":{\"337\":2,\"344\":2,\"379\":3,\"384\":1,\"385\":1,\"398\":1,\"406\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":7,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"523\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":2,\"539\":1,\"548\":1,\"551\":2,\"553\":1,\"564\":1,\"583\":2,\"621\":1,\"622\":1}}],[\"name=cookie\",{\"1\":{\"243\":1}}],[\"name>>\",{\"1\":{\"208\":1}}],[\"name\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"74\":1,\"75\":8,\"78\":7,\"79\":3,\"80\":4,\"81\":8,\"82\":4,\"83\":5,\"124\":2,\"131\":3,\"141\":3,\"147\":4,\"154\":7,\"162\":2,\"193\":1,\"199\":2,\"208\":5,\"225\":1,\"239\":2,\"297\":2,\"318\":3,\"319\":2,\"334\":3,\"337\":1,\"338\":1,\"343\":1,\"403\":5,\"404\":6,\"405\":5,\"406\":6,\"410\":3,\"417\":2,\"418\":6,\"419\":4,\"420\":9,\"421\":4,\"441\":8,\"454\":3,\"459\":9,\"466\":1,\"470\":2,\"476\":3,\"478\":2,\"482\":4,\"483\":3,\"489\":4,\"490\":1,\"491\":4,\"494\":6,\"496\":1,\"504\":2,\"506\":1,\"507\":3,\"509\":3,\"514\":1,\"517\":3,\"518\":3,\"520\":2,\"521\":2,\"522\":2,\"527\":4,\"528\":2,\"532\":5,\"534\":6,\"536\":10,\"537\":5,\"538\":5,\"539\":8,\"547\":1,\"551\":3,\"552\":2,\"553\":2,\"556\":1,\"557\":1,\"562\":1,\"565\":4,\"567\":1,\"568\":1,\"569\":3,\"580\":3,\"581\":1,\"584\":7,\"586\":3,\"591\":1,\"592\":1,\"604\":1,\"614\":1,\"615\":1,\"616\":7,\"618\":4,\"619\":5,\"626\":5,\"627\":6,\"628\":2,\"631\":2,\"633\":2,\"635\":2,\"636\":4,\"639\":1,\"640\":1,\"641\":1,\"642\":13,\"645\":1,\"646\":1,\"649\":2,\"651\":1,\"653\":1,\"654\":1,\"655\":1,\"658\":1}}],[\"nums\",{\"1\":{\"449\":2}}],[\"number=\",{\"1\":{\"511\":1,\"614\":1}}],[\"number>\",{\"1\":{\"335\":1}}],[\"number\",{\"1\":{\"158\":2,\"193\":1,\"208\":4,\"220\":1,\"222\":1,\"233\":1,\"334\":3,\"381\":1,\"412\":2,\"425\":5,\"429\":3,\"430\":1,\"431\":1,\"434\":15,\"437\":1,\"440\":5,\"441\":4,\"442\":2,\"444\":3,\"445\":3,\"446\":3,\"447\":3,\"448\":3,\"449\":3,\"450\":9,\"451\":9,\"459\":4,\"511\":3,\"514\":4,\"520\":2,\"565\":3,\"609\":4,\"618\":3,\"619\":1}}],[\"numbers\",{\"0\":{\"119\":1},\"1\":{\"109\":2,\"119\":1,\"622\":7}}],[\"num\",{\"1\":{\"89\":4,\"91\":1,\"119\":1,\"417\":2,\"449\":2}}],[\"nullable\",{\"1\":{\"144\":1}}],[\"nullablebutnotnull\",{\"1\":{\"117\":2,\"143\":1}}],[\"nulll\",{\"1\":{\"129\":1}}],[\"null\",{\"0\":{\"173\":1,\"221\":1},\"1\":{\"13\":1,\"74\":2,\"96\":1,\"99\":1,\"100\":2,\"101\":1,\"107\":1,\"117\":6,\"122\":1,\"124\":3,\"128\":1,\"129\":2,\"130\":2,\"131\":1,\"132\":4,\"144\":2,\"167\":1,\"172\":3,\"173\":1,\"174\":1,\"178\":1,\"185\":2,\"188\":1,\"215\":2,\"216\":1,\"221\":2,\"233\":1,\"238\":2,\"257\":1,\"286\":2,\"287\":1,\"290\":1,\"297\":2,\"310\":2,\"360\":3,\"361\":1,\"362\":3,\"363\":1,\"379\":1,\"437\":2,\"517\":1}}],[\"noemit\",{\"1\":{\"267\":2}}],[\"nowstate\",{\"1\":{\"354\":4}}],[\"now\",{\"1\":{\"243\":2,\"301\":2,\"360\":5,\"381\":1,\"385\":6,\"401\":1,\"402\":3,\"569\":1}}],[\"nowrap\",{\"1\":{\"45\":1}}],[\"nodename\",{\"1\":{\"517\":2}}],[\"nodevalue\",{\"1\":{\"517\":6}}],[\"nodetype\",{\"1\":{\"517\":3}}],[\"nodejs\",{\"1\":{\"465\":2,\"559\":1}}],[\"node\",{\"1\":{\"223\":1,\"242\":1,\"243\":3,\"267\":1,\"459\":1,\"461\":1,\"465\":3,\"467\":3,\"517\":12,\"559\":3}}],[\"node10\",{\"1\":{\"209\":1}}],[\"non\",{\"1\":{\"144\":1}}],[\"none\",{\"1\":{\"51\":2,\"56\":1,\"57\":1,\"65\":1,\"243\":1,\"478\":1,\"479\":1,\"480\":1,\"507\":1}}],[\"notifyallsubscribers\",{\"1\":{\"517\":3}}],[\"notifier\",{\"1\":{\"517\":13}}],[\"not\",{\"1\":{\"128\":1,\"138\":1,\"144\":1,\"145\":1,\"338\":1,\"345\":1,\"662\":1}}],[\"nosuchmethod\",{\"1\":{\"91\":3}}],[\"normal\",{\"1\":{\"47\":1}}],[\"no\",{\"1\":{\"32\":1,\"173\":1,\"378\":1}}],[\"l\",{\"1\":{\"411\":2,\"423\":3,\"424\":4}}],[\"lng\",{\"1\":{\"206\":1,\"207\":1}}],[\"ltr\",{\"1\":{\"192\":1}}],[\"lax\",{\"1\":{\"243\":1}}],[\"lastindexof\",{\"1\":{\"215\":2,\"216\":1}}],[\"lastname\",{\"1\":{\"164\":2,\"172\":1,\"504\":3,\"506\":2}}],[\"lazy=\",{\"1\":{\"511\":1}}],[\"lazyqueryhook\",{\"1\":{\"352\":1}}],[\"lazy\",{\"0\":{\"304\":1},\"1\":{\"195\":1,\"304\":2,\"377\":8,\"378\":3,\"379\":1,\"380\":1,\"399\":1,\"401\":1,\"511\":2}}],[\"label=\",{\"1\":{\"337\":2,\"344\":2}}],[\"label\",{\"1\":{\"193\":3,\"200\":1}}],[\"label实现跳转\",{\"1\":{\"137\":1}}],[\"late\",{\"1\":{\"74\":2,\"131\":2,\"132\":1,\"144\":5}}],[\"language\",{\"1\":{\"272\":2,\"275\":6,\"306\":5,\"307\":3,\"411\":2}}],[\"languagesdom\",{\"1\":{\"306\":4,\"307\":2}}],[\"languages\",{\"1\":{\"272\":4,\"273\":2,\"275\":2,\"306\":5,\"307\":2}}],[\"lang=\",{\"1\":{\"63\":1,\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"lang\",{\"1\":{\"63\":2,\"192\":1,\"570\":1}}],[\"like\",{\"1\":{\"517\":8}}],[\"license\",{\"1\":{\"466\":1}}],[\"lightoff\",{\"1\":{\"423\":3,\"424\":3}}],[\"lighton\",{\"1\":{\"423\":3,\"424\":3}}],[\"light\",{\"1\":{\"423\":5,\"424\":5}}],[\"lightness\",{\"1\":{\"43\":1}}],[\"lihua\",{\"1\":{\"406\":1}}],[\"li>\",{\"1\":{\"272\":1,\"273\":1,\"275\":1,\"283\":1,\"306\":3,\"307\":1,\"314\":1,\"323\":1,\"379\":1,\"390\":1,\"397\":1,\"398\":1,\"405\":3,\"406\":1,\"510\":1,\"521\":4,\"532\":4,\"534\":1,\"536\":1,\"537\":2,\"538\":2,\"539\":2,\"550\":1,\"551\":1,\"552\":2,\"618\":1}}],[\"libs\",{\"1\":{\"529\":1}}],[\"lib\",{\"1\":{\"209\":1,\"267\":3,\"466\":6}}],[\"li\",{\"1\":{\"198\":1,\"306\":1,\"323\":1,\"521\":1,\"534\":2}}],[\"listdata\",{\"1\":{\"550\":2,\"551\":2,\"552\":1}}],[\"listdata=\",{\"1\":{\"550\":3,\"551\":1}}],[\"listlinks\",{\"1\":{\"379\":4,\"380\":4,\"390\":2,\"394\":2}}],[\"listarticles\",{\"1\":{\"343\":1}}],[\"listcomponent\",{\"1\":{\"273\":1}}],[\"listen\",{\"1\":{\"243\":3,\"246\":1,\"249\":1,\"250\":1,\"252\":1,\"260\":1,\"265\":1,\"338\":1}}],[\"listener\",{\"1\":{\"229\":1}}],[\"list3\",{\"1\":{\"122\":2}}],[\"list2\",{\"1\":{\"122\":5}}],[\"list<int>\",{\"1\":{\"122\":5}}],[\"list<string>\",{\"1\":{\"68\":2,\"70\":1,\"75\":2,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"90\":1,\"91\":2,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"99\":2,\"100\":1,\"102\":1,\"103\":2,\"104\":1,\"106\":1,\"109\":3,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"119\":1,\"120\":4,\"121\":1,\"122\":3,\"123\":3,\"124\":2,\"125\":1,\"126\":1,\"128\":3,\"129\":1,\"130\":1,\"131\":1,\"132\":3,\"134\":1,\"135\":3,\"137\":2,\"138\":1,\"141\":1,\"144\":1,\"145\":1}}],[\"lists\",{\"0\":{\"122\":1}}],[\"list\",{\"1\":{\"114\":1,\"122\":12,\"123\":2,\"132\":1,\"135\":3,\"140\":3,\"193\":1,\"337\":3,\"338\":7,\"343\":5,\"344\":2,\"345\":11,\"348\":1,\"351\":1,\"352\":2,\"407\":8,\"408\":4,\"442\":1,\"521\":2}}],[\"lintonsave\",{\"1\":{\"561\":1}}],[\"linux\",{\"1\":{\"140\":3}}],[\"linkaction\",{\"1\":{\"379\":3,\"380\":1,\"399\":1}}],[\"link3\",{\"1\":{\"378\":1}}],[\"link2\",{\"1\":{\"378\":1}}],[\"link1\",{\"1\":{\"373\":1,\"378\":1}}],[\"link$\",{\"1\":{\"372\":1,\"374\":1,\"379\":2}}],[\"links\",{\"1\":{\"372\":6,\"373\":4,\"374\":3,\"377\":1,\"378\":5,\"379\":16,\"380\":3,\"381\":1,\"385\":1,\"390\":9,\"392\":1,\"393\":3,\"394\":3,\"397\":5,\"398\":1,\"399\":1}}],[\"link>\",{\"1\":{\"337\":3,\"344\":3,\"345\":1,\"351\":1,\"368\":1,\"576\":2,\"578\":2,\"584\":1,\"589\":2}}],[\"link\",{\"0\":{\"368\":1,\"589\":1},\"1\":{\"60\":1,\"100\":3,\"197\":1,\"337\":2,\"344\":1,\"368\":1,\"378\":18,\"379\":26,\"380\":2,\"385\":2,\"387\":1,\"390\":7,\"394\":3,\"397\":4,\"398\":4,\"399\":3,\"576\":3,\"577\":1,\"578\":2,\"584\":1,\"586\":1,\"589\":3,\"591\":1,\"592\":1}}],[\"linear\",{\"1\":{\"482\":3,\"483\":1}}],[\"line\",{\"1\":{\"59\":1,\"62\":1,\"65\":2}}],[\"leave\",{\"1\":{\"658\":4}}],[\"lead\",{\"1\":{\"345\":1}}],[\"lessmoduleregex\",{\"1\":{\"269\":3}}],[\"less$\",{\"1\":{\"269\":2}}],[\"lessregex\",{\"1\":{\"269\":2}}],[\"less\",{\"0\":{\"269\":1},\"1\":{\"268\":1,\"269\":12,\"365\":1,\"570\":3}}],[\"legend\",{\"1\":{\"193\":1}}],[\"len\",{\"1\":{\"187\":2}}],[\"length\",{\"1\":{\"32\":1,\"90\":1,\"122\":1,\"125\":2,\"128\":4,\"135\":2,\"156\":1,\"158\":1,\"187\":1,\"225\":2,\"226\":4,\"275\":2,\"314\":1,\"323\":1,\"324\":1,\"337\":1,\"343\":2,\"379\":5,\"390\":1,\"414\":2,\"428\":1,\"440\":3,\"451\":1,\"517\":2,\"618\":1,\"619\":1}}],[\"length|percentage|cover|contain\",{\"1\":{\"32\":1}}],[\"level\",{\"1\":{\"93\":3,\"108\":2}}],[\"left\",{\"1\":{\"32\":1,\"54\":1,\"56\":1,\"57\":1,\"522\":1,\"523\":1,\"645\":2}}],[\"letter\",{\"1\":{\"62\":1,\"65\":1}}],[\"let\",{\"0\":{\"160\":1},\"1\":{\"13\":1,\"147\":3,\"157\":1,\"158\":1,\"159\":1,\"160\":2,\"167\":1,\"169\":1,\"185\":1,\"186\":1,\"275\":1,\"337\":1,\"338\":2,\"358\":1,\"368\":1,\"379\":1,\"399\":1,\"403\":7,\"404\":2,\"408\":1,\"412\":2,\"417\":1,\"420\":1,\"421\":1,\"423\":4,\"424\":2,\"425\":1,\"426\":1,\"427\":1,\"428\":2,\"429\":2,\"430\":2,\"431\":1,\"437\":5,\"438\":1,\"439\":2,\"440\":2,\"441\":4,\"442\":4,\"445\":1,\"446\":1,\"449\":1,\"451\":1,\"454\":2,\"459\":2,\"496\":1,\"510\":4,\"514\":2,\"515\":2,\"517\":2,\"521\":1,\"556\":1,\"557\":1,\"626\":2,\"627\":7,\"628\":2,\"631\":2,\"633\":1,\"635\":2,\"636\":4,\"641\":2,\"642\":2,\"645\":1,\"649\":1,\"651\":1,\"653\":1,\"654\":1,\"655\":3}}],[\"location\",{\"0\":{\"389\":1}}],[\"localstorage\",{\"0\":{\"556\":1},\"1\":{\"297\":3,\"496\":1,\"555\":1,\"556\":5,\"557\":1,\"602\":1}}],[\"localized\",{\"1\":{\"269\":1}}],[\"localclassname\",{\"1\":{\"269\":1}}],[\"localandglobal\",{\"1\":{\"269\":1}}],[\"locales\",{\"1\":{\"206\":3,\"207\":6,\"209\":2}}],[\"local\",{\"1\":{\"193\":1,\"269\":5}}],[\"localhost\",{\"1\":{\"13\":1,\"15\":1,\"24\":1,\"376\":2,\"485\":1,\"486\":1,\"487\":1,\"573\":1}}],[\"load\",{\"1\":{\"397\":2}}],[\"loaderfunction\",{\"1\":{\"378\":1,\"379\":2,\"390\":1,\"394\":1}}],[\"loader\",{\"0\":{\"397\":1},\"1\":{\"269\":5,\"377\":1,\"378\":8,\"379\":9,\"380\":6,\"384\":1,\"387\":1,\"390\":3,\"394\":1,\"395\":3,\"397\":5,\"399\":1,\"401\":3,\"570\":1}}],[\"loading\",{\"1\":{\"195\":1,\"387\":5,\"390\":2}}],[\"lower\",{\"1\":{\"307\":2,\"460\":11,\"461\":2,\"462\":1,\"463\":2}}],[\"lowercase\",{\"1\":{\"65\":1}}],[\"low\",{\"1\":{\"193\":2}}],[\"log<door>\",{\"1\":{\"428\":1}}],[\"log<t\",{\"1\":{\"428\":1}}],[\"logmiddleware\",{\"1\":{\"356\":2}}],[\"logenhancer\",{\"1\":{\"355\":2}}],[\"log\",{\"1\":{\"30\":2,\"147\":5,\"151\":1,\"154\":2,\"156\":1,\"157\":2,\"158\":1,\"159\":1,\"161\":1,\"162\":1,\"169\":3,\"170\":3,\"172\":2,\"173\":1,\"189\":2,\"206\":2,\"207\":3,\"208\":4,\"217\":1,\"220\":2,\"224\":2,\"235\":1,\"243\":2,\"245\":1,\"246\":3,\"249\":2,\"250\":2,\"251\":5,\"252\":5,\"253\":1,\"255\":1,\"261\":1,\"262\":2,\"274\":7,\"275\":4,\"287\":1,\"288\":2,\"290\":1,\"300\":1,\"301\":2,\"312\":2,\"315\":1,\"316\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"334\":1,\"342\":2,\"343\":1,\"354\":1,\"355\":2,\"356\":2,\"360\":1,\"361\":2,\"378\":1,\"379\":3,\"380\":2,\"384\":1,\"385\":1,\"390\":2,\"394\":1,\"395\":1,\"399\":1,\"402\":1,\"403\":1,\"406\":1,\"410\":2,\"411\":1,\"412\":3,\"413\":12,\"415\":2,\"417\":2,\"418\":3,\"419\":1,\"420\":1,\"421\":1,\"423\":5,\"424\":3,\"426\":1,\"427\":1,\"428\":3,\"429\":4,\"431\":1,\"437\":1,\"440\":4,\"445\":1,\"446\":2,\"447\":2,\"448\":2,\"449\":2,\"450\":2,\"451\":2,\"459\":1,\"460\":4,\"461\":1,\"462\":1,\"463\":2,\"464\":1,\"465\":1,\"470\":1,\"487\":2,\"496\":1,\"498\":1,\"499\":1,\"500\":1,\"514\":1,\"520\":2,\"521\":3,\"522\":1,\"543\":2,\"556\":2,\"557\":2,\"562\":1,\"569\":3,\"573\":2,\"586\":1,\"603\":1,\"614\":1,\"621\":4,\"622\":4,\"623\":4,\"631\":3,\"633\":2,\"635\":1,\"636\":6,\"637\":1,\"639\":8,\"640\":6,\"655\":4}}],[\"==13\",{\"1\":{\"522\":1}}],[\"==修饰符可以连着写\",{\"1\":{\"521\":1}}],[\"==\",{\"1\":{\"108\":3,\"120\":1,\"124\":1,\"134\":2,\"138\":1,\"247\":3,\"323\":1,\"324\":1,\"353\":1,\"380\":1,\"405\":1,\"410\":1,\"450\":1,\"451\":2,\"517\":1,\"521\":1,\"536\":2,\"537\":1,\"602\":1,\"614\":1,\"619\":1}}],[\"===vue\",{\"1\":{\"493\":1}}],[\"===\",{\"1\":{\"27\":1,\"213\":1,\"283\":2,\"313\":1,\"323\":3,\"324\":2,\"337\":3,\"338\":1,\"351\":1,\"353\":3,\"358\":1,\"378\":1,\"379\":2,\"387\":2,\"390\":2,\"405\":3,\"407\":1,\"408\":1,\"413\":12,\"461\":2,\"517\":4,\"536\":1,\"537\":2,\"618\":1,\"619\":1}}],[\"=>\",{\"1\":{\"26\":2,\"27\":2,\"30\":2,\"68\":2,\"70\":1,\"83\":1,\"86\":1,\"87\":2,\"96\":2,\"97\":1,\"99\":2,\"103\":1,\"104\":1,\"111\":1,\"130\":1,\"151\":1,\"159\":1,\"210\":1,\"243\":9,\"244\":2,\"245\":3,\"246\":2,\"249\":2,\"250\":2,\"251\":1,\"252\":4,\"253\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"260\":2,\"261\":2,\"262\":3,\"265\":1,\"272\":1,\"273\":1,\"274\":6,\"275\":4,\"279\":4,\"280\":2,\"283\":10,\"286\":2,\"287\":5,\"288\":2,\"290\":2,\"297\":2,\"301\":8,\"304\":2,\"306\":2,\"307\":1,\"312\":3,\"313\":1,\"314\":2,\"316\":1,\"318\":2,\"319\":2,\"321\":1,\"322\":1,\"323\":16,\"324\":6,\"329\":2,\"331\":1,\"333\":7,\"334\":11,\"335\":6,\"337\":19,\"338\":12,\"339\":1,\"340\":3,\"342\":2,\"343\":13,\"344\":20,\"345\":9,\"347\":4,\"348\":1,\"349\":2,\"350\":1,\"351\":8,\"352\":5,\"353\":9,\"354\":1,\"355\":3,\"356\":3,\"358\":16,\"359\":8,\"360\":4,\"361\":5,\"362\":6,\"363\":2,\"365\":1,\"368\":5,\"371\":2,\"372\":7,\"374\":1,\"377\":4,\"378\":10,\"379\":21,\"380\":4,\"381\":5,\"384\":1,\"385\":2,\"390\":6,\"392\":1,\"393\":1,\"394\":1,\"395\":1,\"397\":5,\"398\":1,\"399\":3,\"401\":1,\"403\":10,\"404\":4,\"405\":12,\"406\":7,\"407\":8,\"408\":9,\"410\":2,\"445\":2,\"446\":2,\"449\":1,\"456\":2,\"459\":2,\"460\":8,\"463\":4,\"487\":2,\"498\":1,\"499\":1,\"500\":1,\"517\":11,\"525\":1,\"527\":1,\"536\":2,\"537\":3,\"543\":1,\"560\":1,\"573\":2,\"576\":1,\"581\":1,\"602\":1,\"603\":1,\"604\":1,\"613\":1,\"614\":2,\"616\":3,\"619\":2,\"635\":1,\"636\":10,\"637\":1,\"640\":6,\"641\":2,\"646\":1,\"651\":1}}],[\"=\",{\"1\":{\"13\":2,\"15\":2,\"16\":1,\"17\":1,\"18\":1,\"24\":2,\"26\":1,\"38\":2,\"64\":1,\"68\":2,\"70\":1,\"72\":3,\"73\":1,\"74\":1,\"75\":4,\"79\":1,\"80\":3,\"81\":3,\"82\":2,\"83\":3,\"85\":4,\"86\":5,\"87\":3,\"89\":4,\"90\":2,\"91\":2,\"92\":2,\"94\":5,\"95\":2,\"99\":1,\"100\":5,\"103\":2,\"104\":2,\"105\":2,\"106\":3,\"108\":7,\"109\":5,\"111\":4,\"112\":3,\"113\":1,\"115\":1,\"116\":1,\"117\":2,\"119\":6,\"120\":6,\"121\":1,\"122\":11,\"123\":8,\"124\":4,\"125\":1,\"126\":1,\"128\":3,\"129\":5,\"131\":3,\"132\":3,\"134\":1,\"135\":5,\"137\":2,\"138\":1,\"141\":1,\"143\":4,\"144\":2,\"145\":1,\"147\":9,\"154\":2,\"156\":2,\"157\":4,\"158\":1,\"159\":3,\"162\":1,\"164\":3,\"167\":1,\"169\":3,\"172\":1,\"174\":2,\"185\":2,\"186\":1,\"187\":3,\"189\":3,\"206\":2,\"207\":3,\"208\":6,\"209\":2,\"210\":2,\"239\":2,\"243\":13,\"244\":2,\"246\":3,\"247\":5,\"249\":4,\"250\":3,\"251\":1,\"252\":6,\"256\":2,\"257\":2,\"260\":8,\"261\":1,\"262\":2,\"265\":3,\"269\":2,\"272\":2,\"273\":1,\"274\":3,\"275\":5,\"278\":1,\"279\":5,\"280\":2,\"283\":12,\"286\":3,\"287\":3,\"290\":5,\"293\":1,\"294\":1,\"297\":4,\"301\":9,\"304\":3,\"305\":3,\"306\":7,\"307\":4,\"310\":1,\"312\":3,\"313\":3,\"314\":2,\"318\":1,\"319\":2,\"320\":1,\"321\":7,\"322\":2,\"323\":10,\"324\":5,\"329\":2,\"331\":1,\"333\":3,\"334\":10,\"335\":4,\"337\":35,\"338\":24,\"340\":7,\"342\":2,\"343\":12,\"344\":23,\"345\":7,\"346\":1,\"348\":3,\"349\":1,\"351\":7,\"352\":3,\"353\":20,\"354\":3,\"355\":7,\"356\":5,\"358\":15,\"359\":7,\"360\":6,\"361\":3,\"362\":6,\"363\":3,\"365\":1,\"366\":1,\"368\":2,\"371\":3,\"372\":6,\"374\":3,\"376\":1,\"377\":2,\"378\":10,\"379\":30,\"380\":3,\"381\":5,\"384\":2,\"385\":4,\"390\":5,\"392\":2,\"393\":2,\"394\":1,\"395\":2,\"397\":2,\"399\":6,\"401\":2,\"403\":7,\"404\":3,\"405\":8,\"406\":5,\"407\":5,\"408\":10,\"410\":3,\"411\":1,\"412\":2,\"413\":2,\"414\":2,\"417\":3,\"418\":1,\"419\":1,\"420\":4,\"421\":2,\"423\":5,\"424\":2,\"425\":3,\"426\":1,\"427\":1,\"428\":2,\"429\":3,\"430\":5,\"431\":5,\"437\":5,\"438\":2,\"439\":4,\"440\":4,\"441\":5,\"442\":3,\"445\":1,\"446\":1,\"448\":1,\"449\":1,\"451\":3,\"454\":3,\"459\":7,\"460\":13,\"461\":5,\"462\":1,\"463\":5,\"464\":2,\"465\":1,\"470\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":3,\"483\":1,\"485\":1,\"486\":1,\"489\":3,\"491\":5,\"494\":2,\"496\":1,\"504\":1,\"506\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":3,\"515\":3,\"517\":27,\"518\":1,\"520\":1,\"521\":2,\"522\":2,\"525\":1,\"529\":2,\"532\":1,\"534\":2,\"536\":5,\"537\":6,\"538\":2,\"539\":2,\"548\":4,\"553\":2,\"556\":1,\"557\":1,\"560\":1,\"561\":2,\"565\":1,\"567\":1,\"568\":1,\"569\":3,\"576\":1,\"581\":3,\"582\":1,\"583\":1,\"603\":1,\"609\":1,\"613\":4,\"614\":4,\"615\":1,\"618\":2,\"619\":2,\"621\":2,\"626\":2,\"627\":6,\"628\":3,\"631\":3,\"633\":1,\"636\":4,\"637\":1,\"641\":4,\"642\":2,\"645\":3,\"646\":1,\"649\":3,\"651\":2,\"653\":1,\"654\":2,\"655\":3}}],[\"cmd\",{\"1\":{\"559\":1}}],[\"c4\",{\"1\":{\"510\":1}}],[\"c3\",{\"1\":{\"510\":1}}],[\"c2\",{\"1\":{\"510\":1}}],[\"c1\",{\"1\":{\"510\":1}}],[\"cd\",{\"1\":{\"469\":1}}],[\"cdn\",{\"1\":{\"292\":1,\"529\":1}}],[\"city\",{\"1\":{\"441\":2}}],[\"cite\",{\"1\":{\"204\":3}}],[\"ccc\",{\"1\":{\"314\":1}}],[\"cty\",{\"1\":{\"532\":1,\"534\":2,\"536\":2,\"537\":1,\"538\":3,\"539\":1}}],[\"ctx\",{\"1\":{\"243\":29,\"244\":4,\"245\":2,\"246\":3,\"247\":9,\"249\":5,\"250\":5,\"251\":2,\"252\":10,\"253\":2,\"255\":6,\"256\":3,\"257\":3,\"258\":3,\"260\":4,\"261\":3,\"262\":7,\"265\":2,\"283\":4,\"338\":14}}],[\"ctrl+y\",{\"1\":{\"522\":1}}],[\"ctrl\",{\"1\":{\"192\":1,\"522\":2}}],[\"creator\",{\"1\":{\"332\":1,\"335\":1,\"355\":4}}],[\"created\",{\"1\":{\"639\":2,\"640\":1}}],[\"createdocumentfragment\",{\"1\":{\"517\":1}}],[\"createnumberarr\",{\"1\":{\"429\":2}}],[\"createtuple<number\",{\"1\":{\"427\":1}}],[\"createtuple<a\",{\"1\":{\"427\":1}}],[\"createlink\",{\"1\":{\"379\":7}}],[\"creatememoryrouter\",{\"1\":{\"366\":1}}],[\"createbrowserrouter\",{\"1\":{\"366\":4,\"372\":1,\"376\":1,\"377\":1}}],[\"createarr<number>\",{\"1\":{\"429\":1}}],[\"createarr<t>\",{\"1\":{\"429\":1}}],[\"createarrayfunc\",{\"1\":{\"429\":2}}],[\"createarray<number>\",{\"1\":{\"426\":1}}],[\"createarray<t>\",{\"1\":{\"426\":1}}],[\"createarticles\",{\"1\":{\"344\":1,\"345\":1,\"347\":1}}],[\"createapi\",{\"1\":{\"344\":6,\"345\":2,\"346\":1}}],[\"createasyncthunk<array<article>\",{\"1\":{\"338\":1}}],[\"createasyncthunk<void\",{\"1\":{\"338\":2}}],[\"createasyncthunk\",{\"1\":{\"338\":1,\"340\":1}}],[\"createempty\",{\"1\":{\"429\":3}}],[\"createentityadapter<article>\",{\"1\":{\"343\":2}}],[\"createentityadapter\",{\"1\":{\"343\":2}}],[\"createelement\",{\"1\":{\"294\":3,\"560\":2}}],[\"createstaticrouter\",{\"1\":{\"366\":1}}],[\"createstore\",{\"1\":{\"353\":4,\"355\":2,\"356\":1}}],[\"createselector\",{\"1\":{\"342\":2,\"348\":1}}],[\"createslice<articlestate\",{\"1\":{\"337\":1,\"338\":1}}],[\"createslice<counterstate\",{\"1\":{\"334\":1}}],[\"createslice\",{\"1\":{\"334\":3,\"337\":1,\"343\":1}}],[\"createhashrouter\",{\"1\":{\"337\":1,\"366\":4}}],[\"createref\",{\"1\":{\"314\":1,\"361\":2}}],[\"createroot\",{\"1\":{\"300\":2,\"337\":1,\"366\":1,\"369\":1}}],[\"createcontext<todosreducer>\",{\"1\":{\"283\":1}}],[\"createcontext<string>\",{\"1\":{\"278\":1}}],[\"create\",{\"1\":{\"237\":1,\"239\":1,\"240\":1,\"266\":3,\"268\":1,\"269\":1,\"337\":10,\"338\":4,\"340\":6,\"344\":5,\"345\":4,\"347\":3,\"379\":5,\"380\":2,\"390\":1,\"429\":3,\"559\":2}}],[\"crossorigin\",{\"1\":{\"197\":1}}],[\"ceil\",{\"1\":{\"217\":1}}],[\"center\",{\"1\":{\"32\":1,\"45\":3,\"59\":1,\"645\":1}}],[\"customref\",{\"0\":{\"651\":1},\"1\":{\"651\":2}}],[\"customtypeoptions\",{\"1\":{\"209\":1}}],[\"curried\",{\"1\":{\"275\":2}}],[\"curry\",{\"1\":{\"275\":4}}],[\"current++\",{\"1\":{\"360\":1}}],[\"currentdata\",{\"1\":{\"344\":3,\"345\":2}}],[\"current\",{\"1\":{\"109\":2,\"286\":4,\"287\":2,\"290\":2,\"314\":3,\"360\":7,\"361\":2,\"362\":4,\"363\":1,\"517\":9}}],[\"cn\",{\"1\":{\"206\":2,\"207\":5,\"209\":1}}],[\"choices\",{\"1\":{\"510\":6}}],[\"choice\",{\"1\":{\"510\":9}}],[\"channel\",{\"1\":{\"543\":1}}],[\"channel=pubsub\",{\"1\":{\"543\":1}}],[\"changearr\",{\"1\":{\"628\":1}}],[\"changeage\",{\"1\":{\"565\":1,\"627\":2}}],[\"changeperson\",{\"1\":{\"627\":2,\"628\":1}}],[\"changed\",{\"1\":{\"354\":1}}],[\"changestyle\",{\"1\":{\"482\":2}}],[\"changes\",{\"1\":{\"343\":1}}],[\"changehandler=\",{\"1\":{\"323\":1}}],[\"changehandler\",{\"1\":{\"323\":5,\"324\":1}}],[\"change\",{\"1\":{\"283\":2,\"324\":3,\"343\":1,\"345\":1,\"362\":1,\"511\":2,\"621\":2,\"622\":1}}],[\"char\",{\"1\":{\"532\":2}}],[\"charset=\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":8,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"charset\",{\"1\":{\"193\":1,\"199\":1}}],[\"checked\",{\"1\":{\"193\":1,\"512\":2}}],[\"checkbox\",{\"1\":{\"193\":1,\"510\":4,\"512\":1}}],[\"childnodes\",{\"1\":{\"517\":1}}],[\"children\",{\"1\":{\"281\":2,\"320\":4,\"321\":5,\"337\":1,\"366\":1,\"368\":1,\"370\":1,\"372\":3,\"373\":2,\"374\":1,\"376\":2,\"377\":3,\"378\":1,\"391\":1,\"399\":3,\"577\":3,\"584\":2,\"586\":1}}],[\"child\",{\"1\":{\"63\":4,\"517\":5}}],[\"c<b>\",{\"1\":{\"115\":1}}],[\"c<t\",{\"1\":{\"115\":1}}],[\"clean\",{\"1\":{\"559\":1}}],[\"clearinterval\",{\"1\":{\"212\":1,\"360\":1}}],[\"cleartimeout\",{\"1\":{\"212\":1,\"352\":1}}],[\"clear\",{\"1\":{\"57\":2,\"556\":1,\"557\":1}}],[\"cloak>n\",{\"1\":{\"479\":1}}],[\"cloak>\",{\"1\":{\"478\":1}}],[\"cloak\",{\"0\":{\"478\":1},\"1\":{\"478\":4,\"479\":1,\"480\":1}}],[\"close\",{\"1\":{\"290\":2}}],[\"closures\",{\"1\":{\"108\":2}}],[\"cli配置项\",{\"1\":{\"561\":1}}],[\"cli\",{\"0\":{\"559\":1,\"660\":1},\"1\":{\"460\":1,\"559\":2,\"613\":1,\"660\":1}}],[\"click=\",{\"1\":{\"479\":1,\"480\":1,\"482\":1,\"496\":1,\"507\":1,\"520\":2,\"521\":3,\"537\":3,\"538\":1,\"539\":6,\"548\":1,\"562\":1,\"569\":2,\"614\":4,\"617\":2,\"621\":1,\"622\":3,\"626\":1,\"633\":1,\"642\":6,\"645\":2,\"653\":1,\"654\":1,\"658\":1}}],[\"clickhandler\",{\"1\":{\"274\":2,\"275\":2}}],[\"click\",{\"1\":{\"206\":2,\"208\":5,\"274\":7,\"280\":1,\"313\":1,\"322\":1,\"360\":1,\"361\":2,\"397\":3,\"403\":7,\"404\":2,\"501\":1,\"521\":5,\"523\":1,\"534\":1,\"641\":2,\"658\":1}}],[\"clip\",{\"1\":{\"32\":1}}],[\"clusters\",{\"0\":{\"125\":1}}],[\"classesobj\",{\"1\":{\"482\":2}}],[\"classes\",{\"1\":{\"482\":2}}],[\"class=\",{\"1\":{\"482\":6,\"483\":2,\"494\":1,\"496\":1,\"521\":5,\"550\":2,\"551\":1,\"552\":2,\"569\":1,\"576\":2,\"583\":3,\"589\":2,\"645\":2,\"646\":1}}],[\"classname\",{\"1\":{\"305\":1,\"368\":3}}],[\"classname=\",{\"1\":{\"268\":1,\"305\":1,\"365\":5,\"366\":2,\"368\":6,\"371\":2,\"372\":9,\"379\":5,\"381\":2,\"385\":1,\"390\":3,\"392\":2}}],[\"class\",{\"0\":{\"153\":1,\"154\":1,\"481\":1,\"482\":1},\"1\":{\"64\":1,\"70\":1,\"74\":1,\"75\":2,\"78\":1,\"79\":2,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":2,\"90\":2,\"91\":3,\"92\":1,\"94\":6,\"95\":1,\"108\":1,\"111\":1,\"113\":1,\"115\":3,\"131\":1,\"132\":1,\"154\":2,\"192\":1,\"273\":1,\"290\":1,\"305\":2,\"310\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"321\":2,\"361\":3,\"368\":1,\"378\":1,\"406\":2,\"417\":2,\"418\":2,\"419\":1,\"420\":2,\"421\":2,\"423\":4,\"424\":1,\"425\":2,\"428\":1,\"429\":1,\"430\":1,\"431\":1,\"451\":1,\"459\":10,\"460\":6,\"462\":1,\"463\":2,\"483\":1,\"517\":3,\"576\":1,\"658\":2}}],[\"class~=\",{\"1\":{\"64\":1}}],[\"copyfields\",{\"1\":{\"428\":1}}],[\"copyfields<t\",{\"1\":{\"428\":1}}],[\"core\",{\"1\":{\"460\":1}}],[\"cornflowerblue\",{\"1\":{\"305\":1}}],[\"corrine\",{\"1\":{\"196\":1}}],[\"cookies\",{\"1\":{\"243\":2}}],[\"cookie\",{\"1\":{\"243\":15}}],[\"counteroptions\",{\"1\":{\"619\":8}}],[\"counter\",{\"1\":{\"334\":6,\"614\":1,\"615\":1,\"619\":5}}],[\"counterreducer\",{\"1\":{\"334\":4}}],[\"counterincbystepaction\",{\"1\":{\"334\":2}}],[\"counterstate\",{\"1\":{\"334\":8,\"335\":1}}],[\"counterslice\",{\"1\":{\"334\":7,\"335\":1}}],[\"count=\",{\"1\":{\"301\":3,\"351\":1}}],[\"counttip\",{\"1\":{\"210\":1}}],[\"count\",{\"1\":{\"208\":4,\"210\":3,\"301\":12,\"329\":3,\"331\":1,\"333\":1,\"334\":1,\"335\":6}}],[\"codes\",{\"1\":{\"343\":1,\"345\":6,\"346\":1,\"350\":1,\"359\":2}}],[\"code\",{\"1\":{\"140\":1,\"204\":1,\"430\":2,\"431\":2,\"451\":2,\"459\":6}}],[\"commit\",{\"1\":{\"614\":4,\"618\":1,\"619\":3}}],[\"command\",{\"1\":{\"469\":1}}],[\"commonjs\",{\"1\":{\"209\":2,\"267\":1,\"460\":3,\"461\":1,\"466\":1}}],[\"common\",{\"1\":{\"207\":10,\"209\":3}}],[\"combinereducers\",{\"1\":{\"353\":5}}],[\"compile\",{\"1\":{\"517\":3}}],[\"compileroptions\",{\"1\":{\"209\":1,\"267\":1,\"437\":1,\"460\":1,\"466\":1,\"657\":1}}],[\"compatible\",{\"1\":{\"517\":1}}],[\"comparing\",{\"1\":{\"108\":3}}],[\"computed\",{\"1\":{\"414\":1,\"492\":2,\"503\":2,\"504\":1,\"506\":1,\"529\":1,\"536\":1,\"614\":1,\"615\":1,\"616\":1,\"618\":2,\"619\":2,\"621\":1,\"626\":1,\"637\":2}}],[\"composition\",{\"0\":{\"625\":1,\"647\":1},\"1\":{\"626\":1}}],[\"composewithdevtools\",{\"1\":{\"353\":2,\"355\":1,\"356\":1}}],[\"compose\",{\"1\":{\"247\":3,\"355\":2,\"356\":1}}],[\"composedpath\",{\"1\":{\"231\":1}}],[\"componentupdated\",{\"1\":{\"547\":3,\"548\":1}}],[\"component>\",{\"1\":{\"502\":1}}],[\"componentwillunmount\",{\"1\":{\"316\":1}}],[\"componentdidupdate\",{\"1\":{\"314\":3,\"315\":1}}],[\"componentdidmount\",{\"1\":{\"312\":1,\"314\":1}}],[\"components\",{\"1\":{\"280\":1,\"304\":2,\"323\":2,\"377\":4,\"378\":6,\"379\":3,\"380\":5,\"399\":6,\"401\":3,\"489\":2,\"491\":3,\"494\":2,\"562\":3,\"576\":5,\"577\":5,\"583\":2,\"584\":5,\"633\":2,\"646\":2,\"653\":2,\"658\":1}}],[\"component\",{\"1\":{\"273\":1,\"309\":1,\"310\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"321\":2,\"361\":3,\"377\":4,\"378\":3,\"379\":1,\"380\":1,\"401\":1,\"406\":3,\"489\":2,\"576\":2,\"577\":5,\"580\":2,\"582\":1,\"584\":5,\"586\":2,\"604\":1,\"657\":2}}],[\"com\",{\"1\":{\"124\":2,\"140\":2,\"190\":1,\"258\":1,\"521\":1,\"559\":3}}],[\"colspan\",{\"1\":{\"203\":1}}],[\"col\",{\"1\":{\"203\":1}}],[\"colgroup\",{\"1\":{\"203\":1}}],[\"column\",{\"1\":{\"45\":2}}],[\"color=\",{\"1\":{\"321\":1}}],[\"color\",{\"1\":{\"32\":2,\"33\":2,\"61\":2,\"62\":1,\"63\":3,\"64\":1,\"65\":1,\"193\":1,\"305\":1,\"321\":9,\"414\":2,\"415\":3,\"477\":2,\"482\":7,\"494\":2,\"521\":4,\"539\":2,\"570\":1,\"645\":2}}],[\"cover\",{\"1\":{\"32\":1}}],[\"confirm\",{\"1\":{\"605\":2}}],[\"configurable\",{\"1\":{\"514\":1}}],[\"configurestore<\",{\"1\":{\"334\":1}}],[\"configurestore\",{\"1\":{\"334\":2,\"337\":1,\"338\":1,\"343\":1,\"344\":2}}],[\"config\",{\"0\":{\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1},\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"26\":3,\"29\":2,\"206\":2,\"207\":2,\"208\":1,\"268\":1,\"269\":2,\"339\":1,\"485\":1,\"486\":1,\"522\":2,\"553\":1,\"559\":3,\"560\":1,\"561\":1,\"576\":1,\"613\":1,\"657\":6,\"658\":1}}],[\"concat\",{\"1\":{\"215\":2,\"216\":1,\"275\":1,\"344\":1,\"405\":1,\"450\":1,\"451\":1,\"460\":8,\"462\":1,\"463\":3,\"539\":1}}],[\"condition\",{\"1\":{\"121\":2}}],[\"context与\",{\"1\":{\"614\":1}}],[\"context=\",{\"1\":{\"399\":1,\"402\":1}}],[\"context\",{\"0\":{\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1},\"1\":{\"208\":1,\"242\":1,\"276\":1,\"277\":1,\"279\":5,\"280\":2,\"281\":1,\"282\":1,\"283\":4,\"399\":3,\"402\":1,\"614\":11,\"618\":2,\"619\":11,\"633\":5,\"639\":1,\"640\":1,\"641\":1,\"654\":1}}],[\"content=\",{\"1\":{\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"514\":1,\"515\":1,\"517\":2,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"contenteditable\",{\"1\":{\"192\":1}}],[\"content\",{\"1\":{\"32\":2,\"45\":2,\"62\":1,\"199\":2,\"283\":7,\"305\":3,\"323\":7,\"324\":6,\"337\":18,\"338\":10,\"340\":6,\"343\":2,\"344\":10,\"345\":1,\"350\":2,\"351\":1,\"353\":6,\"358\":2,\"359\":1,\"365\":1,\"366\":1,\"368\":4,\"378\":5,\"379\":14,\"384\":1,\"385\":1,\"390\":1,\"397\":1,\"398\":2}}],[\"continue\",{\"1\":{\"137\":3,\"213\":1,\"301\":1}}],[\"container\",{\"1\":{\"550\":1,\"552\":1}}],[\"contain\",{\"1\":{\"32\":1}}],[\"consumer\",{\"1\":{\"279\":1}}],[\"consumer>\",{\"1\":{\"279\":2}}],[\"console\",{\"0\":{\"235\":1},\"1\":{\"30\":2,\"147\":5,\"151\":1,\"154\":2,\"156\":1,\"157\":2,\"158\":1,\"159\":1,\"161\":1,\"162\":1,\"169\":3,\"170\":3,\"172\":2,\"173\":1,\"189\":2,\"206\":1,\"207\":1,\"220\":2,\"224\":2,\"235\":6,\"243\":2,\"245\":1,\"246\":3,\"249\":2,\"250\":2,\"251\":5,\"252\":5,\"253\":1,\"255\":1,\"261\":1,\"262\":2,\"274\":7,\"275\":4,\"287\":1,\"288\":2,\"290\":1,\"300\":1,\"301\":2,\"312\":2,\"315\":1,\"316\":1,\"318\":1,\"319\":1,\"321\":1,\"322\":1,\"334\":1,\"342\":2,\"343\":1,\"354\":1,\"355\":2,\"356\":2,\"360\":1,\"361\":2,\"378\":1,\"379\":3,\"380\":1,\"384\":1,\"385\":1,\"390\":2,\"394\":1,\"395\":1,\"399\":1,\"402\":1,\"403\":1,\"406\":1,\"410\":2,\"411\":1,\"412\":3,\"413\":12,\"415\":2,\"417\":2,\"418\":3,\"419\":1,\"420\":1,\"421\":1,\"423\":5,\"424\":3,\"426\":1,\"427\":1,\"428\":2,\"429\":3,\"431\":1,\"437\":1,\"440\":4,\"445\":1,\"446\":2,\"447\":2,\"448\":2,\"449\":2,\"450\":2,\"451\":2,\"459\":1,\"460\":4,\"461\":1,\"462\":1,\"463\":2,\"464\":1,\"465\":1,\"470\":1,\"487\":2,\"496\":1,\"498\":1,\"499\":1,\"500\":1,\"514\":1,\"520\":2,\"521\":3,\"522\":1,\"543\":2,\"556\":2,\"557\":2,\"562\":1,\"569\":3,\"573\":2,\"586\":1,\"603\":1,\"614\":1,\"621\":4,\"622\":4,\"623\":4,\"631\":3,\"633\":2,\"635\":1,\"636\":6,\"637\":1,\"639\":8,\"640\":6,\"655\":4}}],[\"constant\",{\"1\":{\"414\":1}}],[\"constructor\",{\"0\":{\"309\":1},\"1\":{\"153\":3,\"154\":2,\"220\":1,\"239\":2,\"310\":1,\"321\":1,\"361\":1,\"406\":1,\"417\":2,\"418\":2,\"419\":1,\"420\":2,\"421\":1,\"425\":1,\"459\":2,\"517\":3}}],[\"const\",{\"0\":{\"145\":1,\"160\":1},\"1\":{\"15\":2,\"16\":1,\"17\":1,\"18\":1,\"72\":3,\"73\":1,\"82\":3,\"120\":2,\"122\":6,\"145\":7,\"147\":2,\"158\":1,\"160\":1,\"162\":1,\"169\":2,\"170\":3,\"172\":1,\"187\":2,\"206\":2,\"207\":3,\"208\":6,\"209\":3,\"210\":2,\"224\":1,\"243\":4,\"246\":1,\"247\":1,\"249\":2,\"250\":1,\"251\":1,\"252\":3,\"260\":4,\"265\":1,\"269\":2,\"272\":1,\"273\":1,\"274\":3,\"275\":3,\"278\":1,\"279\":5,\"280\":2,\"283\":11,\"286\":3,\"287\":3,\"290\":2,\"293\":1,\"294\":1,\"297\":4,\"301\":9,\"304\":3,\"305\":3,\"306\":7,\"307\":4,\"312\":2,\"313\":2,\"318\":1,\"319\":2,\"320\":1,\"321\":4,\"323\":9,\"324\":5,\"329\":2,\"331\":1,\"333\":3,\"334\":6,\"335\":4,\"337\":25,\"338\":12,\"340\":7,\"342\":2,\"343\":11,\"344\":23,\"345\":7,\"346\":1,\"348\":3,\"349\":1,\"351\":6,\"352\":3,\"353\":8,\"354\":2,\"355\":6,\"356\":5,\"358\":12,\"359\":6,\"360\":4,\"361\":1,\"362\":5,\"363\":3,\"365\":1,\"366\":1,\"371\":3,\"372\":5,\"374\":2,\"376\":1,\"377\":2,\"378\":8,\"379\":24,\"380\":2,\"381\":5,\"384\":2,\"385\":3,\"390\":5,\"392\":2,\"393\":2,\"394\":1,\"395\":2,\"397\":2,\"399\":4,\"404\":1,\"405\":7,\"406\":1,\"407\":5,\"408\":8,\"415\":2,\"429\":1,\"454\":1,\"459\":10,\"460\":1,\"463\":1,\"470\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":2,\"483\":1,\"489\":3,\"490\":2,\"491\":5,\"494\":2,\"504\":1,\"506\":1,\"507\":1,\"509\":1,\"517\":13,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"532\":1,\"534\":2,\"536\":3,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"565\":1,\"567\":1,\"568\":1,\"569\":2,\"581\":3,\"582\":1,\"583\":1,\"609\":1,\"613\":3,\"614\":3,\"615\":1,\"618\":1,\"621\":1,\"628\":1,\"631\":1,\"637\":1,\"642\":1,\"646\":1,\"654\":1}}],[\"car\",{\"1\":{\"423\":11,\"424\":7}}],[\"card>\",{\"1\":{\"337\":2,\"344\":1,\"345\":2}}],[\"category\",{\"1\":{\"550\":1,\"551\":1,\"552\":2}}],[\"category>\",{\"1\":{\"550\":3,\"551\":1,\"552\":2}}],[\"cat\",{\"1\":{\"418\":3,\"421\":2,\"452\":4,\"454\":4}}],[\"catcherror\",{\"1\":{\"68\":1}}],[\"catch\",{\"0\":{\"178\":1},\"1\":{\"30\":1,\"96\":5,\"152\":3,\"178\":3,\"244\":2,\"338\":1,\"340\":1,\"344\":1,\"351\":1,\"358\":2}}],[\"can\",{\"1\":{\"144\":1}}],[\"cancelable\",{\"1\":{\"231\":2}}],[\"canceltoken\",{\"1\":{\"13\":2}}],[\"cancel\",{\"1\":{\"13\":5,\"337\":1,\"344\":1}}],[\"casesensitive=\",{\"1\":{\"368\":1}}],[\"casesensitive\",{\"1\":{\"368\":1,\"375\":1,\"377\":2,\"378\":2}}],[\"case\",{\"1\":{\"137\":13,\"213\":1,\"324\":3,\"338\":7,\"353\":3,\"460\":4,\"490\":1,\"547\":1}}],[\"cache1\",{\"1\":{\"111\":3}}],[\"cache<int>\",{\"1\":{\"111\":1}}],[\"cache<string>\",{\"1\":{\"111\":1}}],[\"cache<t>\",{\"1\":{\"111\":1}}],[\"cache\",{\"1\":{\"83\":2,\"111\":4,\"344\":1,\"451\":2,\"559\":1}}],[\"callback\",{\"1\":{\"502\":2,\"517\":6,\"610\":1}}],[\"called\",{\"1\":{\"345\":1}}],[\"calling\",{\"1\":{\"312\":1,\"379\":1,\"380\":1}}],[\"callhello\",{\"1\":{\"103\":2}}],[\"call\",{\"1\":{\"70\":2,\"103\":2,\"104\":1,\"106\":3,\"238\":3,\"239\":1,\"290\":2}}],[\"capture=\",{\"1\":{\"521\":1}}],[\"capture\",{\"1\":{\"229\":1,\"274\":1,\"521\":1}}],[\"caption\",{\"1\":{\"203\":1}}],[\"capitalize\",{\"1\":{\"65\":1}}],[\"caps\",{\"1\":{\"47\":1}}],[\"c\",{\"1\":{\"13\":2,\"93\":1,\"94\":7,\"100\":3,\"115\":1,\"137\":2,\"140\":2,\"143\":1,\"187\":1,\"243\":2,\"428\":1,\"482\":2,\"510\":2,\"636\":1,\"637\":1,\"642\":8,\"649\":1}}],[\"css伪类\",{\"1\":{\"63\":1}}],[\"css\",{\"0\":{\"2\":1,\"39\":1,\"48\":1,\"60\":1,\"62\":1},\"1\":{\"62\":3,\"63\":1,\"192\":1,\"268\":6,\"269\":3,\"368\":1,\"478\":1,\"522\":1,\"570\":3}}],[\"x=xxx\",{\"1\":{\"627\":1}}],[\"x=ref\",{\"1\":{\"627\":1}}],[\"xss\",{\"1\":{\"477\":1}}],[\"xml\",{\"1\":{\"293\":1}}],[\"xxx\",{\"1\":{\"268\":1,\"417\":1,\"460\":1,\"502\":1,\"520\":2,\"522\":1,\"554\":6,\"562\":1,\"568\":3,\"569\":1,\"578\":1,\"657\":1}}],[\"xpos\",{\"1\":{\"32\":1}}],[\"x\",{\"0\":{\"11\":1},\"1\":{\"32\":2,\"55\":1,\"75\":4,\"79\":2,\"82\":2,\"85\":4,\"86\":7,\"87\":7,\"89\":6,\"90\":5,\"91\":1,\"92\":3,\"95\":2,\"103\":3,\"104\":2,\"108\":7,\"109\":8,\"135\":5,\"137\":4,\"138\":3,\"144\":1,\"147\":4,\"156\":5,\"157\":11,\"167\":3,\"169\":3,\"185\":1,\"189\":4,\"193\":2,\"249\":3,\"334\":4,\"335\":1,\"425\":5,\"428\":3,\"438\":2,\"439\":5,\"440\":13,\"459\":2,\"515\":6,\"517\":1,\"609\":2,\"627\":1,\"637\":1,\"641\":3,\"655\":3,\"657\":2,\"658\":4}}],[\"2px\",{\"1\":{\"482\":1}}],[\"24\",{\"1\":{\"406\":1}}],[\"240\",{\"1\":{\"43\":1}}],[\"2mb\",{\"1\":{\"252\":1}}],[\"27\",{\"1\":{\"243\":1}}],[\"23\",{\"1\":{\"209\":1,\"318\":1,\"319\":1,\"403\":1,\"404\":2,\"405\":1,\"406\":2,\"437\":1,\"441\":4}}],[\"20px\",{\"1\":{\"482\":1,\"521\":1}}],[\"20\",{\"1\":{\"412\":1,\"428\":1,\"539\":1,\"565\":2}}],[\"20world\",{\"1\":{\"197\":1}}],[\"2000\",{\"1\":{\"614\":1,\"619\":1}}],[\"200px\",{\"1\":{\"314\":1,\"521\":2}}],[\"200\",{\"1\":{\"29\":1,\"256\":1,\"257\":1,\"379\":1,\"430\":1,\"431\":1,\"451\":1,\"515\":1,\"550\":1}}],[\"2c\",{\"1\":{\"197\":1}}],[\"25\",{\"1\":{\"412\":1,\"551\":4}}],[\"254px\",{\"1\":{\"196\":1}}],[\"255\",{\"1\":{\"40\":1,\"42\":1}}],[\"2x\",{\"1\":{\"196\":7}}],[\"26个英文字母\",{\"1\":{\"190\":1}}],[\"22\",{\"1\":{\"131\":1,\"539\":1}}],[\"21\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":3,\"489\":1,\"491\":1,\"494\":1,\"514\":1,\"532\":1,\"534\":1,\"539\":1,\"553\":1,\"556\":1,\"557\":1,\"564\":1,\"568\":1,\"618\":1,\"619\":1,\"626\":1,\"627\":2,\"631\":2,\"635\":2,\"636\":2,\"642\":2,\"649\":1}}],[\"2\",{\"0\":{\"11\":1},\"1\":{\"72\":6,\"73\":2,\"85\":2,\"86\":2,\"87\":2,\"89\":2,\"91\":1,\"104\":1,\"106\":2,\"108\":2,\"112\":1,\"117\":1,\"119\":2,\"122\":7,\"123\":3,\"125\":1,\"130\":5,\"135\":1,\"144\":1,\"147\":6,\"157\":2,\"158\":1,\"167\":2,\"243\":1,\"266\":1,\"275\":4,\"337\":1,\"378\":1,\"413\":4,\"415\":1,\"425\":1,\"427\":1,\"428\":1,\"429\":1,\"431\":1,\"442\":3,\"444\":1,\"445\":1,\"446\":2,\"447\":2,\"449\":1,\"450\":2,\"521\":1,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"547\":1,\"553\":1,\"605\":3,\"606\":1,\"614\":2,\"619\":1,\"628\":1,\"657\":1,\"658\":2}}],[\"draft\",{\"1\":{\"334\":1}}],[\"dfn\",{\"1\":{\"204\":1}}],[\"dd\",{\"1\":{\"198\":1}}],[\"dt\",{\"1\":{\"198\":1}}],[\"dns\",{\"1\":{\"197\":2}}],[\"dl\",{\"1\":{\"140\":1,\"198\":1}}],[\"dynamic\",{\"1\":{\"91\":2,\"97\":1,\"117\":1,\"143\":1}}],[\"dy\",{\"1\":{\"85\":2,\"86\":2}}],[\"dx\",{\"1\":{\"85\":2,\"86\":2}}],[\"down\",{\"1\":{\"522\":1}}],[\"download=\",{\"1\":{\"197\":1}}],[\"download\",{\"1\":{\"140\":1,\"197\":1}}],[\"door\",{\"1\":{\"423\":2,\"428\":4}}],[\"domreadycallback\",{\"1\":{\"459\":1}}],[\"domain\",{\"1\":{\"243\":2}}],[\"dom\",{\"0\":{\"361\":1,\"362\":1},\"1\":{\"227\":1,\"267\":5,\"272\":2,\"274\":6,\"286\":3,\"292\":1,\"293\":3,\"294\":6,\"305\":3,\"306\":7,\"307\":2,\"314\":2,\"320\":2,\"321\":2,\"361\":2,\"362\":1,\"363\":1,\"364\":1,\"403\":1,\"404\":2,\"474\":1,\"502\":1,\"507\":2,\"517\":2,\"530\":1,\"534\":8,\"535\":17,\"547\":1,\"562\":1,\"645\":1}}],[\"dog\",{\"1\":{\"154\":2,\"239\":4}}],[\"do\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"double\",{\"0\":{\"119\":1},\"1\":{\"85\":3,\"86\":3,\"87\":4,\"91\":1,\"119\":5}}],[\"document\",{\"1\":{\"272\":2,\"273\":1,\"274\":5,\"293\":1,\"294\":1,\"300\":1,\"305\":1,\"306\":2,\"307\":1,\"316\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"322\":1,\"337\":1,\"360\":2,\"366\":1,\"369\":1,\"403\":7,\"404\":2,\"405\":2,\"406\":2,\"517\":2,\"603\":1}}],[\"doctype\",{\"1\":{\"272\":1,\"293\":1,\"294\":1,\"305\":1,\"306\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"489\":1,\"491\":1,\"494\":1,\"504\":1,\"507\":1,\"509\":1,\"510\":4,\"514\":1,\"515\":1,\"517\":1,\"518\":1,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"553\":1,\"621\":1,\"622\":1}}],[\"doc\",{\"1\":{\"6\":1}}],[\"docs\",{\"0\":{\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"673\":1,\"674\":1},\"1\":{\"3\":1}}],[\"d\",{\"1\":{\"68\":2,\"93\":1,\"100\":3,\"113\":2,\"137\":4,\"138\":3,\"140\":1,\"143\":1,\"187\":1,\"209\":1,\"252\":1,\"259\":1,\"264\":1,\"268\":1,\"273\":2,\"333\":1,\"428\":2,\"457\":1,\"459\":3,\"460\":4,\"465\":1,\"466\":6,\"510\":1,\"642\":2,\"649\":1}}],[\"duration\",{\"1\":{\"68\":2}}],[\"div1\",{\"1\":{\"521\":1}}],[\"div\",{\"1\":{\"274\":4}}],[\"div>\",{\"1\":{\"272\":1,\"274\":4,\"286\":1,\"287\":1,\"293\":1,\"294\":1,\"304\":1,\"305\":1,\"306\":1,\"310\":1,\"312\":1,\"313\":1,\"314\":1,\"316\":1,\"318\":2,\"319\":1,\"320\":2,\"321\":2,\"333\":1,\"335\":1,\"360\":1,\"361\":4,\"362\":2,\"363\":2,\"365\":3,\"366\":1,\"371\":1,\"372\":2,\"379\":2,\"381\":1,\"390\":2,\"392\":1,\"397\":2,\"398\":1,\"403\":7,\"404\":3,\"405\":2,\"406\":2,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"480\":1,\"482\":4,\"483\":2,\"489\":3,\"491\":5,\"494\":4,\"496\":1,\"504\":1,\"507\":4,\"509\":1,\"510\":4,\"517\":1,\"518\":1,\"520\":1,\"521\":5,\"522\":1,\"529\":1,\"534\":1,\"536\":1,\"537\":1,\"538\":1,\"539\":1,\"548\":1,\"550\":2,\"551\":1,\"552\":2,\"553\":1,\"562\":1,\"564\":1,\"569\":1,\"576\":2,\"586\":1,\"614\":1,\"618\":3,\"621\":1,\"622\":1,\"633\":1,\"641\":1,\"645\":3,\"646\":1,\"654\":1,\"658\":6}}],[\"dialog\",{\"1\":{\"201\":1,\"645\":4}}],[\"directive\",{\"1\":{\"547\":2,\"548\":1,\"657\":2}}],[\"directive=\",{\"1\":{\"547\":2}}],[\"directives\",{\"1\":{\"546\":2,\"548\":1}}],[\"direction\",{\"1\":{\"45\":1,\"65\":1}}],[\"dir\",{\"1\":{\"192\":1,\"204\":1}}],[\"different\",{\"1\":{\"108\":1}}],[\"dispatched\",{\"1\":{\"355\":1,\"356\":1}}],[\"dispatchevent\",{\"1\":{\"229\":1}}],[\"dispatching\",{\"1\":{\"355\":1,\"356\":1}}],[\"dispatch<articleaction>\",{\"1\":{\"358\":1}}],[\"dispatch<a>\",{\"1\":{\"334\":1}}],[\"dispatch<action>\",{\"1\":{\"283\":1}}],[\"dispatch<counterincbystepaction>\",{\"1\":{\"334\":1}}],[\"dispatch\",{\"1\":{\"283\":13,\"323\":3,\"324\":5,\"326\":2,\"331\":2,\"334\":7,\"335\":8,\"337\":8,\"338\":11,\"340\":7,\"343\":1,\"344\":1,\"348\":3,\"351\":4,\"353\":1,\"354\":2,\"355\":4,\"356\":5,\"358\":16,\"359\":12,\"614\":6,\"619\":1}}],[\"display\",{\"0\":{\"51\":1,\"58\":1},\"1\":{\"44\":2,\"51\":2,\"58\":1,\"321\":1,\"478\":1,\"479\":1,\"480\":1,\"507\":1}}],[\"disabled>请选择<\",{\"1\":{\"510\":1}}],[\"disabled\",{\"1\":{\"193\":3}}],[\"disturl\",{\"1\":{\"559\":1}}],[\"dist\",{\"1\":{\"460\":2}}],[\"distenctto\",{\"1\":{\"89\":3}}],[\"distencetozero\",{\"1\":{\"87\":1}}],[\"distanceto\",{\"1\":{\"85\":2,\"86\":1}}],[\"deep\",{\"1\":{\"618\":1,\"619\":1,\"622\":2,\"636\":2}}],[\"deactivated\",{\"0\":{\"599\":1},\"1\":{\"530\":1}}],[\"devserver\",{\"1\":{\"485\":1,\"486\":1}}],[\"dev\",{\"1\":{\"457\":2,\"460\":1,\"465\":1,\"467\":1}}],[\"devtools\",{\"1\":{\"353\":3,\"355\":1}}],[\"development\",{\"1\":{\"272\":2,\"292\":2,\"293\":2,\"294\":2,\"305\":2,\"306\":2}}],[\"description=\",{\"1\":{\"337\":1,\"344\":1,\"345\":1,\"351\":1}}],[\"desc\",{\"1\":{\"334\":4,\"335\":1}}],[\"desktop\",{\"1\":{\"196\":2}}],[\"detail\",{\"1\":{\"372\":1,\"576\":2,\"577\":4,\"578\":2,\"584\":6,\"586\":4,\"591\":1,\"592\":1}}],[\"details\",{\"1\":{\"201\":1}}],[\"detected\",{\"1\":{\"345\":1}}],[\"detectjson\",{\"1\":{\"252\":1}}],[\"decrement\",{\"1\":{\"614\":2,\"617\":1,\"619\":1}}],[\"declaration\",{\"1\":{\"466\":1}}],[\"declare\",{\"1\":{\"209\":1,\"456\":4,\"459\":28,\"460\":5,\"461\":2,\"462\":1,\"463\":2,\"464\":1}}],[\"decodeuricomponent\",{\"1\":{\"223\":1}}],[\"decoration\",{\"1\":{\"65\":1}}],[\"debug\",{\"1\":{\"206\":1,\"207\":1,\"235\":1}}],[\"debian\",{\"1\":{\"140\":1}}],[\"defineasynccomponent\",{\"1\":{\"646\":2}}],[\"defineproperty\",{\"1\":{\"514\":1,\"515\":1,\"516\":1,\"517\":2,\"627\":1,\"630\":1,\"631\":1,\"632\":1}}],[\"define\",{\"1\":{\"461\":4}}],[\"defineconfig\",{\"1\":{\"339\":1}}],[\"defer\",{\"0\":{\"390\":1},\"1\":{\"197\":1,\"227\":3,\"390\":4,\"394\":3,\"401\":1}}],[\"def结尾的元素\",{\"1\":{\"64\":1}}],[\"def开头的元素\",{\"1\":{\"64\":1}}],[\"def\",{\"1\":{\"64\":7}}],[\"default>\",{\"1\":{\"646\":1}}],[\"default=\",{\"1\":{\"552\":1}}],[\"defaultprops\",{\"1\":{\"322\":2}}],[\"defaultns\",{\"1\":{\"207\":1,\"209\":4}}],[\"default\",{\"1\":{\"24\":2,\"27\":1,\"137\":2,\"164\":1,\"200\":1,\"206\":2,\"207\":4,\"209\":1,\"297\":1,\"304\":1,\"322\":2,\"323\":1,\"334\":2,\"337\":2,\"339\":1,\"343\":1,\"344\":2,\"353\":2,\"365\":1,\"372\":1,\"377\":1,\"407\":1,\"416\":1,\"460\":3,\"464\":2,\"494\":3,\"496\":1,\"551\":1,\"552\":4,\"562\":1,\"565\":2,\"568\":1,\"569\":1,\"576\":1,\"577\":1,\"583\":2,\"584\":1,\"586\":1,\"613\":1,\"614\":1,\"615\":2,\"618\":1,\"619\":5,\"626\":1,\"633\":2,\"639\":1,\"640\":1,\"641\":2,\"642\":2,\"645\":1,\"646\":2,\"651\":1,\"653\":1,\"654\":1,\"658\":1}}],[\"demo>\",{\"1\":{\"633\":1}}],[\"demo=\",{\"1\":{\"633\":1}}],[\"demo1\",{\"1\":{\"521\":3}}],[\"demo2\",{\"1\":{\"502\":1}}],[\"demofunction\",{\"1\":{\"130\":3}}],[\"demoset\",{\"1\":{\"123\":7}}],[\"demo<string>\",{\"1\":{\"113\":1}}],[\"demo<t>\",{\"1\":{\"113\":1}}],[\"demo\",{\"1\":{\"30\":1,\"32\":1,\"68\":2,\"87\":2,\"113\":1,\"128\":11,\"132\":2,\"145\":1,\"173\":1,\"272\":2,\"275\":1,\"322\":3,\"361\":2,\"363\":2,\"440\":2,\"494\":2,\"501\":1,\"502\":7,\"510\":8,\"521\":2,\"559\":1,\"569\":1,\"570\":1,\"626\":3,\"627\":2,\"628\":1,\"633\":8,\"639\":1,\"640\":1,\"641\":1,\"653\":3,\"654\":1}}],[\"delta\",{\"1\":{\"381\":1}}],[\"del\",{\"1\":{\"204\":1}}],[\"delayed\",{\"1\":{\"68\":1}}],[\"delaytest\",{\"1\":{\"13\":1}}],[\"deleteproperty\",{\"1\":{\"631\":2}}],[\"deleteall\",{\"1\":{\"556\":1,\"557\":1}}],[\"deletearticlefn\",{\"1\":{\"358\":2}}],[\"deletearticle\",{\"1\":{\"344\":1,\"345\":1,\"347\":1,\"358\":1,\"359\":1}}],[\"deletedata\",{\"1\":{\"556\":1,\"557\":1}}],[\"deletelastlink\",{\"1\":{\"379\":4}}],[\"delete<void>\",{\"1\":{\"358\":1,\"359\":1}}],[\"deletefunc\",{\"1\":{\"344\":2,\"345\":2,\"351\":2}}],[\"deletehandler=\",{\"1\":{\"323\":1}}],[\"deletehandler\",{\"1\":{\"323\":5,\"324\":1}}],[\"delete\",{\"0\":{\"19\":1},\"1\":{\"224\":1,\"226\":1,\"283\":3,\"323\":1,\"324\":3,\"344\":2,\"345\":5,\"347\":4,\"351\":1,\"353\":2,\"358\":1,\"379\":5,\"380\":2,\"385\":1,\"390\":2,\"397\":1,\"405\":1,\"522\":1}}],[\"dayjs\",{\"1\":{\"529\":5}}],[\"day\",{\"1\":{\"464\":1}}],[\"danger\",{\"1\":{\"344\":1,\"345\":1,\"351\":1}}],[\"datetime\",{\"1\":{\"193\":1}}],[\"date\",{\"1\":{\"193\":1,\"243\":5,\"321\":2,\"360\":2,\"381\":1,\"385\":5,\"401\":1,\"402\":2,\"569\":1}}],[\"dataset\",{\"1\":{\"547\":1}}],[\"datasource=\",{\"1\":{\"337\":1,\"343\":1,\"344\":1,\"345\":2,\"352\":1}}],[\"datainstance\",{\"1\":{\"517\":7}}],[\"data必须写成函数\",{\"1\":{\"489\":1}}],[\"dataapis\",{\"1\":{\"367\":1}}],[\"data=\",{\"1\":{\"273\":1}}],[\"datatime\",{\"1\":{\"204\":3}}],[\"datalist\",{\"1\":{\"193\":3}}],[\"data\",{\"0\":{\"18\":1,\"22\":1,\"23\":1,\"369\":1,\"518\":1},\"1\":{\"15\":2,\"16\":1,\"18\":3,\"22\":1,\"23\":1,\"29\":1,\"30\":1,\"111\":3,\"113\":3,\"115\":1,\"116\":3,\"192\":1,\"193\":2,\"197\":1,\"204\":1,\"273\":1,\"338\":1,\"344\":2,\"348\":1,\"351\":4,\"352\":2,\"358\":1,\"359\":1,\"366\":5,\"369\":1,\"379\":17,\"397\":3,\"398\":2,\"401\":3,\"430\":5,\"431\":2,\"459\":4,\"472\":1,\"476\":1,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"482\":1,\"483\":1,\"487\":1,\"489\":2,\"491\":3,\"492\":2,\"494\":2,\"504\":1,\"506\":1,\"507\":1,\"508\":3,\"509\":1,\"510\":4,\"516\":10,\"517\":5,\"518\":3,\"520\":1,\"521\":1,\"522\":1,\"529\":1,\"532\":1,\"534\":1,\"536\":2,\"537\":1,\"538\":1,\"539\":4,\"543\":2,\"548\":1,\"550\":1,\"551\":1,\"552\":5,\"553\":2,\"554\":1,\"562\":1,\"565\":2,\"568\":2,\"569\":1,\"573\":1,\"614\":15,\"618\":6,\"619\":17,\"621\":1,\"626\":1}}],[\"dartlang\",{\"1\":{\"140\":1}}],[\"dart\",{\"0\":{\"3\":1,\"140\":1,\"141\":1},\"1\":{\"66\":1,\"68\":1,\"72\":2,\"73\":1,\"75\":2,\"76\":1,\"85\":1,\"86\":1,\"87\":1,\"89\":1,\"96\":3,\"97\":1,\"102\":1,\"109\":1,\"114\":1,\"117\":6,\"118\":1,\"119\":1,\"120\":3,\"123\":1,\"124\":1,\"126\":1,\"127\":1,\"134\":1,\"136\":1,\"137\":1,\"138\":3,\"140\":4,\"141\":1}}]],\"version\":2}}")).map(([e,t])=>[e,_t(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=xt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ee(t,r,o,"max")]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ee(t,r,o,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
